const e=new Map,A=[],t=async A=>{const t=e.get(A);if(!t)return"backend not found.";if(t.initialized)return t.backend;if(t.aborted)return t.error;{const e=!!t.initPromise;try{return e||(t.initPromise=t.backend.init(A)),await t.initPromise,t.initialized=!0,t.backend}catch(A){return e||(t.error=`${A}`,t.aborted=!0),t.error}finally{delete t.initPromise}}};let r="warning";const n={wasm:{},webgl:{},webgpu:{},versions:{common:"1.21.0"},set logLevel(e){if(void 0!==e){if("string"!=typeof e||-1===["verbose","info","warning","error","fatal"].indexOf(e))throw new Error(`Unsupported logging level: ${e}`);r=e}},get logLevel(){return r}};Object.defineProperty(n,"logLevel",{enumerable:!0});const a=n,s=(e,A)=>{if(void 0===e)throw new Error("Image buffer must be defined");if(void 0===A.height||void 0===A.width)throw new Error("Image height and width must be defined");if("NHWC"===A.tensorLayout)throw new Error("NHWC Tensor layout is not supported yet");const{height:t,width:r}=A,n=A.norm??{mean:255,bias:0};let a,s;a="number"==typeof n.mean?[n.mean,n.mean,n.mean,n.mean]:[n.mean[0],n.mean[1],n.mean[2],n.mean[3]??255],s="number"==typeof n.bias?[n.bias,n.bias,n.bias,n.bias]:[n.bias[0],n.bias[1],n.bias[2],n.bias[3]??0];const i=void 0!==A.format?A.format:"RGBA",o=void 0!==A.tensorFormat&&void 0!==A.tensorFormat?A.tensorFormat:"RGB",l=t*r,g="RGBA"===o?new Float32Array(4*l):new Float32Array(3*l);let u=4,d=0,f=1,p=2,h=3,m=0,C=l,b=2*l,I=-1;"RGB"===i&&(u=3,d=0,f=1,p=2,h=-1),"RGBA"===o?I=3*l:"RBG"===o?(m=0,b=l,C=2*l):"BGR"===o&&(b=0,C=l,m=2*l);for(let A=0;A<l;A++,d+=u,p+=u,f+=u,h+=u)g[m++]=(e[d]+s[0])/a[0],g[C++]=(e[f]+s[1])/a[1],g[b++]=(e[p]+s[2])/a[2],-1!==I&&-1!==h&&(g[I++]=(e[h]+s[3])/a[3]);return new c("float32",g,"RGBA"===o?[1,4,t,r]:[1,3,t,r])},i=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),o=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]);let l=!1;let c=class{constructor(e,A,t){let r,n;if((()=>{if(!l){l=!0;const e="undefined"!=typeof BigInt64Array&&BigInt64Array.from,A="undefined"!=typeof BigUint64Array&&BigUint64Array.from,t=globalThis.Float16Array,r=void 0!==t&&t.from;e&&(i.set("int64",BigInt64Array),o.set(BigInt64Array,"int64")),A&&(i.set("uint64",BigUint64Array),o.set(BigUint64Array,"uint64")),r?(i.set("float16",t),o.set(t,"float16")):i.set("float16",Uint16Array)}})(),"object"==typeof e&&"location"in e)switch(this.dataLocation=e.location,r=e.type,n=e.dims,e.location){case"cpu-pinned":{const A=i.get(r);if(!A)throw new TypeError(`unsupported type "${r}" to create tensor from pinned buffer`);if(!(e.data instanceof A))throw new TypeError(`buffer should be of type ${A.name}`);this.cpuData=e.data;break}case"texture":if("float32"!==r)throw new TypeError(`unsupported type "${r}" to create tensor from texture`);this.gpuTextureData=e.texture,this.downloader=e.download,this.disposer=e.dispose;break;case"gpu-buffer":if("float32"!==r&&"float16"!==r&&"int32"!==r&&"int64"!==r&&"uint32"!==r&&"uint8"!==r&&"bool"!==r&&"uint4"!==r&&"int4"!==r)throw new TypeError(`unsupported type "${r}" to create tensor from gpu buffer`);this.gpuBufferData=e.gpuBuffer,this.downloader=e.download,this.disposer=e.dispose;break;case"ml-tensor":if("float32"!==r&&"float16"!==r&&"int32"!==r&&"int64"!==r&&"uint32"!==r&&"uint64"!==r&&"int8"!==r&&"uint8"!==r&&"bool"!==r&&"uint4"!==r&&"int4"!==r)throw new TypeError(`unsupported type "${r}" to create tensor from MLTensor`);this.mlTensorData=e.mlTensor,this.downloader=e.download,this.disposer=e.dispose;break;default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let a,s;if("string"==typeof e)if(r=e,s=t,"string"===e){if(!Array.isArray(A))throw new TypeError("A string tensor's data must be a string array.");a=A}else{const t=i.get(e);if(void 0===t)throw new TypeError(`Unsupported tensor type: ${e}.`);if(Array.isArray(A)){if("float16"===e&&t===Uint16Array||"uint4"===e||"int4"===e)throw new TypeError(`Creating a ${e} tensor from number array is not supported. Please use ${t.name} as data.`);a="uint64"===e||"int64"===e?t.from(A,BigInt):t.from(A)}else if(A instanceof t)a=A;else if(A instanceof Uint8ClampedArray){if("uint8"!==e)throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");a=Uint8Array.from(A)}else{if(!("float16"===e&&A instanceof Uint16Array&&t!==Uint16Array))throw new TypeError(`A ${r} tensor's data must be type of ${t}`);a=new globalThis.Float16Array(A.buffer,A.byteOffset,A.length)}}else if(s=A,Array.isArray(e)){if(0===e.length)throw new TypeError("Tensor type cannot be inferred from an empty array.");const A=typeof e[0];if("string"===A)r="string",a=e;else{if("boolean"!==A)throw new TypeError(`Invalid element type of data array: ${A}.`);r="bool",a=Uint8Array.from(e)}}else if(e instanceof Uint8ClampedArray)r="uint8",a=Uint8Array.from(e);else{const A=o.get(e.constructor);if(void 0===A)throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);r=A,a=e}if(void 0===s)s=[a.length];else if(!Array.isArray(s))throw new TypeError("A tensor's dims must be a number array");n=s,this.cpuData=a,this.dataLocation="cpu"}const a=(e=>{let A=1;for(let t=0;t<e.length;t++){const r=e[t];if("number"!=typeof r||!Number.isSafeInteger(r))throw new TypeError(`dims[${t}] must be an integer, got: ${r}`);if(r<0)throw new RangeError(`dims[${t}] must be a non-negative integer, got: ${r}`);A*=r}return A})(n);if(this.cpuData&&a!==this.cpuData.length&&("uint4"!==r&&"int4"!==r||Math.ceil(a/2)!==this.cpuData.length))throw new Error(`Tensor's size(${a}) does not match data length(${this.cpuData.length}).`);this.type=r,this.dims=n,this.size=a}static async fromImage(e,A){return(async(e,A)=>{const t="undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement,r="undefined"!=typeof ImageData&&e instanceof ImageData,n="undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap,a="string"==typeof e;let i,o=A??{};const l=()=>{if("undefined"!=typeof document)return document.createElement("canvas");if("undefined"!=typeof OffscreenCanvas)return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},c=e=>"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||e instanceof OffscreenCanvas?e.getContext("2d"):null;if(t){const t=l();t.width=e.width,t.height=e.height;const r=c(t);if(null==r)throw new Error("Can not access image data");{let t=e.height,n=e.width;if(void 0!==A&&void 0!==A.resizedHeight&&void 0!==A.resizedWidth&&(t=A.resizedHeight,n=A.resizedWidth),void 0!==A){if(o=A,void 0!==A.tensorFormat)throw new Error("Image input config format must be RGBA for HTMLImageElement");o.tensorFormat="RGBA",o.height=t,o.width=n}else o.tensorFormat="RGBA",o.height=t,o.width=n;r.drawImage(e,0,0),i=r.getImageData(0,0,n,t).data}}else{if(!r){if(n){if(void 0===A)throw new Error("Please provide image config with format for Imagebitmap");const t=l();t.width=e.width,t.height=e.height;const r=c(t);if(null!=r){const A=e.height,t=e.width;return r.drawImage(e,0,0,t,A),i=r.getImageData(0,0,t,A).data,o.height=A,o.width=t,s(i,o)}throw new Error("Can not access image data")}if(a)return new Promise(((A,t)=>{const r=l(),n=c(r);if(!e||!n)return t();const a=new Image;a.crossOrigin="Anonymous",a.src=e,a.onload=()=>{r.width=a.width,r.height=a.height,n.drawImage(a,0,0,r.width,r.height);const e=n.getImageData(0,0,r.width,r.height);o.height=r.height,o.width=r.width,A(s(e.data,o))}}));throw new Error("Input data provided is not supported - aborted tensor creation")}{let t,r;if(void 0!==A&&void 0!==A.resizedWidth&&void 0!==A.resizedHeight?(t=A.resizedHeight,r=A.resizedWidth):(t=e.height,r=e.width),void 0!==A&&(o=A),o.format="RGBA",o.height=t,o.width=r,void 0!==A){const A=l();A.width=r,A.height=t;const n=c(A);if(null==n)throw new Error("Can not access image data");n.putImageData(e,0,0),i=n.getImageData(0,0,r,t).data}else i=e.data}}if(void 0!==i)return s(i,o);throw new Error("Input data provided is not supported - aborted tensor creation")})(e,A)}static fromTexture(e,A){return((e,A)=>{const{width:t,height:r,download:n,dispose:a}=A;return new c({location:"texture",type:"float32",texture:e,dims:[1,r,t,4],download:n,dispose:a})})(e,A)}static fromGpuBuffer(e,A){return((e,A)=>{const{dataType:t,dims:r,download:n,dispose:a}=A;return new c({location:"gpu-buffer",type:t??"float32",gpuBuffer:e,dims:r,download:n,dispose:a})})(e,A)}static fromMLTensor(e,A){return((e,A)=>{const{dataType:t,dims:r,download:n,dispose:a}=A;return new c({location:"ml-tensor",type:t??"float32",mlTensor:e,dims:r,download:n,dispose:a})})(e,A)}static fromPinnedBuffer(e,A,t){return((e,A,t)=>new c({location:"cpu-pinned",type:e,data:A,dims:t??[A.length]}))(e,A,t)}toDataURL(e){return((e,A)=>{const t="undefined"!=typeof document?document.createElement("canvas"):new OffscreenCanvas(1,1);t.width=e.dims[3],t.height=e.dims[2];const r=t.getContext("2d");if(null!=r){let n,a;void 0!==A?.tensorLayout&&"NHWC"===A.tensorLayout?(n=e.dims[2],a=e.dims[3]):(n=e.dims[3],a=e.dims[2]);const s=void 0!==A?.format?A.format:"RGB",i=A?.norm;let o,l;void 0===i||void 0===i.mean?o=[255,255,255,255]:"number"==typeof i.mean?o=[i.mean,i.mean,i.mean,i.mean]:(o=[i.mean[0],i.mean[1],i.mean[2],0],void 0!==i.mean[3]&&(o[3]=i.mean[3])),void 0===i||void 0===i.bias?l=[0,0,0,0]:"number"==typeof i.bias?l=[i.bias,i.bias,i.bias,i.bias]:(l=[i.bias[0],i.bias[1],i.bias[2],0],void 0!==i.bias[3]&&(l[3]=i.bias[3]));const c=a*n;let g=0,u=c,d=2*c,f=-1;"RGBA"===s?(g=0,u=c,d=2*c,f=3*c):"RGB"===s?(g=0,u=c,d=2*c):"RBG"===s&&(g=0,d=c,u=2*c);for(let A=0;A<a;A++)for(let t=0;t<n;t++){const n=(e.data[g++]-l[0])*o[0],a=(e.data[u++]-l[1])*o[1],s=(e.data[d++]-l[2])*o[2],i=-1===f?255:(e.data[f++]-l[3])*o[3];r.fillStyle="rgba("+n+","+a+","+s+","+i+")",r.fillRect(t,A,1,1)}if("toDataURL"in t)return t.toDataURL();throw new Error("toDataURL is not supported")}throw new Error("Can not access image data")})(this,e)}toImageData(e){return((e,A)=>{const t="undefined"!=typeof document?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");let r;if(null==t)throw new Error("Can not access image data");{let n,a,s;void 0!==A?.tensorLayout&&"NHWC"===A.tensorLayout?(n=e.dims[2],a=e.dims[1],s=e.dims[3]):(n=e.dims[3],a=e.dims[2],s=e.dims[1]);const i=void 0!==A&&void 0!==A.format?A.format:"RGB",o=A?.norm;let l,c;void 0===o||void 0===o.mean?l=[255,255,255,255]:"number"==typeof o.mean?l=[o.mean,o.mean,o.mean,o.mean]:(l=[o.mean[0],o.mean[1],o.mean[2],255],void 0!==o.mean[3]&&(l[3]=o.mean[3])),void 0===o||void 0===o.bias?c=[0,0,0,0]:"number"==typeof o.bias?c=[o.bias,o.bias,o.bias,o.bias]:(c=[o.bias[0],o.bias[1],o.bias[2],0],void 0!==o.bias[3]&&(c[3]=o.bias[3]));const g=a*n;if(void 0!==A&&(void 0!==A.format&&4===s&&"RGBA"!==A.format||3===s&&"RGB"!==A.format&&"BGR"!==A.format))throw new Error("Tensor format doesn't match input tensor dims");const u=4;let d=0,f=1,p=2,h=3,m=0,C=g,b=2*g,I=-1;"RGBA"===i?(m=0,C=g,b=2*g,I=3*g):"RGB"===i?(m=0,C=g,b=2*g):"RBG"===i&&(m=0,b=g,C=2*g),r=t.createImageData(n,a);for(let A=0;A<a*n;d+=u,f+=u,p+=u,h+=u,A++)r.data[d]=(e.data[m++]-c[0])*l[0],r.data[f]=(e.data[C++]-c[1])*l[1],r.data[p]=(e.data[b++]-c[2])*l[2],r.data[h]=-1===I?255:(e.data[I++]-c[3])*l[3]}return r})(this,e)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(e){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;const A=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=A,e&&this.disposer&&(this.disposer(),this.disposer=void 0),A}finally{this.isDownloading=!1}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if("none"===this.dataLocation)throw new Error("The tensor is disposed.")}reshape(e){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return((e,A)=>{switch(e.location){case"cpu":return new c(e.type,e.data,A);case"cpu-pinned":return new c({location:"cpu-pinned",data:e.data,type:e.type,dims:A});case"texture":return new c({location:"texture",texture:e.texture,type:e.type,dims:A});case"gpu-buffer":return new c({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:A});case"ml-tensor":return new c({location:"ml-tensor",mlTensor:e.mlTensor,type:e.type,dims:A});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}})(this,e)}};const g=c,u=(e,A)=>{(void 0===n.trace?n.wasm.trace:n.trace)&&console.timeStamp(`${e}::ORT::${A}`)},d=(e,A)=>{const t=(new Error).stack?.split(/\r\n|\r|\n/g)||[];let r=!1;for(let n=0;n<t.length;n++){if(r&&!t[n].includes("TRACE_FUNC")){let r=`FUNC_${e}::${t[n].trim().split(" ")[1]}`;return A&&(r+=`::${A}`),void u("CPU",r)}t[n].includes("TRACE_FUNC")&&(r=!0)}},f=e=>{(void 0===n.trace?n.wasm.trace:n.trace)&&d("BEGIN",e)},p=e=>{(void 0===n.trace?n.wasm.trace:n.trace)&&d("END",e)};const h=class e{constructor(e){this.handler=e}async run(e,A,t){f();const r={};let n={};if("object"!=typeof e||null===e||e instanceof g||Array.isArray(e))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let a=!0;if("object"==typeof A){if(null===A)throw new TypeError("Unexpected argument[1]: cannot be null.");if(A instanceof g)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(A)){if(0===A.length)throw new TypeError("'fetches' cannot be an empty array.");a=!1;for(const e of A){if("string"!=typeof e)throw new TypeError("'fetches' must be a string array or an object.");if(-1===this.outputNames.indexOf(e))throw new RangeError(`'fetches' contains invalid output name: ${e}.`);r[e]=null}if("object"==typeof t&&null!==t)n=t;else if(void 0!==t)throw new TypeError("'options' must be an object.")}else{let e=!1;const s=Object.getOwnPropertyNames(A);for(const t of this.outputNames)if(-1!==s.indexOf(t)){const n=A[t];(null===n||n instanceof g)&&(e=!0,a=!1,r[t]=n)}if(e){if("object"==typeof t&&null!==t)n=t;else if(void 0!==t)throw new TypeError("'options' must be an object.")}else n=A}}else if(void 0!==A)throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const A of this.inputNames)if(void 0===e[A])throw new Error(`input '${A}' is missing in 'feeds'.`);if(a)for(const e of this.outputNames)r[e]=null;const s=await this.handler.run(e,r,n),i={};for(const e in s)if(Object.hasOwnProperty.call(s,e)){const A=s[e];i[e]=A instanceof g?A:new g(A.type,A.data,A.dims)}return p(),i}async release(){return this.handler.dispose()}static async create(r,n,a,s){let i;f();let o={};if("string"==typeof r){if(i=r,"object"==typeof n&&null!==n)o=n;else if(void 0!==n)throw new TypeError("'options' must be an object.")}else if(r instanceof Uint8Array){if(i=r,"object"==typeof n&&null!==n)o=n;else if(void 0!==n)throw new TypeError("'options' must be an object.")}else{if(!(r instanceof ArrayBuffer||"undefined"!=typeof SharedArrayBuffer&&r instanceof SharedArrayBuffer))throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");{const e=r;let A=0,t=r.byteLength;if("object"==typeof n&&null!==n)o=n;else if("number"==typeof n){if(A=n,!Number.isSafeInteger(A))throw new RangeError("'byteOffset' must be an integer.");if(A<0||A>=e.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${e.byteLength}).`);if(t=r.byteLength-A,"number"==typeof a){if(t=a,!Number.isSafeInteger(t))throw new RangeError("'byteLength' must be an integer.");if(t<=0||A+t>e.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${e.byteLength-A}].`);if("object"==typeof s&&null!==s)o=s;else if(void 0!==s)throw new TypeError("'options' must be an object.")}else if(void 0!==a)throw new TypeError("'byteLength' must be a number.")}else if(void 0!==n)throw new TypeError("'options' must be an object.");i=new Uint8Array(e,A,t)}}const[l,c]=await(async e=>{const r=e.executionProviders||[],n=r.map((e=>"string"==typeof e?e:e.name)),a=0===n.length?A:n;let s;const i=[],o=new Set;for(const e of a){const A=await t(e);"string"==typeof A?i.push({name:e,err:A}):(s||(s=A),s===A&&o.add(e))}if(!s)throw new Error(`no available backend found. ERR: ${i.map((e=>`[${e.name}] ${e.err}`)).join(", ")}`);for(const{name:e,err:A}of i)n.includes(e)&&console.warn(`removing requested execution provider "${e}" from session options because it is not available: ${A}`);const l=r.filter((e=>o.has("string"==typeof e?e:e.name)));return[s,new Proxy(e,{get:(e,A)=>"executionProviders"===A?l:Reflect.get(e,A)})]})(o),g=await l.createInferenceSessionHandler(i,c);return p(),new e(g)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}};var m,C,b,I,w,k,x,v,B,y,E,M,G,D,Q,T,P,z,F,S,N,O,L,Y,H,R,j,V,W,U,K,Z=Object.freeze({__proto__:null,InferenceSession:h,TRACE:u,TRACE_FUNC_BEGIN:f,TRACE_FUNC_END:p,Tensor:g,env:a,registerBackend:(t,r,n)=>{if(!r||"function"!=typeof r.init||"function"!=typeof r.createInferenceSessionHandler)throw new TypeError("not a valid backend");{const a=e.get(t);if(void 0===a)e.set(t,{backend:r,priority:n});else{if(a.priority>n)return;if(a.priority===n&&a.backend!==r)throw new Error(`cannot register backend "${t}" using priority ${n}`)}if(n>=0){const r=A.indexOf(t);-1!==r&&A.splice(r,1);for(let r=0;r<A.length;r++)if(e.get(A[r]).priority<=n)return void A.splice(r,0,t);A.push(t)}}}}),X=Object.defineProperty,q=Object.getOwnPropertyDescriptor,J=Object.getOwnPropertyNames,_=Object.prototype.hasOwnProperty,$=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(e,A)=>(typeof require<"u"?require:e)[A]}):e)((function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')})),ee=(e,A)=>()=>(e&&(A=e(e=0)),A),Ae=(e,A)=>{for(var t in A)X(e,t,{get:A[t],enumerable:!0})},te=e=>((e,A,t,r)=>{if(A&&"object"==typeof A||"function"==typeof A)for(let n of J(A))!_.call(e,n)&&n!==t&&X(e,n,{get:()=>A[n],enumerable:!(r=q(A,n))||r.enumerable});return e})(X({},"__esModule",{value:!0}),e),re=ee((()=>{m=new Map,C=[],b=(e,A,t)=>{if(!A||"function"!=typeof A.init||"function"!=typeof A.createInferenceSessionHandler)throw new TypeError("not a valid backend");{let r=m.get(e);if(void 0===r)m.set(e,{backend:A,priority:t});else{if(r.priority>t)return;if(r.priority===t&&r.backend!==A)throw new Error(`cannot register backend "${e}" using priority ${t}`)}if(t>=0){let A=C.indexOf(e);-1!==A&&C.splice(A,1);for(let A=0;A<C.length;A++)if(m.get(C[A]).priority<=t)return void C.splice(A,0,e);C.push(e)}}},I=async e=>{let A=m.get(e);if(!A)return"backend not found.";if(A.initialized)return A.backend;if(A.aborted)return A.error;{let t=!!A.initPromise;try{return t||(A.initPromise=A.backend.init(e)),await A.initPromise,A.initialized=!0,A.backend}catch(e){return t||(A.error=`${e}`,A.aborted=!0),A.error}finally{delete A.initPromise}}},w=async e=>{let A,t=e.executionProviders||[],r=t.map((e=>"string"==typeof e?e:e.name)),n=0===r.length?C:r,a=[],s=new Set;for(let e of n){let t=await I(e);"string"==typeof t?a.push({name:e,err:t}):(A||(A=t),A===t&&s.add(e))}if(!A)throw new Error(`no available backend found. ERR: ${a.map((e=>`[${e.name}] ${e.err}`)).join(", ")}`);for(let{name:e,err:A}of a)r.includes(e)&&console.warn(`removing requested execution provider "${e}" from session options because it is not available: ${A}`);let i=t.filter((e=>s.has("string"==typeof e?e:e.name)));return[A,new Proxy(e,{get:(e,A)=>"executionProviders"===A?i:Reflect.get(e,A)})]}})),ne=ee((()=>{re()})),ae=ee((()=>{k="1.22.0-dev.20250409-89f8206ba4"})),se=ee((()=>{ae(),x="warning",v={wasm:{},webgl:{},webgpu:{},versions:{common:k},set logLevel(e){if(void 0!==e){if("string"!=typeof e||-1===["verbose","info","warning","error","fatal"].indexOf(e))throw new Error(`Unsupported logging level: ${e}`);x=e}},get logLevel(){return x}},Object.defineProperty(v,"logLevel",{enumerable:!0})})),ie=ee((()=>{se(),B=v})),oe=ee((()=>{y=(e,A)=>{let t=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);t.width=e.dims[3],t.height=e.dims[2];let r=t.getContext("2d");if(null!=r){let n,a;void 0!==A?.tensorLayout&&"NHWC"===A.tensorLayout?(n=e.dims[2],a=e.dims[3]):(n=e.dims[3],a=e.dims[2]);let s,i,o=void 0!==A?.format?A.format:"RGB",l=A?.norm;void 0===l||void 0===l.mean?s=[255,255,255,255]:"number"==typeof l.mean?s=[l.mean,l.mean,l.mean,l.mean]:(s=[l.mean[0],l.mean[1],l.mean[2],0],void 0!==l.mean[3]&&(s[3]=l.mean[3])),void 0===l||void 0===l.bias?i=[0,0,0,0]:"number"==typeof l.bias?i=[l.bias,l.bias,l.bias,l.bias]:(i=[l.bias[0],l.bias[1],l.bias[2],0],void 0!==l.bias[3]&&(i[3]=l.bias[3]));let c=a*n,g=0,u=c,d=2*c,f=-1;"RGBA"===o?(g=0,u=c,d=2*c,f=3*c):"RGB"===o?(g=0,u=c,d=2*c):"RBG"===o&&(g=0,d=c,u=2*c);for(let A=0;A<a;A++)for(let t=0;t<n;t++){let n=(e.data[g++]-i[0])*s[0],a=(e.data[u++]-i[1])*s[1],o=(e.data[d++]-i[2])*s[2],l=-1===f?255:(e.data[f++]-i[3])*s[3];r.fillStyle="rgba("+n+","+a+","+o+","+l+")",r.fillRect(t,A,1,1)}if("toDataURL"in t)return t.toDataURL();throw new Error("toDataURL is not supported")}throw new Error("Can not access image data")},E=(e,A)=>{let t,r=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");if(null==r)throw new Error("Can not access image data");{let n,a,s;void 0!==A?.tensorLayout&&"NHWC"===A.tensorLayout?(n=e.dims[2],a=e.dims[1],s=e.dims[3]):(n=e.dims[3],a=e.dims[2],s=e.dims[1]);let i,o,l=void 0!==A&&void 0!==A.format?A.format:"RGB",c=A?.norm;void 0===c||void 0===c.mean?i=[255,255,255,255]:"number"==typeof c.mean?i=[c.mean,c.mean,c.mean,c.mean]:(i=[c.mean[0],c.mean[1],c.mean[2],255],void 0!==c.mean[3]&&(i[3]=c.mean[3])),void 0===c||void 0===c.bias?o=[0,0,0,0]:"number"==typeof c.bias?o=[c.bias,c.bias,c.bias,c.bias]:(o=[c.bias[0],c.bias[1],c.bias[2],0],void 0!==c.bias[3]&&(o[3]=c.bias[3]));let g=a*n;if(void 0!==A&&(void 0!==A.format&&4===s&&"RGBA"!==A.format||3===s&&"RGB"!==A.format&&"BGR"!==A.format))throw new Error("Tensor format doesn't match input tensor dims");let u=4,d=0,f=1,p=2,h=3,m=0,C=g,b=2*g,I=-1;"RGBA"===l?(m=0,C=g,b=2*g,I=3*g):"RGB"===l?(m=0,C=g,b=2*g):"RBG"===l&&(m=0,b=g,C=2*g),t=r.createImageData(n,a);for(let A=0;A<a*n;d+=u,f+=u,p+=u,h+=u,A++)t.data[d]=(e.data[m++]-o[0])*i[0],t.data[f]=(e.data[C++]-o[1])*i[1],t.data[p]=(e.data[b++]-o[2])*i[2],t.data[h]=-1===I?255:(e.data[I++]-o[3])*i[3]}return t}})),le=ee((()=>{ue(),M=(e,A)=>{if(void 0===e)throw new Error("Image buffer must be defined");if(void 0===A.height||void 0===A.width)throw new Error("Image height and width must be defined");if("NHWC"===A.tensorLayout)throw new Error("NHWC Tensor layout is not supported yet");let t,r,{height:n,width:a}=A,s=A.norm??{mean:255,bias:0};t="number"==typeof s.mean?[s.mean,s.mean,s.mean,s.mean]:[s.mean[0],s.mean[1],s.mean[2],s.mean[3]??255],r="number"==typeof s.bias?[s.bias,s.bias,s.bias,s.bias]:[s.bias[0],s.bias[1],s.bias[2],s.bias[3]??0];let i=void 0!==A.format?A.format:"RGBA",o=void 0!==A.tensorFormat&&void 0!==A.tensorFormat?A.tensorFormat:"RGB",l=n*a,c="RGBA"===o?new Float32Array(4*l):new Float32Array(3*l),g=4,u=0,d=1,f=2,p=3,h=0,m=l,C=2*l,b=-1;"RGB"===i&&(g=3,u=0,d=1,f=2,p=-1),"RGBA"===o?b=3*l:"RBG"===o?(h=0,C=l,m=2*l):"BGR"===o&&(C=0,m=l,h=2*l);for(let A=0;A<l;A++,u+=g,f+=g,d+=g,p+=g)c[h++]=(e[u]+r[0])/t[0],c[m++]=(e[d]+r[1])/t[1],c[C++]=(e[f]+r[2])/t[2],-1!==b&&-1!==p&&(c[b++]=(e[p]+r[3])/t[3]);return new Y("float32",c,"RGBA"===o?[1,4,n,a]:[1,3,n,a])},G=async(e,A)=>{let t,r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,n=typeof ImageData<"u"&&e instanceof ImageData,a=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,s="string"==typeof e,i=A??{},o=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},l=e=>typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement||e instanceof OffscreenCanvas?e.getContext("2d"):null;if(r){let r=o();r.width=e.width,r.height=e.height;let n=l(r);if(null==n)throw new Error("Can not access image data");{let r=e.height,a=e.width;if(void 0!==A&&void 0!==A.resizedHeight&&void 0!==A.resizedWidth&&(r=A.resizedHeight,a=A.resizedWidth),void 0!==A){if(i=A,void 0!==A.tensorFormat)throw new Error("Image input config format must be RGBA for HTMLImageElement");i.tensorFormat="RGBA",i.height=r,i.width=a}else i.tensorFormat="RGBA",i.height=r,i.width=a;n.drawImage(e,0,0),t=n.getImageData(0,0,a,r).data}}else{if(!n){if(a){if(void 0===A)throw new Error("Please provide image config with format for Imagebitmap");let r=o();r.width=e.width,r.height=e.height;let n=l(r);if(null!=n){let A=e.height,r=e.width;return n.drawImage(e,0,0,r,A),t=n.getImageData(0,0,r,A).data,i.height=A,i.width=r,M(t,i)}throw new Error("Can not access image data")}if(s)return new Promise(((A,t)=>{let r=o(),n=l(r);if(!e||!n)return t();let a=new Image;a.crossOrigin="Anonymous",a.src=e,a.onload=()=>{r.width=a.width,r.height=a.height,n.drawImage(a,0,0,r.width,r.height);let e=n.getImageData(0,0,r.width,r.height);i.height=r.height,i.width=r.width,A(M(e.data,i))}}));throw new Error("Input data provided is not supported - aborted tensor creation")}{let r,n;if(void 0!==A&&void 0!==A.resizedWidth&&void 0!==A.resizedHeight?(r=A.resizedHeight,n=A.resizedWidth):(r=e.height,n=e.width),void 0!==A&&(i=A),i.format="RGBA",i.height=r,i.width=n,void 0!==A){let A=o();A.width=n,A.height=r;let a=l(A);if(null==a)throw new Error("Can not access image data");a.putImageData(e,0,0),t=a.getImageData(0,0,n,r).data}else t=e.data}}if(void 0!==t)return M(t,i);throw new Error("Input data provided is not supported - aborted tensor creation")},D=(e,A)=>{let{width:t,height:r,download:n,dispose:a}=A;return new Y({location:"texture",type:"float32",texture:e,dims:[1,r,t,4],download:n,dispose:a})},Q=(e,A)=>{let{dataType:t,dims:r,download:n,dispose:a}=A;return new Y({location:"gpu-buffer",type:t??"float32",gpuBuffer:e,dims:r,download:n,dispose:a})},T=(e,A)=>{let{dataType:t,dims:r,download:n,dispose:a}=A;return new Y({location:"ml-tensor",type:t??"float32",mlTensor:e,dims:r,download:n,dispose:a})},P=(e,A,t)=>new Y({location:"cpu-pinned",type:e,data:A,dims:t??[A.length]})})),ce=ee((()=>{z=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),F=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),S=!1,N=()=>{if(!S){S=!0;let e=typeof BigInt64Array<"u"&&BigInt64Array.from,A=typeof BigUint64Array<"u"&&BigUint64Array.from,t=globalThis.Float16Array,r=typeof t<"u"&&t.from;e&&(z.set("int64",BigInt64Array),F.set(BigInt64Array,"int64")),A&&(z.set("uint64",BigUint64Array),F.set(BigUint64Array,"uint64")),r?(z.set("float16",t),F.set(t,"float16")):z.set("float16",Uint16Array)}}})),ge=ee((()=>{ue(),O=e=>{let A=1;for(let t=0;t<e.length;t++){let r=e[t];if("number"!=typeof r||!Number.isSafeInteger(r))throw new TypeError(`dims[${t}] must be an integer, got: ${r}`);if(r<0)throw new RangeError(`dims[${t}] must be a non-negative integer, got: ${r}`);A*=r}return A},L=(e,A)=>{switch(e.location){case"cpu":return new Y(e.type,e.data,A);case"cpu-pinned":return new Y({location:"cpu-pinned",data:e.data,type:e.type,dims:A});case"texture":return new Y({location:"texture",texture:e.texture,type:e.type,dims:A});case"gpu-buffer":return new Y({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:A});case"ml-tensor":return new Y({location:"ml-tensor",mlTensor:e.mlTensor,type:e.type,dims:A});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}})),ue=ee((()=>{oe(),le(),ce(),ge(),Y=class{constructor(e,A,t){let r,n;if(N(),"object"==typeof e&&"location"in e)switch(this.dataLocation=e.location,r=e.type,n=e.dims,e.location){case"cpu-pinned":{let A=z.get(r);if(!A)throw new TypeError(`unsupported type "${r}" to create tensor from pinned buffer`);if(!(e.data instanceof A))throw new TypeError(`buffer should be of type ${A.name}`);this.cpuData=e.data;break}case"texture":if("float32"!==r)throw new TypeError(`unsupported type "${r}" to create tensor from texture`);this.gpuTextureData=e.texture,this.downloader=e.download,this.disposer=e.dispose;break;case"gpu-buffer":if("float32"!==r&&"float16"!==r&&"int32"!==r&&"int64"!==r&&"uint32"!==r&&"uint8"!==r&&"bool"!==r&&"uint4"!==r&&"int4"!==r)throw new TypeError(`unsupported type "${r}" to create tensor from gpu buffer`);this.gpuBufferData=e.gpuBuffer,this.downloader=e.download,this.disposer=e.dispose;break;case"ml-tensor":if("float32"!==r&&"float16"!==r&&"int32"!==r&&"int64"!==r&&"uint32"!==r&&"uint64"!==r&&"int8"!==r&&"uint8"!==r&&"bool"!==r&&"uint4"!==r&&"int4"!==r)throw new TypeError(`unsupported type "${r}" to create tensor from MLTensor`);this.mlTensorData=e.mlTensor,this.downloader=e.download,this.disposer=e.dispose;break;default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let a,s;if("string"==typeof e)if(r=e,s=t,"string"===e){if(!Array.isArray(A))throw new TypeError("A string tensor's data must be a string array.");a=A}else{let t=z.get(e);if(void 0===t)throw new TypeError(`Unsupported tensor type: ${e}.`);if(Array.isArray(A)){if("float16"===e&&t===Uint16Array||"uint4"===e||"int4"===e)throw new TypeError(`Creating a ${e} tensor from number array is not supported. Please use ${t.name} as data.`);a="uint64"===e||"int64"===e?t.from(A,BigInt):t.from(A)}else if(A instanceof t)a=A;else if(A instanceof Uint8ClampedArray){if("uint8"!==e)throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");a=Uint8Array.from(A)}else{if(!("float16"===e&&A instanceof Uint16Array&&t!==Uint16Array))throw new TypeError(`A ${r} tensor's data must be type of ${t}`);a=new globalThis.Float16Array(A.buffer,A.byteOffset,A.length)}}else if(s=A,Array.isArray(e)){if(0===e.length)throw new TypeError("Tensor type cannot be inferred from an empty array.");let A=typeof e[0];if("string"===A)r="string",a=e;else{if("boolean"!==A)throw new TypeError(`Invalid element type of data array: ${A}.`);r="bool",a=Uint8Array.from(e)}}else if(e instanceof Uint8ClampedArray)r="uint8",a=Uint8Array.from(e);else{let A=F.get(e.constructor);if(void 0===A)throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);r=A,a=e}if(void 0===s)s=[a.length];else if(!Array.isArray(s))throw new TypeError("A tensor's dims must be a number array");n=s,this.cpuData=a,this.dataLocation="cpu"}let a=O(n);if(this.cpuData&&a!==this.cpuData.length&&("uint4"!==r&&"int4"!==r||Math.ceil(a/2)!==this.cpuData.length))throw new Error(`Tensor's size(${a}) does not match data length(${this.cpuData.length}).`);this.type=r,this.dims=n,this.size=a}static async fromImage(e,A){return G(e,A)}static fromTexture(e,A){return D(e,A)}static fromGpuBuffer(e,A){return Q(e,A)}static fromMLTensor(e,A){return T(e,A)}static fromPinnedBuffer(e,A,t){return P(e,A,t)}toDataURL(e){return y(this,e)}toImageData(e){return E(this,e)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(e){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let A=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=A,e&&this.disposer&&(this.disposer(),this.disposer=void 0),A}finally{this.isDownloading=!1}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if("none"===this.dataLocation)throw new Error("The tensor is disposed.")}reshape(e){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return L(this,e)}}})),de=ee((()=>{ue(),H=Y})),fe=ee((()=>{se(),R=(e,A)=>{(typeof v.trace>"u"?!v.wasm.trace:!v.trace)||console.timeStamp(`${e}::ORT::${A}`)},j=(e,A)=>{let t=(new Error).stack?.split(/\r\n|\r|\n/g)||[],r=!1;for(let n=0;n<t.length;n++){if(r&&!t[n].includes("TRACE_FUNC")){let r=`FUNC_${e}::${t[n].trim().split(" ")[1]}`;return A&&(r+=`::${A}`),void R("CPU",r)}t[n].includes("TRACE_FUNC")&&(r=!0)}},V=e=>{(typeof v.trace>"u"?!v.wasm.trace:!v.trace)||j("BEGIN",e)},W=e=>{(typeof v.trace>"u"?!v.wasm.trace:!v.trace)||j("END",e)}})),pe=ee((()=>{re(),de(),fe(),U=class e{constructor(e){this.handler=e}async run(e,A,t){V();let r={},n={};if("object"!=typeof e||null===e||e instanceof H||Array.isArray(e))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let a=!0;if("object"==typeof A){if(null===A)throw new TypeError("Unexpected argument[1]: cannot be null.");if(A instanceof H)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(A)){if(0===A.length)throw new TypeError("'fetches' cannot be an empty array.");a=!1;for(let e of A){if("string"!=typeof e)throw new TypeError("'fetches' must be a string array or an object.");if(-1===this.outputNames.indexOf(e))throw new RangeError(`'fetches' contains invalid output name: ${e}.`);r[e]=null}if("object"==typeof t&&null!==t)n=t;else if(typeof t<"u")throw new TypeError("'options' must be an object.")}else{let e=!1,s=Object.getOwnPropertyNames(A);for(let t of this.outputNames)if(-1!==s.indexOf(t)){let n=A[t];(null===n||n instanceof H)&&(e=!0,a=!1,r[t]=n)}if(e){if("object"==typeof t&&null!==t)n=t;else if(typeof t<"u")throw new TypeError("'options' must be an object.")}else n=A}}else if(typeof A<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let A of this.inputNames)if(typeof e[A]>"u")throw new Error(`input '${A}' is missing in 'feeds'.`);if(a)for(let e of this.outputNames)r[e]=null;let s=await this.handler.run(e,r,n),i={};for(let e in s)if(Object.hasOwnProperty.call(s,e)){let A=s[e];i[e]=A instanceof H?A:new H(A.type,A.data,A.dims)}return W(),i}async release(){return this.handler.dispose()}static async create(A,t,r,n){V();let a,s={};if("string"==typeof A){if(a=A,"object"==typeof t&&null!==t)s=t;else if(typeof t<"u")throw new TypeError("'options' must be an object.")}else if(A instanceof Uint8Array){if(a=A,"object"==typeof t&&null!==t)s=t;else if(typeof t<"u")throw new TypeError("'options' must be an object.")}else{if(!(A instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&A instanceof SharedArrayBuffer))throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");{let e=A,i=0,o=A.byteLength;if("object"==typeof t&&null!==t)s=t;else if("number"==typeof t){if(i=t,!Number.isSafeInteger(i))throw new RangeError("'byteOffset' must be an integer.");if(i<0||i>=e.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${e.byteLength}).`);if(o=A.byteLength-i,"number"==typeof r){if(o=r,!Number.isSafeInteger(o))throw new RangeError("'byteLength' must be an integer.");if(o<=0||i+o>e.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${e.byteLength-i}].`);if("object"==typeof n&&null!==n)s=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(typeof r<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof t<"u")throw new TypeError("'options' must be an object.");a=new Uint8Array(e,i,o)}}let[i,o]=await w(s),l=await i.createInferenceSessionHandler(a,o);return W(),new e(l)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}get inputMetadata(){return this.handler.inputMetadata}get outputMetadata(){return this.handler.outputMetadata}}})),he=ee((()=>{pe(),K=U})),me=ee((()=>{})),Ce=ee((()=>{})),be=ee((()=>{})),Ie=ee((()=>{})),we={};Ae(we,{InferenceSession:()=>K,TRACE:()=>R,TRACE_FUNC_BEGIN:()=>V,TRACE_FUNC_END:()=>W,Tensor:()=>H,env:()=>B,registerBackend:()=>b});var ke=ee((()=>{ne(),ie(),he(),de(),me(),Ce(),fe(),be(),Ie()})),xe=ee((()=>{})),ve={};Ae(ve,{default:()=>Ee});var Be,ye,Ee,Me=ee((()=>{Bg(),bl(),Cl(),Be="ort-wasm-proxy-worker",(ye=globalThis.self?.name===Be)&&(self.onmessage=e=>{let{type:A,in:t}=e.data;try{switch(A){case"init-wasm":AA(t.wasm).then((()=>{Wc(t).then((()=>{postMessage({type:A})}),(e=>{postMessage({type:A,err:e})}))}),(e=>{postMessage({type:A,err:e})}));break;case"init-ep":{let{epName:e,env:r}=t;Uc(r,e).then((()=>{postMessage({type:A})}),(e=>{postMessage({type:A,err:e})}));break}case"copy-from":{let{buffer:e}=t,r=qc(e);postMessage({type:A,out:r});break}case"create":{let{model:e,options:r}=t;Jc(e,r).then((e=>{postMessage({type:A,out:e})}),(e=>{postMessage({type:A,err:e})}));break}case"release":_c(t),postMessage({type:A});break;case"run":{let{sessionId:e,inputIndices:r,inputs:n,outputIndices:a,options:s}=t;eg(e,r,n,a,new Array(a.length).fill(null),s).then((e=>{e.some((e=>"cpu"!==e[3]))?postMessage({type:A,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:A,out:e},tg([...n,...e]))}),(e=>{postMessage({type:A,err:e})}));break}case"end-profiling":Ag(t),postMessage({type:A})}}catch(e){postMessage({type:A,err:e})}}),Ee=ye?null:e=>new Worker(e??Ne,{type:"module",name:Be})})),Ge={};Ae(Ge,{default:()=>Te});var De,Qe,Te,Pe,ze,Fe,Se,Ne,Oe,Le,Ye,He,Re,je,Ve,We,Ue,Ke,Ze,Xe,qe,Je,_e,$e,eA,AA,tA,rA,nA,aA,sA,iA,oA,lA,cA,gA,uA,dA,fA,pA,hA,mA,CA,bA,IA,wA,kA,xA,vA,BA,yA,EA,MA,GA,DA,QA,TA,PA,zA,FA,SA,NA,OA,LA,YA,HA,RA,jA,VA,WA,UA,KA,ZA,XA,qA,JA,_A,$A,et,At,tt,rt,nt,at,st,it,ot,lt,ct,gt,ut,dt,ft,pt,ht,mt,Ct,bt,It,wt,kt,xt,vt,Bt,yt,Et,Mt,Gt,Dt,Qt,Tt,Pt,zt,Ft,St,Nt,Ot,Lt,Yt,Ht,Rt,jt,Vt,Wt,Ut,Kt,Zt,Xt,qt,Jt,_t,$t,er,Ar,tr,rr,nr,ar,sr,ir,or,lr,cr,gr,ur,dr,fr,pr,hr,mr,Cr,br,Ir,wr,kr,xr,vr,Br,yr,Er,Mr,Gr,Dr,Qr,Tr,Pr,zr,Fr,Sr,Nr,Or,Lr,Yr,Hr,Rr,jr,Vr,Wr,Ur,Kr,Zr,Xr,qr,Jr,_r,$r,en,An,tn,rn,nn,an,sn,on,ln,cn,gn,un,dn,fn,pn,hn,mn,Cn,bn,In,wn,kn,xn,vn,Bn,yn,En,Mn,Gn,Dn,Qn,Tn,Pn,zn,Fn,Sn,Nn,On,Ln,Yn,Hn,Rn,jn,Vn,Wn,Un,Kn,Zn,Xn,qn,Jn,_n,$n,ea,Aa,ta,ra,na,aa,sa,ia,oa,la,ca,ga,ua,da,fa,pa,ha,ma,Ca,ba,Ia,wa,ka,xa,va,Ba,ya,Ea,Ma,Ga,Da,Qa,Ta,Pa,za,Fa,Sa,Na,Oa,La,Ya,Ha,Ra,ja,Va,Wa,Ua,Ka,Za,Xa,qa,Ja,_a,$a,es,As,ts,rs,ns,as,ss,is,os,ls,cs,gs,us,ds,fs,ps,hs,ms,Cs,bs,Is,ws,ks,xs,vs,Bs,ys,Es,Ms,Gs,Ds,Qs,Ts,Ps,zs,Fs,Ss,Ns,Os,Ls,Ys,Hs,Rs,js,Vs,Ws,Us,Ks,Zs,Xs,qs,Js,_s,$s,ei,Ai,ti,ri,ni,ai,si,ii,oi,li,ci,gi,ui,di,fi,pi,hi,mi,Ci,bi,Ii,wi,ki,xi,vi,Bi,yi,Ei,Mi,Gi,Di,Qi,Ti,Pi,zi,Fi,Si,Ni,Oi,Li,Yi,Hi,Ri,ji,Vi,Wi,Ui,Ki,Zi,Xi,qi,Ji,_i,$i,eo,Ao,to,ro,no,ao,so,io,oo,lo,co,go,uo,fo,po,ho,mo,Co,bo,Io,wo,ko,xo,vo,Bo,yo,Eo,Mo,Go,Do,Qo,To,Po,zo,Fo,So,No,Oo,Lo,Yo,Ho,Ro,jo,Vo,Wo,Uo,Ko,Zo,Xo,qo,Jo,_o,$o,el,Al,tl,rl,nl,al,sl,il,ol,ll,cl,gl,ul,dl,fl,pl,hl,ml=ee((()=>{De=import.meta.url,Qe=async function(e={}){var A,t,r=e,n=new Promise(((e,r)=>{A=e,t=r})),a="object"==typeof window,s=typeof WorkerGlobalScope<"u",i=s&&self.name?.startsWith("em-pthread");r.mountExternalData=(e,A)=>{e.startsWith("./")&&(e=e.substring(2)),(r.Eb||(r.Eb=new Map)).set(e,A)},r.unmountExternalData=()=>{delete r.Eb};var o=globalThis.SharedArrayBuffer??new WebAssembly.Memory({initial:0,maximum:0,pc:!0}).buffer.constructor;let l=e=>async(...A)=>{try{if(r.Fb)throw Error("Session already started");let t=r.Fb={dc:A[0],errors:[]},n=await e(...A);if(r.Fb!==t)throw Error("Session mismatch");r.Jb?.flush();let a=t.errors;if(0<a.length){let e=await Promise.all(a);if(e=e.filter((e=>e)),0<e.length)throw Error(e.join("\n"))}return n}finally{r.Fb=null}};r.jsepInit=(e,A)=>{if("webgpu"===e){[r.Jb,r.Ub,r.Yb,r.Kb,r.Xb,r.jb,r.Zb,r.ac,r.Vb,r.Wb,r.$b]=A;let e=r.Jb;r.jsepRegisterBuffer=(A,t,r,n)=>e.registerBuffer(A,t,r,n),r.jsepGetBuffer=A=>e.getBuffer(A),r.jsepCreateDownloader=(A,t,r)=>e.createDownloader(A,t,r),r.jsepOnCreateSession=A=>{e.onCreateSession(A)},r.jsepOnReleaseSession=A=>{e.onReleaseSession(A)},r.jsepOnRunStart=A=>e.onRunStart(A),r.bc=(A,t)=>{e.upload(A,t)}}else if("webnn"===e){let e=A[0];[r.nc,r.Nb,r.webnnEnsureTensor,r.Ob,r.webnnDownloadTensor]=A.slice(1),r.webnnReleaseTensorId=r.Nb,r.webnnUploadTensor=r.Ob,r.webnnOnRunStart=A=>e.onRunStart(A),r.webnnOnRunEnd=e.onRunEnd.bind(e),r.webnnRegisterMLContext=(A,t)=>{e.registerMLContext(A,t)},r.webnnOnReleaseSession=A=>{e.onReleaseSession(A)},r.webnnCreateMLTensorDownloader=(A,t)=>e.createMLTensorDownloader(A,t),r.webnnRegisterMLTensor=(A,t,r,n)=>e.registerMLTensor(A,t,r,n),r.webnnCreateMLContext=A=>e.createMLContext(A),r.webnnRegisterMLConstant=(A,t,n,a,s,i)=>e.registerMLConstant(A,t,n,a,s,r.Eb,i),r.webnnRegisterGraphInput=e.registerGraphInput.bind(e),r.webnnIsGraphInput=e.isGraphInput.bind(e),r.webnnCreateTemporaryTensor=e.createTemporaryTensor.bind(e),r.webnnIsInt64Supported=e.isInt64Supported.bind(e)}};let c=()=>{let e=(e,A,t)=>(...r)=>{let n=YA,a=A?.();r=e(...r);let s=A?.();return a!==s&&(e=s,t(a),A=t=null),YA!=n?new Promise(((e,A)=>{UA={resolve:e,reject:A}})):r};(()=>{for(let A of["_OrtAppendExecutionProvider","_OrtCreateSession","_OrtRun","_OrtRunWithBinding","_OrtBindInput"])r[A]=e(r[A],(()=>r[A]),(e=>r[A]=e))})(),void 0!==l&&(r._OrtRun=l(r._OrtRun),r._OrtRunWithBinding=l(r._OrtRunWithBinding)),c=void 0};r.asyncInit=()=>{c?.()};var g,u,d=Object.assign({},r),f=(e,A)=>{throw A},p="";(a||s)&&(s?p=self.location.href:typeof document<"u"&&document.currentScript&&(p=document.currentScript.src),De&&(p=De),p=p.startsWith("blob:")?"":p.slice(0,p.replace(/[?#].*/,"").lastIndexOf("/")+1),s&&(u=e=>{var A=new XMLHttpRequest;return A.open("GET",e,!1),A.responseType="arraybuffer",A.send(null),new Uint8Array(A.response)}),g=async e=>{if(F(e))return new Promise(((A,t)=>{var r=new XMLHttpRequest;r.open("GET",e,!0),r.responseType="arraybuffer",r.onload=()=>{200==r.status||0==r.status&&r.response?A(r.response):t(r.status)},r.onerror=t,r.send(null)}));var A=await fetch(e,{credentials:"same-origin"});if(A.ok)return A.arrayBuffer();throw Error(A.status+" : "+A.url)});var h=console.log.bind(console),m=console.error.bind(console),C=h,b=m;Object.assign(r,d),d=null;var I,w,k,x,v,B,y,E,M,G,D,Q,T,P=r.wasmBinary,z=!1,F=e=>e.startsWith("file://");function S(){return I.buffer!=x.buffer&&U(),x}function N(){return I.buffer!=x.buffer&&U(),v}function O(){return I.buffer!=x.buffer&&U(),B}function L(){return I.buffer!=x.buffer&&U(),y}function Y(){return I.buffer!=x.buffer&&U(),E}function H(){return I.buffer!=x.buffer&&U(),M}function R(){return I.buffer!=x.buffer&&U(),G}function j(){return I.buffer!=x.buffer&&U(),T}if(i){let e=function(A){try{var t=A.data,n=t.Bb;if("load"===n){let A=[];self.onmessage=e=>A.push(e),self.startWorker=()=>{postMessage({Bb:"loaded"});for(let t of A)e(t);self.onmessage=e};for(let e of t.Rb)r[e]&&!r[e].proxy||(r[e]=(...A)=>{postMessage({Bb:"callHandler",Qb:e,args:A})},"print"==e&&(C=r[e]),"printErr"==e&&(b=r[e]));I=t.kc,U(),V(t.lc)}else if("run"===n){Ie(t.Ab),ur(t.Ab,0,0,1,0,0),me(),yA(t.Ab),W||(or(),W=!0);try{we(t.fc,t.Hb)}catch(e){if("unwind"!=e)throw e}}else"setimmediate"!==t.target&&("checkMailbox"===n?W&&EA():n&&(b(`worker: received unknown command ${n}`),b(t)))}catch(e){throw dr(),e}};var V,W=!1;b=function(...e){e=e.join(" "),console.error(e)},self.alert=function(...e){postMessage({Bb:"alert",text:e.join(" "),ic:lr()})},self.onunhandledrejection=e=>{throw e.reason||e},self.onmessage=e}function U(){var e=I.buffer;r.HEAP8=x=new Int8Array(e),r.HEAP16=B=new Int16Array(e),r.HEAPU8=v=new Uint8Array(e),r.HEAPU16=y=new Uint16Array(e),r.HEAP32=E=new Int32Array(e),r.HEAPU32=M=new Uint32Array(e),r.HEAPF32=G=new Float32Array(e),r.HEAPF64=T=new Float64Array(e),r.HEAP64=D=new BigInt64Array(e),r.HEAPU64=Q=new BigUint64Array(e)}function K(){i?startWorker(r):ar.Ca()}i||(I=new WebAssembly.Memory({initial:256,maximum:65536,shared:!0}),U());var Z,X=0,q=null;function J(){if(0==--X&&q){var e=q;q=null,e()}}function _(e){throw b(e="Aborted("+e+")"),z=!0,e=new WebAssembly.RuntimeError(e+". Build with -sASSERTIONS for more info."),t(e),e}function $(){return{a:{L:te,Aa:Ae,b:xe,$:Be,A:Ge,pa:Qe,X:ze,Z:Fe,qa:Se,na:Ne,ga:Oe,ma:Le,J:Ye,Y:He,V:Re,oa:je,W:Ve,va:Ke,E:$e,Q:AA,O:lA,D:gA,u:uA,r:dA,P:fA,z:kA,R:xA,ja:vA,T:MA,aa:DA,M:QA,F:TA,ia:yA,sa:PA,t:SA,Ba:NA,w:XA,o:JA,l:et,c:nA,n:tt,j:st,v:it,p:ot,f:lt,s:ct,m:gt,e:ut,k:dt,i:ft,g:pt,d:ht,da:mt,ea:wt,fa:kt,ba:xt,ca:vt,N:Et,xa:Mt,ua:Dt,h:Pt,C:zt,G:Ft,ta:Gt,x:St,ra:Nt,U:Ot,q:yt,y:Lt,K:Yt,S:Ht,za:Wt,ya:Ut,ka:qt,la:Jt,_:ge,B:_t,I:$t,ha:er,H:tr,a:I,wa:le}}}var ee={829644:(e,A,t,n,a)=>{if(void 0===r||!r.Eb)return 1;if((e=Me(Number(e>>>0))).startsWith("./")&&(e=e.substring(2)),!(e=r.Eb.get(e)))return 2;if(A=Number(A>>>0),t=Number(t>>>0),n=Number(n>>>0),A+t>e.byteLength)return 3;try{let s=e.subarray(A,A+t);switch(a){case 0:N().set(s,n>>>0);break;case 1:r.mc?r.mc(n,s):r.bc(n,s);break;default:return 4}return 0}catch{return 4}},830468:(e,A,t)=>{r.Ob(e,N().subarray(A>>>0,A+t>>>0))},830532:()=>r.nc(),830574:e=>{r.Nb(e)},830611:()=>{r.Vb()},830642:()=>{r.Wb()},830671:()=>{r.$b()},830696:e=>r.Ub(e),830729:e=>r.Yb(e),830761:(e,A,t)=>{r.Kb(Number(e),Number(A),Number(t),!0)},830824:(e,A,t)=>{r.Kb(Number(e),Number(A),Number(t))},830881:()=>typeof wasmOffsetConverter<"u",830938:e=>{r.jb("Abs",e,void 0)},830989:e=>{r.jb("Neg",e,void 0)},831040:e=>{r.jb("Floor",e,void 0)},831093:e=>{r.jb("Ceil",e,void 0)},831145:e=>{r.jb("Reciprocal",e,void 0)},831203:e=>{r.jb("Sqrt",e,void 0)},831255:e=>{r.jb("Exp",e,void 0)},831306:e=>{r.jb("Erf",e,void 0)},831357:e=>{r.jb("Sigmoid",e,void 0)},831412:(e,A,t)=>{r.jb("HardSigmoid",e,{alpha:A,beta:t})},831491:e=>{r.jb("Log",e,void 0)},831542:e=>{r.jb("Sin",e,void 0)},831593:e=>{r.jb("Cos",e,void 0)},831644:e=>{r.jb("Tan",e,void 0)},831695:e=>{r.jb("Asin",e,void 0)},831747:e=>{r.jb("Acos",e,void 0)},831799:e=>{r.jb("Atan",e,void 0)},831851:e=>{r.jb("Sinh",e,void 0)},831903:e=>{r.jb("Cosh",e,void 0)},831955:e=>{r.jb("Asinh",e,void 0)},832008:e=>{r.jb("Acosh",e,void 0)},832061:e=>{r.jb("Atanh",e,void 0)},832114:e=>{r.jb("Tanh",e,void 0)},832166:e=>{r.jb("Not",e,void 0)},832217:(e,A,t)=>{r.jb("Clip",e,{min:A,max:t})},832286:e=>{r.jb("Clip",e,void 0)},832338:(e,A)=>{r.jb("Elu",e,{alpha:A})},832396:e=>{r.jb("Gelu",e,void 0)},832448:e=>{r.jb("Relu",e,void 0)},832500:(e,A)=>{r.jb("LeakyRelu",e,{alpha:A})},832564:(e,A)=>{r.jb("ThresholdedRelu",e,{alpha:A})},832634:(e,A)=>{r.jb("Cast",e,{to:A})},832692:e=>{r.jb("Add",e,void 0)},832743:e=>{r.jb("Sub",e,void 0)},832794:e=>{r.jb("Mul",e,void 0)},832845:e=>{r.jb("Div",e,void 0)},832896:e=>{r.jb("Pow",e,void 0)},832947:e=>{r.jb("Equal",e,void 0)},833e3:e=>{r.jb("Greater",e,void 0)},833055:e=>{r.jb("GreaterOrEqual",e,void 0)},833117:e=>{r.jb("Less",e,void 0)},833169:e=>{r.jb("LessOrEqual",e,void 0)},833228:(e,A,t,n,a)=>{r.jb("ReduceMean",e,{keepDims:!!A,noopWithEmptyAxes:!!t,axes:n?Array.from(Y().subarray(Number(n)>>>0,Number(a)>>>0)):[]})},833403:(e,A,t,n,a)=>{r.jb("ReduceMax",e,{keepDims:!!A,noopWithEmptyAxes:!!t,axes:n?Array.from(Y().subarray(Number(n)>>>0,Number(a)>>>0)):[]})},833577:(e,A,t,n,a)=>{r.jb("ReduceMin",e,{keepDims:!!A,noopWithEmptyAxes:!!t,axes:n?Array.from(Y().subarray(Number(n)>>>0,Number(a)>>>0)):[]})},833751:(e,A,t,n,a)=>{r.jb("ReduceProd",e,{keepDims:!!A,noopWithEmptyAxes:!!t,axes:n?Array.from(Y().subarray(Number(n)>>>0,Number(a)>>>0)):[]})},833926:(e,A,t,n,a)=>{r.jb("ReduceSum",e,{keepDims:!!A,noopWithEmptyAxes:!!t,axes:n?Array.from(Y().subarray(Number(n)>>>0,Number(a)>>>0)):[]})},834100:(e,A,t,n,a)=>{r.jb("ReduceL1",e,{keepDims:!!A,noopWithEmptyAxes:!!t,axes:n?Array.from(Y().subarray(Number(n)>>>0,Number(a)>>>0)):[]})},834273:(e,A,t,n,a)=>{r.jb("ReduceL2",e,{keepDims:!!A,noopWithEmptyAxes:!!t,axes:n?Array.from(Y().subarray(Number(n)>>>0,Number(a)>>>0)):[]})},834446:(e,A,t,n,a)=>{r.jb("ReduceLogSum",e,{keepDims:!!A,noopWithEmptyAxes:!!t,axes:n?Array.from(Y().subarray(Number(n)>>>0,Number(a)>>>0)):[]})},834623:(e,A,t,n,a)=>{r.jb("ReduceSumSquare",e,{keepDims:!!A,noopWithEmptyAxes:!!t,axes:n?Array.from(Y().subarray(Number(n)>>>0,Number(a)>>>0)):[]})},834803:(e,A,t,n,a)=>{r.jb("ReduceLogSumExp",e,{keepDims:!!A,noopWithEmptyAxes:!!t,axes:n?Array.from(Y().subarray(Number(n)>>>0,Number(a)>>>0)):[]})},834983:e=>{r.jb("Where",e,void 0)},835036:(e,A,t)=>{r.jb("Transpose",e,{perm:A?Array.from(Y().subarray(Number(A)>>>0,Number(t)>>>0)):[]})},835160:(e,A,t,n)=>{r.jb("DepthToSpace",e,{blocksize:A,mode:Me(t),format:n?"NHWC":"NCHW"})},835293:(e,A,t,n)=>{r.jb("DepthToSpace",e,{blocksize:A,mode:Me(t),format:n?"NHWC":"NCHW"})},835426:(e,A,t,n,a,s,i,o,l,c,g,u,d,f,p)=>{r.jb("ConvTranspose",e,{format:l?"NHWC":"NCHW",autoPad:A,dilations:[t],group:n,kernelShape:[a],pads:[s,i],strides:[o],wIsConst:()=>!!S()[c>>>0],outputPadding:g?Array.from(Y().subarray(Number(g)>>>0,Number(u)>>>0)):[],outputShape:d?Array.from(Y().subarray(Number(d)>>>0,Number(f)>>>0)):[],activation:Me(p)})},835859:(e,A,t,n,a,s,i,o,l,c,g,u,d,f)=>{r.jb("ConvTranspose",e,{format:o?"NHWC":"NCHW",autoPad:A,dilations:Array.from(Y().subarray(Number(t)>>>0,2+(Number(t)>>>0)>>>0)),group:n,kernelShape:Array.from(Y().subarray(Number(a)>>>0,2+(Number(a)>>>0)>>>0)),pads:Array.from(Y().subarray(Number(s)>>>0,4+(Number(s)>>>0)>>>0)),strides:Array.from(Y().subarray(Number(i)>>>0,2+(Number(i)>>>0)>>>0)),wIsConst:()=>!!S()[l>>>0],outputPadding:c?Array.from(Y().subarray(Number(c)>>>0,Number(g)>>>0)):[],outputShape:u?Array.from(Y().subarray(Number(u)>>>0,Number(d)>>>0)):[],activation:Me(f)})},836520:(e,A,t,n,a,s,i,o,l,c,g,u,d,f,p)=>{r.jb("ConvTranspose",e,{format:l?"NHWC":"NCHW",autoPad:A,dilations:[t],group:n,kernelShape:[a],pads:[s,i],strides:[o],wIsConst:()=>!!S()[c>>>0],outputPadding:g?Array.from(Y().subarray(Number(g)>>>0,Number(u)>>>0)):[],outputShape:d?Array.from(Y().subarray(Number(d)>>>0,Number(f)>>>0)):[],activation:Me(p)})},836953:(e,A,t,n,a,s,i,o,l,c,g,u,d,f)=>{r.jb("ConvTranspose",e,{format:o?"NHWC":"NCHW",autoPad:A,dilations:Array.from(Y().subarray(Number(t)>>>0,2+(Number(t)>>>0)>>>0)),group:n,kernelShape:Array.from(Y().subarray(Number(a)>>>0,2+(Number(a)>>>0)>>>0)),pads:Array.from(Y().subarray(Number(s)>>>0,4+(Number(s)>>>0)>>>0)),strides:Array.from(Y().subarray(Number(i)>>>0,2+(Number(i)>>>0)>>>0)),wIsConst:()=>!!S()[l>>>0],outputPadding:c?Array.from(Y().subarray(Number(c)>>>0,Number(g)>>>0)):[],outputShape:u?Array.from(Y().subarray(Number(u)>>>0,Number(d)>>>0)):[],activation:Me(f)})},837614:(e,A)=>{r.jb("GlobalAveragePool",e,{format:A?"NHWC":"NCHW"})},837705:(e,A,t,n,a,s,i,o,l,c,g,u,d,f)=>{r.jb("AveragePool",e,{format:f?"NHWC":"NCHW",auto_pad:A,ceil_mode:t,count_include_pad:n,storage_order:a,dilations:s?Array.from(Y().subarray(Number(s)>>>0,Number(i)>>>0)):[],kernel_shape:o?Array.from(Y().subarray(Number(o)>>>0,Number(l)>>>0)):[],pads:c?Array.from(Y().subarray(Number(c)>>>0,Number(g)>>>0)):[],strides:u?Array.from(Y().subarray(Number(u)>>>0,Number(d)>>>0)):[]})},838184:(e,A)=>{r.jb("GlobalAveragePool",e,{format:A?"NHWC":"NCHW"})},838275:(e,A,t,n,a,s,i,o,l,c,g,u,d,f)=>{r.jb("AveragePool",e,{format:f?"NHWC":"NCHW",auto_pad:A,ceil_mode:t,count_include_pad:n,storage_order:a,dilations:s?Array.from(Y().subarray(Number(s)>>>0,Number(i)>>>0)):[],kernel_shape:o?Array.from(Y().subarray(Number(o)>>>0,Number(l)>>>0)):[],pads:c?Array.from(Y().subarray(Number(c)>>>0,Number(g)>>>0)):[],strides:u?Array.from(Y().subarray(Number(u)>>>0,Number(d)>>>0)):[]})},838754:(e,A)=>{r.jb("GlobalMaxPool",e,{format:A?"NHWC":"NCHW"})},838841:(e,A,t,n,a,s,i,o,l,c,g,u,d,f)=>{r.jb("MaxPool",e,{format:f?"NHWC":"NCHW",auto_pad:A,ceil_mode:t,count_include_pad:n,storage_order:a,dilations:s?Array.from(Y().subarray(Number(s)>>>0,Number(i)>>>0)):[],kernel_shape:o?Array.from(Y().subarray(Number(o)>>>0,Number(l)>>>0)):[],pads:c?Array.from(Y().subarray(Number(c)>>>0,Number(g)>>>0)):[],strides:u?Array.from(Y().subarray(Number(u)>>>0,Number(d)>>>0)):[]})},839316:(e,A)=>{r.jb("GlobalMaxPool",e,{format:A?"NHWC":"NCHW"})},839403:(e,A,t,n,a,s,i,o,l,c,g,u,d,f)=>{r.jb("MaxPool",e,{format:f?"NHWC":"NCHW",auto_pad:A,ceil_mode:t,count_include_pad:n,storage_order:a,dilations:s?Array.from(Y().subarray(Number(s)>>>0,Number(i)>>>0)):[],kernel_shape:o?Array.from(Y().subarray(Number(o)>>>0,Number(l)>>>0)):[],pads:c?Array.from(Y().subarray(Number(c)>>>0,Number(g)>>>0)):[],strides:u?Array.from(Y().subarray(Number(u)>>>0,Number(d)>>>0)):[]})},839878:(e,A,t,n,a)=>{r.jb("Gemm",e,{alpha:A,beta:t,transA:n,transB:a})},839982:e=>{r.jb("MatMul",e,void 0)},840036:(e,A,t,n)=>{r.jb("ArgMax",e,{keepDims:!!A,selectLastIndex:!!t,axis:n})},840144:(e,A,t,n)=>{r.jb("ArgMin",e,{keepDims:!!A,selectLastIndex:!!t,axis:n})},840252:(e,A)=>{r.jb("Softmax",e,{axis:A})},840315:(e,A)=>{r.jb("Concat",e,{axis:A})},840375:(e,A,t,n,a)=>{r.jb("Split",e,{axis:A,numOutputs:t,splitSizes:n?Array.from(Y().subarray(Number(n)>>>0,Number(a)>>>0)):[]})},840531:e=>{r.jb("Expand",e,void 0)},840585:(e,A)=>{r.jb("Gather",e,{axis:Number(A)})},840656:(e,A)=>{r.jb("GatherElements",e,{axis:Number(A)})},840735:(e,A)=>{r.jb("GatherND",e,{batch_dims:Number(A)})},840814:(e,A,t,n,a,s,i,o,l,c,g)=>{r.jb("Resize",e,{antialias:A,axes:t?Array.from(Y().subarray(Number(t)>>>0,Number(n)>>>0)):[],coordinateTransformMode:Me(a),cubicCoeffA:s,excludeOutside:i,extrapolationValue:o,keepAspectRatioPolicy:Me(l),mode:Me(c),nearestMode:Me(g)})},841176:(e,A,t,n,a,s,i)=>{r.jb("Slice",e,{starts:A?Array.from(Y().subarray(Number(A)>>>0,Number(t)>>>0)):[],ends:n?Array.from(Y().subarray(Number(n)>>>0,Number(a)>>>0)):[],axes:s?Array.from(Y().subarray(Number(s)>>>0,Number(i)>>>0)):[]})},841440:e=>{r.jb("Tile",e,void 0)},841492:(e,A,t)=>{r.jb("InstanceNormalization",e,{epsilon:A,format:t?"NHWC":"NCHW"})},841606:(e,A,t)=>{r.jb("InstanceNormalization",e,{epsilon:A,format:t?"NHWC":"NCHW"})},841720:e=>{r.jb("Range",e,void 0)},841773:(e,A)=>{r.jb("Einsum",e,{equation:Me(A)})},841854:(e,A,t,n,a)=>{r.jb("Pad",e,{mode:A,value:t,pads:n?Array.from(Y().subarray(Number(n)>>>0,Number(a)>>>0)):[]})},841997:(e,A,t,n,a,s)=>{r.jb("BatchNormalization",e,{epsilon:A,momentum:t,spatial:!!a,trainingMode:!!n,format:s?"NHWC":"NCHW"})},842166:(e,A,t,n,a,s)=>{r.jb("BatchNormalization",e,{epsilon:A,momentum:t,spatial:!!a,trainingMode:!!n,format:s?"NHWC":"NCHW"})},842335:(e,A,t)=>{r.jb("CumSum",e,{exclusive:Number(A),reverse:Number(t)})},842432:(e,A,t)=>{r.jb("DequantizeLinear",e,{axis:A,blockSize:t})},842522:(e,A,t,n,a)=>{r.jb("GridSample",e,{align_corners:A,mode:Me(t),padding_mode:Me(n),format:a?"NHWC":"NCHW"})},842692:(e,A,t,n,a)=>{r.jb("GridSample",e,{align_corners:A,mode:Me(t),padding_mode:Me(n),format:a?"NHWC":"NCHW"})},842862:(e,A)=>{r.jb("ScatterND",e,{reduction:Me(A)})},842947:(e,A,t,n,a,s,i,o,l)=>{r.jb("Attention",e,{numHeads:A,isUnidirectional:t,maskFilterValue:n,scale:a,doRotary:s,qkvHiddenSizes:i?Array.from(Y().subarray(Number(o)>>>0,Number(o)+i>>>0)):[],pastPresentShareBuffer:!!l})},843219:e=>{r.jb("BiasAdd",e,void 0)},843274:e=>{r.jb("BiasSplitGelu",e,void 0)},843335:e=>{r.jb("FastGelu",e,void 0)},843391:(e,A,t,n,a,s,i,o,l,c,g,u,d,f,p,h)=>{r.jb("Conv",e,{format:u?"NHWC":"NCHW",auto_pad:A,dilations:t?Array.from(Y().subarray(Number(t)>>>0,Number(n)>>>0)):[],group:a,kernel_shape:s?Array.from(Y().subarray(Number(s)>>>0,Number(i)>>>0)):[],pads:o?Array.from(Y().subarray(Number(o)>>>0,Number(l)>>>0)):[],strides:c?Array.from(Y().subarray(Number(c)>>>0,Number(g)>>>0)):[],w_is_const:()=>!!S()[Number(d)>>>0],activation:Me(f),activation_params:p?Array.from(R().subarray(Number(p)>>>0,Number(h)>>>0)):[]})},843975:e=>{r.jb("Gelu",e,void 0)},844027:(e,A,t,n,a,s,i,o,l)=>{r.jb("GroupQueryAttention",e,{numHeads:A,kvNumHeads:t,scale:n,softcap:a,doRotary:s,rotaryInterleaved:i,smoothSoftmax:o,localWindowSize:l})},844244:(e,A,t,n)=>{r.jb("LayerNormalization",e,{axis:A,epsilon:t,simplified:!!n})},844355:(e,A,t,n)=>{r.jb("LayerNormalization",e,{axis:A,epsilon:t,simplified:!!n})},844466:(e,A,t,n,a,s)=>{r.jb("MatMulNBits",e,{k:A,n:t,accuracyLevel:n,bits:a,blockSize:s})},844593:(e,A,t,n,a,s)=>{r.jb("MultiHeadAttention",e,{numHeads:A,isUnidirectional:t,maskFilterValue:n,scale:a,doRotary:s})},844752:(e,A)=>{r.jb("QuickGelu",e,{alpha:A})},844816:(e,A,t,n,a)=>{r.jb("RotaryEmbedding",e,{interleaved:!!A,numHeads:t,rotaryEmbeddingDim:n,scale:a})},844955:(e,A,t)=>{r.jb("SkipLayerNormalization",e,{epsilon:A,simplified:!!t})},845057:(e,A,t)=>{r.jb("SkipLayerNormalization",e,{epsilon:A,simplified:!!t})},845159:(e,A,t,n)=>{r.jb("GatherBlockQuantized",e,{gatherAxis:A,quantizeAxis:t,blockSize:n})},845280:e=>{r.Zb(e)},845314:(e,A)=>r.ac(Number(e),Number(A),r.Fb.dc,r.Fb.errors)};function Ae(e,A,t){return ZA((async()=>{await r.Xb(Number(e),Number(A),Number(t))}))}function te(){return typeof wasmOffsetConverter<"u"}class re{name="ExitStatus";constructor(e){this.message=`Program terminated with exit(${e})`,this.status=e}}var ne=e=>{e.terminate(),e.onmessage=()=>{}},ae=[],se=e=>{0==ue.length&&(be(),Ce(ue[0]));var A=ue.pop();if(!A)return 6;de.push(A),pe[e.Ab]=A,A.Ab=e.Ab;var t={Bb:"run",fc:e.ec,Hb:e.Hb,Ab:e.Ab};return A.postMessage(t,e.Mb),0},ie=0,oe=(e,A,...t)=>{for(var r=2*t.length,n=kr(),a=wr(8*r),s=a>>>3,i=0;i<t.length;i++){var o=t[i];"bigint"==typeof o?(D[s+2*i]=1n,D[s+2*i+1]=o):(D[s+2*i]=0n,j()[s+2*i+1>>>0]=o)}return e=fr(e,0,r,a,A),Ir(n),e};function le(e){if(i)return oe(0,1,e);if(k=e,!(0<ie)){for(var A of de)ne(A);for(A of ue)ne(A);ue=[],de=[],pe={},z=!0}f(0,new re(e))}function ce(e){if(i)return oe(1,0,e);ge(e)}var ge=e=>{if(k=e,i)throw ce(e),"unwind";le(e)},ue=[],de=[],fe=[],pe={},he=e=>{var A=e.Ab;delete pe[A],ue.push(e),de.splice(de.indexOf(e),1),e.Ab=0,pr(A)};function me(){fe.forEach((e=>e()))}var Ce=e=>new Promise((A=>{e.onmessage=t=>{var n=(t=t.data).Bb;if(t.Gb&&t.Gb!=lr()){var a=pe[t.Gb];a?a.postMessage(t,t.Mb):b(`Internal error! Worker sent a message "${n}" to target pthread ${t.Gb}, but that thread no longer exists!`)}else"checkMailbox"===n?EA():"spawnThread"===n?se(t):"cleanupThread"===n?he(pe[t.hc]):"loaded"===n?(e.loaded=!0,A(e)):"alert"===n?alert(`Thread ${t.ic}: ${t.text}`):"setimmediate"===t.target?e.postMessage(t):"callHandler"===n?r[t.Qb](...t.args):n&&b(`worker sent an unknown command ${n}`)},e.onerror=e=>{throw b(`worker sent an error! ${e.filename}:${e.lineno}: ${e.message}`),e};var t,n=[];for(t of[])r.propertyIsEnumerable(t)&&n.push(t);e.postMessage({Bb:"load",Rb:n,kc:I,lc:w})}));function be(){var e=new Worker((()=>{let e=URL;return import.meta.url>"file:"&&import.meta.url<"file;"?new e("ort.bundle.min.mjs",import.meta.url):new URL(import.meta.url)})(),{type:"module",workerData:"em-pthread",name:"em-pthread"});ue.push(e)}var Ie=e=>{U();var A=H()[e+52>>>2>>>0];e=H()[e+56>>>2>>>0],br(A,A-e),Ir(A)},we=(e,A)=>{ie=0,e=xr(e,A),0<ie?k=e:hr(e)};class ke{constructor(e){this.Ib=e-24}}function xe(e,A,t){var r=new ke(e>>>=0);throw A>>>=0,t>>>=0,H()[r.Ib+16>>>2>>>0]=0,H()[r.Ib+4>>>2>>>0]=A,H()[r.Ib+8>>>2>>>0]=t,e}function ve(e,A,t,r){return i?oe(2,1,e,A,t,r):Be(e,A,t,r)}function Be(e,A,t,r){if(e>>>=0,t>>>=0,r>>>=0,void 0===o)return 6;var n=[];return i&&0===n.length?ve(e,A>>>=0,t,r):(e={ec:t,Ab:e,Hb:r,Mb:n},i?(e.Bb="spawnThread",postMessage(e,n),0):se(e))}var ye=typeof TextDecoder<"u"?new TextDecoder:void 0,Ee=(e,A=0,t=NaN)=>{var r=(A>>>=0)+t;for(t=A;e[t]&&!(t>=r);)++t;if(16<t-A&&e.buffer&&ye)return ye.decode(e.buffer instanceof ArrayBuffer?e.subarray(A,t):e.slice(A,t));for(r="";A<t;){var n=e[A++];if(128&n){var a=63&e[A++];if(192==(224&n))r+=String.fromCharCode((31&n)<<6|a);else{var s=63&e[A++];65536>(n=224==(240&n)?(15&n)<<12|a<<6|s:(7&n)<<18|a<<12|s<<6|63&e[A++])?r+=String.fromCharCode(n):(n-=65536,r+=String.fromCharCode(55296|n>>10,56320|1023&n))}}else r+=String.fromCharCode(n)}return r},Me=(e,A)=>(e>>>=0)?Ee(N(),e,A):"";function Ge(e,A,t){return i?oe(3,1,e,A,t):0}function Qe(e,A){if(i)return oe(4,1,e,A)}var Te=e=>{for(var A=0,t=0;t<e.length;++t){var r=e.charCodeAt(t);127>=r?A++:2047>=r?A+=2:55296<=r&&57343>=r?(A+=4,++t):A+=3}return A},Pe=(e,A,t)=>{var r=N();if(A>>>=0,0<t){var n=A;t=A+t-1;for(var a=0;a<e.length;++a){var s=e.charCodeAt(a);if(55296<=s&&57343>=s&&(s=65536+((1023&s)<<10)|1023&e.charCodeAt(++a)),127>=s){if(A>=t)break;r[A++>>>0]=s}else{if(2047>=s){if(A+1>=t)break;r[A++>>>0]=192|s>>6}else{if(65535>=s){if(A+2>=t)break;r[A++>>>0]=224|s>>12}else{if(A+3>=t)break;r[A++>>>0]=240|s>>18,r[A++>>>0]=128|s>>12&63}r[A++>>>0]=128|s>>6&63}r[A++>>>0]=128|63&s}}r[A>>>0]=0,e=A-n}else e=0;return e};function ze(e,A){if(i)return oe(5,1,e,A)}function Fe(e,A,t){if(i)return oe(6,1,e,A,t)}function Se(e,A,t){return i?oe(7,1,e,A,t):0}function Ne(e,A){if(i)return oe(8,1,e,A)}function Oe(e,A,t){if(i)return oe(9,1,e,A,t)}function Le(e,A,t,r){if(i)return oe(10,1,e,A,t,r)}function Ye(e,A,t,r){if(i)return oe(11,1,e,A,t,r)}function He(e,A,t,r){if(i)return oe(12,1,e,A,t,r)}function Re(e){if(i)return oe(13,1,e)}function je(e,A){if(i)return oe(14,1,e,A)}function Ve(e,A,t){if(i)return oe(15,1,e,A,t)}var We,Ue,Ke=()=>_(""),Ze=e=>{for(var A="";N()[e>>>0];)A+=We[N()[e++>>>0]];return A},Xe={},qe={};function Je(e,A,t={}){return function(e,A,t={}){var r=A.name;if(!e)throw new Ue(`type "${r}" must have a positive integer typeid pointer`);if(qe.hasOwnProperty(e)){if(t.Sb)return;throw new Ue(`Cannot register type '${r}' twice`)}qe[e]=A,Xe.hasOwnProperty(e)&&(A=Xe[e],delete Xe[e],A.forEach((e=>e())))}(e,A,t)}var _e=(e,A,t)=>{switch(A){case 1:return t?e=>S()[e>>>0]:e=>N()[e>>>0];case 2:return t?e=>O()[e>>>1>>>0]:e=>L()[e>>>1>>>0];case 4:return t?e=>Y()[e>>>2>>>0]:e=>H()[e>>>2>>>0];case 8:return t?e=>D[e>>>3]:e=>Q[e>>>3];default:throw new TypeError(`invalid integer width (${A}): ${e}`)}};function $e(e,A,t){t>>>=0,Je(e>>>=0,{name:A=Ze(A>>>0),fromWireType:e=>e,toWireType:function(e,A){if("bigint"!=typeof A&&"number"!=typeof A)throw A=null===A?"null":"object"==(e=typeof A)||"array"===e||"function"===e?A.toString():""+A,new TypeError(`Cannot convert "${A}" to ${this.name}`);return"number"==typeof A&&(A=BigInt(A)),A},Cb:eA,readValueFromPointer:_e(A,t,-1==A.indexOf("u")),Db:null})}var eA=8;function AA(e,A,t,r){Je(e>>>=0,{name:A=Ze(A>>>0),fromWireType:function(e){return!!e},toWireType:function(e,A){return A?t:r},Cb:eA,readValueFromPointer:function(e){return this.fromWireType(N()[e>>>0])},Db:null})}var tA=[],rA=[];function nA(e){9<(e>>>=0)&&0==--rA[e+1]&&(rA[e]=void 0,tA.push(e))}var aA=e=>{if(!e)throw new Ue("Cannot use deleted val. handle = "+e);return rA[e]},sA=e=>{switch(e){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:let A=tA.pop()||rA.length;return rA[A]=e,rA[A+1]=1,A}};function iA(e){return this.fromWireType(H()[e>>>2>>>0])}var oA={name:"emscripten::val",fromWireType:e=>{var A=aA(e);return nA(e),A},toWireType:(e,A)=>sA(A),Cb:eA,readValueFromPointer:iA,Db:null};function lA(e){return Je(e>>>0,oA)}var cA=(e,A)=>{switch(A){case 4:return function(e){return this.fromWireType(R()[e>>>2>>>0])};case 8:return function(e){return this.fromWireType(j()[e>>>3>>>0])};default:throw new TypeError(`invalid float width (${A}): ${e}`)}};function gA(e,A,t){t>>>=0,Je(e>>>=0,{name:A=Ze(A>>>0),fromWireType:e=>e,toWireType:(e,A)=>A,Cb:eA,readValueFromPointer:cA(A,t),Db:null})}function uA(e,A,t,r,n){if(e>>>=0,t>>>=0,A=Ze(A>>>0),-1===n&&(n=4294967295),n=e=>e,0===r){var a=32-8*t;n=e=>e<<a>>>a}var s=A.includes("unsigned")?function(e,A){return A>>>0}:function(e,A){return A};Je(e,{name:A,fromWireType:n,toWireType:s,Cb:eA,readValueFromPointer:_e(A,t,0!==r),Db:null})}function dA(e,A,t){function r(e){var A=H()[e>>>2>>>0];return e=H()[e+4>>>2>>>0],new n(S().buffer,e,A)}var n=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][A];Je(e>>>=0,{name:t=Ze(t>>>0),fromWireType:r,Cb:eA,readValueFromPointer:r},{Sb:!0})}function fA(e,A){Je(e>>>=0,{name:A=Ze(A>>>0),fromWireType:function(e){for(var A,t=H()[e>>>2>>>0],r=e+4,n=r,a=0;a<=t;++a){var s=r+a;a!=t&&0!=N()[s>>>0]||(n=Me(n,s-n),void 0===A?A=n:(A+="\0",A+=n),n=s+1)}return cr(e),A},toWireType:function(e,A){A instanceof ArrayBuffer&&(A=new Uint8Array(A));var t="string"==typeof A;if(!(t||A instanceof Uint8Array||A instanceof Uint8ClampedArray||A instanceof Int8Array))throw new Ue("Cannot pass non-string to std::string");var r=t?Te(A):A.length,n=gr(4+r+1),a=n+4;if(H()[n>>>2>>>0]=r,t)Pe(A,a,r+1);else if(t)for(t=0;t<r;++t){var s=A.charCodeAt(t);if(255<s)throw cr(n),new Ue("String has UTF-16 code units that do not fit in 8 bits");N()[a+t>>>0]=s}else for(t=0;t<r;++t)N()[a+t>>>0]=A[t];return null!==e&&e.push(cr,n),n},Cb:eA,readValueFromPointer:iA,Db(e){cr(e)}})}var pA=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,hA=(e,A)=>{for(var t=e>>1,r=t+A/2;!(t>=r)&&L()[t>>>0];)++t;if(32<(t<<=1)-e&&pA)return pA.decode(N().slice(e,t));for(t="",r=0;!(r>=A/2);++r){var n=O()[e+2*r>>>1>>>0];if(0==n)break;t+=String.fromCharCode(n)}return t},mA=(e,A,t)=>{if(t??=2147483647,2>t)return 0;var r=A;t=(t-=2)<2*e.length?t/2:e.length;for(var n=0;n<t;++n){var a=e.charCodeAt(n);O()[A>>>1>>>0]=a,A+=2}return O()[A>>>1>>>0]=0,A-r},CA=e=>2*e.length,bA=(e,A)=>{for(var t=0,r="";!(t>=A/4);){var n=Y()[e+4*t>>>2>>>0];if(0==n)break;++t,65536<=n?(n-=65536,r+=String.fromCharCode(55296|n>>10,56320|1023&n)):r+=String.fromCharCode(n)}return r},IA=(e,A,t)=>{if(A>>>=0,t??=2147483647,4>t)return 0;var r=A;t=r+t-4;for(var n=0;n<e.length;++n){var a=e.charCodeAt(n);if(55296<=a&&57343>=a&&(a=65536+((1023&a)<<10)|1023&e.charCodeAt(++n)),Y()[A>>>2>>>0]=a,(A+=4)+4>t)break}return Y()[A>>>2>>>0]=0,A-r},wA=e=>{for(var A=0,t=0;t<e.length;++t){var r=e.charCodeAt(t);55296<=r&&57343>=r&&++t,A+=4}return A};function kA(e,A,t){if(e>>>=0,A>>>=0,t=Ze(t>>>=0),2===A)var r=hA,n=mA,a=CA,s=e=>L()[e>>>1>>>0];else 4===A&&(r=bA,n=IA,a=wA,s=e=>H()[e>>>2>>>0]);Je(e,{name:t,fromWireType:e=>{for(var t,n=H()[e>>>2>>>0],a=e+4,i=0;i<=n;++i){var o=e+4+i*A;i!=n&&0!=s(o)||(a=r(a,o-a),void 0===t?t=a:(t+="\0",t+=a),a=o+A)}return cr(e),t},toWireType:(e,r)=>{if("string"!=typeof r)throw new Ue(`Cannot pass non-string to C++ string type ${t}`);var s=a(r),i=gr(4+s+A);return H()[i>>>2>>>0]=s/A,n(r,i+4,s+A),null!==e&&e.push(cr,i),i},Cb:eA,readValueFromPointer:iA,Db(e){cr(e)}})}function xA(e,A){Je(e>>>=0,{Tb:!0,name:A=Ze(A>>>0),Cb:0,fromWireType:()=>{},toWireType:()=>{}})}function vA(e){ur(e>>>0,!s,1,!a,131072,!1),me()}var BA=e=>{if(!z)try{if(e(),!(0<ie))try{i?hr(k):ge(k)}catch(e){e instanceof re||"unwind"==e||f(0,e)}}catch(e){e instanceof re||"unwind"==e||f(0,e)}};function yA(e){e>>>=0,"function"==typeof Atomics.jc&&(Atomics.jc(Y(),e>>>2,e).value.then(EA),e+=128,Atomics.store(Y(),e>>>2,1))}var EA=()=>{var e=lr();e&&(yA(e),BA(Cr))};function MA(e,A){(e>>>=0)==A>>>0?setTimeout(EA):i?postMessage({Gb:e,Bb:"checkMailbox"}):(e=pe[e])&&e.postMessage({Bb:"checkMailbox"})}var GA=[];function DA(e,A,t,r,n){for(A>>>=0,r/=2,GA.length=r,t=n>>>0>>>3,n=0;n<r;n++)GA[n]=D[t+2*n]?D[t+2*n+1]:j()[t+2*n+1>>>0];return(A?ee[A]:sr[e])(...GA)}var QA=()=>{ie=0};function TA(e){e>>>=0,i?postMessage({Bb:"cleanupThread",hc:e}):he(pe[e])}function PA(e){}var zA=(e,A)=>{var t=qe[e];if(void 0===t)throw e=ir(e),t=Ze(e),cr(e),new Ue(`${A} has unknown type ${t}`);return t},FA=(e,A,t)=>{var r=[];return e=e.toWireType(r,t),r.length&&(H()[A>>>2>>>0]=sA(r)),e};function SA(e,A,t){return A>>>=0,t>>>=0,e=aA(e>>>0),A=zA(A,"emval::as"),FA(A,t,e)}function NA(e,A){return A>>>=0,e=aA(e>>>0),(A=zA(A,"emval::as")).toWireType(null,e)}var OA=e=>{try{e()}catch(e){_(e)}},LA=0,YA=null,HA=0,RA=[],jA={},VA={},WA=0,UA=null,KA=[];function ZA(e){return function(){if(!z){if(0===LA){var A=!1,t=!1;(A=>{e().then(A)})(((e=0)=>{if(!z&&(HA=e,A=!0,t)){LA=2,OA((()=>yr(YA))),typeof MainLoop<"u"&&MainLoop.Pb&&MainLoop.resume(),e=!1;try{var r=function(){var e=Y()[YA+8>>>2>>>0];return e=ar[VA[e]],--ie,e()}()}catch(A){r=A,e=!0}var n=!1;if(!YA){var a=UA;a&&(UA=null,(e?a.reject:a.resolve)(r),n=!0)}if(e&&!n)throw r}})),t=!0,A||(LA=1,YA=function(){var e=gr(65548),A=e+12;H()[e>>>2>>>0]=A,H()[e+4>>>2>>>0]=A+65536,A=RA[0];var t=jA[A];return void 0===t&&(t=WA++,jA[A]=t,VA[t]=A),A=t,Y()[e+8>>>2>>>0]=A,e}(),typeof MainLoop<"u"&&MainLoop.Pb&&MainLoop.pause(),OA((()=>vr(YA))))}else 2===LA?(LA=0,OA(Er),cr(YA),YA=null,KA.forEach(BA)):_(`invalid state: ${LA}`);return HA}}()}function XA(e){return e>>>=0,ZA((async()=>{var A=await aA(e);return sA(A)}))}var qA=[];function JA(e,A,t,r){return t>>>=0,r>>>=0,(e=qA[e>>>0])(null,A=aA(A>>>0),t,r)}var _A={},$A=e=>{var A=_A[e];return void 0===A?Ze(e):A};function et(e,A,t,r,n){return t>>>=0,r>>>=0,n>>>=0,(e=qA[e>>>0])(A=aA(A>>>0),A[t=$A(t)],r,n)}var At=()=>"object"==typeof globalThis?globalThis:Function("return this")();function tt(e){return 0==(e>>>=0)?sA(At()):(e=$A(e),sA(At()[e]))}var rt=e=>{var A=qA.length;return qA.push(e),A},nt=(e,A)=>{for(var t=Array(e),r=0;r<e;++r)t[r]=zA(H()[A+4*r>>>2>>>0],"parameter "+r);return t},at=(e,A)=>Object.defineProperty(A,"name",{value:e});function st(e,A,t){var r=(A=nt(e,A>>>0)).shift();e--;var n="return function (obj, func, destructorsRef, args) {\n",a=0,s=[];0===t&&s.push("obj");for(var i=["retType"],o=[r],l=0;l<e;++l)s.push("arg"+l),i.push("argType"+l),o.push(A[l]),n+=`  var arg${l} = argType${l}.readValueFromPointer(args${a?"+"+a:""});\n`,a+=A[l].Cb;return n+=`  var rv = ${1===t?"new func":"func.call"}(${s.join(", ")});\n`,r.Tb||(i.push("emval_returnValue"),o.push(FA),n+="  return emval_returnValue(retType, destructorsRef, rv);\n"),i.push(n+"};\n"),e=function(e){var A=Function;if(!(A instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof A} which is not a function`);var t=at(A.name||"unknownFunctionName",(function(){}));return t.prototype=A.prototype,t=new t,(e=A.apply(t,e))instanceof Object?e:t}(i)(...o),t=`methodCaller<(${A.map((e=>e.name)).join(", ")}) => ${r.name}>`,rt(at(t,e))}function it(e){return e=$A(e>>>0),sA(r[e])}function ot(e,A){return A>>>=0,e=aA(e>>>0),A=aA(A),sA(e[A])}function lt(e){9<(e>>>=0)&&(rA[e+1]+=1)}function ct(){return sA([])}function gt(e){e=aA(e>>>0);for(var A=Array(e.length),t=0;t<e.length;t++)A[t]=e[t];return sA(A)}function ut(e){return sA($A(e>>>0))}function dt(){return sA({})}function ft(e){for(var A=aA(e>>>=0);A.length;){var t=A.pop();A.pop()(t)}nA(e)}function pt(e,A,t){A>>>=0,t>>>=0,e=aA(e>>>0),A=aA(A),t=aA(t),e[A]=t}function ht(e,A){return A>>>=0,e=(e=zA(e>>>0,"_emval_take_value")).readValueFromPointer(A),sA(e)}function mt(e,A){e=-9007199254740992>e||9007199254740992<e?NaN:Number(e),A>>>=0,e=new Date(1e3*e),Y()[A>>>2>>>0]=e.getUTCSeconds(),Y()[A+4>>>2>>>0]=e.getUTCMinutes(),Y()[A+8>>>2>>>0]=e.getUTCHours(),Y()[A+12>>>2>>>0]=e.getUTCDate(),Y()[A+16>>>2>>>0]=e.getUTCMonth(),Y()[A+20>>>2>>>0]=e.getUTCFullYear()-1900,Y()[A+24>>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,Y()[A+28>>>2>>>0]=e}var Ct=e=>e%4==0&&(e%100!=0||e%400==0),bt=[0,31,60,91,121,152,182,213,244,274,305,335],It=[0,31,59,90,120,151,181,212,243,273,304,334];function wt(e,A){e=-9007199254740992>e||9007199254740992<e?NaN:Number(e),A>>>=0,e=new Date(1e3*e),Y()[A>>>2>>>0]=e.getSeconds(),Y()[A+4>>>2>>>0]=e.getMinutes(),Y()[A+8>>>2>>>0]=e.getHours(),Y()[A+12>>>2>>>0]=e.getDate(),Y()[A+16>>>2>>>0]=e.getMonth(),Y()[A+20>>>2>>>0]=e.getFullYear()-1900,Y()[A+24>>>2>>>0]=e.getDay();var t=(Ct(e.getFullYear())?bt:It)[e.getMonth()]+e.getDate()-1|0;Y()[A+28>>>2>>>0]=t,Y()[A+36>>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var r=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(t!=r&&e.getTimezoneOffset()==Math.min(r,t)),Y()[A+32>>>2>>>0]=e}function kt(e){e>>>=0;var A=new Date(Y()[e+20>>>2>>>0]+1900,Y()[e+16>>>2>>>0],Y()[e+12>>>2>>>0],Y()[e+8>>>2>>>0],Y()[e+4>>>2>>>0],Y()[e>>>2>>>0],0),t=Y()[e+32>>>2>>>0],r=A.getTimezoneOffset(),n=new Date(A.getFullYear(),6,1).getTimezoneOffset(),a=new Date(A.getFullYear(),0,1).getTimezoneOffset(),s=Math.min(a,n);return 0>t?Y()[e+32>>>2>>>0]=+(n!=a&&s==r):0<t!=(s==r)&&(n=Math.max(a,n),A.setTime(A.getTime()+6e4*((0<t?s:n)-r))),Y()[e+24>>>2>>>0]=A.getDay(),t=(Ct(A.getFullYear())?bt:It)[A.getMonth()]+A.getDate()-1|0,Y()[e+28>>>2>>>0]=t,Y()[e>>>2>>>0]=A.getSeconds(),Y()[e+4>>>2>>>0]=A.getMinutes(),Y()[e+8>>>2>>>0]=A.getHours(),Y()[e+12>>>2>>>0]=A.getDate(),Y()[e+16>>>2>>>0]=A.getMonth(),Y()[e+20>>>2>>>0]=A.getYear(),e=A.getTime(),BigInt(isNaN(e)?-1:e/1e3)}function xt(e,A,t,r,n,a,s){return i?oe(16,1,e,A,t,r,n,a,s):-52}function vt(e,A,t,r,n,a){if(i)return oe(17,1,e,A,t,r,n,a)}var Bt={},yt=()=>performance.timeOrigin+performance.now();function Et(e,A){if(i)return oe(18,1,e,A);if(Bt[e]&&(clearTimeout(Bt[e].id),delete Bt[e]),!A)return 0;var t=setTimeout((()=>{delete Bt[e],BA((()=>mr(e,performance.timeOrigin+performance.now())))}),A);return Bt[e]={id:t,qc:A},0}function Mt(e,A,t,r){e>>>=0,A>>>=0,t>>>=0,r>>>=0;var n=(new Date).getFullYear(),a=new Date(n,0,1).getTimezoneOffset();n=new Date(n,6,1).getTimezoneOffset();var s=Math.max(a,n);H()[e>>>2>>>0]=60*s,Y()[A>>>2>>>0]=+(a!=n),e=(A=e=>{var A=Math.abs(e);return`UTC${0<=e?"-":"+"}${String(Math.floor(A/60)).padStart(2,"0")}${String(A%60).padStart(2,"0")}`})(a),A=A(n),n<a?(Pe(e,t,17),Pe(A,r,17)):(Pe(e,r,17),Pe(A,t,17))}var Gt=()=>Date.now();function Dt(e,A,t){return 0<=e&&3>=e?(e=0===e?Date.now():performance.timeOrigin+performance.now(),D[t>>>0>>>3]=BigInt(Math.round(1e6*e)),0):28}var Qt=[],Tt=(e,A)=>{Qt.length=0;for(var t;t=N()[e++>>>0];){var r=105!=t;A+=(r&=112!=t)&&A%8?4:0,Qt.push(112==t?H()[A>>>2>>>0]:106==t?D[A>>>3]:105==t?Y()[A>>>2>>>0]:j()[A>>>3>>>0]),A+=r?8:4}return Qt};function Pt(e,A,t){return e>>>=0,A=Tt(A>>>0,t>>>0),ee[e](...A)}function zt(e,A,t){return e>>>=0,A=Tt(A>>>0,t>>>0),ee[e](...A)}var Ft=()=>{};function St(e,A){return b(Me(e>>>0,A>>>0))}var Nt=()=>{throw ie+=1,"unwind"};function Ot(){return 4294901760}var Lt=()=>navigator.hardwareConcurrency;function Yt(){return _("Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER"),0}function Ht(e){e>>>=0;var A=N().length;if(e<=A||4294901760<e)return!1;for(var t=1;4>=t;t*=2){var r=A*(1+.2/t);r=Math.min(r,e+100663296);e:{r=(Math.min(4294901760,65536*Math.ceil(Math.max(e,r)/65536))-I.buffer.byteLength+65535)/65536|0;try{I.grow(r),U();var n=1;break e}catch{}n=void 0}if(n)return!0}return!1}var Rt=()=>(_("Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER"),0),jt={},Vt=e=>{e.forEach((e=>{Rt()}))};function Wt(){var e=Error().stack.toString().split("\n");return"Error"==e[0]&&e.shift(),Vt(e),jt.Lb=Rt(),jt.cc=e,jt.Lb}function Ut(e,A,t){if(e>>>=0,A>>>=0,jt.Lb==e)var r=jt.cc;else"Error"==(r=Error().stack.toString().split("\n"))[0]&&r.shift(),Vt(r);for(var n=3;r[n]&&Rt()!=e;)++n;for(e=0;e<t&&r[e+n];++e)Y()[A+4*e>>>2>>>0]=Rt();return e}var Kt,Zt={},Xt=()=>{if(!Kt){var e,A={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:"./this.program"};for(e in Zt)void 0===Zt[e]?delete A[e]:A[e]=Zt[e];var t=[];for(e in A)t.push(`${e}=${A[e]}`);Kt=t}return Kt};function qt(e,A){if(i)return oe(19,1,e,A);e>>>=0,A>>>=0;var t=0;return Xt().forEach(((r,n)=>{var a=A+t;for(n=H()[e+4*n>>>2>>>0]=a,a=0;a<r.length;++a)S()[n++>>>0]=r.charCodeAt(a);S()[n>>>0]=0,t+=r.length+1})),0}function Jt(e,A){if(i)return oe(20,1,e,A);e>>>=0,A>>>=0;var t=Xt();H()[e>>>2>>>0]=t.length;var r=0;return t.forEach((e=>r+=e.length+1)),H()[A>>>2>>>0]=r,0}function _t(e){return i?oe(21,1,e):52}function $t(e,A,t,r){return i?oe(22,1,e,A,t,r):52}function er(e,A,t,r){return i?oe(23,1,e,A,t,r):70}var Ar=[null,[],[]];function tr(e,A,t,r){if(i)return oe(24,1,e,A,t,r);A>>>=0,t>>>=0,r>>>=0;for(var n=0,a=0;a<t;a++){var s=H()[A>>>2>>>0],o=H()[A+4>>>2>>>0];A+=8;for(var l=0;l<o;l++){var c=N()[s+l>>>0],g=Ar[e];0===c||10===c?((1===e?C:b)(Ee(g)),g.length=0):g.push(c)}n+=o}return H()[r>>>2>>>0]=n,0}i||function(){for(var e=r.numThreads-1;e--;)be();ae.unshift((()=>{X++,function(e){i?e():Promise.all(ue.map(Ce)).then(e)}((()=>J()))}))}();for(var rr=Array(256),nr=0;256>nr;++nr)rr[nr]=String.fromCharCode(nr);We=rr,Ue=r.BindingError=class extends Error{constructor(e){super(e),this.name="BindingError"}},r.InternalError=class extends Error{constructor(e){super(e),this.name="InternalError"}},rA.push(0,1,void 0,1,null,1,!0,1,!1,1),r.count_emval_handles=()=>rA.length/2-5-tA.length;var ar,sr=[le,ce,ve,Ge,Qe,ze,Fe,Se,Ne,Oe,Le,Ye,He,Re,je,Ve,xt,vt,Et,qt,Jt,_t,$t,er,tr];!async function(){function e(e,A){return ar=e.exports,ar=function(){var e=ar,A={};for(let[t,r]of Object.entries(e))A[t]="function"==typeof r?(...e)=>{RA.push(t);try{return r(...e)}finally{z||(RA.pop(),YA&&1===LA&&0===RA.length&&(LA=0,ie+=1,OA(Br),typeof Fibers<"u"&&Fibers.rc()))}}:r;return A}(),ar=function(){var e=ar,A=e=>A=>e(A)>>>0,t=e=>()=>e()>>>0;return(e=Object.assign({},e)).Da=A(e.Da),e.fb=t(e.fb),e.hb=A(e.hb),e.tb=A(e.tb),e.ub=t(e.ub),e.__cxa_get_exception_ptr=A(e.__cxa_get_exception_ptr),e}(),fe.push(ar.ib),w=A,J(),ar}X++;var A=$();if(r.instantiateWasm)return new Promise((t=>{r.instantiateWasm(A,((A,r)=>{e(A,r),t(A.exports)}))}));if(i)return new Promise((A=>{V=t=>{var r=new WebAssembly.Instance(t,$());A(e(r,t))}}));Z??=r.locateFile?r.locateFile?r.locateFile("ort-wasm-simd-threaded.jsep.wasm",p):p+"ort-wasm-simd-threaded.jsep.wasm":new URL("ort-wasm-simd-threaded.jsep.wasm",import.meta.url).href;try{var n=await async function(e){var A=Z;if(!P&&"function"==typeof WebAssembly.instantiateStreaming&&!F(A))try{var t=fetch(A,{credentials:"same-origin"});return await WebAssembly.instantiateStreaming(t,e)}catch(e){b(`wasm streaming compile failed: ${e}`),b("falling back to ArrayBuffer instantiation")}return async function(e,A){try{var t=await async function(e){if(!P)try{var A=await g(e);return new Uint8Array(A)}catch{}if(e==Z&&P)e=new Uint8Array(P);else{if(!u)throw"both async and sync fetching of the wasm failed";e=u(e)}return e}(e);return await WebAssembly.instantiate(t,A)}catch(e){b(`failed to asynchronously prepare wasm: ${e}`),_(e)}}(A,e)}(A);return e(n.instance,n.module)}catch(e){return t(e),Promise.reject(e)}}();var ir=e=>(ir=ar.Da)(e),or=()=>(or=ar.Ea)();r._OrtInit=(e,A)=>(r._OrtInit=ar.Fa)(e,A),r._OrtGetLastError=(e,A)=>(r._OrtGetLastError=ar.Ga)(e,A),r._OrtCreateSessionOptions=(e,A,t,n,a,s,i,o,l,c)=>(r._OrtCreateSessionOptions=ar.Ha)(e,A,t,n,a,s,i,o,l,c),r._OrtAppendExecutionProvider=(e,A,t,n,a)=>(r._OrtAppendExecutionProvider=ar.Ia)(e,A,t,n,a),r._OrtAddFreeDimensionOverride=(e,A,t)=>(r._OrtAddFreeDimensionOverride=ar.Ja)(e,A,t),r._OrtAddSessionConfigEntry=(e,A,t)=>(r._OrtAddSessionConfigEntry=ar.Ka)(e,A,t),r._OrtReleaseSessionOptions=e=>(r._OrtReleaseSessionOptions=ar.La)(e),r._OrtCreateSession=(e,A,t)=>(r._OrtCreateSession=ar.Ma)(e,A,t),r._OrtReleaseSession=e=>(r._OrtReleaseSession=ar.Na)(e),r._OrtGetInputOutputCount=(e,A,t)=>(r._OrtGetInputOutputCount=ar.Oa)(e,A,t),r._OrtGetInputOutputMetadata=(e,A,t,n)=>(r._OrtGetInputOutputMetadata=ar.Pa)(e,A,t,n),r._OrtFree=e=>(r._OrtFree=ar.Qa)(e),r._OrtCreateTensor=(e,A,t,n,a,s)=>(r._OrtCreateTensor=ar.Ra)(e,A,t,n,a,s),r._OrtGetTensorData=(e,A,t,n,a)=>(r._OrtGetTensorData=ar.Sa)(e,A,t,n,a),r._OrtReleaseTensor=e=>(r._OrtReleaseTensor=ar.Ta)(e),r._OrtCreateRunOptions=(e,A,t,n)=>(r._OrtCreateRunOptions=ar.Ua)(e,A,t,n),r._OrtAddRunConfigEntry=(e,A,t)=>(r._OrtAddRunConfigEntry=ar.Va)(e,A,t),r._OrtReleaseRunOptions=e=>(r._OrtReleaseRunOptions=ar.Wa)(e),r._OrtCreateBinding=e=>(r._OrtCreateBinding=ar.Xa)(e),r._OrtBindInput=(e,A,t)=>(r._OrtBindInput=ar.Ya)(e,A,t),r._OrtBindOutput=(e,A,t,n)=>(r._OrtBindOutput=ar.Za)(e,A,t,n),r._OrtClearBoundOutputs=e=>(r._OrtClearBoundOutputs=ar._a)(e),r._OrtReleaseBinding=e=>(r._OrtReleaseBinding=ar.$a)(e),r._OrtRunWithBinding=(e,A,t,n,a)=>(r._OrtRunWithBinding=ar.ab)(e,A,t,n,a),r._OrtRun=(e,A,t,n,a,s,i,o)=>(r._OrtRun=ar.bb)(e,A,t,n,a,s,i,o),r._OrtEndProfiling=e=>(r._OrtEndProfiling=ar.cb)(e),r._JsepOutput=(e,A,t)=>(r._JsepOutput=ar.db)(e,A,t),r._JsepGetNodeName=e=>(r._JsepGetNodeName=ar.eb)(e);var lr=()=>(lr=ar.fb)(),cr=r._free=e=>(cr=r._free=ar.gb)(e),gr=r._malloc=e=>(gr=r._malloc=ar.hb)(e),ur=(e,A,t,r,n,a)=>(ur=ar.kb)(e,A,t,r,n,a),dr=()=>(dr=ar.lb)(),fr=(e,A,t,r,n)=>(fr=ar.mb)(e,A,t,r,n),pr=e=>(pr=ar.nb)(e),hr=e=>(hr=ar.ob)(e),mr=(e,A)=>(mr=ar.pb)(e,A),Cr=()=>(Cr=ar.qb)(),br=(e,A)=>(br=ar.rb)(e,A),Ir=e=>(Ir=ar.sb)(e),wr=e=>(wr=ar.tb)(e),kr=()=>(kr=ar.ub)(),xr=r.dynCall_ii=(e,A)=>(xr=r.dynCall_ii=ar.vb)(e,A),vr=e=>(vr=ar.wb)(e),Br=()=>(Br=ar.xb)(),yr=e=>(yr=ar.yb)(e),Er=()=>(Er=ar.zb)();return r.stackSave=()=>kr(),r.stackRestore=e=>Ir(e),r.stackAlloc=e=>wr(e),r.setValue=function(e,A,t="i8"){switch(t.endsWith("*")&&(t="*"),t){case"i1":case"i8":S()[e>>>0]=A;break;case"i16":O()[e>>>1>>>0]=A;break;case"i32":Y()[e>>>2>>>0]=A;break;case"i64":D[e>>>3]=BigInt(A);break;case"float":R()[e>>>2>>>0]=A;break;case"double":j()[e>>>3>>>0]=A;break;case"*":H()[e>>>2>>>0]=A;break;default:_(`invalid type for setValue: ${t}`)}},r.getValue=function(e,A="i8"){switch(A.endsWith("*")&&(A="*"),A){case"i1":case"i8":return S()[e>>>0];case"i16":return O()[e>>>1>>>0];case"i32":return Y()[e>>>2>>>0];case"i64":return D[e>>>3];case"float":return R()[e>>>2>>>0];case"double":return j()[e>>>3>>>0];case"*":return H()[e>>>2>>>0];default:_(`invalid type for getValue: ${A}`)}},r.UTF8ToString=Me,r.stringToUTF8=Pe,r.lengthBytesUTF8=Te,function e(){if(0<X)q=e;else if(i)A(r),K();else{for(;0<ae.length;)ae.shift()(r);0<X?q=e:(r.calledRun=!0,z||(K(),A(r)))}}(),r.PTR_SIZE=4,n},Te=Qe,Pe=globalThis.self?.name?.startsWith("em-pthread"),Pe&&Qe()})),Cl=ee((()=>{xe(),ze=typeof location>"u"?void 0:location.origin,Fe=import.meta.url>"file:"&&import.meta.url<"file;",Se=()=>{if(Fe){let e=URL;return new URL(new e("ort.bundle.min.mjs",import.meta.url).href,ze).href}return import.meta.url},Ne=Se(),Oe=()=>{if(Ne&&!Ne.startsWith("blob:"))return Ne.substring(0,Ne.lastIndexOf("/")+1)},Le=(e,A)=>{try{let t=A??Ne;return(t?new URL(e,t):new URL(e)).origin===ze}catch{return!1}},Ye=(e,A)=>{let t=A??Ne;try{return(t?new URL(e,t):new URL(e)).href}catch{return}},He=(e,A)=>`${A??"./"}${e}`,Re=async e=>{let A=await(await fetch(e,{credentials:"same-origin"})).blob();return URL.createObjectURL(A)},je=async e=>(await import(e)).default,Ve=(Me(),te(ve)).default,We=async()=>{if(!Ne)throw new Error("Failed to load proxy worker: cannot determine the script source URL.");if(Le(Ne))return[void 0,Ve()];let e=await Re(Ne);return[e,Ve(e)]},Ue=(ml(),te(Ge)).default,Ke=async(e,A,t)=>{if(!e&&!A&&Ue&&Ne&&Le(Ne))return[void 0,Ue];{let r="ort-wasm-simd-threaded.jsep.mjs",n=e??Ye(r,A),a=t&&n&&!Le(n,A),s=a?await Re(n):n??He(r,A);return[a?s:void 0,await je(s)]}}})),bl=ee((()=>{Cl(),Xe=!1,qe=!1,Je=!1,_e=()=>{if(typeof SharedArrayBuffer>"u")return!1;try{return typeof MessageChannel<"u"&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},$e=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},eA=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,19,1,17,0,65,1,253,15,65,2,253,15,65,3,253,15,253,147,2,11]))}catch{return!1}},AA=async e=>{if(Xe)return Promise.resolve();if(qe)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Je)throw new Error("previous call to 'initializeWebAssembly()' failed.");qe=!0;let A=e.initTimeout,t=e.numThreads;if(!1!==e.simd)if("relaxed"===e.simd){if(!eA())throw new Error("Relaxed WebAssembly SIMD is not supported in the current environment.")}else if(!$e())throw new Error("WebAssembly SIMD is not supported in the current environment.");let r=_e();t>1&&!r&&(typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+t+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."),e.numThreads=t=1);let n=e.wasmPaths,a="string"==typeof n?n:void 0,s=n?.mjs,i=s?.href??s,o=n?.wasm,l=o?.href??o,c=e.wasmBinary,[g,u]=await Ke(i,a,t>1),d=!1,f=[];if(A>0&&f.push(new Promise((e=>{setTimeout((()=>{d=!0,e()}),A)}))),f.push(new Promise(((e,A)=>{let r={numThreads:t};if(c)r.wasmBinary=c;else if(l||a)r.locateFile=e=>l??a+e;else if(i&&0!==i.indexOf("blob:"))r.locateFile=e=>new URL(e,i).href;else if(g){let e=Oe();e&&(r.locateFile=A=>e+A)}u(r).then((A=>{qe=!1,Xe=!0,Ze=A,e(),g&&URL.revokeObjectURL(g)}),(e=>{qe=!1,Je=!0,A(e)}))}))),await Promise.race(f),d)throw new Error(`WebAssembly backend initializing failed due to timeout: ${A}ms`)},tA=()=>{if(Xe&&Ze)return Ze;throw new Error("WebAssembly is not initialized yet.")}})),Il=ee((()=>{bl(),rA=(e,A)=>{let t=tA(),r=t.lengthBytesUTF8(e)+1,n=t._malloc(r);return t.stringToUTF8(e,n,r),A.push(n),n},nA=(e,A,t,r)=>{if("object"==typeof e&&null!==e){if(t.has(e))throw new Error("Circular reference in options");t.add(e)}Object.entries(e).forEach((([e,n])=>{let a=A?A+e:e;if("object"==typeof n)nA(n,a+".",t,r);else if("string"==typeof n||"number"==typeof n)r(a,n.toString());else{if("boolean"!=typeof n)throw new Error("Can't handle extra config type: "+typeof n);r(a,n?"1":"0")}}))},aA=e=>{let A=tA(),t=A.stackSave();try{let t=A.PTR_SIZE,r=A.stackAlloc(2*t);A._OrtGetLastError(r,r+t);let n=Number(A.getValue(r,4===t?"i32":"i64")),a=A.getValue(r+t,"*"),s=a?A.UTF8ToString(a):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${s}`)}finally{A.stackRestore(t)}}})),wl=ee((()=>{bl(),Il(),sA=e=>{let A=tA(),t=0,r=[],n=e||{};try{if(void 0===e?.logSeverityLevel)n.logSeverityLevel=2;else if("number"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===e?.logVerbosityLevel)n.logVerbosityLevel=0;else if("number"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===e?.terminate&&(n.terminate=!1);let a=0;return void 0!==e?.tag&&(a=rA(e.tag,r)),t=A._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,a),0===t&&aA("Can't create run options."),void 0!==e?.extra&&nA(e.extra,"",new WeakSet,((e,n)=>{let a=rA(e,r),s=rA(n,r);0!==A._OrtAddRunConfigEntry(t,a,s)&&aA(`Can't set a run config entry: ${e} - ${n}.`)})),[t,r]}catch(e){throw 0!==t&&A._OrtReleaseRunOptions(t),r.forEach((e=>A._free(e))),e}}})),kl=ee((()=>{bl(),Il(),iA=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},oA=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},lA=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let A=e.extra.session;A.use_ort_model_bytes_directly||(A.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some((e=>"webgpu"===("string"==typeof e?e:e.name)))&&(e.enableMemPattern=!1)},cA=(e,A,t,r)=>{let n=rA(A,r),a=rA(t,r);0!==tA()._OrtAddSessionConfigEntry(e,n,a)&&aA(`Can't set a session config entry: ${A} - ${t}.`)},gA=async(e,A,t)=>{for(let r of A){let A="string"==typeof r?r:r.name,n=[];switch(A){case"webnn":if(A="WEBNN","string"!=typeof r){let A=r?.deviceType;A&&cA(e,"deviceType",A,t)}break;case"webgpu":if(A="JS","string"!=typeof r){let A=r;if(A?.preferredLayout){if("NCHW"!==A.preferredLayout&&"NHWC"!==A.preferredLayout)throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${A.preferredLayout}`);cA(e,"preferredLayout",A.preferredLayout,t)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${A}`)}let a=rA(A,t),s=n.length,i=0,o=0;if(s>0){i=tA()._malloc(s*tA().PTR_SIZE),t.push(i),o=tA()._malloc(s*tA().PTR_SIZE),t.push(o);for(let e=0;e<s;e++)tA().setValue(i+e*tA().PTR_SIZE,n[e][0],"*"),tA().setValue(o+e*tA().PTR_SIZE,n[e][1],"*")}0!==await tA()._OrtAppendExecutionProvider(e,a,i,o,s)&&aA(`Can't append execution provider: ${A}.`)}},uA=async e=>{let A=tA(),t=0,r=[],n=e||{};lA(n);try{let e=iA(n.graphOptimizationLevel??"all"),a=oA(n.executionMode??"sequential"),s="string"==typeof n.logId?rA(n.logId,r):0,i=n.logSeverityLevel??2;if(!Number.isInteger(i)||i<0||i>4)throw new Error(`log serverity level is not valid: ${i}`);let o=n.logVerbosityLevel??0;if(!Number.isInteger(o)||o<0||o>4)throw new Error(`log verbosity level is not valid: ${o}`);let l="string"==typeof n.optimizedModelFilePath?rA(n.optimizedModelFilePath,r):0;if(t=A._OrtCreateSessionOptions(e,!!n.enableCpuMemArena,!!n.enableMemPattern,a,!!n.enableProfiling,0,s,i,o,l),0===t&&aA("Can't create session options."),n.executionProviders&&await gA(t,n.executionProviders,r),void 0!==n.enableGraphCapture){if("boolean"!=typeof n.enableGraphCapture)throw new Error(`enableGraphCapture must be a boolean value: ${n.enableGraphCapture}`);cA(t,"enableGraphCapture",n.enableGraphCapture.toString(),r)}if(n.freeDimensionOverrides)for(let[e,a]of Object.entries(n.freeDimensionOverrides)){if("string"!=typeof e)throw new Error(`free dimension override name must be a string: ${e}`);if("number"!=typeof a||!Number.isInteger(a)||a<0)throw new Error(`free dimension override value must be a non-negative integer: ${a}`);let n=rA(e,r);0!==A._OrtAddFreeDimensionOverride(t,n,a)&&aA(`Can't set a free dimension override: ${e} - ${a}.`)}return void 0!==n.extra&&nA(n.extra,"",new WeakSet,((e,A)=>{cA(t,e,A,r)})),[t,r]}catch(e){throw 0!==t&&0!==A._OrtReleaseSessionOptions(t)&&aA("Can't release session options."),r.forEach((e=>A._free(e))),e}}})),xl=ee((()=>{dA=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;case"int4":return 22;case"uint4":return 21;default:throw new Error(`unsupported data type: ${e}`)}},fA=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";case 22:return"int4";case 21:return"uint4";default:throw new Error(`unsupported data type: ${e}`)}},pA=(e,A)=>{let t=[-1,4,1,1,2,2,4,8,-1,1,2,8,4,8,-1,-1,-1,-1,-1,-1,-1,.5,.5][e],r="number"==typeof A?A:A.reduce(((e,A)=>e*A),1);return t>0?Math.ceil(r*t):void 0},hA=e=>{switch(e){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":case"bool":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},mA=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},CA=e=>"float32"===e||"float16"===e||"int32"===e||"int64"===e||"uint32"===e||"uint8"===e||"bool"===e||"uint4"===e||"int4"===e,bA=e=>"float32"===e||"float16"===e||"int32"===e||"int64"===e||"uint32"===e||"uint64"===e||"int8"===e||"uint8"===e||"bool"===e||"uint4"===e||"int4"===e,IA=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;case"ml-tensor":return 5;default:throw new Error(`unsupported data location: ${e}`)}}})),vl=ee((()=>{xe(),wA=async e=>{if("string"==typeof e){let A=await fetch(e);if(!A.ok)throw new Error(`failed to load external data file: ${e}`);let t=A.headers.get("Content-Length"),r=t?parseInt(t,10):0;if(r<1073741824)return new Uint8Array(await A.arrayBuffer());{if(!A.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let t,n=A.body.getReader();try{t=new ArrayBuffer(r)}catch(e){if(!(e instanceof RangeError))throw e;{let e=Math.ceil(r/65536);t=new WebAssembly.Memory({initial:e,maximum:e}).buffer}}let a=0;for(;;){let{done:e,value:A}=await n.read();if(e)break;let r=A.byteLength;new Uint8Array(t,a,r).set(A),a+=r}return new Uint8Array(t,0,r)}}return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)}})),Bl=ee((()=>{xl(),kA=["V","I","W","E","F"],xA=(e,A)=>{console.log(`[${kA[e]},${(new Date).toISOString()}]${A}`)},yA=(e,A)=>{vA=e,BA=A},EA=(e,A)=>{let t=mA(e);t>=mA(vA)&&xA(t,"function"==typeof A?A():A)},MA=(...e)=>{BA&&EA(...e)}})),yl=ee((()=>{GA=class{static calcMatMulShape(e,A){return e[1]!==A[0]?void 0:[e[0],A[1]]}},DA=class{static calcShape(e,A,t=!1){let r=e.length,n=A.length;if(0===r)return A;if(0===n)return e;let a=Math.max(e.length,A.length),s=new Array(a);if(t){if(r<2||n<2)return;let t=GA.calcMatMulShape([e[r-2],e[r-1]],[A[n-2],A[n-1]]);if(void 0===t)return;[s[a-2],s[a-1]]=t}for(let i=t?3:1;i<=a;i++){let t=r-i<0?1:e[r-i],o=n-i<0?1:A[n-i];if(t!==o&&t>1&&o>1)return;let l=Math.max(t,o);if(t&&o)s[a-i]=Math.max(t,o);else{if(l>1)return;s[a-i]=0}}return s}static isValidBroadcast(e,A){let t=e.length,r=A.length;if(t>r)return!1;for(let n=1;n<=t;n++)if(1!==e[t-n]&&e[t-n]!==A[r-n])return!1;return!0}},QA=class e{static size(A){return e.getSizeFromDimensionRange(A,0,A.length)}static convertShape(e,A=4){let t=e.length;if(0===t)return[];let r=new Array(t),n=t-1;for(;n>=0;){if(e[n]%A==0){r[n]=e[n]/A;break}if(A%e[n]!=0)throw new Error("cannot convert shape");r[n]=1,A/=e[n],n--}for(n--;n>=0;n--)r[n]=e[n];return r}static sizeFromDimension(A,t){if(t<0||t>A.length)throw new Error(`invalid dimension of ${t} for sizeFromDimension as Tensor has ${A.length} dimensions.`);return e.getSizeFromDimensionRange(A,t,A.length)}static sizeToDimension(A,t){if(t<0||t>A.length)throw new Error(`invalid dimension of ${t} for sizeToDimension as Tensor has ${A.length} dimensions.`);return e.getSizeFromDimensionRange(A,0,t)}static getSizeFromDimensionRange(e,A,t){let r=1;for(let n=A;n<t;n++){if(e[n]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");r*=Number(e[n])}return r}static computeStrides(e){let A=e.length;if(0===A)return[];if(1===A)return[1];let t=new Array(A);t[A-1]=1,t[A-2]=e[A-1];for(let r=A-3;r>=0;--r)t[r]=t[r+1]*e[r+1];return t}static normalizeAxis(e,A){if(e<-A&&e>=A)throw new Error("unsupported axis for this operation.");return e<0?e+A:e}static normalizeAxes(e,A){return e.map((t=>this.normalizeAxis(t,A??e.length)))}static sortBasedOnPerm(e,A){return A?A.map((A=>e[A])):e.slice().reverse()}static padShape(e,A){let t=e.length;return e.map(((e,r)=>e+A[r]+A[r+t]))}static areEqual(e,A){return e.length===A.length&&e.every(((e,t)=>e===A[t]))}},TA=class e{static adjustPoolAttributes(e,A,t,r,n,a){if(!e&&t.length!==A.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(e)for(let e=0;e<A.length-2;e++)e>=t.length?t.push(A[e+2]):t[e]=A[e+2];for(let e=0;e<t.length;e++)if(e<r.length){if(r[e]<0)throw new Error("strides should be greater than or equal to 1")}else r.push(1);for(let e=0;e<t.length;e++)if(e<n.length){if(n[e]<0)throw new Error("dilations should be greater than or equal to 1")}else n.push(1);for(let e=0;e<2*t.length;e++)if(e<a.length){if(a[e]<0)throw new Error("pad should be greater than or equal to 1")}else a.push(0);for(let e=0;e<t.length;e++){if(t[e]<=0)throw new Error("kernel shapes need to be greater than 0");if(a[e]>=t[e]||a[e+t.length]>=t[e])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(A,t,r,n,a,s,i){if(i){if(a.length!==2*(A.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(t.length!==A.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==A.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let o=0;o<A.length-2;o++)e.adjustPadAndReturnShape(A[o+(s?1:2)],t[o],r[o],n[o],a,o,o+A.length-2,i)}}static computePoolOutputShape(A,t,r,n,a,s,i){if(t.length<=0)throw new Error("input shape must be of size greater than 0");let o=[t[0],t[1]];return e.computeShapeHelper(A,t,o,r,n,a,s,i),o}static computeConvOutputShape(A,t,r,n,a,s,i){if(A.length<=0||t.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let o=[A[0],t[0]];return e.computeShapeHelper(!1,A,o,r,n,a,s,i),o}static computeShapeHelper(A,t,r,n,a,s,i,o){if(A)for(let e=0;e<t.length-2;e++)r.push(1);else for(let A=0;A<t.length-2;A++)r.push(e.adjustPadAndReturnShape(t[A+2],n[A],a[A],s[A],i,A,A+t.length-2,o))}static adjustPadAndReturnShape(e,A,t,r,n,a,s,i){let o=t*(r-1)+1;if(!i||"NOTSET"===i)return Math.floor((e+n[a]+n[s]-o)/A+1);switch(i){case"VALID":return n[a]=0,n[s]=0,Math.floor((e-o)/A+1);case"SAME_LOWER":case"SAME_UPPER":if(1!==t)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let t=((e+A-1)/A-1)*A+r-e;return n[a]=Math.floor("SAME_LOWER"===i?(t+1)/2:t/2),n[s]=t-n[a],Math.floor((e+t-r)/A+1)}default:throw new Error("Unsupported AutoPad type")}}},PA=class{static getShapeOfGemmResult(e,A,t,r,n){if(2!==e.length||2!==t.length)throw new Error("shape need to be of size 2");let a,s,i;A?(a=e[1],s=e[0]):(a=e[0],s=e[1]);let o=-1;if(r?(i=t[0],o=1):(i=t[1],o=0),t[o]!==s)throw new Error("dimension mismatch");if(a<=0||i<=0||s<=0)throw new Error("invalid shape specified");if(n&&!DA.isValidBroadcast(n,[a,i]))throw new Error("gemm: invalid bias shape for broadcast");return[a,i,s]}},zA=-34028234663852886e22,FA=34028234663852886e22})),El=ee((()=>{xl(),SA=(e,A)=>new(hA(A))(e)})),Ml=ee((()=>{Bl(),NA=(e,A=!0)=>{if(e.byteLength%8!=0)throw new Error("Invalid Uint8Array length - must be a multiple of 8 (BigInt).");let t=e.byteLength/8,r=new BigInt64Array(e.buffer,e.byteOffset,t),n=new Int32Array(t);for(let e=0;e<t;e++){let A=r[e];if(A>2147483647n||A<-2147483648n)throw new Error(`Overflow occurred when converting BigInt to Int32 at index ${e}: ${A}`);n[e]=Number(A)}return A?new Uint8Array(n.buffer):n},OA=(e,A=!0)=>{if(e.byteLength%4!=0)throw new Error("Invalid Uint8Array length - must be a multiple of 4 (Int32).");let t=e.byteLength/4,r=new Int32Array(e.buffer,e.byteOffset,t),n=BigInt64Array.from(r,BigInt);return A?new Uint8Array(n.buffer):n},LA=1,YA=()=>LA++,HA=new Map([["float32",32],["float16",16],["int32",32],["uint32",32],["int64",64],["uint64",64],["int8",8],["uint8",8],["int4",4],["uint4",4]]),RA=(e,A)=>{let t=HA.get(e);if(!t)throw new Error("Unsupported data type.");return A.length>0?Math.ceil(A.reduce(((e,A)=>e*A))*t/8):0},jA=class{constructor(e){this.shouldConvertInt64toInt32=!1,this.isInt64ToInt32Converted=!1;let{sessionId:A,context:t,tensor:r,dataType:n,shape:a,shouldConvertInt64toInt32:s=!1}=e;this.sessionId=A,this.mlContext=t,this.mlTensor=r,this.dataType=n,this.tensorShape=a,this.shouldConvertInt64toInt32=s}get tensor(){return this.mlTensor}get type(){return this.dataType}get shape(){return this.tensorShape}get byteLength(){return RA(this.dataType,this.tensorShape)}destroy(){MA("verbose",(()=>"[WebNN] TensorWrapper.destroy")),this.mlTensor.destroy()}write(e){this.mlContext.writeTensor(this.mlTensor,e)}async read(e,A){if(e){let e=await this.mlContext.readTensor(this.mlTensor),t=OA(new Uint8Array(e));return A?void(A instanceof ArrayBuffer?new Uint8Array(A):new Uint8Array(A.buffer,A.byteOffset,A.byteLength)).set(t):t.buffer}return A?this.mlContext.readTensor(this.mlTensor,A):this.mlContext.readTensor(this.mlTensor)}canReuseTensor(e,A,t){return this.mlContext===e&&this.dataType===A&&this.tensorShape.length===t.length&&this.tensorShape.every(((e,A)=>e===t[A]))}setIsInt64ToInt32Converted(e){this.isInt64ToInt32Converted=e}},VA=class{constructor(e,A){this.tensorManager=e,this.wrapper=A}get tensorWrapper(){return this.wrapper}releaseTensor(){this.tensorWrapper&&(this.tensorManager.releaseTensor(this.tensorWrapper),this.wrapper=void 0)}async ensureTensor(e,A,t,r){let n=A,a=this.tensorManager.getMLContext(e),s="int64"===n&&!a.opSupportLimits().input.dataTypes.includes("int64");if(s&&(n="int32",MA("verbose",(()=>"[WebNN] TensorIdTracker.ensureTensor: convert dataType from int64 to int32"))),this.wrapper){if(this.wrapper.canReuseTensor(a,n,t))return this.wrapper.tensor;if(r){if(this.wrapper.byteLength!==RA(n,t))throw new Error("Unable to copy data to tensor with different size.");this.activeUpload=new Uint8Array(await this.wrapper.read())}this.tensorManager.releaseTensor(this.wrapper)}let i=typeof MLTensorUsage>"u"?void 0:MLTensorUsage.READ|MLTensorUsage.WRITE;return this.wrapper=await this.tensorManager.getCachedTensor(e,n,t,i,!0,!0,s),r&&this.activeUpload&&(this.wrapper.write(this.activeUpload),this.activeUpload=void 0),this.wrapper.tensor}upload(e){let A=e;if(this.wrapper){if(this.wrapper.shouldConvertInt64toInt32&&(A=NA(e,!0),this.wrapper.setIsInt64ToInt32Converted(!0)),A.byteLength===this.wrapper.byteLength)return void this.wrapper.write(A);MA("verbose",(()=>"Data size does not match tensor size. Releasing tensor.")),this.releaseTensor()}this.activeUpload?this.activeUpload.set(A):this.activeUpload=new Uint8Array(A)}async download(e){if(this.activeUpload){let A=this.wrapper?.isInt64ToInt32Converted?OA(this.activeUpload):this.activeUpload;return e?void(e instanceof ArrayBuffer?new Uint8Array(e).set(A):new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(A)):A.buffer}if(!this.wrapper)throw new Error("Tensor has not been created.");return e?this.wrapper.read(this.wrapper?.shouldConvertInt64toInt32,e):this.wrapper.read(this.wrapper?.shouldConvertInt64toInt32)}},WA=class{constructor(e){this.backend=e,this.tensorTrackersById=new Map,this.freeTensors=[],this.externalTensors=new Set}getMLContext(e){let A=this.backend.getMLContext(e);if(!A)throw new Error("MLContext not found for session.");return A}reserveTensorId(){let e=YA();return this.tensorTrackersById.set(e,new VA(this)),e}releaseTensorId(e){let A=this.tensorTrackersById.get(e);A&&(this.tensorTrackersById.delete(e),A.tensorWrapper&&this.releaseTensor(A.tensorWrapper))}async ensureTensor(e,A,t,r,n){MA("verbose",(()=>`[WebNN] TensorManager.ensureTensor {tensorId: ${A}, dataType: ${t}, shape: ${r}, copyOld: ${n}}`));let a=this.tensorTrackersById.get(A);if(!a)throw new Error("Tensor not found.");return a.ensureTensor(e,t,r,n)}upload(e,A){let t=this.tensorTrackersById.get(e);if(!t)throw new Error("Tensor not found.");t.upload(A)}async download(e,A){MA("verbose",(()=>`[WebNN] TensorManager.download {tensorId: ${e}, dstBuffer: ${A?.byteLength}}`));let t=this.tensorTrackersById.get(e);if(!t)throw new Error("Tensor not found.");return t.download(A)}releaseTensorsForSession(e){for(let A of this.freeTensors)A.sessionId===e&&A.destroy();this.freeTensors=this.freeTensors.filter((A=>A.sessionId!==e))}registerTensor(e,A,t,r){let n=this.getMLContext(e),a=YA(),s=new jA({sessionId:e,context:n,tensor:A,dataType:t,shape:r});return this.tensorTrackersById.set(a,new VA(this,s)),this.externalTensors.add(s),a}async getCachedTensor(e,A,t,r,n,a,s=!1){let i=this.getMLContext(e);for(let[r,n]of this.freeTensors.entries())if(n.canReuseTensor(i,A,t)){MA("verbose",(()=>`[WebNN] Reusing tensor {dataType: ${A}, shape: ${t}}`));let n=this.freeTensors.splice(r,1)[0];return n.sessionId=e,n}MA("verbose",(()=>`[WebNN] MLContext.createTensor {dataType: ${A}, shape: ${t}}`));let o=await i.createTensor({dataType:A,shape:t,dimensions:t,usage:r,writable:n,readable:a});return new jA({sessionId:e,context:i,tensor:o,dataType:A,shape:t,shouldConvertInt64toInt32:s})}releaseTensor(e){this.externalTensors.has(e)&&this.externalTensors.delete(e),this.freeTensors.push(e)}},UA=(...e)=>new WA(...e)})),Gl=ee((()=>{xl(),bl(),El(),Ml(),Bl(),KA=new Map([[1,"float32"],[10,"float16"],[6,"int32"],[12,"uint32"],[7,"int64"],[13,"uint64"],[22,"int4"],[21,"uint4"],[3,"int8"],[2,"uint8"],[9,"uint8"]]),ZA=(e,A)=>{if(e===A)return!0;if(void 0===e||void 0===A)return!1;let t=Object.keys(e).sort(),r=Object.keys(A).sort();return t.length===r.length&&t.every(((t,n)=>t===r[n]&&e[t]===A[t]))},XA=class{constructor(e){this.tensorManager=UA(this),this.mlContextBySessionId=new Map,this.sessionIdsByMLContext=new Map,this.mlContextCache=[],this.sessionGraphInputs=new Map,this.temporaryGraphInputs=[],this.temporarySessionTensorIds=new Map,yA(e.logLevel,!!e.debug)}get currentSessionId(){if(void 0===this.activeSessionId)throw new Error("No active session");return this.activeSessionId}onRunStart(e){MA("verbose",(()=>`[WebNN] onRunStart {sessionId: ${e}}`)),this.activeSessionId=e}onRunEnd(e){MA("verbose",(()=>`[WebNN] onRunEnd {sessionId: ${e}}`));let A=this.temporarySessionTensorIds.get(e);if(A){for(let e of A)MA("verbose",(()=>`[WebNN] releasing temporary tensor {tensorId: ${e}}`)),this.tensorManager.releaseTensorId(e);this.temporarySessionTensorIds.delete(e),this.activeSessionId=void 0}}async createMLContext(e){if(e instanceof GPUDevice){let A=this.mlContextCache.findIndex((A=>A.gpuDevice===e));if(-1!==A)return this.mlContextCache[A].mlContext;{let A=await navigator.ml.createContext(e);return this.mlContextCache.push({gpuDevice:e,mlContext:A}),A}}if(void 0===e){let e=this.mlContextCache.findIndex((e=>void 0===e.options&&void 0===e.gpuDevice));if(-1!==e)return this.mlContextCache[e].mlContext;{let e=await navigator.ml.createContext();return this.mlContextCache.push({mlContext:e}),e}}let A=this.mlContextCache.findIndex((A=>ZA(A.options,e)));if(-1!==A)return this.mlContextCache[A].mlContext;{let A=await navigator.ml.createContext(e);return this.mlContextCache.push({options:e,mlContext:A}),A}}registerMLContext(e,A){this.mlContextBySessionId.set(e,A);let t=this.sessionIdsByMLContext.get(A);t||(t=new Set,this.sessionIdsByMLContext.set(A,t)),t.add(e),this.temporaryGraphInputs.length>0&&(this.sessionGraphInputs.set(e,this.temporaryGraphInputs),this.temporaryGraphInputs=[])}onReleaseSession(e){this.sessionGraphInputs.delete(e);let A=this.mlContextBySessionId.get(e);if(!A)return;this.tensorManager.releaseTensorsForSession(e),this.mlContextBySessionId.delete(e);let t=this.sessionIdsByMLContext.get(A);if(t.delete(e),0===t.size){this.sessionIdsByMLContext.delete(A);let e=this.mlContextCache.findIndex((e=>e.mlContext===A));-1!==e&&this.mlContextCache.splice(e,1)}}getMLContext(e){return this.mlContextBySessionId.get(e)}reserveTensorId(){return this.tensorManager.reserveTensorId()}releaseTensorId(e){MA("verbose",(()=>`[WebNN] releaseTensorId {tensorId: ${e}}`)),this.tensorManager.releaseTensorId(e)}async ensureTensor(e,A,t,r,n){let a=KA.get(t);if(!a)throw new Error(`Unsupported ONNX data type: ${t}`);return this.tensorManager.ensureTensor(e??this.currentSessionId,A,a,r,n)}async createTemporaryTensor(e,A,t){MA("verbose",(()=>`[WebNN] createTemporaryTensor {onnxDataType: ${A}, shape: ${t}}`));let r=KA.get(A);if(!r)throw new Error(`Unsupported ONNX data type: ${A}`);let n=this.tensorManager.reserveTensorId();await this.tensorManager.ensureTensor(e,n,r,t,!1);let a=this.temporarySessionTensorIds.get(e);return a?a.push(n):this.temporarySessionTensorIds.set(e,[n]),n}uploadTensor(e,A){if(!tA().shouldTransferToMLTensor)throw new Error("Trying to upload to a MLTensor while shouldTransferToMLTensor is false");MA("verbose",(()=>`[WebNN] uploadTensor {tensorId: ${e}, data: ${A.byteLength}}`)),this.tensorManager.upload(e,A)}async downloadTensor(e,A){return this.tensorManager.download(e,A)}createMLTensorDownloader(e,A){return async()=>{let t=await this.tensorManager.download(e);return SA(t,A)}}registerMLTensor(e,A,t,r){let n=KA.get(t);if(!n)throw new Error(`Unsupported ONNX data type: ${t}`);let a=this.tensorManager.registerTensor(e,A,n,r);return MA("verbose",(()=>`[WebNN] registerMLTensor {tensor: ${A}, dataType: ${n}, dimensions: ${r}} -> {tensorId: ${a}}`)),a}registerMLConstant(e,A,t,r,n,a,s=!1){if(!a)throw new Error("External mounted files are not available.");let i=e;e.startsWith("./")&&(i=e.substring(2));let o=a.get(i);if(!o)throw new Error(`File with name ${i} not found in preloaded files.`);if(A+t>o.byteLength)throw new Error("Out of bounds: data offset and length exceed the external file data size.");let l,c=o.slice(A,A+t).buffer;switch(n.dataType){case"float32":l=new Float32Array(c);break;case"float16":l=typeof Float16Array<"u"&&Float16Array.from?new Float16Array(c):new Uint16Array(c);break;case"int32":l=new Int32Array(c);break;case"uint32":l=new Uint32Array(c);break;case"int64":s?(l=NA(new Uint8Array(c),!1),n.dataType="int32"):l=new BigInt64Array(c);break;case"uint64":l=new BigUint64Array(c);break;case"int8":l=new Int8Array(c);break;case"int4":case"uint4":case"uint8":l=new Uint8Array(c);break;default:throw new Error(`Unsupported data type: ${n.dataType} in creating WebNN Constant from external data.`)}return MA("verbose",(()=>`[WebNN] registerMLConstant {dataType: ${n.dataType}, shape: ${n.shape}}} ${s?"(Note: it was int64 data type and registered to int32 as workaround)":""}`)),r.constant(n,l)}registerGraphInput(e){this.temporaryGraphInputs.push(e)}isGraphInput(e,A){let t=this.sessionGraphInputs.get(e);return!!t&&t.includes(A)}isInt64Supported(e){return!!this.mlContextBySessionId.get(e)?.opSupportLimits().input.dataTypes.includes("int64")}flush(){}}})),Dl=ee((()=>{})),Ql=ee((()=>{Bl(),Dl(),qA=new Map([[64,250],[128,200],[256,200],[512,200],[2048,230],[4096,200],[8192,50],[16384,50],[32768,50],[65536,50],[131072,50],[262144,50],[524288,50],[1048576,50],[2097152,30],[4194304,20],[8388608,10],[12582912,10],[16777216,10],[26214400,15],[33554432,22],[44236800,2],[58982400,6],[67108864,6],[134217728,6],[167772160,6]]),JA=[],_A=e=>16*Math.ceil(Number(e)/16),$A=e=>{for(let A=0;A<JA.length;A++){let t=JA[A];if(e<=t)return t}return 16*Math.ceil(e/16)},et=1,At=()=>et++,tt=async(e,A,t,r)=>{let n=_A(t),a=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let s=e.getCommandEncoder();e.endComputePass(),s.copyBufferToBuffer(A,0,a,0,n),e.flush(),await a.mapAsync(GPUMapMode.READ);let i=a.getMappedRange();if(r){let e=r();return e.set(new Uint8Array(i,0,t)),e}return new Uint8Array(i.slice(0,t))}finally{a.destroy()}},rt=class{constructor(e){this.backend=e,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersPending=[],this.capturedPendingBuffers=new Map;for(let[e]of qA)JA.push(e),this.freeBuffers.set(e,[]),this.freeUniformBuffers.set(e,[]);this.sessionCount=0}upload(e,A){let t=A.buffer,r=A.byteOffset,n=A.byteLength,a=_A(n),s=this.storageCache.get(e);if(!s)throw new Error("gpu data for uploading does not exist");if(Number(s.originalSize)!==n)throw new Error(`inconsistent data size. gpu data size=${s.originalSize}, data size=${n}`);let i=this.backend.device.createBuffer({mappedAtCreation:!0,size:a,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),o=i.getMappedRange();new Uint8Array(o).set(new Uint8Array(t,r,n)),i.unmap();let l=this.backend.device.createCommandEncoder();l.copyBufferToBuffer(i,0,s.gpuData.buffer,0,a),this.backend.device.queue.submit([l.finish()]),i.destroy(),MA("verbose",(()=>`[WebGPU] GpuDataManager.upload(id=${e})`))}memcpy(e,A){let t=this.storageCache.get(e);if(!t)throw new Error("source gpu data for memcpy does not exist");let r=this.storageCache.get(A);if(!r)throw new Error("destination gpu data for memcpy does not exist");if(t.originalSize!==r.originalSize)throw new Error("inconsistent source and destination gpu data size");let n=_A(t.originalSize),a=this.backend.getCommandEncoder();this.backend.endComputePass(),a.copyBufferToBuffer(t.gpuData.buffer,0,r.gpuData.buffer,0,n)}registerExternalBuffer(e,A,t){let r;if(t){if(r=t[0],e===t[1])return MA("verbose",(()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${A}) => id=${r}, buffer is the same, skip.`)),r;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error("Registering a different external buffer under graph capture mode is not supported yet.\n             Please use the previous external buffer!")}else r=At();return this.storageCache.set(r,{gpuData:{id:r,type:0,buffer:e},originalSize:A}),MA("verbose",(()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${A}) => id=${r}, registered.`)),r}unregisterExternalBuffer(e){void 0!==e&&(this.storageCache.delete(e),MA("verbose",(()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${e}`)))}create(e,A=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let t,r=$A(e),n=(A&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,a=(A&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(n||a){let e=(n?this.freeBuffers:this.freeUniformBuffers).get(r);t=e&&e.length>0?e.pop():this.backend.device.createBuffer({size:r,usage:A})}else t=this.backend.device.createBuffer({size:r,usage:A});let s={id:At(),type:0,buffer:t};return this.storageCache.set(s.id,{gpuData:s,originalSize:Number(e)}),MA("verbose",(()=>`[WebGPU] GpuDataManager.create(size=${e}) => id=${s.id}`)),s}get(e){return this.storageCache.get(e)?.gpuData}release(e){let A="bigint"==typeof e?Number(e):e,t=this.storageCache.get(A);if(!t){if(0===this.storageCache.size)return 0;throw new Error("releasing data does not exist")}return MA("verbose",(()=>`[WebGPU] GpuDataManager.release(id=${A}), gpuDataId=${t.gpuData.id}`)),this.storageCache.delete(A),this.buffersPending.push(t.gpuData.buffer),t.originalSize}async download(e,A){let t=this.storageCache.get(Number(e));if(!t)throw new Error("data does not exist");await tt(this.backend,t.gpuData.buffer,t.originalSize,A)}refreshPendingBuffers(){if(0!==this.buffersPending.length)if("default"===this.backend.sessionStatus){for(let e of this.buffersPending){let A=qA.get(e.size);if((e.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let t=this.freeBuffers.get(e.size)||[];void 0===A||t.length>=A?e.destroy():t.push(e)}else if((e.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){let t=this.freeUniformBuffers.get(e.size)||[];void 0===A||t.length>=A?e.destroy():t.push(e)}else e.destroy()}this.buffersPending=[]}else{let e=this.capturedPendingBuffers.get(this.backend.currentSessionId);e||(e=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,e));for(let A of this.buffersPending)e.push(A);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach((e=>{e.forEach((e=>{e.destroy()}))})),this.freeUniformBuffers.forEach((e=>{e.forEach((e=>{e.destroy()}))})),this.storageCache.forEach((e=>{e.gpuData.buffer.destroy()})),this.capturedPendingBuffers.forEach((e=>{e.forEach((e=>{e.destroy()}))})),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onCreateSession(){this.sessionCount+=1}onReleaseSession(e){let A=this.capturedPendingBuffers.get(e);A&&(A.forEach((e=>{e.destroy()})),this.capturedPendingBuffers.delete(e)),this.sessionCount-=1,0===this.sessionCount&&(MA("warning",(()=>"[WebGPU] Clearing webgpu buffer cache")),this.storageCache.forEach((e=>{e.gpuData.buffer.destroy()})),this.storageCache=new Map)}},nt=(...e)=>new rt(...e)})),Tl=ee((()=>{at=class{constructor(e){Object.assign(this,e)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map((e=>`${this[e]}`)).join(";")),this.key}},st=e=>new at(e)})),Pl=ee((()=>{xl(),yl(),it=64,ot=(e,A)=>{if(3===A)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(Number(e)){case 10:return A>1?`vec${A}<f16>`:"f16";case 1:return A>1?`vec${A}<f32>`:"f32";case 6:return A>1?`vec${A}<i32>`:"i32";case 12:return A>1?`vec${A}<u32>`:"u32";case 7:if(A>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(A>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(4!==A)throw new Error("bool must be vec4");return["u32","vec4<bool>"];case 22:return"i32";case 21:return"u32";default:throw new Error(`Unknown data type: ${e}`)}},lt=(e,A=1)=>{let t=ot(e,A);return"string"==typeof t?t:t[0]},ct=(e,A=1)=>{let t=ot(e,A);return"string"==typeof t?t:t[1]},gt=(...e)=>{let A=[];return e.forEach((e=>{0!==e.length&&A.push({type:12,data:e},{type:12,data:QA.computeStrides(e)})})),A},ut=e=>e%4==0?4:e%2==0?2:1,dt=(e="f32",A,t="0")=>A&&1!==A?`vec${A}<${e}>(${t})`:`${e}(${t})`,ft=(e,A,t)=>"f32"===e?t:1===A?`f32(${t})`:`vec${A}<f32>(${t})`,pt=(e,A)=>4===A?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:2===A?`(${e}.x + ${e}.y)`:3===A?`(${e}.x + ${e}.y + ${e}.z)`:e,ht=(e,A,t,r)=>e.startsWith("uniforms.")&&t>4?"string"==typeof A?"f16"===r?`${e}[(${A}) / 8][(${A}) % 8 / 4][(${A}) % 8 % 4]`:`${e}[(${A}) / 4][(${A}) % 4]`:"f16"===r?`${e}[${Math.floor(A/8)}][${Math.floor(A%8/4)}][${A%8%4}]`:`${e}[${Math.floor(A/4)}][${A%4}]`:t>1?`${e}[${A}]`:e,mt=(e,A,t,r,n)=>{let a="number"==typeof t,s=a?t:t.length,i=[...new Array(s).keys()],o=s<2?"u32":s<=4?`vec${s}<u32>`:`array<u32, ${s}>`,l=ot(A,n),c="string"==typeof l?l:l[1],g="string"==typeof l?l:l[0],u={indices:o,value:c,storage:g,tensor:A},d=e=>"string"==typeof e?e:`${e}u`,f={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},p=a?"uniforms.":"",h=`${p}${e}_shape`,m=`${p}${e}_strides`,C="";for(let e=0;e<s-1;e++)C+=`\n    let dim${e} = current / ${ht(m,e,s)};\n    let rest${e} = current % ${ht(m,e,s)};\n    indices[${e}] = dim${e};\n    current = rest${e};\n    `;C+=`indices[${s-1}] = current;`;let b=s<2?"":`\n  fn o2i_${e}(offset: u32) -> ${u.indices} {\n    var indices: ${u.indices};\n    var current = offset;\n    ${C}\n    return indices;\n  }`,I=[];if(s>=2)for(let e=s-1;e>=0;e--)I.push(`${ht(m,e,s)} * (indices[${e}])`);let w=s<2?"":`\n  fn i2o_${e}(indices: ${u.indices}) -> u32 {\n    return ${I.join("+")};\n  }`,k=(...e)=>0===s?"0u":`${u.indices}(${e.map(d).join(",")})`,x=(e,A)=>s<2?`${e}`:`${ht(e,A,s)}`,v={},B=(A,t)=>(()=>{if(u.storage===u.value)return`${e}[${A}]=${t};`;if("vec2<u32>"===u.storage&&"i32"===u.value)return`${e}[${A}]=vec2<u32>(u32(${t}), select(0u, 0xFFFFFFFFu, ${t} < 0));`;if("vec2<u32>"===u.storage&&"u32"===u.value)return`${e}[${A}]=vec2<u32>(u32(${t}), 0u);`;if("u32"===u.storage&&"vec4<bool>"===u.value)return`${e}[${A}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${t}));`;throw new Error(`not supported combination of storage type ${u.storage} and value type ${u.value} yet`)})(),y=A=>(()=>{if(u.storage===u.value)return`${e}[${A}]`;if("vec2<u32>"===u.storage&&"i32"===u.value)return`i32(${e}[${A}].x)`;if("vec2<u32>"===u.storage&&"u32"===u.value)return`u32(${e}[${A}].x)`;if("u32"===u.storage&&"vec4<bool>"===u.value)return`vec4<bool>(bool(${e}[${A}] & 0xFFu), bool(${e}[${A}] & 0xFF00u), bool(${e}[${A}] & 0xFF0000u), bool(${e}[${A}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${u.storage} and value type ${u.value} yet`)})(),E=s<2?"":`\n  fn get_${e}ByIndices(indices: ${u.indices}) -> ${c} {\n    return ${y(`i2o_${e}(indices)`)};\n  }`,M=s<2?"":(()=>{let A=i.map((e=>`d${e}: u32`)).join(", "),t=i.map((e=>`d${e}`)).join(", ");return`\n  fn get_${e}(${A}) -> ${c} {\n    return get_${e}ByIndices(${k(t)});\n  }`})(),G=s<2?"":`\n  fn set_${e}ByIndices(indices: ${u.indices}, value: ${c}) {\n    ${B(`i2o_${e}(indices)`,"value")}\n  }`,D=s<2?"":(()=>{let A=i.map((e=>`d${e}: u32`)).join(", "),t=i.map((e=>`d${e}`)).join(", ");return`\n  fn set_${e}(${A}, value: ${c}) {\n    set_${e}ByIndices(${k(t)}, value);\n  }`})();return{impl:()=>{let e=[],A=!1;return f.offsetToIndices&&(e.push(b),A=!0),f.indicesToOffset&&(e.push(w),A=!0),f.broadcastedIndicesToOffset&&(Object.values(v).forEach((A=>e.push(A))),A=!0),f.set&&(e.push(D),A=!0),f.setByIndices&&(e.push(G),A=!0),f.get&&(e.push(M),A=!0),f.getByIndices&&(e.push(E),A=!0),!a&&A&&e.unshift(`const ${h} = ${u.indices}(${t.join(",")});`,`const ${m} = ${u.indices}(${QA.computeStrides(t).join(",")});`),e.join("\n")},type:u,offsetToIndices:A=>(f.offsetToIndices=!0,s<2?A:`o2i_${e}(${A})`),indicesToOffset:A=>(f.indicesToOffset=!0,s<2?A:`i2o_${e}(${A})`),broadcastedIndicesToOffset:(A,t)=>{f.broadcastedIndicesToOffset=!0;let r=`${t.name}broadcastedIndicesTo${e}Offset`;if(r in v)return`${r}(${A})`;let n=[];for(let e=s-1;e>=0;e--){let A=t.indicesGet("outputIndices",e+t.rank-s);n.push(`${x(m,e)} * (${A} % ${x(h,e)})`)}return v[r]=`fn ${r}(outputIndices: ${t.type.indices}) -> u32 {\n             return ${n.length>0?n.join("+"):"0u"};\n           }`,`${r}(${A})`},indices:k,indicesGet:x,indicesSet:(e,A,t)=>s<2?`${e}=${t};`:`${ht(e,A,s)}=${t};`,set:(...A)=>{if(A.length!==s+1)throw new Error(`indices length must be ${s}`);let t=A[s];if("string"!=typeof t)throw new Error("value must be string");let r=A.slice(0,s).map(d).join(",");return 0===s?B("0u",t):1===s?B(r[0],t):(f.set=!0,f.setByIndices=!0,f.indicesToOffset=!0,`set_${e}(${r}, ${t})`)},setByOffset:B,setByIndices:(A,t)=>s<2?B(A,t):(f.setByIndices=!0,f.indicesToOffset=!0,`set_${e}ByIndices(${A}, ${t});`),get:(...A)=>{if(A.length!==s)throw new Error(`indices length must be ${s}`);let t=A.map(d).join(",");return 0===s?y("0u"):1===s?y(t[0]):(f.get=!0,f.getByIndices=!0,f.indicesToOffset=!0,`get_${e}(${t})`)},getByOffset:y,getByIndices:A=>s<2?y(A):(f.getByIndices=!0,f.indicesToOffset=!0,`get_${e}ByIndices(${A})`),usage:r,name:e,strides:m,shape:h,rank:s}},Ct=(e,A,t,r=1)=>mt(e,A,t,"input",r),bt=(e,A,t,r=1)=>mt(e,A,t,"output",r),It=(e,A,t)=>mt(e,A,t,"atomicOutput",1),wt=(e,A,t,r=1)=>mt(e,A,t,"internal",r),kt=class{constructor(e,A){this.normalizedDispatchGroup=e,this.limits=A,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(e){return`if (global_idx >= ${"number"==typeof e?`${e}u`:e}) { return; }`}mainStart(e=it){let A="number"==typeof e?e:e[0],t="number"==typeof e?1:e[1],r="number"==typeof e?1:e[2];if(A>this.limits.maxComputeWorkgroupSizeX||t>this.limits.maxComputeWorkgroupSizeY||r>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${A}, ${t}, ${r}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(A*t*r>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${A}, ${t}, ${r}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let n=1===this.normalizedDispatchGroup[1]&&1===this.normalizedDispatchGroup[2];return`@compute @workgroup_size(${A}, ${t}, ${r})\n  fn main(${n?"@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(local_invocation_id) local_id : vec3<u32>":"@builtin(global_invocation_id) global_id : vec3<u32>,\n                                             @builtin(local_invocation_id) local_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>"}) {\n    ${n?"let global_idx = global_id.x;\n         let workgroup_index = workgroup_id.x;":`let workgroup_index = workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n             workgroup_id.y * num_workgroups[0] + workgroup_id.x;\n         let global_idx = workgroup_index * ${A*t*r}u + local_idx;`}\n  `}appendVariableUniforms(e){0!==e.rank&&(e.shape.startsWith("uniforms.")&&this.uniforms.push({name:e.shape.replace("uniforms.",""),type:"u32",length:e.rank}),e.strides.startsWith("uniforms.")&&this.uniforms.push({name:e.strides.replace("uniforms.",""),type:"u32",length:e.rank}))}declareVariable(e,A){if("internal"===e.usage)throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(e),this.appendVariableUniforms(e);let t="input"===e.usage?"read":"read_write",r="atomicOutput"===e.usage?"atomic<i32>":e.type.storage;return`@group(0) @binding(${A}) var<storage, ${t}> ${e.name}: array<${r}>;`}declareVariables(...e){return e.map((e=>this.declareVariable(e,this.variableIndex++))).join("\n")}registerInternalVariable(e){if("internal"!==e.usage)throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(e),this.appendVariableUniforms(e)}registerInternalVariables(...e){return e.forEach((e=>this.registerInternalVariable(e))),this}registerUniform(e,A,t=1){return this.uniforms.push({name:e,type:A,length:t}),this}registerUniforms(e){return this.uniforms=this.uniforms.concat(e),this}uniformDeclaration(){if(0===this.uniforms.length)return"";let e=[];for(let{name:A,type:t,length:r}of this.uniforms)if(r&&r>4)"f16"===t?e.push(`@align(16) ${A}:array<mat2x4<${t}>, ${Math.ceil(r/8)}>`):e.push(`${A}:array<vec4<${t}>, ${Math.ceil(r/4)}>`);else{let n=null==r||1===r?t:`vec${r}<${t}>`;e.push(`${A}:${n}`)}return`\n      struct Uniforms { ${e.join(", ")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map((e=>e.impl())).join("\n")+this.internalVariables.map((e=>e.impl())).join("\n")}get variablesInfo(){if(0===this.uniforms.length)return;let e=e=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(e)];return this.uniforms.map((A=>[e(A.type),A.length??1]))}},xt=(e,A)=>new kt(e,A)})),zl=ee((()=>{xl(),yl(),Tl(),Pl(),vt=(e,A)=>{if(!e||1!==e.length)throw new Error("Transpose requires 1 input.");if(0!==A.length&&A.length!==e[0].dims.length)throw new Error(`perm size ${A.length} does not match input rank ${e[0].dims.length}`)},Bt=(e,A)=>0!==A.length?A:[...new Array(e).keys()].reverse(),yt=(e,A)=>QA.sortBasedOnPerm(e,Bt(e.length,A)),Et=(e,A,t,r)=>{let n=`fn perm(i: ${r.type.indices}) -> ${t.type.indices} {\n    var a: ${t.type.indices};`;for(let t=0;t<A;++t)n+=`a[${e[t]}]=i[${t}];`;return n+"return a;}"},Mt=(e,A)=>{let t=[],r=[];for(let n=0;n<e.length;++n)1!==e[n]&&t.push(e[n]),1!==e[A[n]]&&r.push(A[n]);return{newShape:t,newPerm:r}},Gt=(e,A)=>{let t=0;for(let r=0;r<e.length;++r)if(1!==A[e[r]]){if(e[r]<t)return!1;t=e[r]}return!0},Dt=(e,A)=>{let t,r=e.dataType,n=e.dims.length,a=Bt(n,A),s=yt(e.dims,a),i=e.dims,o=s;if(n<2||Gt(a,e.dims))return t=e=>{let A=Ct("input",r,i,4),t=bt("output",r,o,4);return`\n  ${e.registerUniform("output_size","u32").declareVariables(A,t)}\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    output[global_idx] = input[global_idx];\n  }`},{name:"TransposeCopy",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let A=QA.size(s);return{outputs:[{dims:s,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(A/64/4)},programUniforms:[{type:12,data:Math.ceil(A/4)}]}},getShaderSource:t};let{newShape:l,newPerm:c}=Mt(e.dims,a),g=QA.areEqual(c,[2,3,1]),u=QA.areEqual(c,[3,1,2]);if(2===l.length||g||u){i=g?[l[0],l[1]*l[2]]:u?[l[0]*l[1],l[2]]:l,o=[i[1],i[0]];let A=16;return t=e=>{let t=Ct("a",r,i.length),n=bt("output",r,o.length);return`\n  ${e.registerUniform("output_size","u32").declareVariables(t,n)}\n  var<workgroup> tile : array<array<${n.type.value}, ${A+1}>, ${A}>;\n  ${e.mainStart([A,A,1])}\n    let stride = (uniforms.output_shape[1] - 1) / ${A} + 1;\n    let workgroup_id_x = workgroup_index % stride;\n    let workgroup_id_y = workgroup_index / stride;\n    let input_col = workgroup_id_y * ${A}u + local_id.x;\n    let input_row = workgroup_id_x * ${A}u + local_id.y;\n    if (input_row < uniforms.a_shape[0] && input_col < uniforms.a_shape[1]) {\n      tile[local_id.y][local_id.x] = ${t.getByIndices(`${t.type.indices}(input_row, input_col)`)};\n    }\n    workgroupBarrier();\n\n    let output_col = workgroup_id_x * ${A}u + local_id.x;\n    let output_row = workgroup_id_y * ${A}u + local_id.y;\n    if (output_row < uniforms.output_shape[0] && output_col < uniforms.output_shape[1]) {\n      ${n.setByIndices(`${n.type.indices}(output_row, output_col)`,"tile[local_id.x][local_id.y]")}\n    }\n  }`},{name:"TransposeShared",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let t=QA.size(s);return{outputs:[{dims:s,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(o[1]/A),y:Math.ceil(o[0]/A)},programUniforms:[{type:12,data:t},...gt(i,o)]}},getShaderSource:t}}return t=e=>{let A=Ct("a",r,i.length),t=bt("output",r,o.length);return`\n  ${e.registerUniform("output_size","u32").declareVariables(A,t)}\n\n  ${Et(a,n,A,t)}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${t.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${t.setByOffset("global_idx",A.getByIndices("aIndices"))}\n  }`},{name:"Transpose",shaderCache:{hint:`${A}`,inputDependencies:["rank"]},getRunData:()=>{let A=QA.size(s);return{outputs:[{dims:s,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(A/64)},programUniforms:[{type:12,data:A},...gt(i,o)]}},getShaderSource:t}},Qt=(e,A)=>{vt(e.inputs,A.perm),e.compute(Dt(e.inputs[0],A.perm))},Tt=e=>st({perm:e.perm})})),Fl=ee((()=>{xl(),yl(),Pl(),Sl(),zl(),Pt={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},zt={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},Ft={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},St={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},Nt=(e,A)=>{let t=[];for(let r=A-e;r<A;++r)t.push(r);return t},Ot=(e,A)=>{let t=[],r=e.length;for(let n=0;n<r;n++)-1===A.indexOf(n)&&t.push(e[n]);let n=A.map((A=>e[A]));return[t,n]},Lt=(e,A)=>{let t=e.length+A.length,r=[],n=0;for(let a=0;a<t;a++)-1===A.indexOf(a)?r.push(e[n++]):r.push(1);return r},Yt=(e,A)=>{for(let t=0;t<e.length;++t)if(e[e.length-t-1]!==A-1-t)return!1;return!0},Ht=(e,A)=>{let t=[];if(!Yt(e,A)){for(let r=0;r<A;++r)-1===e.indexOf(r)&&t.push(r);e.forEach((e=>t.push(e)))}return t},Rt=(e,A,t,r,n,a,s)=>{let i=t[0].dims,o=QA.size(a),l=QA.size(s),c=Ct("_A",t[0].dataType,i),g=bt("output",n,a),u=64;1===o&&(u=256);let d=`\n          var<workgroup> aBestValues : array<f32, ${u}>;\n       `;return{name:e,shaderCache:{hint:`${A};${u}`,inputDependencies:["type"]},getShaderSource:e=>`\n        ${e.registerUniform("reduceSize","u32").declareVariables(c,g)}\n        ${d}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${e.mainStart(u)}\n\n          let outputIndex = global_idx / ${u};\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = f32(${Ft[r]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + ${u}) {\n           let candidate = f32(${c.getByOffset("offset + k")});\n           bestValue = ${Pt[r]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, ${u}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${zt[r]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${g.setByOffset("outputIndex",""+("mean"===r?`${g.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${g.type.storage}(${St[r]})`))};\n         }\n        }`,getRunData:()=>({outputs:[{dims:a,dataType:n}],dispatchGroup:{x:o},programUniforms:[{type:12,data:l}]})}},jt=(e,A,t,r)=>{let n=1===e.inputs.length?t:rr(e.inputs,t),a=n.axes;0===a.length&&!n.noopWithEmptyAxes&&(a=e.inputs[0].dims.map(((e,A)=>A)));let s=QA.normalizeAxes(a,e.inputs[0].dims.length),i=s,o=e.inputs[0],l=Ht(i,e.inputs[0].dims.length);l.length>0&&(o=e.compute(Dt(e.inputs[0],l),{inputs:[0],outputs:[-1]})[0],i=Nt(i.length,o.dims.length));let[c,g]=Ot(o.dims,i),u=c;n.keepDims&&(u=Lt(c,s)),e.compute(Rt(A,n.cacheKey,[o],r,e.inputs[0].dataType,u,g),{inputs:[o]})},Vt=(e,A)=>{jt(e,"ReduceMeanShared",A,"mean")},Wt=(e,A)=>{jt(e,"ReduceL1Shared",A,"l1")},Ut=(e,A)=>{jt(e,"ReduceL2Shared",A,"l2")},Kt=(e,A)=>{jt(e,"ReduceLogSumExpShared",A,"logSumExp")},Zt=(e,A)=>{jt(e,"ReduceMaxShared",A,"max")},Xt=(e,A)=>{jt(e,"ReduceMinShared",A,"min")},qt=(e,A)=>{jt(e,"ReduceProdShared",A,"prod")},Jt=(e,A)=>{jt(e,"ReduceSumShared",A,"sum")},_t=(e,A)=>{jt(e,"ReduceSumSquareShared",A,"sumSquare")},$t=(e,A)=>{jt(e,"ReduceLogSumShared",A,"logSum")}})),Sl=ee((()=>{xl(),yl(),Tl(),Pl(),Fl(),er=e=>{if(!e||0===e.length||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(2===e.length&&1!==e[1].dims.length)throw new Error("Invalid axes input dims.")},Ar=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],tr=(e,A,t,r,n,a,s=!1,i=!1)=>{let o=[],l=t[0].dims,c=l.length,g=QA.normalizeAxes(n,c),u=!i&&0===g.length;l.forEach(((e,A)=>{u||g.indexOf(A)>=0?s&&o.push(1):o.push(e)}));let d=o.length,f=QA.size(o);return{name:e,shaderCache:A,getShaderSource:e=>{let A=[],n=Ct("_A",t[0].dataType,c),i=bt("output",a,d),o=r(n,i,g),f=o[2];for(let e=0,t=0;e<c;e++)u||g.indexOf(e)>=0?(s&&t++,f=`for(var j${e}: u32 = 0; j${e} < ${l[e]}; j${e}++) {\n                  ${o[2].includes("last_index")?`let last_index = j${e};`:""}\n                  ${n.indicesSet("input_indices",e,`j${e}`)}\n                  ${f}\n                }`):(A.push(`${n.indicesSet("input_indices",e,i.indicesGet("output_indices",t))};`),t++);return`\n\n        ${e.registerUniform("output_size","u32").declareVariables(n,i)}\n\n        ${e.mainStart()}\n          ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          var input_indices: ${n.type.indices};\n          let output_indices = ${i.offsetToIndices("global_idx")};\n\n          ${A.join("\n")}\n          ${o[0]}       // init ops for reduce max/min\n          ${o[1]}\n          ${f}\n          ${o[3]}\n          ${4===o.length?i.setByOffset("global_idx","value"):o.slice(4).join("\n")}\n        }`},getRunData:()=>({outputs:[{dims:o,dataType:a}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:[{type:12,data:f},...gt(l,o)]})}},rr=(e,A)=>{let t=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach((e=>t.push(Number(e)))),st({axes:t,keepDims:A.keepDims,noopWithEmptyAxes:A.noopWithEmptyAxes})},nr=(e,A,t,r)=>{let n=e.inputs,a=1===n.length?t:rr(n,t);e.compute(tr(A,{hint:a.cacheKey,inputDependencies:["rank"]},[n[0]],a.noopWithEmptyAxes&&0===a.axes.length?Ar:r,a.axes,n[0].dataType,a.keepDims,a.noopWithEmptyAxes),{inputs:[0]})},ar=(e,A)=>{er(e.inputs),nr(e,"ReduceLogSum",A,((e,A)=>[`var value = ${A.type.storage}(0);`,"",`value += ${e.getByIndices("input_indices")};`,"value = log(value);"]))},sr=(e,A)=>{er(e.inputs),nr(e,"ReduceL1",A,((e,A)=>[`var value = ${A.type.storage}(0);`,"",`value += abs(${e.getByIndices("input_indices")});`,""]))},ir=(e,A)=>{er(e.inputs),nr(e,"ReduceL2",A,((e,A)=>[`var t = ${A.type.value}(0); var value = ${A.type.value}(0);`,"",`t = ${e.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"]))},or=(e,A)=>{er(e.inputs),nr(e,"ReduceLogSumExp",A,((e,A)=>[`var value = ${A.type.storage}(0);`,"",`value += exp(${e.getByIndices("input_indices")});`,"value = log(value);"]))},lr=(e,A)=>{er(e.inputs),nr(e,"ReduceMax",A,((e,A,t)=>{let r=[];for(let A=0;A<e.rank;A++)(t.indexOf(A)>=0||0===t.length)&&r.push(e.indicesSet("input_indices",A,0));return[`${r.join("\n")}`,`var value = ${e.getByIndices("input_indices")};`,`value = max(value, ${e.getByIndices("input_indices")});`,""]}))},cr=(e,A)=>{er(e.inputs),nr(e,"ReduceMean",A,((A,t,r)=>{let n=1;for(let t=0;t<A.rank;t++)(r.indexOf(t)>=0||0===r.length)&&(n*=e.inputs[0].dims[t]);return["var sum = f32(0);","",`sum += f32(${A.getByIndices("input_indices")});`,`let value = ${t.type.value}(sum / ${n});`]}))},gr=(e,A)=>{er(e.inputs),nr(e,"ReduceMin",A,((e,A,t)=>{let r=[];for(let A=0;A<e.rank;A++)(t.indexOf(A)>=0||0===t.length)&&r.push(`input_indices[${A}] = 0;`);return[`${r.join("\n")}`,`var value = ${e.getByIndices("input_indices")};`,`value = min(value, ${e.getByIndices("input_indices")});`,""]}))},ur=(e,A)=>{er(e.inputs),nr(e,"ReduceProd",A,((e,A)=>[`var value = ${A.type.storage}(1);`,"",`value *= ${e.getByIndices("input_indices")};`,""]))},dr=(e,A)=>{er(e.inputs),nr(e,"ReduceSum",A,((e,A)=>[`var value = ${A.type.storage}(0);`,"",`value += ${e.getByIndices("input_indices")};`,""]))},fr=(e,A)=>{er(e.inputs),nr(e,"ReduceSumSquare",A,((e,A)=>[`var t = ${A.type.value}(0); var value = ${A.type.value}(0);`,"",`t = ${e.getByIndices("input_indices")}; value += t * t;`,""]))},pr=(e,A,t)=>{if(0===A.length)return t;let r=1,n=1;for(let t=0;t<A.length;t++)-1===A.indexOf(t)?r*=e[t]:n*=e[t];return n<32&&r>1024},hr=(e,A)=>{pr(e.inputs[0].dims,A.axes,A.noopWithEmptyAxes)?cr(e,A):Vt(e,A)},mr=(e,A)=>{pr(e.inputs[0].dims,A.axes,A.noopWithEmptyAxes)?sr(e,A):Wt(e,A)},Cr=(e,A)=>{pr(e.inputs[0].dims,A.axes,A.noopWithEmptyAxes)?ir(e,A):Ut(e,A)},br=(e,A)=>{pr(e.inputs[0].dims,A.axes,A.noopWithEmptyAxes)?or(e,A):Kt(e,A)},Ir=(e,A)=>{pr(e.inputs[0].dims,A.axes,A.noopWithEmptyAxes)?lr(e,A):Zt(e,A)},wr=(e,A)=>{pr(e.inputs[0].dims,A.axes,A.noopWithEmptyAxes)?gr(e,A):Xt(e,A)},kr=(e,A)=>{pr(e.inputs[0].dims,A.axes,A.noopWithEmptyAxes)?ur(e,A):qt(e,A)},xr=(e,A)=>{pr(e.inputs[0].dims,A.axes,A.noopWithEmptyAxes)?dr(e,A):Jt(e,A)},vr=(e,A)=>{pr(e.inputs[0].dims,A.axes,A.noopWithEmptyAxes)?fr(e,A):_t(e,A)},Br=(e,A)=>{pr(e.inputs[0].dims,A.axes,A.noopWithEmptyAxes)?ar(e,A):$t(e,A)}})),Nl=ee((()=>{xl(),Tl(),Sl(),yr=e=>{if(!e||0===e.length||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(1!==e[0].dataType)throw new Error("Invalid input type.")},Er=(e,A)=>{yr(e.inputs);e.compute(tr("ArgMin",{hint:A.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],((e,t,r)=>{let n=[];for(let A=0;A<e.rank;A++)(r.indexOf(A)>=0||0===r.length)&&n.push(`input_indices[${A}] = 0;`);return[`${n.join("\n")}`,`var value = ${e.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${e.getByIndices("input_indices")} ${A.selectLastIndex>0?"<=":"<"} value) {\n         value = ${e.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",t.setByOffset("global_idx","best_index")]}),[A.axis],7,A.keepDims),{inputs:[0]})},Mr=(e,A)=>{yr(e.inputs);e.compute(tr("argMax",{hint:A.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],((e,t,r)=>{let n=[];for(let A=0;A<e.rank;A++)(r.indexOf(A)>=0||0===r.length)&&n.push(`input_indices[${A}] = 0;`);return[`${n.join("\n")}`,`var value = ${e.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${e.getByIndices("input_indices")} ${A.selectLastIndex>0?">=":">"} value) {\n         value = ${e.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",t.setByOffset("global_idx","best_index")]}),[A.axis],7,A.keepDims),{inputs:[0]})},Gr=e=>st(e)})),Ol=ee((()=>{xl(),yl(),Dl(),Pl(),Dr=(e,A)=>{let t=e[0],r=e[1],n=e[2],a=e[3],s=e[4],i=e[5];if(s&&i)throw new Error("Attention cannot have both past and attention_bias");if(3!==t.dims.length)throw new Error('Input "input" must have 3 dimensions');let o=t.dims[0],l=t.dims[1],c=t.dims[2];if(1!==n.dims.length)throw new Error('Input "bias" is expected to have 1 dimensions');if(2!==r.dims.length)throw new Error('Input "weights" is expected to have 2 dimensions');if(r.dims[0]!==c)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==r.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let g=n.dims[0]/3,u=g,d=u;if(A.qkvHiddenSizes.length>0){if(3!==A.qkvHiddenSizes.length)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let e of A.qkvHiddenSizes)if(e%A.numHeads!=0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");g=A.qkvHiddenSizes[0],u=A.qkvHiddenSizes[1],d=A.qkvHiddenSizes[2]}let f=l;if(g!==u)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==g+u+d)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let p=0;if(s){if(u!==d)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(5!==s.dims.length)throw new Error('Input "past" must have 5 dimensions');if(2!==s.dims[0])throw new Error('Input "past" first dimension must be 2');if(s.dims[1]!==o)throw new Error('Input "past" second dimension must be batch_size');if(s.dims[2]!==A.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(s.dims[4]!==u/A.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');A.pastPresentShareBuffer||(p=s.dims[3])}let h=f+p;if(a)throw new Error("Mask not supported");if(s)throw new Error("past is not supported");if(i){if(4!==i.dims.length)throw new Error('Input "attention_bias" must have 4 dimensions');if(i.dims[0]!==o||i.dims[1]!==A.numHeads||i.dims[2]!==l||i.dims[3]!==h)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:o,sequenceLength:l,pastSequenceLength:p,kvSequenceLength:f,totalSequenceLength:h,maxSequenceLength:-1,inputHiddenSize:c,hiddenSize:g,vHiddenSize:d,headSize:Math.floor(g/A.numHeads),vHeadSize:Math.floor(d/A.numHeads),numHeads:A.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:A.maskFilterValue,maskType:0,scale:A.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Qr=(e,A,t)=>A&&e?`\n      let total_sequence_length_input = u32(${A.getByOffset("0")});\n      let present_sequence_length = max(total_sequence_length_input, uniforms.past_sequence_length);\n      let is_subsequent_prompt: bool = sequence_length > 1 && sequence_length != total_sequence_length_input;\n      let is_first_prompt: bool = is_subsequent_prompt == false && sequence_length == total_sequence_length_input;\n      total_sequence_length = u32(${e?.getByOffset("batchIdx")}) + 1;\n      var past_sequence_length: u32 = 0;\n      if (is_first_prompt == false) {\n        past_sequence_length = total_sequence_length - sequence_length;\n      }\n       `:`\n    ${t?"let past_sequence_length = uniforms.past_sequence_length":""};\n    let present_sequence_length = total_sequence_length;\n    `,Tr=(e,A,t,r,n,a,s,i)=>{let o=ut(s?1:a),l=64,c=a/o;c<l&&(l=32);let g=Math.ceil(a/o/l),u=[{type:12,data:A},{type:12,data:t},{type:12,data:r},{type:12,data:n},{type:12,data:c},{type:12,data:g}],d=lt(e.dataType,o),f=ct(1,o),p=["type"];s&&p.push("type"),i&&p.push("type");return{name:"AttentionProbsSoftmax",shaderCache:{hint:`${l};${d};${o}`,inputDependencies:p},getShaderSource:A=>{let t=bt("x",e.dataType,e.dims,o),r=[t],n=s?Ct("seq_lens",s.dataType,s.dims):void 0;n&&r.push(n);let a=i?Ct("total_sequence_length_input",i.dataType,i.dims):void 0;a&&r.push(a);let c=ct(e.dataType);return`\n  var<workgroup> thread_max: array<f32, ${l}>;\n  var<workgroup> thread_sum: array<f32, ${l}>;\n  ${A.registerUniforms([{name:"batch_size",type:"u32"},{name:"num_heads",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"sequence_length",type:"u32"},{name:"total_sequence_length",type:"u32"},{name:"elements_per_thread",type:"u32"}]).declareVariables(...r)}\n  ${A.mainStart([l,1,1])}\n    let batchIdx = workgroup_id.z / uniforms.num_heads;\n    let headIdx = workgroup_id.z % uniforms.num_heads;\n    let sequence_length = uniforms.sequence_length;\n    var total_sequence_length = uniforms.total_sequence_length;\n    ${Qr(n,a,!1)}\n    let local_offset = local_idx * uniforms.elements_per_thread;\n    let offset = (global_idx / ${l}) * uniforms.total_sequence_length + local_offset;\n    let seq_causal_length = ${s?"u32(past_sequence_length + workgroup_id.y + 1)":"total_sequence_length"};\n    var thread_max_vector = ${f}(-3.402823e+38f);\n    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {\n      thread_max_vector = max(${f}(x[offset + i]), thread_max_vector);\n    }\n    thread_max[local_idx] = ${(()=>{switch(o){case 1:return"thread_max_vector";case 2:return"max(thread_max_vector.x, thread_max_vector.y)";case 4:return"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))";default:throw new Error(`Unsupported components: ${o}`)}})()};\n    workgroupBarrier();\n\n    var max_value =  f32(-3.402823e+38f);\n    for (var i = 0u; i < ${l}; i++) {\n      max_value = max(thread_max[i], max_value);\n    }\n\n    var sum_vector = ${f}(0);\n    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {\n      sum_vector += exp(${f}(x[offset + i]) - max_value);\n    }\n    thread_sum[local_idx] = ${(()=>{switch(o){case 1:return"sum_vector";case 2:return"sum_vector.x + sum_vector.y";case 4:return"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w";default:throw new Error(`Unsupported components: ${o}`)}})()};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${l}; i++) {\n      sum += thread_sum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {\n        x[offset + i] = ${t.type.value}(${c}(1.0) / ${c}(seq_causal_length));\n      }\n    } else {\n      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {\n        var f32input = ${f}(x[offset + i]);\n        x[offset + i] = ${t.type.value}(exp(f32input - max_value) / sum);\n      }\n    }\n      ${s?`\n        for (var total_seq_id: u32 = seq_causal_length; total_seq_id + local_offset < uniforms.total_sequence_length; total_seq_id++) {\n          x[offset + total_seq_id] = ${t.type.value}(${c}(0));\n        }`:""};\n  }`},getRunData:()=>({outputs:[],dispatchGroup:{x:1,y:n,z:A*t},programUniforms:u})}},Pr=(e,A,t,r,n,a,s,i,o)=>{let l=s+a.kvSequenceLength,c=[a.batchSize,a.numHeads,a.sequenceLength,l],g=e>1&&r,u=a.kvNumHeads?a.kvNumHeads:a.numHeads,d=g?[a.batchSize,u,l,a.headSize]:void 0,f=a.nReps?a.nReps:1,p=0===a.scale?1/Math.sqrt(a.headSize):a.scale,h=ut(a.headSize),m=a.headSize/h,C=12,b={x:Math.ceil(l/C),y:Math.ceil(a.sequenceLength/C),z:a.batchSize*a.numHeads},I=[{type:12,data:a.sequenceLength},{type:12,data:m},{type:12,data:l},{type:12,data:a.numHeads},{type:12,data:a.headSize},{type:1,data:p},{type:12,data:s},{type:12,data:a.kvSequenceLength},{type:12,data:f}],w=g&&r&&QA.size(r.dims)>0,k=["type","type"];w&&k.push("type"),n&&k.push("type"),i&&k.push("type"),o&&k.push("type");let x=[{dims:c,dataType:A.dataType,gpuDataType:0}];g&&x.push({dims:d,dataType:A.dataType,gpuDataType:0});return{name:"AttentionProbs",shaderCache:{hint:`${h};${void 0!==n};${void 0!==r};${e}`,inputDependencies:k},getRunData:()=>({outputs:x,dispatchGroup:b,programUniforms:I}),getShaderSource:e=>{let a=Ct("q",A.dataType,A.dims,h),s=[a,Ct("key",t.dataType,t.dims,h)];if(w){let e=Ct("past_key",r.dataType,r.dims,h);s.push(e)}n&&s.push(Ct("attention_bias",n.dataType,n.dims));let l=i?Ct("seq_lens",i.dataType,i.dims):void 0;l&&s.push(l);let u=o?Ct("total_sequence_length_input",o.dataType,o.dims):void 0;u&&s.push(u);let p=bt("output",A.dataType,c),m=[p];g&&m.push(bt("present_key",A.dataType,d,h));let b=ct(1,h);return`\n  const TILE_SIZE = 12u;\n\n  var<workgroup> tileQ: array<${a.type.storage}, 144>;\n  var<workgroup> tileK: array<${a.type.storage}, 144>;\n  ${e.registerUniforms([{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"alpha",type:"f32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}]).declareVariables(...s,...m)}\n  ${e.mainStart([C,C,1])}\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z % uniforms.num_heads;\n    let kvHeadIdx = ${1===f?"headIdx":"headIdx / uniforms.n_reps"};\n    let kv_num_heads = ${1===f?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};\n    let batchIdx = workgroup_id.z / uniforms.num_heads;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let sequence_length = uniforms.M;\n    var total_sequence_length = uniforms.N;\n    ${Qr(l,u,!0)}\n    let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx;\n    let qOffset = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;\n    ${w&&g?"let pastKeyOffset = absKvHeadIdx * uniforms.past_sequence_length * uniforms.K;":""};\n    let kOffset = absKvHeadIdx * uniforms.kv_sequence_length * uniforms.K;\n    ${g?"let presentKeyOffset = absKvHeadIdx * uniforms.N * uniforms.K;":""}\n    var value = ${b}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {\n        var idx = TILE_SIZE * local_id.y + local_id.x;\n      ${w&&g?"\n              if (n + local_id.y < past_sequence_length) {\n                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];\n              } else if (n + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {\n                tileK[idx] = key[kOffset + (n + local_id.y - past_sequence_length) * uniforms.K + w + local_id.x];\n              }":"\n          if (n + local_id.y < uniforms.kv_sequence_length) {\n            tileK[idx] = key[kOffset + (n + local_id.y) * uniforms.K + w + local_id.x];\n          }"}\n      ${g?"if (n + local_id.y < present_sequence_length) {\n        present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];\n      }":""}\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {\n          value += ${b}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);\n      }\n\n      workgroupBarrier();\n    }\n\n    if (global_id.y < uniforms.M && global_id.x < total_sequence_length) {\n      let headOffset = workgroup_id.z * uniforms.M * uniforms.N;\n      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;\n      var sum: f32 = ${(()=>{switch(h){case 1:return"value";case 2:return"value.x + value.y";case 4:return"value.x + value.y + value.z + value.w";default:throw new Error(`Unsupported components: ${h}`)}})()};\n        output[outputIdx] = ${p.type.value} (sum * uniforms.alpha) + ${n?"attention_bias[outputIdx]":"0.0"};\n    }\n  }`}}},zr=(e,A,t,r,n,a,s=void 0,i=void 0)=>{let o=a+n.kvSequenceLength,l=n.nReps?n.nReps:1,c=n.vHiddenSize*l,g=e>1&&r,u=n.kvNumHeads?n.kvNumHeads:n.numHeads,d=g?[n.batchSize,u,o,n.headSize]:void 0,f=[n.batchSize,n.sequenceLength,c],p=12,h={x:Math.ceil(n.vHeadSize/p),y:Math.ceil(n.sequenceLength/p),z:n.batchSize*n.numHeads},m=[{type:12,data:n.sequenceLength},{type:12,data:o},{type:12,data:n.vHeadSize},{type:12,data:n.numHeads},{type:12,data:n.headSize},{type:12,data:c},{type:12,data:a},{type:12,data:n.kvSequenceLength},{type:12,data:l}],C=g&&r&&QA.size(r.dims)>0,b=["type","type"];C&&b.push("type"),s&&b.push("type"),i&&b.push("type");let I=[{dims:f,dataType:A.dataType,gpuDataType:0}];g&&I.push({dims:d,dataType:A.dataType,gpuDataType:0});return{name:"AttentionScore",shaderCache:{hint:`${void 0!==r};${e}`,inputDependencies:b},getRunData:()=>({outputs:I,dispatchGroup:h,programUniforms:m}),getShaderSource:e=>{let n=Ct("probs",A.dataType,A.dims),a=[n,Ct("v",t.dataType,t.dims)];C&&a.push(Ct("past_value",r.dataType,r.dims));let o=s?Ct("seq_lens",s.dataType,s.dims):void 0;s&&a.push(o);let c=i?Ct("total_sequence_length_input",i.dataType,i.dims):void 0;i&&a.push(c);let u=[bt("output",A.dataType,f)];g&&u.push(bt("present_value",A.dataType,d));return`\n  const TILE_SIZE = 12u;\n  var<workgroup> tileQ: array<${n.type.value}, 144>;\n  var<workgroup> tileV: array<${n.type.value}, 144>;\n  ${e.registerUniforms([{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"v_hidden_size",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}]).declareVariables(...a,...u)}\n  ${e.mainStart([p,p,1])}\n   let headIdx = workgroup_id.z % uniforms.num_heads;\n   let batchIdx = workgroup_id.z / uniforms.num_heads;\n   let kvHeadIdx = ${1===l?"headIdx":"headIdx / uniforms.n_reps"};\n   let kv_num_heads = ${1===l?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};\n   let m = global_id.y;\n   let n = global_id.x;\n   let sequence_length = uniforms.M;\n   var total_sequence_length = uniforms.K;\n   ${Qr(o,c,!0)}\n   let offsetA = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;\n   let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx; // kvHeadIdx is relative to the batch\n   ${C&&g?"let pastValueOffset = absKvHeadIdx * uniforms.N * uniforms.past_sequence_length + n;":""};\n   let vOffset = absKvHeadIdx * uniforms.N * uniforms.kv_sequence_length + n;\n   ${g?"let presentValueOffset = absKvHeadIdx * uniforms.N * uniforms.K + n;":""}\n   var value = ${n.type.storage}(0);\n   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        var idx = TILE_SIZE * local_id.y + local_id.x;\n        ${C&&g?"\n        if (w + local_id.y < past_sequence_length) {\n          tileV[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];\n        } else if (w + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {\n          tileV[idx] = v[vOffset + (w + local_id.y - past_sequence_length) * uniforms.N];\n        }\n      ":"\n            if (w + local_id.y < uniforms.kv_sequence_length) {\n              tileV[idx] = v[vOffset + (w + local_id.y) * uniforms.N];\n            }"}\n        ${g?"\n            if (w + local_id.y < present_sequence_length) {\n          present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileV[idx];\n        }":""}\n      }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k < TILE_SIZE && w+k < total_sequence_length; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileV[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   if (m < uniforms.M && n < uniforms.N) {\n     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size\n       + headIdx * uniforms.N + n;\n     output[outputIdx] = value;\n   }\n  }`}}},Fr=(e,A,t,r,n,a,s,i,o,l,c=void 0,g=void 0)=>{let u=Math.min(e.outputCount,1+(s?1:0)+(i?1:0)),d=u>1?l.pastSequenceLength:0,f=d+l.kvSequenceLength,p=o&&QA.size(o.dims)>0?o:void 0,h=[A,t];u>1&&s&&QA.size(s.dims)>0&&h.push(s),p&&h.push(p),c&&h.push(c),g&&h.push(g);let m=e.compute(Pr(u,A,t,s,p,l,d,c,g),{inputs:h,outputs:u>1?[-1,1]:[-1]})[0];e.compute(Tr(m,l.batchSize,l.numHeads,d,l.sequenceLength,f,c,g),{inputs:c&&g?[m,c,g]:[m],outputs:[]});let C=[m,r];u>1&&i&&QA.size(i.dims)>0&&C.push(i),c&&C.push(c),g&&C.push(g),e.compute(zr(u,m,r,i,l,d,c,g),{inputs:C,outputs:u>1?[0,2]:[0]})},Sr=(e,A)=>{let t=[A.batchSize,A.numHeads,A.sequenceLength,A.headSize],r=A.sequenceLength,n=A.inputHiddenSize,a=A.headSize,s=12,i={x:Math.ceil(A.headSize/s),y:Math.ceil(A.sequenceLength/s),z:A.batchSize*A.numHeads},o=[e.inputs[0],e.inputs[1],e.inputs[2]],l=[{type:12,data:r},{type:12,data:n},{type:12,data:a},{type:12,data:A.numHeads},{type:12,data:A.headSize},{type:12,data:A.hiddenSize},{type:12,data:A.hiddenSize+A.hiddenSize+A.vHiddenSize}];return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:t,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:t,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:t,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:i,programUniforms:l}),getShaderSource:e=>{let A=bt("output_q",o[0].dataType,t),r=bt("output_k",o[0].dataType,t),n=bt("output_v",o[0].dataType,t),a=Ct("input",o[0].dataType,o[0].dims),i=Ct("weight",o[1].dataType,o[1].dims),l=Ct("bias",o[2].dataType,o[2].dims),c=a.type.storage;return`\n  const TILE_SIZE = 12u;\n  var<workgroup> tileInput: array<${c}, 144>;\n  var<workgroup> tileWeightQ: array<${c}, 144>;\n  var<workgroup> tileWeightK: array<${c}, 144>;\n  var<workgroup> tileWeightV: array<${c}, 144>;\n  ${e.registerUniforms([{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}]).declareVariables(a,i,l,A,r,n)}\n  ${e.mainStart([s,s,1])}\n    let batchIndex = workgroup_id.z / uniforms.num_heads;\n    let headNumber = workgroup_id.z % uniforms.num_heads;\n    let m = global_id.y;\n    let n = global_id.x;\n\n    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;\n    let biasOffsetQ = headNumber * uniforms.head_size;\n    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;\n    let biasOffsetV = uniforms.hidden_size + biasOffsetK;\n\n    var valueQ = ${c}(0);\n    var valueK = ${c}(0);\n    var valueV = ${c}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        let offset = n + (w + local_id.y) * uniforms.ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * uniforms.N + n) % uniforms.head_size;\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * uniforms.M * uniforms.N;\n    if (m < uniforms.M && n < uniforms.N) {\n      let outputIdx = offset + m * uniforms.N + n;\n      output_q[outputIdx] = valueQ;\n      output_k[outputIdx] = valueK;\n      output_v[outputIdx] = valueV;\n    }\n  }`}},{inputs:o,outputs:[-1,-1,-1]})},Nr=(e,A)=>{let t=Dr(e.inputs,A),[r,n,a]=Sr(e,t);return Fr(e,r,n,a,e.inputs[4],void 0,void 0,void 0,e.inputs[5],t)}})),Ll=ee((()=>{ke(),xl(),yl(),Tl(),Pl(),Or=(e,A)=>{if(!e||5!==e.length)throw new Error("BatchNormalization requires 5 inputs");let t=(e,A,t)=>{let r=A.length;if(r!==e.length)throw new Error(`${t}: num dimensions != ${r}`);A.forEach(((A,r)=>{if(A!==e[r])throw new Error(`${t}: dim[${r}] do not match`)}))};if(e[0].dims.length>1){let r="NHWC"===A.format?A.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,A.spatial?2:void 0);t(e[1].dims,r,"Invalid input scale"),t(e[2].dims,r,"Invalid input B"),t(e[3].dims,r,"Invalid input mean"),t(e[4].dims,r,"Invalid input var")}else t(e[1].dims,[1],"Invalid input scale"),t(e[2].dims,[1],"Invalid input B"),t(e[3].dims,[1],"Invalid input mean"),t(e[4].dims,[1],"Invalid input var")},Lr=(e,A)=>{let{epsilon:t,spatial:r,format:n}=A,a=e[0].dims,s=r?ut(a[a.length-1]):1,i="NHWC"===n&&a.length>1?s:1,o=QA.size(a)/s,l=r,c=l?a.length:a,g=Ct("x",e[0].dataType,e[0].dims,s),u=Ct("scale",e[1].dataType,e[1].dims,i),d=Ct("bias",e[2].dataType,e[2].dims,i),f=Ct("inputMean",e[3].dataType,e[3].dims,i),p=Ct("inputVar",e[4].dataType,e[4].dims,i),h=bt("y",e[0].dataType,c,s);return{name:"BatchNormalization",shaderCache:{hint:`${A.epsilon}_${A.format}_${r}_${s}`,inputDependencies:l?["rank","type","type","type","type"]:void 0},getShaderSource:e=>`\n  const epsilon = ${t};\n  ${e.registerUniform("outputSize","u32").declareVariables(g,u,d,f,p,h)}\n  ${e.mainStart()}\n  ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    var outputIndices = ${h.offsetToIndices(`global_idx * ${s}`)};\n    ${(()=>{let e="";if(r)e=`let cOffset = ${1===a.length?"0u":"NHWC"===n?`outputIndices[${a.length-1}] / ${s}`:"outputIndices[1]"};`;else if("NCHW"===n)e=`\n            ${h.indicesSet("outputIndices","0","0")}\n            let cOffset = ${h.indicesToOffset("outputIndices")};`;else{e=`var cIndices = ${u.type.indices}(0);\n                       cIndices[0] = outputIndices[${a.length-1}];`;for(let A=1;A<u.rank;A++)e+=`cIndices[${A}] = outputIndices[${A}];`;e+=`let cOffset = ${u.indicesToOffset("cIndices")};`}return e})()}\n    let scale = ${u.getByOffset("cOffset")};\n    let bias = ${d.getByOffset("cOffset")};\n    let inputMean = ${f.getByOffset("cOffset")};\n    let inputVar = ${p.getByOffset("cOffset")};\n    let x = ${g.getByOffset("global_idx")};\n    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;\n    ${h.setByOffset("global_idx","value")}\n  }`,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:l?[{type:12,data:o},...gt(a)]:[{type:12,data:o}]})}},Yr=e=>st(e),Hr=(e,A)=>{let{inputs:t,outputCount:r}=e,n=Yr({...A,outputCount:r});if(B.webgpu.validateInputContent&&Or(t,n),A.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Lr(t,n))}})),Yl=ee((()=>{yl(),Pl(),Rr=e=>{if(3!==e[0].dims.length)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(1!==e[1].dims.length)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},jr=e=>{let A=e[0].dims,t=e[0].dims[2],r=QA.size(A)/4,n=e[0].dataType,a=Ct("input",n,A,4),s=Ct("bias",n,[t],4),i=Ct("residual",n,A,4),o=bt("output",n,A,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:A,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(r/64)}}),getShaderSource:e=>`\n  const channels = ${t}u / 4;\n  ${e.declareVariables(a,s,i,o)}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(r)}\n    let value = ${a.getByOffset("global_idx")}\n      + ${s.getByOffset("global_idx % channels")} + ${i.getByOffset("global_idx")};\n    ${o.setByOffset("global_idx","value")}\n  }`}},Vr=e=>{Rr(e.inputs),e.compute(jr(e.inputs))}})),Hl=ee((()=>{xl(),yl(),Tl(),Pl(),Wr=(e,A,t,r,n,a,s)=>{let i=Math.ceil(A/4),o="";o="string"==typeof n?`${n}(a)`:n("a");let l=Ct("inputData",t,[i],4),c=bt("outputData",r,[i],4),g=[{name:"vec_size",type:"u32"}];return s&&g.push(...s),`\n      ${e.registerUniforms(g).declareVariables(l,c)}\n\n  ${a??""}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n\n    let a = ${l.getByOffset("global_idx")};\n    ${c.setByOffset("global_idx",o)}\n  }`},Ur=(e,A,t,r,n,a=e.dataType,s,i)=>{let o=[{type:12,data:Math.ceil(QA.size(e.dims)/4)}];return s&&o.push(...s),{name:A,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:A=>Wr(A,QA.size(e.dims),e.dataType,a,t,r,i),getRunData:A=>({outputs:[{dims:e.dims,dataType:a}],dispatchGroup:{x:Math.ceil(QA.size(A[0].dims)/64/4)},programUniforms:o})}},Kr=e=>{e.compute(Ur(e.inputs[0],"Abs","abs"))},Zr=e=>{e.compute(Ur(e.inputs[0],"Acos","acos"))},Xr=e=>{e.compute(Ur(e.inputs[0],"Acosh","acosh"))},qr=e=>{e.compute(Ur(e.inputs[0],"Asin","asin"))},Jr=e=>{e.compute(Ur(e.inputs[0],"Asinh","asinh"))},_r=e=>{e.compute(Ur(e.inputs[0],"Atan","atan"))},$r=e=>{e.compute(Ur(e.inputs[0],"Atanh","atanh"))},en=e=>st(e),An=(e,A)=>{let t;switch(A.to){case 10:t="vec4<f16>";break;case 1:t="vec4<f32>";break;case 12:t="vec4<u32>";break;case 6:t="vec4<i32>";break;case 9:t="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${A.to}`)}e.compute(Ur(e.inputs[0],"Cast",t,void 0,A.cacheKey,A.to))},tn=e=>{let A,t,r=e.length>=2&&0!==e[1].data,n=e.length>=3&&0!==e[2].data;switch(e[0].dataType){case 1:A=r?e[1].getFloat32Array()[0]:-34028234663852886e22,t=n?e[2].getFloat32Array()[0]:34028234663852886e22;break;case 10:A=r?e[1].getUint16Array()[0]:64511,t=n?e[2].getUint16Array()[0]:31743;break;default:throw new Error("Unsupport data type")}return st({min:A,max:t})},rn=(e,A)=>{let t=A||tn(e.inputs),r=ct(e.inputs[0].dataType);e.compute(Ur(e.inputs[0],"Clip",(e=>`clamp(${e}, vec4<${r}>(uniforms.min), vec4<${r}>(uniforms.max))`),void 0,t.cacheKey,void 0,[{type:e.inputs[0].dataType,data:t.min},{type:e.inputs[0].dataType,data:t.max}],[{name:"min",type:r},{name:"max",type:r}]),{inputs:[0]})},nn=e=>{e.compute(Ur(e.inputs[0],"Ceil","ceil"))},an=e=>{e.compute(Ur(e.inputs[0],"Cos","cos"))},sn=e=>{e.compute(Ur(e.inputs[0],"Cosh","cosh"))},on=e=>st(e),ln=(e,A)=>{let t=ct(e.inputs[0].dataType);e.compute(Ur(e.inputs[0],"Elu",(e=>`elu_vf32(${e})`),`\n  const elu_alpha_ = ${t}(${A.alpha});\n\n  fn elu_f32(a: ${t}) -> ${t} {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<${t}>) -> vec4<${t}> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,A.cacheKey))},cn=(e="f32")=>`\nconst r0: ${e} = 0.3275911;\nconst r1: ${e} = 0.254829592;\nconst r2: ${e} = -0.284496736;\nconst r3: ${e} = 1.421413741;\nconst r4: ${e} = -1.453152027;\nconst r5: ${e} = 1.061405429;\n\nfn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`,gn=e=>{let A=ct(e.inputs[0].dataType);e.compute(Ur(e.inputs[0],"Erf",(e=>`erf_vf32(${e})`),cn(A)))},un=e=>{e.compute(Ur(e.inputs[0],"Exp","exp"))},dn=e=>{e.compute(Ur(e.inputs[0],"Floor","floor"))},fn=e=>{let A=ct(e.inputs[0].dataType);e.compute(Ur(e.inputs[0],"Gelu",(e=>`0.5 * ${e} * (1.0 + erf_vf32(${e} * 0.7071067811865475))`),cn(A)))},pn=(e,A)=>{let t=ct(e.inputs[0].dataType);e.compute(Ur(e.inputs[0],"LeakyRelu",(e=>`select(leaky_relu_alpha_ * ${e}, ${e}, ${e} >= vec4<${t}>(0.0))`),`const leaky_relu_alpha_ = ${t}(${A.alpha});`,A.cacheKey))},hn=e=>{e.compute(Ur(e.inputs[0],"Not",(e=>`!${e}`)))},mn=e=>{e.compute(Ur(e.inputs[0],"Neg",(e=>`-${e}`)))},Cn=e=>{e.compute(Ur(e.inputs[0],"Reciprocal",(e=>`1.0/${e}`)))},bn=e=>{let A=ct(e.inputs[0].dataType);e.compute(Ur(e.inputs[0],"Relu",(e=>`select(vec4<${A}>(0.0), ${e}, ${e} > vec4<${A}>(0.0))`)))},In=e=>{e.compute(Ur(e.inputs[0],"Sigmoid",(e=>`(1.0 / (1.0 + exp(-${e})))`)))},wn=e=>st(e),kn=(e,A)=>{let t=ct(e.inputs[0].dataType);e.compute(Ur(e.inputs[0],"HardSigmoid",(e=>`max(vec4<${t}>(0.0), min(vec4<${t}>(1.0), ${A.alpha} * ${e} + vec4<${t}>(${A.beta})))`),void 0,A.cacheKey))},xn=e=>{e.compute(Ur(e.inputs[0],"Sin","sin"))},vn=e=>{e.compute(Ur(e.inputs[0],"Sinh","sinh"))},Bn=e=>{e.compute(Ur(e.inputs[0],"Sqrt","sqrt"))},yn=e=>{e.compute(Ur(e.inputs[0],"Tan","tan"))},En=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,Mn=e=>{e.compute(Ur(e.inputs[0],"Tanh",En))},Gn=(e="f32")=>`\nconst fast_gelu_a: ${e} = 0.5;\nconst fast_gelu_b: ${e} = 0.7978845608028654;\nconst fast_gelu_c: ${e} = 0.035677408136300125;\n\nfn tanh_v(v: vec4<${e}>) -> vec4<${e}> {\n  return ${En("v")};\n}\n`,Dn=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,Qn=e=>{let A=ct(e.inputs[0].dataType);e.compute(Ur(e.inputs[0],"FastGelu",Dn,Gn(A),void 0,e.inputs[0].dataType))},Tn=(e,A)=>{let t=ct(e.inputs[0].dataType);return e.compute(Ur(e.inputs[0],"ThresholdedRelu",(e=>`select(vec4<${t}>(0.0), ${e}, ${e} > thresholded_relu_alpha_)`),`const thresholded_relu_alpha_ = vec4<${t}>(${A.alpha});`,A.cacheKey)),0},Pn=e=>{e.compute(Ur(e.inputs[0],"Log","log"))},zn=(e,A)=>`\nconst alpha = vec4<${e}>(${A});\nconst one = ${e}(1.0);\nconst zero = ${e}(0.0);\n\nfn quick_gelu_impl(x: vec4<${e}>) -> vec4<${e}> {\n  let v = x *alpha;\n  var x1 : vec4<${e}>;\n  for (var i = 0; i < 4; i = i + 1) {\n    if (v[i] >= zero) {\n      x1[i] = one / (one + exp(-v[i]));\n    } else {\n      x1[i] = one - one / (one + exp(v[i]));\n    }\n  }\n  return x * x1;\n}\n`,Fn=e=>`quick_gelu_impl(${e})`,Sn=(e,A)=>{let t=ct(e.inputs[0].dataType);e.compute(Ur(e.inputs[0],"QuickGelu",Fn,zn(t,A.alpha),A.cacheKey,e.inputs[0].dataType))}})),Rl=ee((()=>{yl(),Pl(),Hl(),Nn=e=>{if(3!==e[0].dims.length)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(1!==e[1].dims.length)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},On=e=>{let A=e[0].dims.slice();A[2]=A[2]/2;let t=Ct("input",e[0].dataType,e[0].dims,4),r=Ct("bias",e[0].dataType,[e[0].dims[2]],4),n=bt("output",e[0].dataType,A,4),a=QA.size(A)/4,s=lt(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:A,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:A=>`\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${e[0].dims[2]/4/2}u;\n\n  ${A.declareVariables(t,r,n)}\n\n  ${cn(s)}\n\n  ${A.mainStart()}\n    ${A.guardAgainstOutOfBoundsWorkgroupSizes(a)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${n.setByOffset("global_idx","valueLeft * geluRight")}\n  }`}},Ln=e=>{Nn(e.inputs),e.compute(On(e.inputs))}})),jl=ee((()=>{xl(),yl(),Pl(),Yn=(e,A,t,r,n,a,s,i,o,l,c,g)=>{let u,d;"string"==typeof i?u=d=(e,A)=>`${i}((${e}),(${A}))`:"function"==typeof i?u=d=i:(u=i.scalar,d=i.vector);let f,p=bt("outputData",c,r.length,4),h=Ct("aData",o,A.length,4),m=Ct("bData",l,t.length,4);if(n)if(a){let e=1===QA.size(A),r=1===QA.size(t),n=A.length>0&&A[A.length-1]%4==0,a=t.length>0&&t[t.length-1]%4==0;f=e||r?p.setByOffset("global_idx",d(e?`${h.type.value}(${h.getByOffset("0")}.x)`:h.getByOffset("global_idx"),r?`${m.type.value}(${m.getByOffset("0")}.x)`:m.getByOffset("global_idx"))):`\n            let outputIndices = ${p.offsetToIndices("global_idx * 4u")};\n            let offsetA = ${h.broadcastedIndicesToOffset("outputIndices",p)};\n            let offsetB = ${m.broadcastedIndicesToOffset("outputIndices",p)};\n            ${p.setByOffset("global_idx",d(s||n?h.getByOffset("offsetA / 4u"):`${h.type.value}(${h.getByOffset("offsetA / 4u")}[offsetA % 4u])`,s||a?m.getByOffset("offsetB / 4u"):`${m.type.value}(${m.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}\n          `}else f=p.setByOffset("global_idx",d(h.getByOffset("global_idx"),m.getByOffset("global_idx")));else{if(!a)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let e=(e,A,t="")=>{let r=`aData[indexA${A}][componentA${A}]`,n=`bData[indexB${A}][componentB${A}]`;return`\n            let outputIndices${A} = ${p.offsetToIndices(`global_idx * 4u + ${A}u`)};\n            let offsetA${A} = ${h.broadcastedIndicesToOffset(`outputIndices${A}`,p)};\n            let offsetB${A} = ${m.broadcastedIndicesToOffset(`outputIndices${A}`,p)};\n            let indexA${A} = offsetA${A} / 4u;\n            let indexB${A} = offsetB${A} / 4u;\n            let componentA${A} = offsetA${A} % 4u;\n            let componentB${A} = offsetB${A} % 4u;\n            ${e}[${A}] = ${t}(${u(r,n)});\n          `};f=9===c?`\n            var data = vec4<u32>(0);\n            ${e("data",0,"u32")}\n            ${e("data",1,"u32")}\n            ${e("data",2,"u32")}\n            ${e("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:`\n            ${e("outputData[global_idx]",0)}\n            ${e("outputData[global_idx]",1)}\n            ${e("outputData[global_idx]",2)}\n            ${e("outputData[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(h,m,p)}\n\n        ${g??""}\n\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${f}\n      }`},Hn=(e,A,t,r,n,a,s=t.dataType)=>{let i=t.dims.map((e=>Number(e)??1)),o=r.dims.map((e=>Number(e)??1)),l=!QA.areEqual(i,o),c=i,g=QA.size(i),u=!1,d=!1,f=[l];if(l){let e=DA.calcShape(i,o,!1);if(!e)throw new Error("Can't perform binary op on the given tensors");c=e.slice(),g=QA.size(c);let A=1===QA.size(i),t=1===QA.size(o),r=i.length>0&&i[i.length-1]%4==0,n=o.length>0&&o[o.length-1]%4==0;f.push(A),f.push(t),f.push(r),f.push(n);let a=1;for(let e=1;e<c.length;e++){let A=i[i.length-e];if(A!==o[o.length-e])break;a*=A}a%4==0?(d=!0,u=!0):(A||t||r||n)&&(u=!0)}else u=!0;return f.push(u),{name:e,shaderCache:{hint:A+f.map((e=>e.toString())).join("_"),inputDependencies:["rank","rank"]},getShaderSource:e=>Yn(e,i,o,c,u,l,d,n,t.dataType,r.dataType,s,a),getRunData:()=>({outputs:[{dims:c,dataType:s}],dispatchGroup:{x:Math.ceil(g/64/4)},programUniforms:[{type:12,data:Math.ceil(QA.size(c)/4)},...gt(i,o,c)]})}},Rn=(e,A,t,r,n,a)=>{e.compute(Hn(A,n??"",e.inputs[0],e.inputs[1],t,r,a))},jn=e=>{Rn(e,"Add",((e,A)=>`${e}+${A}`))},Vn=e=>{Rn(e,"Div",((e,A)=>`${e}/${A}`))},Wn=e=>{Rn(e,"Equal",{scalar:(e,A)=>`u32(${e}==${A})`,vector:(e,A)=>`vec4<u32>(${e}==${A})`},void 0,void 0,9)},Un=e=>{Rn(e,"Mul",((e,A)=>`${e}*${A}`))},Kn=e=>{let A=Ct("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;Rn(e,"Pow",{scalar:(e,A)=>`pow_custom(${e},${A})`,vector:(e,A)=>`pow_vector_custom(${e},${A})`},`\n    fn pow_custom(a : ${A}, b : ${A}) -> ${A} {\n      if (b == ${A}(0.0)) {\n        return ${A}(1.0);\n      } else if (a < ${A}(0.0) && f32(b) != floor(f32(b))) {\n        return ${A}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${A}(1.0), round(f32(abs(b) % ${A}(2.0))) != 1.0) * ${A}(${"i32"===A?"round":""}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${A}>, b : vec4<${A}>) -> vec4<${A}> {\n      // TODO: implement vectorized pow\n      return vec4<${A}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `)},Zn=e=>{Rn(e,"Sub",((e,A)=>`${e}-${A}`))},Xn=e=>{Rn(e,"Greater",{scalar:(e,A)=>`u32(${e}>${A})`,vector:(e,A)=>`vec4<u32>(${e}>${A})`},void 0,void 0,9)},qn=e=>{Rn(e,"Less",{scalar:(e,A)=>`u32(${e}<${A})`,vector:(e,A)=>`vec4<u32>(${e}<${A})`},void 0,void 0,9)},Jn=e=>{Rn(e,"GreaterOrEqual",{scalar:(e,A)=>`u32(${e}>=${A})`,vector:(e,A)=>`vec4<u32>(${e}>=${A})`},void 0,void 0,9)},_n=e=>{Rn(e,"LessOrEqual",{scalar:(e,A)=>`u32(${e}<=${A})`,vector:(e,A)=>`vec4<u32>(${e}<=${A})`},void 0,void 0,9)}})),Vl=ee((()=>{xl(),yl(),Tl(),Pl(),$n=(e,A)=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0],r=t.dataType,n=t.dims.length;e.forEach(((e,a)=>{if(0!==a){if(e.dataType!==r)throw new Error("input tensors should be one type");if(e.dims.length!==n)throw new Error("input tensors should have the same shape");e.dims.forEach(((e,r)=>{if(r!==A&&e!==t.dims[r])throw new Error("non concat dimensions must match")}))}}))},ea=(e,A)=>`\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${e}u>(${A});\n    for (var i: u32 = 0u; i < ${e}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${e}u;\n  }`,Aa=(e,A)=>{let t=e.length,r=[];for(let n=0;n<t;++n){let a=A.setByOffset("global_idx",e[n].getByIndices("indices"));1===t?r.push(a):0===n?r.push(`if (inputIndex == ${n}u) { ${a} }`):n===t-1?r.push(`else { ${a} }`):r.push(`else if (inputIndex == ${n}) { ${a} }`)}return r.join("\n")},ta=(e,A,t,r)=>{let n=QA.size(t),a=new Array(e.length),s=new Array(e.length),i=0,o=[],l=[],c=[{type:12,data:n}];for(let t=0;t<e.length;++t)i+=e[t].dims[A],a[t]=i,l.push(e[t].dims.length),s[t]=Ct(`input${t}`,r,l[t]),o.push("rank"),c.push({type:12,data:a[t]});for(let A=0;A<e.length;++A)c.push(...gt(e[A].dims));c.push(...gt(t));let g=bt("output",r,t.length),u=g.indicesGet("indices",A),d=Array.from(Array(a.length).keys()).map((e=>`uniforms.sizeInConcatAxis${e}`)).join(",");return{name:"Concat",shaderCache:{hint:`${A}`,inputDependencies:o},getRunData:()=>({outputs:[{dims:t,dataType:r}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:c}),getShaderSource:A=>`\n\n  ${(()=>{A.registerUniform("outputSize","u32");for(let t=0;t<e.length;t++)A.registerUniform(`sizeInConcatAxis${t}`,"u32");return A.declareVariables(...s,g)})()}\n\n  ${ea(a.length,d)}\n\n  ${A.mainStart()}\n    ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n    var indices = ${g.offsetToIndices("global_idx")};\n\n    let inputIndex = calculateInputIndex(${u});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${a.length}u>(${d});\n      ${u} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${Aa(s,g)}\n  }`}},ra=(e,A)=>{let t=e.inputs,r=t[0].dims,n=QA.normalizeAxis(A.axis,r.length);$n(t,n);let a=r.slice();a[n]=t.reduce(((e,A)=>e+(A.dims.length>n?A.dims[n]:0)),0);let s=t.filter((e=>QA.size(e.dims)>0));e.compute(ta(s,n,a,t[0].dataType),{inputs:s})},na=e=>st({axis:e.axis})})),Wl=ee((()=>{xl(),yl(),aa=(e,A,t="f32")=>{switch(e.activation){case"Relu":return`value = max(value, ${A}(0.0));`;case"Sigmoid":return`value = (${A}(1.0) / (${A}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${A}(${t}(uniforms.clip_min)), ${A}(${t}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${A}(0.0), min(${A}(1.0), ${t}(uniforms.alpha) * value + ${t}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${t}(uniforms.alpha) * value, value, value >= ${A}(0.0));`;case"Tanh":return"let e2x = exp(-2.0 * abs(value));\n              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);\n        ";case"":return"";default:throw new Error(`Unsupported activation ${e.activation}`)}},sa=(e,A)=>{"Clip"===e.activation?A.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):"HardSigmoid"===e.activation?A.push({type:1,data:e.alpha},{type:1,data:e.beta}):"LeakyRelu"===e.activation&&A.push({type:1,data:e.alpha})},ia=(e,A)=>{"Clip"===e.activation?A.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):"HardSigmoid"===e.activation?A.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):"LeakyRelu"===e.activation&&A.push({name:"alpha",type:"f32"})},oa=e=>{let A=e?.activation||"";if("HardSigmoid"===A){let[t,r]=e?.activation_params||[.2,.5];return{activation:A,alpha:t,beta:r}}if("Clip"===A){let[t,r]=e?.activation_params||[zA,FA];return{activation:A,clipMax:r,clipMin:t}}if("LeakyRelu"===A){let[t]=e?.activation_params||[.01];return{activation:A,alpha:t}}return{activation:A}}})),Ul=ee((()=>{la=(e,A)=>{switch(e){case 1:return A;case 2:return`vec2<${A}>`;case 3:return`vec3<${A}>`;case 4:return`vec4<${A}>`;default:throw new Error(`${e}-component is not supported.`)}},ca=e=>`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      `})),Kl=ee((()=>{ga=e=>`\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));\n}\n`})),Zl=ee((()=>{xl(),yl(),Pl(),Wl(),ua=(e,A,t,r,n)=>{let a=r-t;return`\n      ${Array.from({length:t}).map(((t,s)=>`\n      if (${ht(A.shape,s,A.rank)} != 1) {\n        ${A.indicesSet(e,s,ht(n,s+a,r))}\n      } else {\n        ${A.indicesSet(e,s,0)}\n      }`)).join("")}\n`},da=(e,A,t,r,n=!1,a)=>{let s=e[0].dims,i=e[1].dims,o=s[s.length-2],l=i[i.length-1],c=s[s.length-1],g=ut(l),u=ut(c),d=ut(o),f=QA.size(t)/g/d,p=e.length>2,h=r?r.slice(0,-2):t.slice(0,-2),m=[QA.size(h),o,l],C=[{type:12,data:f},{type:12,data:o},{type:12,data:l},{type:12,data:c}];sa(A,C),C.push(...gt(h,s,i)),p&&C.push(...gt(e[2].dims)),C.push(...gt(m));return{name:"MatMulNaive",shaderCache:{hint:`${A.activation};${g};${u};${d};${n}`,inputDependencies:p?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:a?a(t):t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:C}),getShaderSource:r=>{let a=wt("batch_dims",e[0].dataType,h.length),o=Ct("a",e[0].dataType,s.length,u),l=Ct("b",e[1].dataType,i.length,g),c=bt("output",e[0].dataType,m.length,g),f=lt(c.type.tensor),C=aa(A,c.type.value,f),b=[o,l],I="";if(p){let A=n?g:1;b.push(Ct("bias",e[2].dataType,e[2].dims.length,A)),I=""+(n?`value += bias[col / ${A}];`:`value += ${c.type.value}(bias[row + i]);`)}let w=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];ia(A,w);return`\n  ${r.registerUniforms(w).registerInternalVariables(a).declareVariables(...b,c)}\n  ${r.mainStart()}\n    ${r.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let col = (global_idx % (uniforms.N / ${g})) * ${g};\n    var index1 = global_idx / (uniforms.N / ${g});\n    let stride1 = uniforms.M / ${d};\n    let row = (index1 % stride1) * ${d};\n    let batch = index1 / stride1;\n\n    ${2===t.length?"":`let batch_indices = ${a.offsetToIndices("batch")};`}\n\n    var a_indices: ${o.type.indices};\n    ${ua("a_indices",o,o.rank-2,a.rank,"batch_indices")}\n    ${o.indicesSet("a_indices",o.rank-2,0)}\n    ${o.indicesSet("a_indices",o.rank-1,0)}\n    let a_offset = ${o.indicesToOffset("a_indices")};\n\n    var b_indices: ${l.type.indices};\n    ${ua("b_indices",l,l.rank-2,a.rank,"batch_indices")}\n    ${l.indicesSet("b_indices",l.rank-2,0)}\n    ${l.indicesSet("b_indices",l.rank-1,0)}\n    let b_offset = ${l.indicesToOffset("b_indices")};\n    var values: array<${c.type.value}, ${d}>;\n    for (var k: u32 = 0u; k < uniforms.K; k = k + ${u}) {\n      ${(()=>{let e=`var a_data: ${o.type.value};`;for(let A=0;A<u;A++)e+=`\n              let b_data${A} = b[(b_offset + (k + ${A}) * uniforms.N + col) / ${g}];`;for(let A=0;A<d;A++){e+=`a_data = a[(a_offset + (row + ${A}) * uniforms.K + k) / ${u}];`;for(let t=0;t<u;t++)e+=`\n            values[${A}] = fma(${l.type.value}(a_data${1===u?"":`[${t}]`}), b_data${t}, values[${A}]);\n`}return e})()}\n    }\n    for (var i = 0u; i < ${d}u; i++) {\n      var value = values[i];\n      ${I}\n      ${C}\n      let cur_indices = ${c.type.indices}(batch, row + i, col);\n      let offset = ${c.indicesToOffset("cur_indices")};\n      ${c.setByOffset(`offset / ${g}`,"value")};\n    }\n  }\n  `}}}})),Xl=ee((()=>{xl(),yl(),Pl(),Wl(),Zl(),Ul(),fa=(e,A)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${A?", batchIndices":""});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${A?", batchIndices":""});\n        `,pa=(e,A)=>e?`\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${3===A?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${3===A?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${3===A?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`,ha=(e,A,t="f32",r,n=!1,a=32,s=!1,i=32)=>{let o=A[1]*e[1],l=A[0]*e[0],c=n?o:a,g=n?a:o,u=c/A[0],d=a/A[1];if((!n||4!==u||4!==e[1])&&(n||3!==u&&4!==u)||c%A[0]!=0||a%A[1]!=0||4!==e[0])throw new Error(`If transposeA ${n} is true, innerElementSize ${u} and workPerThread[1] ${e[1]} must be 4.\n      Otherwise, innerElementSize ${u} must be 3 or 4.\n  tileAWidth ${c} must be divisible by workgroupSize[0]${A[0]}. tileInner ${a} must be divisible by workgroupSize[1] ${A[1]}. colPerThread ${e[0]} must be 4.`);return`\nvar<workgroup> mm_Asub: array<array<vec${u}<${t}>, ${c/u}>, ${g}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${t}>, ${l/e[0]}>, ${a}>;\n\nconst rowPerThread = ${e[1]};\nconst colPerThread = ${e[0]};\nconst innerElementSize = ${u};\nconst tileInner = ${a};\n\n@compute @workgroup_size(${A[0]}, ${A[1]}, ${A[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${s?"0":"i32(globalId.z)"};\n  ${r?`let batchIndices = ${r.offsetToIndices("u32(batch)")};`:""}\n  let globalRowStart = i32(workgroupId.y) * ${o};\n\n  let num_tiles = ${s?`${Math.ceil(i/a)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};\n  var kStart = ${s?`i32(globalId.z) * ${i}`:"0"};\n\n  var acc: array<vec4<${t}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${d};\n  for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${fa(n,r)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${d}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${r?", batchIndices":""});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${3===u?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\n\n          ${pa(n,u)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`},ma=(e,A)=>e?`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${A?", batchIndices":""});\n            `:`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${A?", batchIndices":""});\n            `,Ca=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",ba=(e,A,t="f32",r,n=!1,a=32,s=!1,i=32,o=!1)=>{let l=e[1]*A[1],c=e[0]*A[0],g=n?l:a,u=n?a:l;if(u%A[1]!=0||g%A[0]!=0||a%A[1]!=0)throw new Error(`tileAHight ${u} must be divisible by workgroupSize[1]${A[1]}, tileAWidth ${g} must be divisible by workgroupSize[0]${A[0]}, tileInner ${a} must be divisible by workgroupSize[1]${A[1]}`);let d=u/A[1],f=g/A[0],p=a/A[1],h=o?`\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${l};\n    let globalColStart = i32(workgroupId.x) * ${c};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${u}; inputRow = inputRow + ${A[1]}) {\n        for (var inputCol = localCol; inputCol < ${g}; inputCol = inputCol + ${A[0]}) {\n          ${ma(n,r)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${a}; inputRow = inputRow + ${A[1]}) {\n            for (var inputCol = localCol; inputCol < ${c}; inputCol = inputCol + ${A[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${r?", batchIndices":""});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${t}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${A[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${A[1]}];`:`mm_Asub[localRow + innerRow * ${A[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${A[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${A[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `:`\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${l};\n\nlet tileRowA = i32(localId.y) * ${d};\nlet tileColA = i32(localId.x) * ${f};\nlet tileRowB = i32(localId.y) * ${p};\n// Loop over shared dimension.\nfor (var t = 0; t < num_tiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${d}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${f}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${ma(n,r)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${p}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${r?", batchIndices":""});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${t}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${Ca(n)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;return`\n  var<workgroup> mm_Asub : array<array<${t}, ${g}>, ${u}>;\n  var<workgroup> mm_Bsub : array<array<${t}, ${c}>, ${a}>;\n  const rowPerThread = ${e[1]};\n  const colPerThread = ${e[0]};\n  const tileInner = ${a};\n\n@compute @workgroup_size(${A[0]}, ${A[1]}, ${A[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${s?"0":"i32(globalId.z)"};\n    ${r?`let batchIndices = ${r.offsetToIndices("u32(batch)")};`:""}\n    let num_tiles = ${s?`${Math.ceil(i/a)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};\n    var kStart = ${s?`i32(globalId.z) * ${i}`:"0"};\n\n    var acc : array<array<${t}, colPerThread>, rowPerThread>;\n    ${h}\n  }\n`},Ia=(e,A,t,r,n=!1)=>{let[a,s,i,o]=r,l=lt(r[0].type.tensor);return`\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${a.type.indices}) -> ${la(e,l)} {\n      var value = ${la(e,l)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)\n      {\n        var aIndices: ${s.type.indices};\n        ${ua("aIndices",s,s.rank-2,a.rank,"batchIndices")}\n        ${s.indicesSet("aIndices",s.rank-2,"u32(row)")}\n        ${s.indicesSet("aIndices",s.rank-1,"u32(colIn)")}\n        value = ${s.getByIndices("aIndices")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${a.type.indices}) -> ${la(e,l)} {\n      var value = ${la(e,l)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)\n      {\n        var bIndices: ${i.type.indices};\n        ${ua("bIndices",i,i.rank-2,a.rank,"batchIndices")}\n        ${i.indicesSet("bIndices",i.rank-2,"u32(row)")}\n        ${i.indicesSet("bIndices",i.rank-1,"u32(colIn)")}\n        value = ${i.getByIndices("bIndices")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${la(e,l)}) {\n      let col = colIn * ${e};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${A?`value = value + ${n?"bias[colIn]":`${la(e,l)}(bias[row])`};`:""}\n        ${t}\n        ${o.setByIndices("vec3<u32>(coords)","value")}\n      }\n    }\n    `},wa=(e,A,t,r,n=!1,a)=>{let s=e[0].dims,i=e[1].dims,o=s.slice(0,-2),l=i.slice(0,-2),c=r?r.slice(0,-2):t.slice(0,-2),g=QA.size(c),u=s[s.length-2],d=s[s.length-1],f=i[i.length-1],p=d%4==0&&f%4==0,h=u<=8?[4,1,1]:[4,4,1],m=[8,8,1],C=[Math.ceil(f/m[0]/h[0]),Math.ceil(u/m[1]/h[1]),Math.ceil(g/m[2]/h[2])],b=p?4:1,I=[...o,u,d/b],w=I.length,k=[...l,d,f/b],x=k.length,v=[g,u,f/b],B=[{type:6,data:u},{type:6,data:f},{type:6,data:d}];sa(A,B),B.push(...gt(c,I,k));let y=["rank","rank"],E=e.length>2;E&&(B.push(...gt(e[2].dims)),y.push("rank")),B.push(...gt(v));return{name:"MatMul",shaderCache:{hint:`${h};${A.activation};${p};${n}`,inputDependencies:y},getRunData:()=>({outputs:[{dims:a?a(t):t,dataType:e[0].dataType}],dispatchGroup:{x:C[0],y:C[1],z:C[2]},programUniforms:B}),getShaderSource:t=>{let r=c.length,a=wt("batchDims",e[0].dataType,r,1),s=lt(e[0].dataType),i=Ct("a",e[0].dataType,w,b),o=Ct("b",e[1].dataType,x,b),l=bt("result",e[0].dataType,v.length,b),g=[i,o];if(E){let A=n?b:1;g.push(Ct("bias",e[2].dataType,e[2].dims.length,A))}let u=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];ia(A,u);let d=lt(l.type.tensor),f=aa(A,l.type.value,d),C=Ia(b,E,f,[a,i,o,l],n);return`\n  ${t.registerUniforms(u).registerInternalVariables(a).declareVariables(...g,l)}\n  ${C}\n  ${p?ha(h,m,s,a):ba(h,m,s,a)}\n                   `}}}})),ql=ee((()=>{xl(),Bl(),Pl(),Wl(),Ul(),Kl(),Xl(),ka=(e,A,t,r,n=!1,a,s=4,i=4,o=4,l="f32")=>{let c=e=>{switch(e){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${e} is not supported.`)}},g=e?"\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    ":"\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    ",u=e?"\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ":"\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    ",d=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",f=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",p=e?"row":"col",h=e?"col":"row",m=`\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n    let outRow = ${p} / outWidth;\n    let outCol = ${p} % outWidth;\n\n    let WRow = ${h} / (i32(uniforms.w_shape[1]) * inChannels);\n    let WCol = ${h} / inChannels % i32(uniforms.w_shape[1]);\n    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];\n    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];\n    let xCh = ${h} % inChannels;\n    var resData = ${la(s,l)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the 'same' padding type.\n    if (xRow >= 0 && xRow < ${d} && xCol >= 0 && xCol < ${f}) {\n      ${g}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${(e=>{switch(e){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${l}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(s)}\n    }\n    return resData;`,C=e?A&&r?`\n    let col = colIn * ${s};\n    ${m}`:`\n    let col = colIn * ${s};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n      ${m}\n    }\n    return ${la(s,l)}(0.0);`:r&&t?`\n    let col = colIn * ${s};\n    ${m}`:`\n    let col = colIn * ${s};\n    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n      ${m}\n    }\n    return ${la(s,l)}(0.0);`,b=e?r&&t?c(i):`\n    let col = colIn * ${i};\n    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n      ${c(i)}\n    }\n    return ${la(i,l)}(0.0);`:`\n    let col = colIn * ${i};\n    if (row < uniforms.dim_inner && col < uniforms.dim_a_outer) {\n      ${c(i)}\n    }\n    return ${la(i,l)}(0.0);`,I=la(o,l),w=la(e?s:i,l),k=la(e?i:s,l),x=aa(a,I,l);return`\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${w} {\n      ${e?C:b}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${k} {\n      ${e?b:C}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${I}) {\n      let col = colIn * ${o};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)\n      {\n      var value = valueIn;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${u}\n      ${ca(n)}\n      ${x}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`},xa=(e,A,t,r,n,a,s,i,o)=>{let l="NHWC"===A.format,c=l?e[0].dims[3]:e[0].dims[1],g=t[0],u=l?t[2]:t[3],d=l?t[1]:t[2],f=l?t[3]:t[1],p=l&&(c%4==0||c%3==0)&&f%4==0,h=l?f:u*d,m=l?u*d:f,C=[8,8,1],b=r<=8?[4,1,1]:[4,4,1],I=[Math.ceil(h/C[0]/b[0]),Math.ceil(m/C[1]/b[1]),Math.ceil(g/C[2]/b[2])];MA("verbose",(()=>`[conv2d_mm_webgpu] dispatch = ${I}`));let w=p?l&&c%4!=0?3:4:1,k=C[1]*b[1],x=C[0]*b[0],v=Math.max(C[0]*w,C[1]),B=r%k==0,y=n%x==0,E=a%v==0,M=p?[w,4,4]:[1,1,1],G=[{type:6,data:r},{type:6,data:n},{type:6,data:a},{type:6,data:[A.pads[0],A.pads[1]]},{type:6,data:A.strides},{type:6,data:A.dilations}];sa(A,G),G.push(...gt(e[0].dims,e[1].dims));let D=["rank","rank"];s&&(G.push(...gt(e[2].dims)),D.push("rank")),G.push(...gt(t));return{name:"Conv2DMatMul",shaderCache:{hint:`${A.cacheKey};${w};${p};${B};${y};${E};${k};${x};${v}`,inputDependencies:D},getRunData:()=>({outputs:[{dims:o?o(t):t,dataType:e[0].dataType}],dispatchGroup:{x:I[0],y:I[1],z:I[2]},programUniforms:G}),getShaderSource:r=>{let n=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];ia(A,n);let a=p?4:1,o=lt(e[0].dataType),c=`\n      fn setOutputAtIndex(flatIndex : i32, value : ${p?`vec4<${o}>`:o}) {\n        result[flatIndex] = ${p?`vec4<${o}>`:o}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${p?`vec4<${o}>`:o}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${p?"/ 4":""}, value);\n      }`,g=[Ct("x",e[0].dataType,e[0].dims.length,3===w?1:w),Ct("w",e[1].dataType,e[1].dims.length,a)],u=bt("result",e[0].dataType,t.length,a);if(s){let A=Ct("bias",e[2].dataType,e[2].dims.length,a);g.push(A),c+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${p?`vec4<${o}>`:o} {\n          return bias[coords.${l?"w":"y"}${p?"/ 4":""}];\n        }`}return`\n        ${ga("uniforms.result_strides")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${r.registerUniforms(n).declareVariables(...g,u)}\n        ${c}\n        ${ka(l,B,y,E,s,A,M[0],M[1],M[2],o)}\n        ${p?ha(b,C,o,void 0,!l,v):ba(b,C,o,void 0,!l,v,!1,void 0,i)}`}}}})),Jl=ee((()=>{xl(),Bl(),yl(),Pl(),Wl(),Ul(),va=e=>{let A=1;for(let t=0;t<e.length;t++)A*=e[t];return A},Ba=e=>"number"==typeof e?[e,e,e]:e,ya=(e,A)=>A<=1?e:e+(e-1)*(A-1),Ea=(e,A,t,r=1)=>{let n=ya(A,r);return Math.floor((e[0]*(t-1)-t+n)/2)},Ma=(e,A,t,r,n)=>{null==n&&(n=Ea(e,A[0],r[0]));let a=[0,0,0,t];for(let t=0;t<3;t++)e[t]+2*n>=A[t]&&(a[t]=Math.trunc((e[t]-A[t]+2*n)/r[t]+1));return a},Ga=(e,A,t,r,n,a,s,i,o,l)=>{let c,g,u,d;if("VALID"===e&&(e=0),"number"==typeof e){c={top:e,bottom:e,left:e,right:e,front:e,back:e};let f=Ma([A,t,r,1],[i,o,l],1,[n,a,s],e);g=f[0],u=f[1],d=f[2]}else if(Array.isArray(e)){if(!e.every(((e,A,t)=>e===t[0])))throw Error(`Unsupported padding parameter: ${e}`);c={top:e[0],bottom:e[1],left:e[2],right:e[3],front:e[4],back:e[5]};let f=Ma([A,t,r,1],[i,o,l],1,[n,a,s],e[0]);g=f[0],u=f[1],d=f[2]}else{if("SAME_UPPER"!==e)throw Error(`Unknown padding parameter: ${e}`);{g=Math.ceil(A/n),u=Math.ceil(t/a),d=Math.ceil(r/s);let e=(g-1)*n+i-A,f=(u-1)*a+o-t,p=(d-1)*s+l-r,h=Math.floor(e/2),m=e-h,C=Math.floor(f/2),b=f-C,I=Math.floor(p/2);c={top:C,bottom:b,left:I,right:p-I,front:h,back:m}}}return{padInfo:c,outDepth:g,outHeight:u,outWidth:d}},Da=(e,A,t,r,n,a=!1,s="channelsLast")=>{let i,o,l,c,g;if("channelsLast"===s)[i,o,l,c,g]=e;else{if("channelsFirst"!==s)throw new Error(`Unknown dataFormat ${s}`);[i,g,o,l,c]=e}let[u,,d,f,p]=A,[h,m,C]=Ba(t),[b,I,w]=Ba(r),k=ya(d,b),x=ya(f,I),v=ya(p,w),{padInfo:B,outDepth:y,outHeight:E,outWidth:M}=Ga(n,o,l,c,h,m,C,k,x,v),G=a?u*g:u,D=[0,0,0,0,0];return"channelsFirst"===s?D=[i,G,y,E,M]:"channelsLast"===s&&(D=[i,y,E,M,G]),{batchSize:i,dataFormat:s,inDepth:o,inHeight:l,inWidth:c,inChannels:g,outDepth:y,outHeight:E,outWidth:M,outChannels:G,padInfo:B,strideDepth:h,strideHeight:m,strideWidth:C,filterDepth:d,filterHeight:f,filterWidth:p,effectiveFilterDepth:k,effectiveFilterHeight:x,effectiveFilterWidth:v,dilationDepth:b,dilationHeight:I,dilationWidth:w,inShape:e,outShape:D,filterShape:A}},Qa=(e,A,t,r,n,a)=>{let s="channelsLast"===a;s?e[0].dims[3]:e[0].dims[1];let i={x:t.map(((e,A)=>A))},o=[Math.ceil(va(i.x.map((e=>t[e])))/64),1,1];MA("verbose",(()=>`[conv3d_naive_webgpu] dispatch = ${o}`));let l=[{type:12,data:QA.size(t)},{type:12,data:r},{type:12,data:n},{type:12,data:A.strides},{type:12,data:A.dilations}];sa(A,l),l.push(...gt(e[0].dims,e[1].dims));let c=["rank","rank"],g=3===e.length;g&&(l.push(...gt(e[2].dims)),c.push("rank")),l.push(...gt(t));return{name:"Conv3DNaive",shaderCache:{hint:`${A.cacheKey};${s};1;${g}`,inputDependencies:c},getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:o[0],y:o[1],z:o[2]},programUniforms:l}),getShaderSource:a=>{let i=[{name:"output_size",type:"u32"},{name:"filter_dims",type:"u32",length:r.length},{name:"pads",type:"u32",length:n.length},{name:"strides",type:"u32",length:A.strides.length},{name:"dilations",type:"u32",length:A.dilations.length}];ia(A,i);let o=lt(e[0].dataType),l=Ct("x",e[0].dataType,e[0].dims.length,1),c=Ct("W",e[1].dataType,e[1].dims.length,1),u=[l,c],d=bt("result",e[0].dataType,t.length,1),f="";if(g){let A=Ct("bias",e[2].dataType,e[2].dims.length,1);u.push(A),f+=`\n        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${o} {\n          return bias[${ht("coords",s?4:1,5)}];\n        }`}let p=la(1,o),h=aa(A,p,o);return`\n            ${f}\n            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {\n              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);\n              return ${l.getByIndices("aIndices")};\n            }\n            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {\n              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);\n              return ${c.getByIndices("aIndices")};\n            }\n          ${a.registerUniforms(i).declareVariables(...u,d)}\n          ${a.mainStart()}\n          ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n              let coords = ${d.offsetToIndices("global_idx")};\n              let batch = ${ht("coords",0,l.rank)};\n              let d2 = ${ht("coords",s?l.rank-1:1,l.rank)};\n              let xFRCCorner = vec3<u32>(${ht("coords",s?1:2,l.rank)},\n              ${ht("coords",s?2:3,l.rank)},\n              ${ht("coords",s?3:4,l.rank)}) * uniforms.strides - uniforms.pads;\n              let xFCorner = xFRCCorner.x;\n              let xRCorner = xFRCCorner.y;\n              let xCCorner = xFRCCorner.z;\n              let xShapeY = ${ht("uniforms.x_shape",s?1:2,l.rank)};\n              let xShapeZ = ${ht("uniforms.x_shape",s?2:3,l.rank)};\n              let xShapeW = ${ht("uniforms.x_shape",s?3:4,l.rank)};\n              let xShapeU = ${ht("uniforms.x_shape",s?4:1,l.rank)};\n              let inputDepthNearestVec4 = (xShapeU / 4) * 4;\n              let inputDepthVec4Remainder = xShapeU % 4;\n\n              var value = 0.0;\n              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {\n                let xF = xFCorner + wF * uniforms.dilations[0];\n                if (xF < 0 || xF >= xShapeY) {\n                  continue;\n                }\n\n                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {\n                  let xR = xRCorner + wR * uniforms.dilations[1];\n                  if (xR < 0 || xR >= xShapeZ) {\n                    continue;\n                  }\n\n                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {\n                    let xC = xCCorner + wC * uniforms.dilations[2];\n                    if (xC < 0 || xC >= xShapeW) {\n                      continue;\n                    }\n\n                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {\n                      ${s?"let xValues = vec4<f32>(\n                               getX(batch, xF, xR, xC, d1),\n                               getX(batch, xF, xR, xC, d1 + 1),\n                               getX(batch, xF, xR, xC, d1 + 2),\n                               getX(batch, xF, xR, xC, d1 + 3));\n                            ":"let xValues = vec4<f32>(\n                               getX(batch, d1, xF, xR, xC),\n                               getX(batch, d1 + 1, xF, xR, xC),\n                               getX(batch, d1 + 2, xF, xR, xC),\n                               getX(batch, d1 + 3, xF, xR, xC));\n                            "}\n                            let wValues = vec4<f32>(\n                              getW(d2, d1, wF, wR, wC),\n                              getW(d2, d1 + 1, wF, wR, wC),\n                              getW(d2, d1 + 2, wF, wR, wC),\n                              getW(d2, d1 + 3, wF, wR, wC));\n                      value += dot(xValues, wValues);\n                    }\n                    if (inputDepthVec4Remainder == 1) {\n                        ${s?"value += getX(batch, xF, xR, xC, inputDepthNearestVec4)\n                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);":"value += getX(batch, inputDepthNearestVec4, xF, xR, xC)\n                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);"}\n                    } else if (inputDepthVec4Remainder == 2) {\n                      ${s?"let xValues = vec2<f32>(\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));\n                      ":"let xValues = vec2<f32>(\n                        getX(batch, inputDepthNearestVec4, xF, xR, xC),\n                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));\n                    "}\n                    let wValues = vec2<f32>(\n                      getW(d2, inputDepthNearestVec4, wF, wR, wC),\n                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));\n                      value += dot(xValues, wValues);\n                    } else if (inputDepthVec4Remainder == 3) {\n                      ${s?"let xValues = vec3<f32>(\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));\n                      ":"let xValues = vec3<f32>(\n                        getX(batch, inputDepthNearestVec4, xF, xR, xC),\n                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),\n                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));\n                    "}\n                    let wValues = vec3<f32>(\n                      getW(d2, inputDepthNearestVec4, wF, wR, wC),\n                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),\n                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));\n                      value += dot(xValues, wValues);\n                    }\n                  }\n                }\n              }\n              ${g?"value = value + getBiasByOutputCoords(coords)":""};\n              ${h}\n              result[global_idx] = f32(value);\n          }`}}}})),_l=ee((()=>{xl(),yl(),Pl(),Wl(),Ta=(e,A,t,r)=>{let n=e.length>2,a=n?"value += b[output_channel];":"",s=e[0].dims,i=e[1].dims,o="NHWC"===A.format,l=o?t[3]:t[1],c=l/A.group,g=o&&c>=4?ut(l):1,u=QA.size(t)/g,d=[{type:12,data:u},{type:12,data:A.dilations},{type:12,data:[A.strides[0],A.strides[1]]},{type:12,data:[A.pads[0],A.pads[1]]},{type:12,data:c}];sa(A,d),d.push(...gt(s,[i[0],i[1],i[2],i[3]/g]));let f=n?["rank","rank","rank"]:["rank","rank"];d.push(...gt([t[0],t[1],t[2],t[3]/g]));return{name:"GroupedConv",shaderCache:{hint:`${A.cacheKey}_${g}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:r?r(t):t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:d}),getShaderSource:r=>{let l=bt("output",e[0].dataType,t.length,g),c=lt(l.type.tensor),u=aa(A,l.type.value,c),d=Ct("x",e[0].dataType,s.length),f=Ct("w",e[1].dataType,i.length,g),p=[d,f];n&&p.push(Ct("b",e[2].dataType,e[2].dims,g));let h=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:A.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];ia(A,h);let m=o?`\n      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[0]; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];\n\n        if (xHeight < 0u || xHeight >= uniforms.x_shape[1]) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[1]; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];\n          if (xWidth < 0u || xWidth >= uniforms.x_shape[2]) {\n            continue;\n          }\n\n          for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[2]; wInChannel++) {\n            let input_channel = in_channel_offset + wInChannel;\n            let xVal = ${d.get("batch","xHeight","xWidth","input_channel")};\n            let wVal = ${f.get("wHeight","wWidth","wInChannel","output_channel")};\n            value += xVal * wVal;\n          }\n        }\n      }\n      `:`\n      for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {\n        let input_channel = in_channel_offset + wInChannel;\n        for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {\n          let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];\n\n          if (xHeight < 0u || xHeight >= uniforms.x_shape[2]) {\n            continue;\n          }\n\n          for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {\n            let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];\n            if (xWidth < 0u || xWidth >= uniforms.x_shape[3]) {\n              continue;\n            }\n\n            let xVal = ${d.get("batch","input_channel","xHeight","xWidth")};\n            let wVal = ${f.get("output_channel","wInChannel","wHeight","wWidth")};\n            value += xVal * wVal;\n          }\n        }\n      }\n      `;return`\n  ${r.registerUniforms(h).declareVariables(...p,l)}\n\n  ${r.mainStart()}\n    ${r.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let outputIndices = ${l.offsetToIndices("global_idx")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${o?3:1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${o?1:2}], outputIndices[${o?2:3}]) * uniforms.strides - uniforms.pads;\n    let group_id: u32 = output_channel * ${g} / uniforms.output_channels_per_group;\n    var in_channel_offset = group_id * uniforms.w_shape[${o?2:1}];\n\n    var value: ${l.type.value} = ${l.type.value}(0);\n    ${m}\n    ${a}\n    ${u}\n    ${l.setByOffset("global_idx","value")}\n  }`}}},Pa=(e,A,t,r)=>{let n=e.length>2,a=ut(t[3]),s=ut(t[2]),i=QA.size(t)/a/s,o=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/a],l=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/a],c=[t[0],t[1],t[2],t[3]/a],g=[{type:12,data:i},{type:6,data:[A.strides[0],A.strides[1]]},{type:6,data:[A.pads[0],A.pads[1]]}];sa(A,g),g.push(...gt(o,l,c));let u=(s-1)*A.strides[1]+l[1];return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${A.cacheKey};${a};${s};${u};${l[0]};${l[1]}`,inputDependencies:n?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r?r(t):t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:g}),getShaderSource:t=>{let r=bt("output",e[0].dataType,c.length,a),i=lt(r.type.tensor),g=aa(A,r.type.value,i),d=Ct("x",e[0].dataType,o.length,a),f=Ct("w",e[1].dataType,l.length,a),p=[d,f];n&&p.push(Ct("b",e[2].dataType,e[2].dims,a));let h=n?"value += b[output_channel];":"",m=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return ia(A,m),`\n  ${t.registerUniforms(m).declareVariables(...p,r)}\n  ${t.mainStart()}\n    ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let width0 = uniforms.output_shape[3];\n    let output_channel = global_idx % width0;\n    var index1 = global_idx / width0;\n    let width1 = uniforms.output_shape[2] / ${s}u;\n    let col = (index1 % width1) * ${s}u;\n    index1 = index1 / width1;\n    let row = index1 % uniforms.output_shape[1];\n    let batch = index1 / uniforms.output_shape[1];\n\n    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;\n\n    var x_vals: array<${d.type.value}, ${u}>;\n    var values: array<${r.type.value}, ${s}>;\n    let input_channel = output_channel;\n    // Use constant instead of uniform can give better performance for w's height/width.\n    for (var w_height: u32 = 0u; w_height < ${l[0]}; w_height++) {\n      let x_height = x_corner.x + i32(w_height);\n      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {\n        for (var i = 0; i < ${u}; i++) {\n          let x_width = x_corner.y + i;\n          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {\n            x_vals[i] = ${d.get("batch","u32(x_height)","u32(x_width)","input_channel")};\n          } else {\n            x_vals[i] = ${d.type.value}(0);\n          }\n        }\n        for (var w_width: u32 = 0u; w_width < ${l[1]}; w_width++) {\n          let w_val = ${f.get("w_height","w_width","0","output_channel")};\n          for (var i = 0u; i < ${s}u; i++) {\n            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);\n          }\n        }\n      }\n    }\n\n    for (var i = 0u; i < ${s}u; i++) {\n      var value = values[i];\n      ${h}\n      ${g}\n      ${r.set("batch","row","col + i","output_channel","value")};\n    }\n  }`}}}})),$l=ee((()=>{yl(),ql(),Jl(),Xl(),_l(),Wl(),Zl(),zl(),za=(e,A,t,r,n,a)=>{let s=e[0],i=e.slice(a?1:2,a?3:4),o=i.length,l=A[0],c=A.slice(2).map(((e,A)=>e+(e-1)*(t[A]-1))),g=i.map(((e,A)=>e+r[A]+r[A+o])).map(((e,A)=>Math.floor((e-c[A]+n[A])/n[A])));return g.splice(0,0,s),g.splice(a?3:1,0,l),g},Fa=[2,3,1,0],Sa=(e,A)=>{if(!e||2!==e.length&&3!==e.length)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length>5)throw new Error("greater than 5D is not supported");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");if(e[0].dims["NHWC"===A.format?e[0].dims.length-1:1]!==e[1].dims[1]*A.group)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(3===e.length&&(1!==e[2].dims.length||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let t=e[0].dims.length-2;if(A.dilations.length!==t)throw new Error(`dilations should be ${t}D`);if(A.strides.length!==t)throw new Error(`strides should be ${t}D`);if(A.pads.length!==2*t)throw new Error(`pads should be ${2*t}D`);if(0!==A.kernelShape.length&&A.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Na=(e,A)=>{let t=e.kernelShape.slice();t.length<A[1].dims.length-2&&t.push(...Array(A[1].dims.length-2-t.length).fill(0));for(let e=2;e<A[1].dims.length;++e)0===t[e-2]&&(t[e-2]=A[1].dims[e]);let r=e.pads.slice();TA.adjustPadsBasedOnAutoPad(A[0].dims,e.strides,e.dilations,t,r,"NHWC"===e.format,e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:t,pads:r}),n},Oa=e=>{let A=oa(e),t=e.format;return{autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],format:t,dilations:e.dilations,group:e.group,kernelShape:e.kernel_shape,pads:e.pads,strides:e.strides,wIsConst:e.w_is_const(),...A,cacheKey:`${e.format};${A.activation};`}},La=(e,A,t,r)=>{let n="NHWC"===t.format,a=za(A[0].dims,A[1].dims,t.dilations,t.pads,t.strides,n);if(1!==t.group){let s=[A[0]];if(n){let r=e.kernelCustomData.wT??e.compute(Dt(A[1],Fa),{inputs:[1],outputs:[t.wIsConst?-2:-1]})[0];t.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=r),s.push(r)}else s.push(A[1]);return 3===A.length&&s.push(A[2]),void(!e.adapterInfo.isArchitecture("ampere")&&n&&A[1].dims[0]===t.group&&1===A[1].dims[1]&&1===t.dilations[0]&&1===t.dilations[1]?e.compute(Pa(s,t,a,r),{inputs:s}):e.compute(Ta(s,t,a,r),{inputs:s}))}let s=3===A.length,i=A[0].dims[n?1:2],o=A[0].dims[n?2:3],l=A[0].dims[n?3:1],c=A[1].dims[2],g=A[1].dims[3],u=a[n?1:2],d=a[n?2:3],f=a[n?3:1],p=n&&c===i&&g===o&&0===t.pads[0]&&0===t.pads[1];if(p||1===c&&1===g&&1===t.dilations[0]&&1===t.dilations[1]&&1===t.strides[0]&&1===t.strides[1]&&0===t.pads[0]&&0===t.pads[1]){let c,g,h,m=a[0],C=[];if(n){let r=e.kernelCustomData.wT??e.compute(Dt(A[1],Fa),{inputs:[1],outputs:[t.wIsConst?-2:-1]})[0];if(t.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=r),p){let e=i*o*l;c=A[0].reshape([1,m,e]),g=r.reshape([1,e,f]),h=[1,m,f]}else c=A[0].reshape([m,i*o,l]),g=r.reshape([1,l,f]),h=[m,u*d,f];C.push(c),C.push(g)}else c=A[0].reshape([m,l,i*o]),g=A[1].reshape([1,f,l]),h=[m,f,u*d],C.push(g),C.push(c);s&&C.push(A[2]);let b=h[2],I=C[0].dims[C[0].dims.length-1];return void(b<8&&I<8?e.compute(da(C,t,a,h,n,r),{inputs:C}):e.compute(wa(C,t,a,h,n,r),{inputs:C}))}let h=e.kernelCustomData.wT??e.compute(Dt(A[1],Fa),{inputs:[1],outputs:[t.wIsConst?-2:-1]})[0];t.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=h);let m=[A[0],h];s&&m.push(A[2]);let C=n?u*d:f,b=n?f:u*d,I=c*g*l;e.compute(xa(m,t,a,C,b,I,s,!0,r),{inputs:m})},Ya=(e,A)=>{let t="NHWC"===A.format,r=[e.inputs[0].reshape(t?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===e.inputs.length&&r.push(e.inputs[2]);let n=[0,A.pads[0],0,A.pads[1]],a=[1].concat(A.strides),s=[1].concat(A.dilations),i=[1].concat(A.kernelShape),o=Na({...A,pads:n,strides:a,dilations:s,kernelShape:i},r);La(e,r,o,(e=>t?[e[0],e[2],e[3]]:[e[0],e[1],e[3]]))},Ha=(e,A,t)=>{let r="NHWC"===t.format?"channelsLast":"channelsFirst",n=Na(t,A),a="NOTSET"===t.autoPad?t.pads:t.autoPad,s=Da(A[0].dims,A[1].dims,t.strides,t.dilations,a,!1,r);e.compute(Qa(A,n,s.outShape,[s.filterDepth,s.filterHeight,s.filterWidth],[s.padInfo.front,s.padInfo.top,s.padInfo.left],r))},Ra=(e,A)=>{if(Sa(e.inputs,A),3===e.inputs[0].dims.length)Ya(e,A);else if(5===e.inputs[0].dims.length)Ha(e,e.inputs,A);else{let t=Na(A,e.inputs);La(e,e.inputs,t)}}})),ec=ee((()=>{xl(),Bl(),yl(),Pl(),ja=(e,A,t)=>{let r=e.length>2,n=A.outputShape,a="NHWC"===A.format,s=A.group,i=e[1].dims,o=i[2]/s,l=i[3],c=a?ut(o):1,g=a&&1===l&&o>=4,u=g?4*Math.floor(o/4):Math.floor(o/c)*c,d=o-u,f=a?ut(l):1,p=a?1===l?c:f:1,h=QA.size(n)/f,m=[Math.ceil(h/64),1,1];MA("verbose",(()=>`[conv2d_backprop_webgpu] dispatch = ${m}`));let C=["rank","rank"],b=[A.strides[0],A.strides[1]],I=[A.kernelShape[a?1:2],A.kernelShape[a?2:3]],w=[A.dilations[0],A.dilations[1]],k=[I[0]+(A.dilations[0]<=1?0:(A.kernelShape[a?1:2]-1)*(A.dilations[0]-1)),I[1]+(A.dilations[1]<=1?0:(A.kernelShape[a?2:3]-1)*(A.dilations[1]-1))],x=[k[0]-1-Math.floor((A.pads[0]+A.pads[2])/2),k[1]-1-Math.floor((A.pads[1]+A.pads[3])/2)],v=[{type:12,data:h},{type:12,data:b},{type:12,data:I},{type:12,data:w},{type:12,data:k},{type:6,data:x},{type:12,data:u},{type:12,data:o},{type:12,data:l},...gt(e[0].dims,e[1].dims)];r&&(v.push(...gt(e[2].dims)),C.push("rank")),v.push(...gt(n));return{name:"ConvTranspose2D",shaderCache:{hint:`${A.cacheKey};${c}${p}${f}${g}${d}`,inputDependencies:C},getRunData:()=>({dispatchGroup:{x:m[0],y:m[1],z:m[2]},outputs:[{dims:t?t(n):n,dataType:e[0].dataType}],programUniforms:v}),getShaderSource:A=>{let t=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:b.length},{name:"filter_dims",type:"u32",length:I.length},{name:"dilations",type:"u32",length:I.length},{name:"effective_filter_dims",type:"u32",length:k.length},{name:"pads",type:"i32",length:x.length},{name:"input_channels_per_group_int",type:"u32"},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],s=lt(e[0].dataType),i=a?1:2,o=a?2:3,l=a?3:1,u=Ct("W",e[1].dataType,e[1].dims.length,p),h=Ct("Dy",e[0].dataType,e[0].dims.length,c),m=[h,u];r&&m.push(Ct("bias",e[2].dataType,[n[l]].length,f));let C=bt("result",e[0].dataType,n.length,f),w=`\n            let outputIndices = ${C.offsetToIndices(`global_idx * ${f}`)};\n            let batch = ${C.indicesGet("outputIndices",0)};\n            let d1 = ${C.indicesGet("outputIndices",l)};\n            let r = ${C.indicesGet("outputIndices",i)};\n            let c = ${C.indicesGet("outputIndices",o)};\n            let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;\n            let dyRCorner = dyCorner.x;\n            let dyCCorner = dyCorner.y;\n            let groupId = d1 / uniforms.output_channels_per_group;\n            let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;\n            // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n            // ? = to be determined. : = across all values in that axis.\n            var dotProd = ${C.type.value}(0.0);\n            var wR: u32 = 0;\n            if (uniforms.dilations.x == 1) {\n              // Minimum wR >= 0 that satisfies (dyRCorner + wR) % (uniforms.strides.x) == 0\n              wR = u32(((dyRCorner + i32(uniforms.strides.x) - 1) / i32(uniforms.strides.x)) * i32(uniforms.strides.x) - dyRCorner);\n            }\n            for (; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {\n              if (wR % uniforms.dilations.x != 0) {\n                continue;\n              }\n              let dyR = (${s}(dyRCorner) + ${s}(wR)) / ${s}(uniforms.strides[0]);\n              let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;\n              if (dyR < 0.0 || dyR >= ${s}(uniforms.Dy_shape[${i}]) || fract(dyR) > 0.0 ||\n                  wRPerm < 0) {\n                continue;\n              }\n              let idyR: u32 = u32(dyR);\n              var wC: u32 = 0;\n              if (uniforms.dilations.y == 1) {\n                // Minimum wC >= 0 that satisfies (dyCCorner + wC) % (uniforms.strides.y) == 0\n                wC = u32(((dyCCorner + i32(uniforms.strides.y) - 1) / i32(uniforms.strides.y)) * i32(uniforms.strides.y) - dyCCorner);\n              }\n              for (; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {\n                if (wC % uniforms.dilations.y != 0) {\n                  continue;\n                }\n                let dyC = (${s}(dyCCorner) + ${s}(wC)) / ${s}(uniforms.strides.y);\n                let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;\n                if (dyC < 0.0 || dyC >= ${s}(uniforms.Dy_shape[${o}]) ||\n                    fract(dyC) > 0.0 || wCPerm < 0) {\n                  continue;\n                }\n                let idyC: u32 = u32(dyC);\n                var inputChannel = groupId * uniforms.input_channels_per_group;\n                ${g?`\n                var x_offset = ${h.indicesToOffset(`${h.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${c};\n                var w_offset = ${u.indicesToOffset(`${u.type.indices}(wRPerm, wCPerm, inputChannel, wOutChannel)`)} / ${p};\n                  `:""}\n                for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group_int; d2 = d2 + ${g?4:c}) {\n                  ${(()=>{let e="";if(g)4===c?e+=`\n        let xValue = ${h.getByOffset("x_offset")};\n        let wValue = ${u.getByOffset("w_offset")};\n        dotProd = dotProd + dot(xValue, wValue);\n        x_offset += 1u;\n        w_offset += 1u;`:2===c?e+=`\n          dotProd = dotProd + dot(vec4<${s}>(${h.getByOffset("x_offset")}, ${h.getByOffset("x_offset + 1u")}), vec4<${s}>(${u.getByOffset("w_offset")}, ${u.getByOffset("w_offset + 1u")}));\n          x_offset += 2u;\n          w_offset += 2u;`:1===c&&(e+=`\n          dotProd = dotProd + dot(vec4<${s}>(${h.getByOffset("x_offset")}, ${h.getByOffset("x_offset + 1u")}, ${h.getByOffset("x_offset + 2u")}, ${h.getByOffset("x_offset + 3u")}), vec4<${s}>(${u.getByOffset("w_offset")}, ${u.getByOffset("w_offset + 1u")}, ${u.getByOffset("w_offset + 2u")}, ${u.getByOffset("w_offset + 3u")}));\n          x_offset += 4u;\n          w_offset += 4u;`);else if(e+=`\n                  let xValue = ${a?h.getByOffset(`${h.indicesToOffset(`${h.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${c}`):h.get("batch","inputChannel","idyR","idyC")};\n        `,1===c)e+=`\n          let w_offset = ${u.indicesToOffset(`${u.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel, wOutChannel)`)};\n          let wValue = ${u.getByOffset(`w_offset / ${p}`)};\n          dotProd = dotProd + xValue * wValue;`;else for(let A=0;A<c;A++)e+=`\n            let wValue${A} = ${u.getByOffset(`${u.indicesToOffset(`${u.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel + ${A}, wOutChannel)`)} / ${p}`)};\n            dotProd = dotProd + xValue[${A}] * wValue${A};`;return e})()}\n                  inputChannel = inputChannel + ${g?4:c};\n                }\n                ${(()=>{if(0===d)return"";if(!g)throw new Error(`packInputAs4 ${g} is not true.`);let e="";if(1===c){e+="dotProd = dotProd";for(let A=0;A<d;A++)e+=`\n            + ${h.getByOffset(`x_offset + ${A}`)} * ${u.getByOffset(`w_offset + ${A}`)}`;e+=";"}else if(2===c){if(2!==d)throw new Error(`Invalid inputChannelsRemainder ${d}.`);e+=`\n          let xValue = ${h.getByOffset("x_offset")};\n          let wValue = ${u.getByOffset("w_offset")};\n          dotProd = dotProd + dot(xValue, wValue);`}return e})()}\n                wC = wC + uniforms.strides.y - 1;\n              }\n              wR = wR + uniforms.strides[0] - 1;\n            }\n            let value = dotProd${r?` + bias[d1 / ${f}]`:""};\n            ${C.setByOffset("global_idx","value")};\n          `;return`\n    ${A.registerUniforms(t).declareVariables(...m,C)}\n      ${A.mainStart()}\n      ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};\n    ${w}}`}}}})),Ac=ee((()=>{ec(),Wl(),zl(),Va=(e,A,t,r,n,a)=>(e-1)*A+t+(r-1)*n+1-a,Wa=(e,A,t,r,n)=>{let a=Math.floor(e/2);"SAME_UPPER"===A?(t[r]=a,t[n]=e-a):"SAME_LOWER"===A&&(t[r]=e-a,t[n]=a)},Ua=(e,A,t,r,n,a,s,i,o,l)=>{let c=e.length-2,g=0===l.length;o.length<c&&o.push(...Array(c-o.length).fill(0));let u=e[0],d=A[i?3:1]*n;for(let n=0,u=e.length-c-(i?1:0);n<c;++n,++u){let i=e[u],d=g?i*s[n]:l[n],f=Va(i,s[n],a[n],A[u],t[n],d);Wa(f,r,a,n,n+c),g&&l.push(s[n]*(i-1)+o[n]+(A[u]-1)*t[n]+1-a[n]-a[n+c])}l.splice(0,0,u),l.splice(i?3:1,0,d)},Ka=(e,A)=>{let t=e.kernelShape.slice();if(0===e.kernelShape.length||0===e.kernelShape.reduce(((e,A)=>e*A),1)){t.length=0;for(let e=2;e<A[1].dims.length;++e)t.push(A[1].dims[e])}let r="NHWC"===e.format;t.splice(0,0,A[1].dims[0]),t.splice(r?3:1,0,A[1].dims[1]);let n=e.pads.slice(),a=e.outputShape.slice(),s=e.outputPadding.slice(),i=A[0].dims,o=e.dilations.slice();if(0===o.reduce(((e,A)=>e+A),0)){let e=A[0].dims.length-2;o=new Array(e).fill(1)}let l=e.strides.slice();if(0===l.reduce(((e,A)=>e+A),0)){let e=A[0].dims.length-2;l=new Array(e).fill(1)}Ua(i,t,o,e.autoPad,e.group,n,l,r,s,a);let c=Object.assign({},e);return Object.assign(c,{kernelShape:t,pads:n,outputPadding:s,outputShape:a,dilations:o,strides:l}),c},Za=e=>{let A=oa(e),t=e.format,r=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,a=e.group,s=e.kernelShape,i=e.pads,o=e.strides,l=e.wIsConst();return{autoPad:r,format:t,dilations:n,group:a,kernelShape:s,outputPadding:e.outputPadding,outputShape:e.outputShape,pads:i,strides:o,wIsConst:l,...A,cacheKey:`${e.format};${A.activation};`}},Xa=(e,A)=>{if(!e||2!==e.length&&3!==e.length)throw new Error("Conv requires 2 or 3 inputs");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");if(e[0].dims["NHWC"===A.format?e[0].dims.length-1:1]!==e[1].dims[0])throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let t=e[1].dims[1]*A.group;if(3===e.length&&(1!==e[2].dims.length||e[2].dims[0]!==t))throw new Error("invalid bias");let r=e[0].dims.length-2;if(A.dilations.reduce(((e,A)=>e+A),0)>0&&A.dilations.length!==r)throw new Error(`dilations should be ${r}D`);if(A.strides.reduce(((e,A)=>e+A),0)>0&&A.strides.length!==r)throw new Error(`strides should be ${r}D`);if(A.pads.reduce(((e,A)=>e+A),0)>0&&A.pads.length!==2*r)throw new Error(`pads should be ${2*r}D`);if(A.outputPadding.length!==r&&0!==A.outputPadding.length)throw new Error(`output_padding should be ${r}D`);if(A.kernelShape.reduce(((e,A)=>e+A),0)>0&&0!==A.kernelShape.length&&A.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(0!==A.outputShape.length&&A.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},qa=(e,A,t,r)=>{let n=e.kernelCustomData.wT??e.compute(Dt(A[1],[2,3,0,1]),{inputs:[1],outputs:[t.wIsConst?-2:-1]})[0];t.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=n);let a=[A[0],n];3===A.length&&a.push(A[2]),e.compute(ja(a,t,r),{inputs:a})},Ja=(e,A)=>{let t="NHWC"===A.format,r=[e.inputs[0].reshape(t?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===e.inputs.length&&r.push(e.inputs[2]);let n=A.kernelShape;(0===n.length||0===n[0])&&(n=[e.inputs[1].dims[2]]);let a=A.dilations;(0===a.length||0===a[0])&&(a=[1]);let s=A.strides;(0===s.length||0===s[0])&&(s=[1]);let i=A.pads;0===i.length&&(i=[0,0]),i=[0,i[0],0,i[1]],s=[1].concat(s),a=[1].concat(a),n=[1].concat(n);let o=A.outputPadding;o=[0].concat(o);let l=Ka({...A,pads:i,strides:s,dilations:a,kernelShape:n,outputPadding:o},r);qa(e,r,l,(e=>t?[e[0],e[2],e[3]]:[e[0],e[1],e[3]]))},_a=(e,A)=>{if(Xa(e.inputs,A),3===e.inputs[0].dims.length)Ja(e,A);else{let t=Ka(A,e.inputs);qa(e,e.inputs,t)}}})),tc=ee((()=>{xl(),yl(),Tl(),Pl(),$a=(e,A,t,r)=>{let n=QA.size(A),a=A.length,s=Ct("input",e,a),i=bt("output",e,a),o=6===t.dataType?t.getInt32Array()[0]:Number(t.getBigInt64Array()[0]),l=QA.normalizeAxis(o,a);return{name:"CumSum",shaderCache:{hint:r.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:A,dataType:e}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:12,data:n},{type:12,data:l},...gt(A,A)]}),getShaderSource:e=>{let A=` i32(${s.indicesGet("inputIndices","uniforms.axis")}) `,t=ht("uniforms.input_shape","uniforms.axis",a),n=r.reverse?A+(r.exclusive?" + 1":""):"0",o=r.reverse?t:A+(r.exclusive?"":" + 1");return`\n                ${e.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(s,i)}\n                ${e.mainStart()}\n                  ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n                  var inputIndices = ${i.offsetToIndices("global_idx")};\n                  var sum = ${i.type.value}(0);\n                  let first : i32 = ${n};\n                  let last : i32 = ${o};\n                  for (var i : i32 = first; i < last; i++) {\n                    ${s.indicesSet("inputIndices","uniforms.axis","u32(i)")};\n                    sum = sum + ${s.getByIndices("inputIndices")};\n                  }\n                  ${i.setByOffset("global_idx","sum")};\n                }`}}},es=(e,A)=>{let t=e.inputs[0].dims,r=e.inputs[0].dataType,n=e.inputs[1];e.compute($a(r,t,n,A),{inputs:[0]})},As=e=>{let A=1===e.exclusive,t=1===e.reverse;return st({exclusive:A,reverse:t})}})),rc=ee((()=>{xl(),yl(),Tl(),Pl(),ts=e=>{if(!e||1!==e.length)throw new Error("DepthToSpace requires 1 input.");if(4!==e[0].dims.length)throw new Error("DepthToSpace requires 4D input.")},rs=(e,A,t,r)=>{let n=[];n.push(`fn perm(i: ${r.type.indices}) -> ${t.type.indices} {\n    var a: ${t.type.indices};`);for(let r=0;r<A;++r)n.push(t.indicesSet("a",e[r],`i[${r}]`));return n.push("return a;}"),n.join("\n")},ns=(e,A)=>{let t,r,n,a,s,i,o="NHWC"===A.format,l=A.blocksize,c="DCR"===A.mode;o?([t,r,n,a]=e.dims,s=c?[t,r,n,l,l,a/l**2]:[t,r,n,a/l**2,l,l],i=c?[0,1,3,2,4,5]:[0,1,4,2,5,3]):([t,r,n,a]=[e.dims[0],e.dims[2],e.dims[3],e.dims[1]],s=c?[t,l,l,a/l**2,r,n]:[t,a/l**2,l,l,r,n],i=c?[0,3,4,1,5,2]:[0,1,4,2,5,3]);let g=e.reshape(s),u=g.dims.length,d=e.dataType,f=Ct("a",d,u),p=bt("output",d,u);return{name:"DepthToSpace",shaderCache:{hint:`${e.dims};${A.blocksize};${A.mode}`,inputDependencies:["rank"]},getRunData:e=>{let A=o?[t,r*l,n*l,a/l**2]:[t,a/l**2,r*l,n*l],s=QA.size(A),c=g.dims,u=QA.sortBasedOnPerm(c,i);return{outputs:[{dims:A,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:[{type:12,data:s},...gt(c,u)]}},getShaderSource:e=>`\n  ${e.registerUniform("output_size","u32").declareVariables(f,p)}\n\n  ${rs(i,u,f,p)}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${p.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${p.setByOffset("global_idx",f.getByIndices("aIndices"))}\n  }`}},as=(e,A)=>{ts(e.inputs),e.compute(ns(e.inputs[0],A))},ss=e=>st({blocksize:e.blocksize,mode:e.mode,format:e.format})})),nc=ee((()=>{xl(),yl(),Tl(),Pl(),ls="^"+(os="("+(is="[a-zA-Z]|\\.\\.\\.")+")+")+"$",cs="^"+("("+os+",)*"+os)+"$",gs=class{constructor(e=-1){this.symbolToIndices=new Map,this.inputIndex=e}addSymbol(e,A){let t=this.symbolToIndices.get(e);void 0===t?t=[A]:t.push(A),this.symbolToIndices.set(e,t)}},us=class{constructor(e,A){this.equation=A,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[t,r]=A.includes("->")?A.split("->",2):[A,""];if(!t.match(RegExp(cs)))throw new Error("Invalid LHS term");if(t.split(",").forEach(((A,t)=>{let r=e[t].dims.slice();if(!A.match(RegExp(ls)))throw new Error("Invalid LHS term");let n=this.processTerm(A,!0,r,t);this.lhs.push(n)})),""===r)r+=[...this.symbolToInfo.entries()].filter((([e,A])=>1===A.count||"..."===e)).map((([e])=>e)).join("");else if(!r.match(RegExp(os)))throw new Error("Invalid RHS");r.match(RegExp(is,"g"))?.forEach((e=>{if("..."===e)this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let A=this.symbolToInfo.get(e);if(void 0===A)throw new Error("Invalid RHS symbol");this.outputDims.push(A.dimValue)}})),this.rhs=this.processTerm(r,!1,this.outputDims)}addSymbol(e,A,t){let r=this.symbolToInfo.get(e);if(void 0!==r){if(r.dimValue!==A&&1!==r.count)throw new Error("Dimension mismatch");r.count++,r.inputIndices.push(t)}else r={count:1,dimValue:A,inputIndices:[t]};this.symbolToInfo.set(e,r)}processTerm(e,A,t,r=-1){let n=t.length,a=!1,s=[],i=0;if(!e.match(RegExp(ls))&&!A&&""!==e)throw new Error("Invalid LHS term");let o=e.match(RegExp(is,"g")),l=new gs(r);return o?.forEach(((e,c)=>{if("..."===e){if(a)throw new Error("Only one ellipsis is allowed per input term");a=!0;let e=n-o.length+1;if(e<0)throw new Error("Ellipsis out of bounds");if(s=t.slice(i,i+e),this.hasEllipsis){if(this.ellipsisDims.length!==s.length||this.ellipsisDims.toString()!==s.toString())throw new Error("Ellipsis dimensions mismatch")}else{if(!A)throw new Error("Ellipsis must be specified in the LHS");this.hasEllipsis=!0,this.ellipsisDims=s}for(let e=0;e<s.length;e++){let A=String.fromCharCode(48+e);l.addSymbol(A,c+e),this.addSymbol(A,t[i++],r)}}else l.addSymbol(e,c+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(e,t[i++],r)})),l}},ds=e=>e+"_max",fs=(e,A,t,r)=>{let n=e.map((e=>e.length)).map(((e,t)=>Ct(`input${t}`,A,e))),a=QA.size(r),s=bt("output",A,r.length),i=[...t.symbolToInfo.keys()].filter((e=>!t.rhs.symbolToIndices.has(e)));return{name:"Einsum",shaderCache:{hint:t.equation,inputDependencies:e.map((()=>"rank"))},getRunData:()=>{let n=i.filter((e=>t.symbolToInfo.has(e))).map((e=>({type:12,data:t.symbolToInfo.get(e)?.dimValue||0})));n.push({type:12,data:a});let s=e.map(((e,A)=>[...gt(e)])).reduce(((e,A)=>e.concat(A)),n);return s.push(...gt(r)),{outputs:[{dims:r,dataType:A}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:s}},getShaderSource:e=>{let A=[],r=[],a=[],o=[],l=[],c=t.symbolToInfo.size===t.rhs.symbolToIndices.size;t.symbolToInfo.forEach(((e,i)=>{if(t.rhs.symbolToIndices.has(i)){let r=t.rhs.symbolToIndices.get(i)?.[0];void 0!==r&&t.lhs.forEach(((t,a)=>{if(e.inputIndices.includes(a)){let e=t.symbolToIndices.get(i);if(void 0===e)throw new Error("Invalid symbol error");e.forEach((e=>{A.push(`${n[a].indicesSet(`input${a}Indices`,e,s.indicesGet("outputIndices",r))}`)}))}}))}else t.lhs.forEach(((A,t)=>{if(e.inputIndices.includes(t)){let e=A.symbolToIndices.get(i);if(void 0===e)throw new Error("Invalid symbol error");e.forEach((e=>{r.push(`${n[t].indicesSet(`input${t}Indices`,e,`${i}`)}`)})),l.push(`prod *= ${n[t].getByIndices(`input${t}Indices`)};`)}})),a.push(`for(var ${i}: u32 = 0; ${i} < uniforms.${ds(i)}; ${i}++) {`),o.push("}")}));let g=c?[...A,`let sum = ${n.map(((e,A)=>e.getByIndices(`input${A}Indices`))).join(" * ")};`]:[...A,"var sum = 0.0;",...a,...r,"var prod = 1.0;",...l,"sum += prod;",...o];return`\n            ${e.registerUniforms(i.map((e=>({name:`${ds(e)}`,type:"u32"})))).registerUniform("outputSize","u32").declareVariables(...n,s)}\n\n            ${e.mainStart()}\n            ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n            var outputIndices = ${s.offsetToIndices("global_idx")};\n            ${n.map(((e,A)=>`var input${A}Indices: ${n[A].type.indices};`)).join("\n")}\n            ${g.join("\n")};\n            ${s.setByOffset("global_idx","sum")};\n          }`}}},ps=(e,A)=>{let t=new us(e.inputs,A.equation),r=t.outputDims,n=e.inputs.map(((e,A)=>e.dims));e.compute(fs(n,e.inputs[0].dataType,t,r))},hs=e=>{let A=e.equation.replace(/\s+/g,"");return st({equation:A})}})),ac=ee((()=>{xl(),yl(),Pl(),ms=e=>{if(!e||2!==e.length)throw new Error("Expand requires 2 input.");let A=e[0].dims,t=Array.from(e[1].getBigInt64Array(),Number),r=t.length<A.length?0:t.length-A.length,n=A.length<t.length?0:A.length-t.length;for(;r<t.length&&n<A.length;++r,++n)if(t[r]!==A[n]&&1!==t[r]&&1!==A[n])throw new Error("Expand requires shape to be broadcastable to input")},Cs=(e,A)=>{let t=e.length-A.length,r=[];for(let A=0;A<t;++A)r.push(e[A]);for(let n=0;n<A.length;++n)r.push(1===A[n]?e[n+t]:A[n]);return r},bs=(e,A)=>e.length>A.length?Cs(e,A):Cs(A,e),Is=e=>{let A=e[0].dims,t=Array.from(e[1].getBigInt64Array(),Number),r=bs(A,t),n=e[0].dataType,a=9===n||1===QA.size(A),s=9===n||A.length>0&&A[A.length-1]%4==0?4:1,i=a||r.length>0&&r[r.length-1]%4==0?4:1,o=Math.ceil(QA.size(r)/i),l=[{type:12,data:o},...gt(A,r)];return{name:"Expand",shaderCache:{hint:`${r.length};${s}${i}`,inputDependencies:["rank"]},getShaderSource:e=>{let t,a=Ct("input",n,A.length,s),o=bt("output",n,r.length,i);if(9===n){let e=(e,A,t="")=>`\n          let outputIndices${A} = ${o.offsetToIndices(`outputOffset + ${A}u`)};\n          let offset${A} = ${a.broadcastedIndicesToOffset(`outputIndices${A}`,o)};\n          let index${A} = offset${A} / 4u;\n          let component${A} = offset${A} % 4u;\n          ${e}[${A}] = ${t}(${a.getByOffset(`index${A}`)}[component${A}]);\n        `;t=`\n        let outputOffset = global_idx * ${i};\n        var data = vec4<u32>(0);\n        ${e("data",0,"u32")}\n        ${e("data",1,"u32")}\n        ${e("data",2,"u32")}\n        ${e("data",3,"u32")}\n        ${o.setByOffset("global_idx","data")}\n      }`}else t=`\n        let outputIndices = ${o.offsetToIndices(`global_idx * ${i}`)};\n        let inputOffset = ${a.broadcastedIndicesToOffset("outputIndices",o)};\n        let data = ${o.type.value}(${a.getByOffset(`inputOffset / ${s}`)});\n        ${o.setByOffset("global_idx","data")}\n      }`;return`\n    ${e.registerUniform("vec_size","u32").declareVariables(a,o)}\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n    ${t}`},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:l})}},ws=e=>{ms(e.inputs),e.compute(Is(e.inputs),{inputs:[0]})}})),sc=ee((()=>{xl(),yl(),Pl(),Hl(),ks=e=>{let A=e[0].dataType,t=QA.size(e[0].dims),r=QA.size(e[1].dims),n=r%4==0;return{name:"FastGeluWithBias",shaderCache:{hint:`${n}`,inputDependencies:["type","type"]},getShaderSource:e=>{let t=Ct("x",A,[1],4),r=Ct("bias",A,[1],4),a=bt("y",A,[1],4),s=e=>`\n      let bias${e}_offset: u32 = (global_idx * 4 + ${e}) % uniforms.bias_size;\n      let bias${e} = ${r.getByOffset(`bias${e}_offset / 4`)}[bias${e}_offset % 4];`,i=n?`\n      let bias = ${r.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${s(0)}${s(1)}${s(2)}${s(3)}\n      let bias = ${t.type.value}(bias0, bias1, bias2, bias3);`;return`${e.registerUniforms([{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}]).declareVariables(t,r,a)}\n\n    ${Gn(ct(A))}\n\n    ${e.mainStart(it)}\n      ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}\n\n      let x = ${t.getByOffset("global_idx")};\n      ${i}\n      let x_in = x + bias;\n      ${a.setByOffset("global_idx",Dn("x_in"))}\n    }`},getRunData:e=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],programUniforms:[{type:12,data:Math.ceil(t/4)},{type:12,data:r}],dispatchGroup:{x:Math.ceil(t/it/4)}})}},xs=e=>{e.inputs.length<2||0===QA.size(e.inputs[1].dims)?Qn(e):e.compute(ks(e.inputs))}})),ic=ee((()=>{xl(),yl(),Tl(),Pl(),vs=e=>{if(!e||2!==e.length)throw new Error("Gather requires 2 inputs.")},Bs=(e,A)=>{let t=e[0].dims,r=e[1].dims,n=t.length,a=QA.normalizeAxis(A.axis,n),s=t.slice(0);s.splice(a,1,...r);let i=t[a],o=9===e[0].dataType?4:1,l=Math.ceil(QA.size(s)/o),c=[{type:12,data:l},{type:6,data:i},{type:12,data:a},...gt(e[0].dims,e[1].dims,s)];return{name:"Gather",shaderCache:{hint:A.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:s,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:c}),getShaderSource:A=>{let t,i=Ct("data",e[0].dataType,e[0].dims.length,o),l=Ct("inputIndices",e[1].dataType,e[1].dims.length),c=bt("output",e[0].dataType,s.length,o),g=e=>{let A=r.length,t=`var indicesIndices${e}  = ${l.type.indices}(0);`;for(let r=0;r<A;r++)t+=`${A>1?`indicesIndices${e}[${r}]`:`indicesIndices${e}`} = ${s.length>1?`outputIndices${e}[uniforms.axis + ${r}]`:`outputIndices${e}`};`;t+=`\n          var idx${e} = ${l.getByIndices(`indicesIndices${e}`)};\n          if (idx${e} < 0) {\n            idx${e} = idx${e} + uniforms.axisDimLimit;\n          }\n          var dataIndices${e} : ${i.type.indices};\n        `;for(let r=0,i=0;r<n;r++)r===a?(t+=`${n>1?`dataIndices${e}[${r}]`:`dataIndices${e}`} = u32(idx${e});`,i+=A):(t+=`${n>1?`dataIndices${e}[${r}]`:`dataIndices${e}`} = ${s.length>1?`outputIndices${e}[${i}]`:`outputIndices${e}`};`,i++);return t};if(9===e[0].dataType){let e=(e,A,t="")=>`\n          let outputIndices${A} = ${c.offsetToIndices(`outputOffset + ${A}u`)};\n          ${g(A)};\n          let offset${A} = ${i.indicesToOffset(`dataIndices${A}`)};\n          let index${A} = offset${A} / 4u;\n          let component${A} = offset${A} % 4u;\n          ${e}[${A}] = ${t}(${i.getByOffset(`index${A}`)}[component${A}]);\n        `;t=`\n        let outputOffset = global_idx * ${o};\n        var value = vec4<u32>(0);\n        ${e("value",0,"u32")}\n        ${e("value",1,"u32")}\n        ${e("value",2,"u32")}\n        ${e("value",3,"u32")}\n        ${c.setByOffset("global_idx","value")}\n      `}else t=`\n      let outputIndices = ${c.offsetToIndices("global_idx")};\n      ${g("")};\n      let value = ${i.getByIndices("dataIndices")};\n      ${c.setByOffset("global_idx","value")};\n      `;return`\n      ${A.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(i,l,c)}\n      ${A.mainStart()}\n        ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        ${t}\n      }`}}},ys=e=>st({axis:e.axis}),Es=(e,A)=>{let t=e.inputs;vs(t),e.compute(Bs(e.inputs,A))}})),oc=ee((()=>{xl(),yl(),Pl(),Ms=(e,A,t,r,n,a,s,i,o)=>{let l=[{type:12,data:a},{type:12,data:r},{type:12,data:n},{type:12,data:t},{type:12,data:s},{type:12,data:i},{type:12,data:o}],c=[a];l.push(...gt(A.dims,c));return e.compute({name:"computeSliceOffsets",shaderCache:{hint:`${n.length}_${t.length}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:c,dataType:e.inputs[1].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:l}),getShaderSource:e=>{let r=[Ct("indices_data",A.dataType,A.dims.length),bt("input_slice_offsets_data",12,1,1)],a=[{name:"output_size",type:"u32"},{name:"batch_dims",type:"u32"},{name:"input_dims",type:"u32",length:n.length},{name:"sizes_from_slice_dims_data",type:"u32",length:t.length},{name:"num_slices_per_batch",type:"u32"},{name:"input_batch_stride",type:"u32"},{name:"num_slice_dims",type:"u32"}];return`\n  ${e.registerUniforms(a).declareVariables(...r)}\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let batch_idx = global_idx / uniforms.num_slices_per_batch;\n    let base_offset = batch_idx * uniforms.input_batch_stride;\n\n    let slice_indices_base_offset = global_idx * uniforms.num_slice_dims;\n    var relative_slice_offset = 0;\n    for (var dim_idx = 0u; dim_idx < uniforms.num_slice_dims; dim_idx ++) {\n      var index = i32(indices_data[dim_idx + slice_indices_base_offset].x);\n      let input_dim_idx = uniforms.batch_dims + dim_idx;\n      if (index < 0) {\n        ${1===n.length?"index += i32(uniforms.input_dims);":"index += i32(uniforms.input_dims[input_dim_idx]);"}\n      }\n      ${1===t.length?"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data);":"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data[dim_idx]);"}\n    }\n\n    input_slice_offsets_data[global_idx] =  base_offset + u32(relative_slice_offset);\n  }`}},{inputs:[A],outputs:[-1]})[0]},Gs=(e,A)=>{let t=e.inputs,r=t[0].dims,n=t[0].dataType,a=t[1].dims,s=a[a.length-1],i=QA.sizeToDimension(a,a.length-1),o=QA.sizeFromDimension(r,A.batchDims+s),l=QA.sizeToDimension(r,A.batchDims),c=QA.sizeFromDimension(r,A.batchDims),g=i/l,u=new Array(s),d=o;for(let e=0;e<s;++e)u[s-1-e]=d,d*=r[A.batchDims+s-1-e];let f=Ms(e,t[1],u,A.batchDims,r,i,g,c,s),p=A.batchDims+s;if(p>r.length)throw new Error("last dimension of indices must not be larger than rank of input tensor");let h=a.slice(0,-1).concat(r.slice(p)),m=QA.size(h),C=[{type:12,data:m},{type:12,data:o},...gt(t[0].dims,f.dims,h)];e.compute({name:"GatherND",shaderCache:{hint:A.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:h,dataType:n}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:C}),getShaderSource:e=>{let A=Ct("data",t[0].dataType,t[0].dims.length),r=Ct("slice_offsets",12,f.dims.length),n=bt("output",t[0].dataType,h.length);return`\n          ${e.registerUniform("output_size","u32").registerUniform("slice_size","u32").declareVariables(A,r,n)}\n            ${e.mainStart()}\n            ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          let slice_offset = slice_offsets[global_idx / uniforms.slice_size];\n          output[global_idx] = data[u32(slice_offset) + global_idx % uniforms.slice_size];\n        }`}},{inputs:[t[0],f]})},Ds=e=>({batchDims:e.batch_dims,cacheKey:""})})),lc=ee((()=>{xl(),yl(),Tl(),Pl(),Qs=(e,A)=>{if(e.length<3||e.length>4)throw new Error("GatherBlockQuantized requires 3 or 4 inputs.");let t=QA.normalizeAxis(A.quantizeAxis,e[0].dims.length),r=A.blockSize,n=e[0],a=e[2],s=4===e.length?e[3]:void 0;if(a.dims.length!==n.dims.length||!n.dims.map(((e,A)=>A===t?Math.ceil(e/r)===a.dims[A]:e===a.dims[A])).reduce(((e,A)=>e&&A),!0))throw new Error("Scales must have the same rank as the input tensor and the dims should match except on gatherAxis.");if(s){if(s.dataType!==n.dataType)throw new Error("Zero point must have the same data type as the input tensor.");if(s.dims.length!==a.dims.length||!s.dims.map(((e,A)=>e===a.dims[A])).reduce(((e,A)=>e&&A),!0))throw new Error("Zero point must have the same rank as the input tensor and the dims should match except on quantizeAxis.")}},Ts=(e,A)=>{let t=e[0].dims,r=e[1].dims,n=t.length,a=QA.normalizeAxis(A.gatherAxis,n),s=QA.normalizeAxis(A.quantizeAxis,n),i=t.slice(0);i.splice(a,1,...r);let o=QA.size(i),l=e[2].dataType,c=22===e[0].dataType,g=[{type:12,data:o},{type:12,data:s},{type:12,data:a},{type:12,data:A.blockSize},...gt(...e.map(((e,A)=>e.dims)),i)];return{name:"GatherBlockQuantized",shaderCache:{hint:`${A.cacheKey};${e.filter(((e,A)=>1!==A)).map((e=>e.dims.join("_"))).join(";")}`,inputDependencies:Array.from({length:e.length},((e,A)=>"rank"))},getRunData:()=>({outputs:[{dims:i,dataType:l}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:g}),getShaderSource:A=>{let n=Ct("data",e[0].dataType,e[0].dims.length),s=Ct("inputIndices",e[1].dataType,e[1].dims.length),o=Ct("scales",e[2].dataType,e[2].dims.length),g=e.length>3?Ct("zeroPoint",e[3].dataType,e[3].dims.length):void 0,u=bt("output",l,i.length),d=[n,s,o];g&&d.push(g);return`\n        ${A.registerUniforms([{name:"output_size",type:"u32"},{name:"quantize_axis",type:"u32"},{name:"gather_axis",type:"u32"},{name:"block_size",type:"u32"}]).declareVariables(...d,u)}\n        ${A.mainStart()}\n        let output_indices = ${u.offsetToIndices("global_idx")};\n        var indices_indices = ${s.type.indices}(0);\n        ${r.length>1?`\n          for (var i: u32 = 0; i < ${r.length}; i++) {\n            let index = ${u.indicesGet("output_indices","uniforms.gather_axis + i")};\n            ${s.indicesSet("indices_indices","i","index")};\n          }`:`indices_indices = ${u.indicesGet("output_indices","uniforms.gather_axis")};`};\n        var data_indices = ${n.type.indices}(0);\n        for (var i: u32 = 0; i < uniforms.gather_axis; i++) {\n          let index = ${u.indicesGet("output_indices","i")};\n          ${n.indicesSet("data_indices","i","index")};\n        }\n        var index_from_indices = ${s.getByIndices("indices_indices")};\n        if (index_from_indices < 0) {\n          index_from_indices += ${t[a]};\n        }\n        ${n.indicesSet("data_indices","uniforms.gather_axis","u32(index_from_indices)")};\n        for (var i = uniforms.gather_axis + 1; i < ${i.length}; i++) {\n          let index = ${u.indicesGet("output_indices",`i + ${r.length} - 1`)};\n          ${n.indicesSet("data_indices","i","index")};\n        }\n        let data_offset = ${n.indicesToOffset("data_indices")};\n        let data_index = data_offset % 8;\n        // Convert 4-bit packed data to 8-bit packed data.\n        let packed_4bit_quantized_data = ${n.getByOffset("data_offset / 8")};\n        let packed_8bit_quantized_data = (packed_4bit_quantized_data >> (4 * (data_index % 2))) & 0x0f0f0f0f;\n        let quantized_data_vec = ${c?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_quantized_data));\n        let quantized_data = quantized_data_vec[data_index / 2];\n        var scale_indices = data_indices;\n        let quantize_axis_index = ${o.indicesGet("data_indices","uniforms.quantize_axis")} / uniforms.block_size;\n        ${o.indicesSet("scale_indices","uniforms.quantize_axis","quantize_axis_index")};\n        var scale = ${o.getByIndices("scale_indices")};\n        ${g?`\n              let zero_point_indices = scale_indices;\n              let zero_point_offset = ${g.indicesToOffset("zero_point_indices")};\n              let zero_point_index = zero_point_offset % 8;\n              let packed_4bit_zero_points = ${g.getByOffset("zero_point_offset / 8")};\n              let packed_8bit_zero_points = (packed_4bit_zero_points >> (4 * (zero_point_index % 2))) & 0x0f0f0f0f;\n              let zero_point_vec = ${c?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_zero_points));\n              let zero_point = zero_point_vec[zero_point_index / 2];`:"var zero_point = 0"};\n        let dequantized_data = ${ct(l)}(quantized_data - zero_point) * scale;\n        ${u.setByOffset("global_idx","dequantized_data")};\n    }`}}},Ps=(e,A)=>{let t=e.inputs;Qs(t,A),e.compute(Ts(e.inputs,A))},zs=e=>st({blockSize:e.blockSize,gatherAxis:e.gatherAxis,quantizeAxis:e.quantizeAxis})})),cc=ee((()=>{xl(),yl(),Tl(),Pl(),Fs=e=>{if(!e||2!==e.length)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error("GatherElements requires that the data input and\n                     indices input tensors be of same rank.")},Ss=(e,A)=>{let t=e[0].dims,r=e[0].dataType,n=t.length,a=e[1].dims,s=e[1].dataType,i=QA.normalizeAxis(A.axis,n),o=t[i],l=a.slice(0),c=QA.size(l),g=Ct("input",r,n),u=Ct("indicesInput",s,a.length),d=bt("output",r,l.length),f=[{type:12,data:c},{type:6,data:o},{type:12,data:i}];return f.push(...gt(t,a,l)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:l,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:f}),getShaderSource:e=>`\n      ${e.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(g,u,d)}\n      ${e.mainStart()}\n      ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n      let outputIndices = ${d.offsetToIndices("global_idx")};\n\n      var idx = ${u.getByOffset("global_idx")};\n      if (idx < 0) {\n        idx = idx + uniforms.axisDimLimit;\n      }\n      var inputIndices = ${g.type.indices}(outputIndices);\n      ${g.indicesSet("inputIndices","uniforms.axis","u32(idx)")};\n      let value = ${g.getByIndices("inputIndices")};\n\n      ${d.setByOffset("global_idx","value")};\n  }`}},Ns=e=>st({axis:e.axis}),Os=(e,A)=>{let t=e.inputs;Fs(t),e.compute(Ss(e.inputs,A))}})),gc=ee((()=>{xl(),yl(),Pl(),Ls=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(3===e.length&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||3===e.length&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Ys=(e,A)=>{let t=e[0].dims.slice(),r=e[1].dims.slice(),[n,a,s]=PA.getShapeOfGemmResult(t,A.transA,r,A.transB,3===e.length?e[2].dims:void 0),i=[n,a];if(!i)throw new Error("Can't use gemm on the given tensors");let o=16,l=Math.ceil(a/o),c=Math.ceil(n/o),g=(QA.size(i),[{type:12,data:l},{type:12,data:n},{type:12,data:a},{type:12,data:s},{type:1,data:A.alpha},{type:1,data:A.beta}]),u=["type","type"];3===e.length&&(g.push(...gt(e[2].dims)),u.push("rank")),g.push(...gt(i));return{name:"GemmShared",shaderCache:{hint:`${A.cacheKey}`,inputDependencies:u},getRunData:()=>({outputs:[{dims:i,dataType:e[0].dataType}],dispatchGroup:{x:l*c},programUniforms:g}),getShaderSource:t=>{let r=Ct("a",e[0].dataType,e[0].dims),n=Ct("b",e[1].dataType,e[1].dims),a=null,s=[r,n];3===e.length&&(a=Ct("c",e[2].dataType,e[2].dims.length),s.push(a));let l=bt("output",e[0].dataType,i.length);s.push(l);let c="",g="";A.transA&&A.transB?(g=`\n      var col = tile_row_start + local_id.x;\n      var row = k_start + local_id.y;\n      if (col < uniforms.M && row < uniforms.K) {\n        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];\n      } else {\n        tile_a[local_id.y][local_id.x] = ${r.type.value}(0);\n      }\n\n      col = k_start + local_id.x;\n      row = tile_col_start + local_id.y;\n      if (col < uniforms.K && row < uniforms.N) {\n        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];\n      } else {\n        tile_b[local_id.y][local_id.x] = ${n.type.value}(0);\n      }\n      `,c="value += tile_a[k][local_id.y] * tile_b[local_id.x][k];"):A.transA&&!A.transB?(g=`\n      var col = tile_row_start + local_id.x;\n      var row = k_start + local_id.y;\n      if (col < uniforms.M && row < uniforms.K) {\n        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];\n      } else {\n        tile_a[local_id.y][local_id.x] = ${r.type.value}(0);\n      }\n\n      col = tile_col_start + local_id.x;\n      row = k_start + local_id.y;\n      if (col < uniforms.N && row < uniforms.K) {\n        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];\n      } else {\n        tile_b[local_id.y][local_id.x] = ${n.type.value}(0);\n      }\n      `,c="value += tile_a[k][local_id.y] * tile_b[k][local_id.x];"):!A.transA&&A.transB?(g=`\n      var col = k_start + local_id.x;\n      var row = tile_row_start + local_id.y;\n      if (col < uniforms.K && row < uniforms.M) {\n        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];\n      } else {\n        tile_a[local_id.y][local_id.x] = ${r.type.value}(0);\n      }\n\n      col = k_start + local_id.x;\n      row = tile_col_start + local_id.y;\n      if (col < uniforms.K && row < uniforms.N) {\n        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];\n      } else {\n        tile_b[local_id.y][local_id.x] = ${n.type.value}(0);\n      }\n      `,c="value += tile_a[local_id.y][k] * tile_b[local_id.x][k];"):!A.transA&&!A.transB&&(g=`\n      var col = k_start + local_id.x;\n      var row = tile_row_start + local_id.y;\n      if (col < uniforms.K && row < uniforms.M) {\n        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];\n      } else {\n        tile_a[local_id.y][local_id.x] = ${r.type.value}(0);\n      }\n\n      col = tile_col_start + local_id.x;\n      row = k_start + local_id.y;\n      if (col < uniforms.N && row < uniforms.K) {\n        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];\n      } else {\n        tile_b[local_id.y][local_id.x] = ${n.type.value}(0);\n      }\n      `,c="value += tile_a[local_id.y][k] * tile_b[k][local_id.x];");let u=1===A.alpha?"":"value *= uniforms.alpha;";return`\n  ${t.registerUniforms([{name:"num_tile_n",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}]).declareVariables(...s)}\n  var<workgroup> tile_a: array<array<${r.type.storage}, 16>, 16>;\n  var<workgroup> tile_b: array<array<${n.type.storage}, 16>, 16>;\n  ${t.mainStart([o,o,1])}\n    let tile_col_start = (workgroup_index % uniforms.num_tile_n) * 16;\n    let tile_row_start = (workgroup_index / uniforms.num_tile_n) * 16;\n    let num_tiles = (uniforms.K - 1) / 16 + 1;\n    var k_start = 0u;\n    var value = ${l.type.value}(0);\n    for (var t: u32 = 0u; t < num_tiles; t++) {\n      ${g}\n      k_start = k_start + 16;\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k < 16; k++) {\n        ${c}\n      }\n      workgroupBarrier();\n    }\n\n    ${u}\n    let m = tile_row_start + local_id.y;\n    let n = tile_col_start + local_id.x;\n    ${null!=a?`let cOffset = ${a.broadcastedIndicesToOffset("vec2(m, n)",l)}; value += ${l.type.value}(uniforms.beta) * ${a.getByOffset("cOffset")};`:""}\n    if (m < uniforms.M && n < uniforms.N) {\n      output[m * uniforms.N + n] = value;\n    }\n  }`}}},Hs=e=>({transA:e.transA,transB:e.transB,alpha:e.alpha,beta:e.beta,cacheKey:`${e.transA};${e.transB};${1===e.alpha}`}),Rs=(e,A)=>{Ls(e.inputs),e.compute(Ys(e.inputs,A))}})),uc=ee((()=>{xl(),yl(),Tl(),Pl(),[js,Vs,Ws,Us]=[0,1,2,3],Ks=e=>{if(4!==e[0].dims.length)throw new Error("only 4-D tensor is supported.");if(e[0].dims.length!==e[1].dims.length)throw new Error("input dimensions must be equal to grid dimensions");if(e[0].dims.length-2!==e[1].dims[e[1].dims.length-1])throw new Error("last dimension of grid must be equal to "+(e[0].dims.length-2));if(e[0].dims[0]!==e[1].dims[0])throw new Error("grid batch size must match input batch size")},Zs=e=>`\n  fn gs_bicubic_interpolate(p: mat4x4<${e}>, x: f32, y: f32) -> ${e} {\n    var v: vec4<f32>;\n    var coeffs = gs_get_cubic_coeffs(x);\n    for (var i = 0; i < 4; i++) {\n      v[i] = coeffs[0] * p[i][0] + coeffs[1] * p[i][1] + coeffs[2] * p[i][2] + coeffs[3] * p[i][3];\n    }\n    coeffs = gs_get_cubic_coeffs(y);\n    let pixel = ${e}(coeffs[0] * v[0] + coeffs[1] * v[1] + coeffs[2] * v[2] + coeffs[3] * v[3]);\n    return pixel;\n  }\n`,Xs=e=>`\n  fn gs_denormalize(n: f32, length: i32) -> f32 {\n    ${0===e.alignCorners?"\n    // alignCorners: false => [-1, 1] to [-0.5, length - 0.5]\n    return ((n + 1.0) * f32(length) - 1.0) / 2.0;\n    ":"\n    // alignCorners: true => [-1, 1] to [0, length - 1]\n    return (n + 1.0) / 2.0 * (f32(length - 1));\n    "}\n  }\n`,qs=e=>`\n  ${"reflection"===e.paddingMode?"\n      fn gs_reflect(x: i32, x_min: f32, x_max: f32) -> u32 {\n        var dx = 0.0;\n        var fx = f32(x);\n        let range = x_max - x_min;\n        if (fx < x_min) {\n          dx = x_min - fx;\n          let n = u32(dx / range);\n          let r = dx - f32(n) * range;\n          if (n % 2 == 0) {\n            fx = x_min + r;\n          } else {\n            fx = x_max - r;\n          }\n        } else if (fx > x_max) {\n          dx = fx - x_max;\n          let n = u32(dx / range);\n          let r = dx - f32(n) * range;\n          if (n % 2 == 0) {\n            fx = x_max - r;\n          } else {\n            fx = x_min + r;\n          }\n        }\n        return u32(fx);\n      }":""}\n`,Js=(e,A,t)=>`\n  fn pixel_at_grid(r: i32, c: i32, H: i32, W: i32, batch: u32, channel: u32, border: vec4<f32>) -> ${A} {\n     var pixel = ${A}(0);\n     var indices = vec4<u32>(0);\n     indices[${js}] = batch;\n     indices[${Vs}] = channel;`+(()=>{switch(t.paddingMode){case"zeros":return`\n          if (r >= 0 && r < H && c >=0 && c < W) {\n            indices[${Ws}] = u32(r);\n            indices[${Us}] = u32(c);\n          } else {\n            return ${A}(0);\n          }\n        `;case"border":return`\n          indices[${Ws}] = u32(clamp(r, 0, H - 1));\n          indices[${Us}] = u32(clamp(c, 0, W - 1));\n        `;case"reflection":return`\n          indices[${Ws}] = gs_reflect(r, border[1], border[3]);\n          indices[${Us}] = gs_reflect(c, border[0], border[2]);\n        `;default:throw new Error(`padding mode ${t.paddingMode} is not supported`)}})()+`\n    return ${e.getByIndices("indices")};\n  }\n`,_s=(e,A,t)=>(()=>{switch(t.mode){case"nearest":return`\n          let result = pixel_at_grid(i32(round(y)), i32(round(x)), H_in, W_in, indices[${js}], indices[${Vs}], border);\n        `;case"bilinear":return`\n          let x1 = i32(floor(x));\n          let y1 = i32(floor(y));\n          let x2 = x1 + 1;\n          let y2 = y1 + 1;\n\n          let p11 = pixel_at_grid(y1, x1, H_in, W_in, indices[${js}], indices[${Vs}], border);\n          let p12 = pixel_at_grid(y1, x2, H_in, W_in, indices[${js}], indices[${Vs}], border);\n          let p21 = pixel_at_grid(y2, x1, H_in, W_in, indices[${js}], indices[${Vs}], border);\n          let p22 = pixel_at_grid(y2, x2, H_in, W_in, indices[${js}], indices[${Vs}], border);\n\n          let dx2 = ${A}(f32(x2) - x);\n          let dx1 = ${A}(x - f32(x1));\n          let dy2 = ${A}(f32(y2) - y);\n          let dy1 = ${A}(y - f32(y1));\n          let result = dy2 * (dx2 * p11 + dx1 * p12) + dy1 * (dx2 * p21 + dx1 * p22);\n        `;case"bicubic":return`\n          let x0 = i32(floor(x)) - 1;\n          let y0 = i32(floor(y)) - 1;\n          var p: mat4x4<${A}>;\n          for (var h = 0; h < 4; h++) {\n            for (var w = 0; w < 4; w++) {\n              p[h][w] = pixel_at_grid(h + y0, w + x0, H_in, W_in, indices[${js}], indices[${Vs}], border);\n            }\n          }\n\n          let dx = x - f32(x0 + 1);\n          let dy = y - f32(y0 + 1);\n          let result = gs_bicubic_interpolate(p, dx, dy);\n        `;default:throw new Error(`mode ${t.mode} is not supported`)}})()+`${e.setByOffset("global_idx","result")}`,$s=(e,A)=>{let t=Ct("x",e[0].dataType,e[0].dims.length),r=[e[1].dims[0],e[1].dims[1],e[1].dims[2]],n=Ct("grid",e[1].dataType,r.length,2),a=[e[0].dims[0],e[0].dims[1],e[1].dims[1],e[1].dims[2]];"NHWC"===A.format&&(a=[e[0].dims[0],e[1].dims[1],e[1].dims[2],e[0].dims[3]],[js,Vs,Ws,Us]=[0,3,1,2]);let s=bt("output",e[0].dataType,a.length),i=t.type.value,o=[{type:12,data:QA.size(a)},...gt(e[0].dims,r,a)];return{name:"GridSample",shaderCache:{hint:`${A.cacheKey}`,inputDependencies:["type","type"]},getRunData:e=>{let A=QA.size(a);return{outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(A/64)},programUniforms:o}},getShaderSource:e=>`\n  ${e.registerUniform("output_size","u32").declareVariables(t,n,s)}\n  \n  fn gs_get_cubic_coeffs(x: f32) -> vec4<f32> {\n    let cubic_alpha = -0.75f;\n    let x_abs = abs(x);\n    var coeffs: vec4<f32>;\n    coeffs[0] = (((cubic_alpha * (x_abs + 1) - 5 * cubic_alpha) * (x_abs + 1) + 8 * cubic_alpha) * (x_abs + 1) - 4 * cubic_alpha);\n    coeffs[1] = (((cubic_alpha + 2) * x_abs - (cubic_alpha + 3)) * x_abs * x_abs + 1);\n    coeffs[2] = (((cubic_alpha + 2) * (1 - x_abs) - (cubic_alpha + 3)) * (1 - x_abs) * (1 - x_abs) + 1);\n    coeffs[3] = (((cubic_alpha * (2 - x_abs) - 5 * cubic_alpha) * (2 - x_abs) + 8 * cubic_alpha) * (2 - x_abs) - 4 * cubic_alpha);\n    return coeffs;\n  }\n\n  ${Zs(i)}\n  ${Xs(A)}\n  ${qs(A)}\n  ${Js(t,i,A)}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n      let H_in = i32(uniforms.x_shape[${Ws}]);\n      let W_in = i32(uniforms.x_shape[${Us}]);\n\n      ${0===A.alignCorners?"\n      let x_min = -0.5;\n      let x_max = f32(W_in) - 0.5;\n      let y_min = -0.5;\n      let y_max = f32(H_in) - 0.5;\n      ":"\n      let x_min = 0.0;\n      let x_max = f32(W_in) - 1.0;\n      let y_min = 0.0;\n      let y_max = f32(H_in) - 1.0;\n      "};\n      let border = vec4<f32>(x_min, y_min, x_max, y_max);\n\n      let indices = ${s.offsetToIndices("global_idx")};\n      var grid_indices = vec3<u32>(indices[${js}], indices[${Ws}], indices[${Us}]);\n      let nxy = ${n.getByIndices("grid_indices")};\n      var x = gs_denormalize(f32(nxy[0]), W_in);\n      var y = gs_denormalize(f32(nxy[1]), H_in);\n\n      ${_s(s,i,A)}\n  }`}},ei=(e,A)=>{Ks(e.inputs),e.compute($s(e.inputs,A))},Ai=e=>st({alignCorners:e.align_corners,mode:e.mode,paddingMode:e.padding_mode,format:e.format})})),dc=ee((()=>{xl(),yl(),Tl(),Dl(),Ol(),Pl(),zl(),ti=(e,A)=>e.length>A&&e[A].dims.length>0?e[A]:void 0,ri=(e,A)=>{let t=e[0],r=ti(e,1),n=ti(e,2),a=ti(e,3),s=ti(e,4),i=ti(e,5),o=ti(e,6),l=ti(e,7);if(3!==t.dims.length&&5!==t.dims.length)throw new Error("Input query is expected to have 3 or 5 dimensions");let c,g=t.dims[0],u=t.dims[1],d=3===t.dims.length?t.dims[2]:A.numHeads*t.dims[4],f=u,p=0,h=0,m=Math.floor(d/A.numHeads);if(o&&l&&QA.size(o.dims)&&QA.size(l.dims)){if(4!==o.dims.length)throw new Error('Input "past_key" is expected to have 4 dimensions');if(o.dims[0]!==g||o.dims[1]!==A.numHeads||o.dims[3]!==m)throw new Error('Input "past_key" shape (batch_size, num_heads, past_sequence_length, head_size)');if(l.dims[0]!==g||l.dims[1]!==A.numHeads||l.dims[3]!==m)throw new Error('Input "past_value" shape (batch_size, num_heads, past_sequence_length, head_size)');if(o.dims[2]!==l.dims[2])throw new Error('Input "past_key" and "past_value" shall have same dim 2 (past_sequence_length)');if(4!==l.dims.length)throw new Error('Input "past_value" is expected to have 4 dimensions');p=o.dims[2],h=o.dims[2]}else if(o&&QA.size(o.dims)||l&&QA.size(l.dims))throw new Error('Input "past_key" and "past_value" shall be both present or both absent');if(r&&QA.size(r.dims)>0){if(3!==t.dims.length)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(r.dims.length<3||r.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(t.dims[0]!==r.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(3===r.dims.length){if(r.dims[2]!==t.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');c=2,f=r.dims[1]}else if(5===r.dims.length){if(r.dims[2]!==A.numHeads||2!==r.dims[3]||r.dims[4]!==m)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(n)throw new Error('Expect "value" be none when "key" has packed kv format.');c=5,f=r.dims[1]}else{if(r.dims[1]!==A.numHeads||r.dims[3]!==m)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');c=0,f=r.dims[2]}}else{if(5!==t.dims.length)throw new Error('Input "query" is expected to have 5 dimensions when key is empty');if(t.dims[2]!==A.numHeads||3!==t.dims[3])throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');c=3}if(a&&QA.size(a.dims)>0){if(1!==a.dims.length)throw new Error('Input "bias" is expected to have 1 dimension');if(r&&5===r.dims.length&&2===r.dims[3])throw new Error("bias is not allowed for packed kv.")}let C=p+f,b=0;if(s&&QA.size(s.dims)>0){b=8;let e=s.dims;throw 1===e.length?e[0]===g?b=1:e[0]===3*g+2&&(b=3):2===e.length&&e[0]===g&&e[1]===C&&(b=5),8===b?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, total_sequence_length)'):new Error("Mask not supported")}let I=!1,w=d;if(n&&QA.size(n.dims)>0){if(3!==n.dims.length&&4!==n.dims.length)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(t.dims[0]!==n.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(3===n.dims.length){if(f!==n.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');w=n.dims[2]}else{if(f!==n.dims[2])throw new Error('Input "key" and "value" shall have the same dim 2 (kv_sequence_length)');w=n.dims[1]*n.dims[3],I=!0}}if(s&&QA.size(s.dims)>0)throw new Error("Key padding mask is not supported");if(i&&QA.size(i.dims)>0){if(4!==i.dims.length)throw new Error('Input "attention_bias" is expected to have 4 dimensions');if(i.dims[0]!==g||i.dims[1]!==A.numHeads||i.dims[2]!==u||i.dims[3]!==C)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:g,sequenceLength:u,pastSequenceLength:p,kvSequenceLength:f,totalSequenceLength:C,maxSequenceLength:h,inputHiddenSize:0,hiddenSize:d,vHiddenSize:w,headSize:m,vHeadSize:Math.floor(w/A.numHeads),numHeads:A.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:A.maskFilterValue,maskType:b,scale:A.scale,broadcastResPosBias:!1,passPastInKv:I,qkvFormat:c}},ni=e=>st({...e}),ai=st({perm:[0,2,1,3]}),si=(e,A,t,r,n,a,s)=>{let i=[r,n,a],o=QA.size(i),l=[{type:12,data:o},{type:12,data:s},{type:12,data:a}];return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:i,dataType:A.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:l}),getShaderSource:e=>{let r=bt("qkv_with_bias",A.dataType,i),n=Ct("qkv",A.dataType,i),a=Ct("bias",t.dataType,i);return`\n  ${e.registerUniforms([{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}]).declareVariables(n,a,r)}\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];\n  }`}},{inputs:[A,t],outputs:[-1]})[0]},ii=(e,A,t,r,n,a,s,i)=>{let o=a;if(s&&QA.size(s.dims)>0){if(1===r)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return o=si(e,a,s,A,r,t*n,i),o=o.reshape([A,r,t,n]),1===t||1===r?o:e.compute(Dt(o,ai.perm),{inputs:[o],outputs:[-1]})[0]}return 3===a.dims.length&&(o=a.reshape([A,r,t,n])),1===t||1===r?o:e.compute(Dt(o,ai.perm),{inputs:[o],outputs:[-1]})[0]},oi=(e,A)=>{let t=ri(e.inputs,A),r=e.inputs[0],n=ti(e.inputs,1),a=ti(e.inputs,2),s=ti(e.inputs,3),i=ti(e.inputs,4),o=ti(e.inputs,5),l=ti(e.inputs,6),c=ti(e.inputs,7);if(5===r.dims.length)throw new Error("Packed QKV is not implemented");if(5===n?.dims.length)throw new Error("Packed KV is not implemented");let g=n&&a&&4===n.dims.length&&4===a.dims.length,u=ii(e,t.batchSize,t.numHeads,t.sequenceLength,t.headSize,r,s,0);if(g)return Fr(e,u,n,a,i,void 0,l,c,o,t);if(!n||!a)throw new Error("key and value must be provided");let d=ii(e,t.batchSize,t.numHeads,t.kvSequenceLength,t.headSize,n,s,t.hiddenSize),f=ii(e,t.batchSize,t.numHeads,t.kvSequenceLength,t.vHeadSize,a,s,2*t.hiddenSize);Fr(e,u,d,f,i,void 0,l,c,o,t)}})),fc=ee((()=>{xl(),yl(),Tl(),Pl(),li=e=>{if(!e||e.length<1)throw new Error("too few inputs")},ci=(e,A)=>{let t=[],r=A.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach((e=>t.push(Number(e)))),r=t.length),st({numOutputs:r,axis:A.axis,splitSizes:t})},gi=e=>`\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n    if (index < ${ht("uniforms.size_in_split_axis","i",e)}) {\n        return i;\n    }\n    }\n    return ${e}u;\n}`,ui=e=>{let A=e.length,t=[];for(let r=0;r<A;++r){let n=e[r].setByIndices("indices","input[global_idx]");1===A?t.push(n):0===r?t.push(`if (output_number == ${r}u) { ${n} }`):r===A-1?t.push(`else { ${n} }`):t.push(`else if (output_number == ${r}) { ${n} }`)}return`\n      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {\n        ${t.join("\n")}\n      }`},di=(e,A)=>{let t=e[0].dims,r=QA.size(t),n=e[0].dataType,a=QA.normalizeAxis(A.axis,t.length),s=new Array(A.numOutputs),i=Ct("input",n,t.length),o=new Array(A.numOutputs),l=[],c=[],g=0,u=[{type:12,data:r}];for(let r=0;r<A.numOutputs;r++){g+=A.splitSizes[r],o[r]=g;let i=t.slice();i[a]=A.splitSizes[r],c.push(i),s[r]=bt(`output${r}`,n,i.length),l.push({dims:c[r],dataType:e[0].dataType})}u.push({type:12,data:o},...gt(t,...c));return{name:"Split",shaderCache:{hint:A.cacheKey,inputDependencies:["rank"]},getShaderSource:e=>`\n  ${e.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",o.length).declareVariables(i,...s)}\n  ${gi(o.length)}\n  ${ui(s)}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}\n\n    var indices = ${i.offsetToIndices("global_idx")};\n    var index = ${i.indicesGet("indices",a)};\n    let output_number = calculateOutputIndex(index);\n    if (output_number != 0) {\n      index -= ${ht("uniforms.size_in_split_axis","output_number - 1u",o.length)};\n      ${i.indicesSet("indices",a,"index")};\n    }\n    writeBufferData(output_number, indices, global_idx);\n  }`,getRunData:()=>({outputs:l,dispatchGroup:{x:Math.ceil(r/64)},programUniforms:u})}},fi=(e,A)=>{li(e.inputs);let t=1===e.inputs.length?A:ci(e.inputs,A);e.compute(di(e.inputs,t),{inputs:[0]})},pi=e=>{let A=e.axis,t=e.splitSizes,r=e.numOutputs<0?t.length:e.numOutputs;if(r!==t.length)throw new Error("numOutputs and splitSizes lengh must be equal");return st({axis:A,numOutputs:r,splitSizes:t})}})),pc=ee((()=>{xl(),yl(),Tl(),Pl(),hi=(e,A)=>{let[t,r,n,a]=e,{numHeads:s,rotaryEmbeddingDim:i}=A;if(3!==t.dims.length&&4!==t.dims.length)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${t.dims.length}`);if(!QA.areEqual(r.dims,[])&&!QA.areEqual(r.dims,[1])&&2!==r.dims.length)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${r.dims.length}`);if(2!==n.dims.length)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${n.dims.length}`);if(2!==a.dims.length)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${a.dims.length}`);if(!QA.areEqual(n.dims,a.dims))throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");if(i>0&&0===s)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let o=t.dims[0],l=t.dims[t.dims.length-2],c=n.dims[0],g=QA.sizeFromDimension(t.dims,1)/l,u=0===i?2*n.dims[1]:g/s;if(i>u)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(2===r.dims.length){if(o!==r.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${r.dims[0]}`);if(l!==r.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${r.dims[1]}`)}if(u/2!==n.dims[1]&&i/2!==n.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${n.dims[1]}`);if(l>c)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},mi=(e,A)=>{let{interleaved:t,numHeads:r,rotaryEmbeddingDim:n,scale:a}=A,s=e[0].dims[0],i=QA.sizeFromDimension(e[0].dims,1),o=e[0].dims[e[0].dims.length-2],l=i/o,c=e[2].dims[1],g=0===n?2*c:l/r,u=new Array(s,o,l/g,g-c),d=QA.computeStrides(u),f=[{type:1,data:a},{type:12,data:u},{type:12,data:d},...3===e[0].dims.length?new Array({type:12,data:[i,l,g,1]}):[],...4===e[0].dims.length?new Array({type:12,data:[i,g,o*g,1]}):[],...gt(e[0].dims,e[1].dims,e[2].dims,e[3].dims,e[0].dims)];return{name:"RotaryEmbedding",shaderCache:{hint:st({interleaved:t}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:A=>{let r=Ct("input",e[0].dataType,e[0].dims.length),n=Ct("position_ids",e[1].dataType,e[1].dims.length),a=Ct("cos_cache",e[2].dataType,e[2].dims.length),s=Ct("sin_cache",e[3].dataType,e[3].dims.length),i=bt("output",e[0].dataType,e[0].dims.length);return A.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:u.length},{name:"global_strides",type:"u32",length:d.length},{name:"input_output_strides",type:"u32",length:d.length}]),`\n        ${A.declareVariables(r,n,a,s,i)}\n\n        ${A.mainStart(it)}\n          let half_rotary_emb_dim = uniforms.${a.name}_shape[1];\n          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;\n          let size = uniforms.global_shape[0] * uniforms.global_strides[0];\n          ${A.guardAgainstOutOfBoundsWorkgroupSizes("size")}\n\n          if (bsnh[3] < half_rotary_emb_dim) {\n            let position_ids_idx =\n                ${n.broadcastedIndicesToOffset("bsnh.xy",bt("",n.type.tensor,2))};\n            let position_id =\n                u32(${n.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);\n            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${t});\n            let j = i + select(half_rotary_emb_dim, 1, ${t});\n            let re = ${r.getByOffset("i")} * ${a.get("position_id","bsnh[3]")} -\n                ${r.getByOffset("j")} * ${s.get("position_id","bsnh[3]")};\n            ${i.setByOffset("i","re")}\n            let im = ${r.getByOffset("i")} * ${s.get("position_id","bsnh[3]")} +\n                ${r.getByOffset("j")} * ${a.get("position_id","bsnh[3]")};\n            ${i.setByOffset("j","im")}\n          } else {\n            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;\n            ${i.setByOffset("k",r.getByOffset("k"))}\n          }\n        }`},getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(QA.size(u)/it)},programUniforms:f})}},Ci=(e,A)=>{hi(e.inputs,A),e.compute(mi(e.inputs,A))}})),hc=ee((()=>{Tl(),xl(),Ol(),dc(),fc(),zl(),pc(),Pl(),bi=(e,A)=>{if(A.doRotary&&e.length<=7)throw new Error("cos_cache and sin_cache inputs are required if do_rotary is specified");let t=e[0],r=e[1],n=e[2],a=e[3],s=e[4];if(0!==A.doRotary&&e.length<=7)throw new Error("cos_cast and sin_cache are expected if do_rotary attribute is non-zero");if(-1!==A.localWindowSize)throw new Error("Local attention is not supported");if(0!==A.softcap)throw new Error("Softcap is not supported");if(0!==A.rotaryInterleaved)throw new Error("Rotary interleaved is not supported");if(A.smoothSoftmax)throw new Error("Smooth softmax is not supported");if(3!==t.dims.length&&5!==t.dims.length)throw new Error("Input query is expected to have 3 or 5 dimensions");let i=t.dims[0],o=t.dims[1],l=3===t.dims.length?t.dims[2]:A.numHeads*t.dims[4],c=o,g=0,u=!r||0===r.dims.length,d=Math.floor(u?l/(A.numHeads+2*A.kvNumHeads):l/A.numHeads);u&&(l=d*A.numHeads);let f=a&&0!==a.dims.length,p=s&&0!==s.dims.length;if(f&&4===a.dims.length&&a.dims[0]===i&&a.dims[1]!==A.kvNumHeads&&a.dims[2]===A.kvNumHeads&&a.dims[3]===d)throw new Error("BSNH pastKey/pastValue is not supported");if(f&&p){if(4!==a.dims.length)throw new Error('Input "past_key" is expected to have 4 dimensions');if(4!==s.dims.length)throw new Error('Input "past_value" is expected to have 4 dimensions');g=a.dims[2]}else if(f||p)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let h=1;if(r&&r.dims.length>0){if(3!==t.dims.length)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(r.dims.length<3||r.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(t.dims[0]!==r.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(3===r.dims.length){if(t.dims[2]%r.dims[2]!=0)throw new Error('Dimension 2 of "query" should be a multiple of "key"');c=r.dims[1]}else if(5===r.dims.length){if(r.dims[2]!==A.numHeads||2!==r.dims[3]||r.dims[4]!==d)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(n)throw new Error('Expect "value" be none when "key" has packed kv format.');c=r.dims[1]}else{if(r.dims[1]!==A.numHeads||r.dims[3]!==d)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');c=r.dims[2]}}else{if(3!==t.dims.length&&5!==t.dims.length)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(5===t.dims.length&&(t.dims[2]!==A.numHeads||3!==t.dims[3]))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');h=3}let m=!1,C=A.kvNumHeads?d*A.kvNumHeads:l;if(n&&n.dims.length>0){if(3!==n.dims.length&&4!==n.dims.length)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(t.dims[0]!==n.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(3===n.dims.length){if(c!==n.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');C=n.dims[2]}else{if(c!==n.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');C=n.dims[1]*n.dims[3],m=!0}}let b=e.length>4?e[5]:void 0;if(b&&1!==b.dims.length&&b.dims[0]!==i)throw new Error('Input "seqlens" is expected to have 1 dimension and the same dim 0 as batch_size');return{batchSize:i,sequenceLength:o,pastSequenceLength:g,kvSequenceLength:c,totalSequenceLength:-1,maxSequenceLength:-1,inputHiddenSize:0,hiddenSize:l,vHiddenSize:C,headSize:d,vHeadSize:Math.floor(C/A.kvNumHeads),numHeads:A.numHeads,kvNumHeads:A.kvNumHeads,nReps:A.numHeads/A.kvNumHeads,pastPresentShareBuffer:!1,maskType:0,scale:A.scale,broadcastResPosBias:!1,passPastInKv:m,qkvFormat:h}},Ii=st({perm:[0,2,1,3]}),wi=(e,A,t)=>{let r=A,n=t.kvNumHeads;return 3===A.dims.length&&0!==t.kvSequenceLength&&(r=A.reshape([t.batchSize,t.kvSequenceLength,n,t.headSize]),r=e.compute(Dt(r,Ii.perm),{inputs:[r],outputs:[-1]})[0]),r},ki=(e,A,t,r)=>{let n=[e*A],a=e*A,s=[{type:12,data:a},{type:12,data:A},{type:12,data:e}];return{name:"GeneratePositionIds",shaderCache:{hint:`${e};${A}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:n,dataType:7}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:s}),getShaderSource:e=>{let A=Ct("seq_lens",t.dataType,t.dims),a=Ct("total_seq_lens",r.dataType,r.dims),s=bt("pos_ids",7,n);return`\n  ${e.registerUniforms([{name:"output_size",type:"u32"},{name:"sequence_length",type:"u32"},{name:"batch_size",type:"u32"}]).declareVariables(A,a,s)}\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let total_sequence_length = u32(${a.getByOffset("0")});\n    let is_subsequent_prompt = uniforms.sequence_length > 1 && uniforms.sequence_length != total_sequence_length;\n    let is_first_prompt = !is_subsequent_prompt && uniforms.sequence_length == total_sequence_length;\n    let batch_idx = global_idx / uniforms.sequence_length;\n    let sequence_idx = i32(global_idx % uniforms.sequence_length);\n    var pos_id: i32 = 0;\n    let seqlen = ${A.getByOffset("batch_idx")};\n    let total_seqlen = seqlen + 1;\n    if (is_first_prompt) {\n      if (sequence_idx < total_seqlen) {\n        pos_id = sequence_idx;\n      } else {\n        pos_id = 1;\n      }\n      ${s.setByOffset("global_idx","pos_id")}\n    } else if (is_subsequent_prompt) {\n      let past_seqlen = total_seqlen - i32(uniforms.sequence_length);\n      if (past_seqlen + sequence_idx < total_seqlen) {\n        pos_id = past_seqlen + sequence_idx;\n      } else {\n        pos_id = 1;\n      }\n      ${s.setByOffset("global_idx","pos_id")}\n    } else if (global_idx < uniforms.batch_size) {\n      ${s.setByOffset("global_idx","seqlen")}\n    };\n  }\n  `}}},xi=(e,A)=>{let t=bi(e.inputs,A);if(5===e.inputs[0].dims.length)throw new Error("Packed QKV is not implemented");if(5===e.inputs[1]?.dims.length)throw new Error("Packed KV is not implemented");let r,n,a=e.inputs[0],s=e.inputs[1]&&e.inputs[1].dims.length>0?e.inputs[1]:void 0,i=e.inputs[2]&&e.inputs[2].dims.length>0?e.inputs[2]:void 0,o=e.inputs[3]&&0!==e.inputs[3].dims.length?e.inputs[3]:void 0,l=e.inputs[4]&&0!==e.inputs[4].dims.length?e.inputs[4]:void 0,c=e.inputs.length>4?e.inputs[5]:void 0,g=e.inputs.length>5?e.inputs[6]:void 0,u=t.kvNumHeads?t.kvNumHeads:t.numHeads,d=st({axis:2,numOutputs:3,splitSizes:[t.numHeads*t.headSize,u*t.headSize,u*t.headSize]}),[f,p,h]=s||i?[a,s,i]:e.compute(di([a],d),{inputs:[a],outputs:[-1,-1,-1]});if(A.doRotary){let a=e.compute(ki(t.batchSize,t.sequenceLength,c,g),{inputs:[c,g],outputs:[-1]})[0],s=e.inputs[7],i=e.inputs[8],o=st({interleaved:0!==A.rotaryInterleaved,numHeads:t.numHeads,rotaryEmbeddingDim:0,scale:A.scale}),l=[f,a,s,i],u=[-1];r=e.compute(mi(l,o),{inputs:l,outputs:u})[0],l.splice(0,1,p);let d=st({interleaved:0!==A.rotaryInterleaved,numHeads:t.kvNumHeads,rotaryEmbeddingDim:0,scale:A.scale});n=e.compute(mi(l,d),{inputs:l,outputs:u})[0]}let m=ii(e,t.batchSize,t.numHeads,t.sequenceLength,t.headSize,A.doRotary?r:f,void 0,0),C=wi(e,A.doRotary?n:p,t),b=wi(e,h,t);Fr(e,m,C,b,void 0,void 0,o,l,void 0,t,c,g)}})),mc=ee((()=>{xl(),yl(),zl(),Pl(),vi=(e,A,t,r,n,a,s,i)=>{let o=ut(a),l=1===o?"f32":`vec${o}f`,c=1===o?"vec2f":`mat2x${o}f`,g=n*s,u=64;1===g&&(u=256);let d=[n,s,a/o],f=[n,s,2],p=[];p.push(...gt(d,f));return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${o};${i};${u}`,inputDependencies:["rank","type","type"]},getRunData:()=>({outputs:[{dims:f,dataType:1}],dispatchGroup:{x:g},programUniforms:p}),getShaderSource:e=>{let n=Ct("x",A.dataType,3,o),a=[n,Ct("scale",t.dataType,t.dims),Ct("bias",r.dataType,r.dims),bt("output",1,3,2)];return`\n  var<workgroup> workgroup_shared : array<${c}, ${u}>;\n  const workgroup_size = ${u}u;\n  ${e.declareVariables(...a)}\n  ${e.mainStart(u)}\n    let batch = workgroup_index / uniforms.x_shape[1];\n    let channel = workgroup_index % uniforms.x_shape[1];\n    let hight = uniforms.x_shape[2];\n    // initialize workgroup memory\n    var sum = ${l}(0);\n    var squared_sum = ${l}(0);\n    for (var h = local_idx; h < hight; h += workgroup_size) {\n      let value = ${l}(${n.get("batch","channel","h")});\n      sum += value;\n      squared_sum += value * value;\n    }\n    workgroup_shared[local_idx] = ${c}(sum, squared_sum);\n    workgroupBarrier();\n\n    for (var currSize = workgroup_size >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (local_idx < currSize) {\n        workgroup_shared[local_idx] = workgroup_shared[local_idx] + workgroup_shared[local_idx + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (local_idx == 0) {\n      let sum_final = ${pt("workgroup_shared[0][0]",o)} / f32(hight * ${o});\n      let squared_sum_final = ${pt("workgroup_shared[0][1]",o)} / f32(hight * ${o});\n\n      let inv_std_dev = inverseSqrt(squared_sum_final - sum_final * sum_final + f32(${i}));\n      let channel_scale = inv_std_dev * f32(scale[channel]);\n      let channel_shift = f32(bias[channel]) - sum_final * channel_scale;\n      output[workgroup_index] = vec2f(channel_scale, channel_shift);\n    }\n  }`}},{inputs:[A,t,r],outputs:[-1]})[0]},Bi=(e,A,t)=>{let r=A[0].dims,n=r,a=r[0],s=r[1],i=QA.sizeFromDimension(r,2),o=ut(i),l=QA.size(n)/o,c=vi(e,A[0],A[1],A[2],a,i,s,t.epsilon),g=[a,s,i/o],u=[a,s];e.compute({name:"InstanceNormalization",shaderCache:{hint:`${o}`,inputDependencies:["type","none"]},getRunData:()=>({outputs:[{dims:n,dataType:A[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:[{type:12,data:l},...gt(g,u,g)]}),getShaderSource:e=>{let t=Ct("x",A[0].dataType,g.length,o),r=Ct("scale_shift",1,u.length,2),n=bt("output",A[0].dataType,g.length,o),a=[t,r,n];return`\n  ${e.registerUniform("output_size","u32").declareVariables(...a)}\n  ${e.mainStart()}\n  ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n      let outputIndices = ${n.offsetToIndices("global_idx")};\n      let batch = outputIndices[0];\n      let channel = outputIndices[1];\n      let scale_shift = ${r.getByIndices("vec2<u32>(batch, channel)")};\n      let value = ${t.getByOffset("global_idx")} * ${n.type.value}(scale_shift.x) + ${n.type.value}(scale_shift.y);\n      ${n.setByOffset("global_idx","value")};\n  }`}},{inputs:[A[0],c]})},yi=(e,A,t)=>{let r=A[0].dims,n=r,a=r[0],s=r[r.length-1],i=QA.sizeFromDimension(r,1)/s,o=ut(s),l=QA.size(n)/o,c=[{type:12,data:i},{type:12,data:Math.floor(s/o)}],g=!1,u=[0,r.length-1];for(let e=0;e<r.length-2;e++)g=g||1!==r[e+1],u.push(e+1);g=g&&1!==r[r.length-1];let d=g?e.compute(Dt(e.inputs[0],u),{inputs:[e.inputs[0]],outputs:[-1]})[0]:e.inputs[0].reshape(Array.from({length:r.length},((e,A)=>r[u[A]]))),f=vi(e,d,A[1],A[2],a,i,s,t.epsilon);e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${o}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:n,dataType:A[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:c}),getShaderSource:e=>{let t=lt(A[0].dataType),r=1===o?"vec2f":`mat${o}x2f`,a=e=>{let A=0===e?"x":"y",r=1===o?"f32":`vec${o}f`;switch(o){case 1:return`${t}(${r}(scale.${A}))`;case 2:return`vec2<${t}>(${r}(scale[0].${A}, scale[1].${A}))`;case 4:return`vec4<${t}>(${r}(scale[0].${A}, scale[1].${A}, scale[2].${A}, scale[3].${A}))`;default:throw new Error(`Not supported compoents ${o}`)}},s=Ct("input",A[0].dataType,A[0].dims,o),i=bt("output",A[0].dataType,n,o);return`\n  @group(0) @binding(0) var<storage, read> input : array<${s.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scale_input : array<${r}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${i.type.storage}>;\n  struct Uniforms {H: u32, C : u32};\n  @group(0) @binding(3) var<uniform> uniforms: Uniforms;\n\n  ${e.mainStart()}\n    let current_image_number = global_idx / (uniforms.C * uniforms.H);\n    let current_channel_number = global_idx % uniforms.C;\n\n    let scale_offset = current_image_number * uniforms.C + current_channel_number;\n    let scale = scale_input[scale_offset];\n    output[global_idx] = fma(input[global_idx], ${a(0)}, ${a(1)});\n  }`}},{inputs:[A[0],f]})},Ei=(e,A)=>{"NHWC"===A.format?yi(e,e.inputs,A):Bi(e,e.inputs,A)}})),Cc=ee((()=>{xl(),yl(),Pl(),Mi=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Gi=(e,A,t)=>{let r=A.simplified,n=e[0].dims,a=e[1],s=!r&&e[2],i=n,o=QA.normalizeAxis(A.axis,n.length),l=QA.sizeToDimension(n,o),c=QA.sizeFromDimension(n,o),g=QA.size(a.dims),u=s?QA.size(s.dims):0;if(g!==c||s&&u!==c)throw new Error(`Size of X.shape()[axis:] == ${c}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${g} and bias size of ${u}`);let d=[];for(let e=0;e<n.length;++e)e<o?d.push(n[e]):d.push(1);let f=ut(c),p=["type","type"],h=[{type:12,data:l},{type:1,data:c},{type:12,data:Math.floor(c/f)},{type:1,data:A.epsilon}];s&&p.push("type");let m=t>1,C=t>2,b=[{dims:i,dataType:e[0].dataType}];return m&&b.push({dims:d,dataType:1}),C&&b.push({dims:d,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${f};${t};${r}`,inputDependencies:p},getRunData:()=>({outputs:b,dispatchGroup:{x:Math.ceil(l/64)},programUniforms:h}),getShaderSource:A=>{let t=lt(e[0].dataType),n=[Ct("x",e[0].dataType,e[0].dims,f),Ct("scale",a.dataType,a.dims,f)];s&&n.push(Ct("bias",s.dataType,s.dims,f)),n.push(bt("output",e[0].dataType,i,f)),m&&n.push(bt("mean_data_output",1,d)),C&&n.push(bt("inv_std_output",1,d));return`\n  ${A.registerUniforms([{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}]).declareVariables(...n)}\n  ${A.mainStart()}\n    ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}\n    let offset = global_idx * uniforms.norm_size_vectorized;\n    var mean_vector = ${dt("f32",f)};\n    var mean_square_vector = ${dt("f32",f)};\n\n    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {\n      let value = ${ft(t,f,"x[h + offset]")};\n      mean_vector += value;\n      mean_square_vector += value * value;\n    }\n    let mean = ${pt("mean_vector",f)} / uniforms.norm_size;\n    let inv_std_dev = inverseSqrt(${pt("mean_square_vector",f)} / uniforms.norm_size ${r?"":"- mean * mean"} + uniforms.epsilon);\n\n    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {\n      let f32input = ${ft(t,f,"x[j + offset]")};\n      let f32scale = ${ft(t,f,"scale[j]")};\n      output[j + offset] = ${n[0].type.value}((f32input ${r?"":"- mean"}) * inv_std_dev * f32scale\n        ${s?`+ ${ft(t,f,"bias[j]")}`:""}\n      );\n    }\n\n    ${m?"mean_data_output[global_idx] = mean":""};\n    ${C?"inv_std_output[global_idx] = inv_std_dev":""};\n  }`}}},Di=(e,A)=>{Mi(e.inputs),e.compute(Gi(e.inputs,A,e.outputCount))}})),bc=ee((()=>{yl(),Zl(),Xl(),Qi=e=>{if(!e||2!==e.length)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},Ti=e=>{Qi(e.inputs);let A=DA.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!A)throw new Error("Can't use matmul on the given tensors");let t=A[A.length-1],r=e.inputs[0].dims[e.inputs[0].dims.length-1];if(t<8&&r<8)e.compute(da(e.inputs,{activation:""},A));else{let n=A[A.length-2],a=QA.size(e.inputs[0].dims.slice(0,-2)),s=QA.size(e.inputs[1].dims.slice(0,-2));if(1!==a&&1===n&&1===s){let n=[1,a,t],s=[e.inputs[0].reshape([1,a,r]),e.inputs[1].reshape([1,r,t])];e.compute(wa(s,{activation:""},A,n),{inputs:s})}else e.compute(wa(e.inputs,{activation:""},A))}}})),Ic=ee((()=>{xl(),yl(),Tl(),Pl(),Pi=(e,A)=>{if(e.length<3||e.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let t=e[0],r=t.dims.length;if(t.dims[r-1]!==A.k)throw new Error("The last dim of input shape does not match the k value");let n=Math.floor((A.k+A.blockSize-1)/A.blockSize),a=A.blockSize/8*A.bits,s=e[1];if(!QA.areEqual(s.dims,[A.n,n,a]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let i=e[2].dims;if(QA.size(i)!==A.n*n)throw new Error("scales input size error.");if(4===e.length){let t=e[3].dims,r=A.bits>4?A.n*n:A.n*Math.floor((n+1)/2);if(QA.size(t)!==r)throw new Error("zeroPoints input size error.")}},zi=(e,A)=>{let t=e[0].dims,r=t.length,n=t[r-2],a=A.k,s=A.n,i=t.slice(0,r-2),o=QA.size(i),l=e[1].dims[2]/4,c=e[0].dataType,g=ut(A.k),u=ut(l),d=ut(s),f=i.concat([n,s]),p=n>1&&s/d%2==0?2:1,h=QA.size(f)/d/p,m=64,C=[],b=[o,n,a/g],I=QA.convertShape(e[1].dims).slice();I.splice(-1,1,l/u),C.push(...gt(b)),C.push(...gt(I)),C.push(...gt(e[2].dims)),4===e.length&&C.push(...gt(QA.convertShape(e[3].dims)));let w=[o,n,s/d];C.push(...gt(w));return{name:"MatMulNBits",shaderCache:{hint:`${A.blockSize};${A.bits};${g};${u};${d};${p};64`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:f,dataType:c}],dispatchGroup:{x:h},programUniforms:C}),getShaderSource:t=>{let r=b.length,n=Ct("a",e[0].dataType,r,g),a=Ct("b",12,I.length,u),s=Ct("scales",e[2].dataType,e[2].dims.length),i=[n,a,s],o=4===e.length?Ct("zero_points",12,e[3].dims.length):void 0;o&&i.push(o);let c=w.length,f=bt("output",e[0].dataType,c,d),h=lt(e[0].dataType),C=(()=>{switch(g){case 1:return`array<${h}, 8>`;case 2:return`mat4x2<${h}>`;case 4:return`mat2x4<${h}>`;default:throw new Error(`${g}-component is not supported.`)}})();return`\n        var<workgroup> workgroup_shared: array<${f.type.value}, ${p*m}>;\n        ${t.declareVariables(...i,f)}\n        ${t.mainStart([m,1,1])}\n          let output_indices = ${f.offsetToIndices(`(global_idx / 64) * ${p}`)};\n          let col = output_indices[2];\n          let row = output_indices[1];\n          let batch = output_indices[0];\n          let nBlocksPerCol = uniforms.b_shape[1];\n\n          for (var block = local_id.x; block < nBlocksPerCol; block += 64) {\n            //process one block\n            var word_offset: u32 = block * ${A.blockSize/g};\n            ${(()=>{let e=`\n            var col_index = col * ${d};\n            ${o?"\n            let zero_point_bytes_per_col = (nBlocksPerCol + 1) / 2;\n            var zero_point_byte_count: u32;\n            var zero_point_word_index: u32;\n            var zero_point_byte_offset: u32;\n            let zero_point_nibble_offset: u32 = block & 0x1u;\n            var zero_point_bits_offset: u32;\n            var zero_point_word: u32;":`\n            // The default zero point is 8 for unsigned 4-bit quantization.\n            let zero_point = ${h}(8);`}\n            `;for(let A=0;A<d*p;A++)e+=`\n            let scale${A} = ${s.getByOffset("col_index * nBlocksPerCol + block")};\n            ${o?`\n            zero_point_byte_count = col_index * zero_point_bytes_per_col + (block >> 0x1u);\n            zero_point_word_index = zero_point_byte_count >> 0x2u;\n            zero_point_byte_offset = zero_point_byte_count & 0x3u;\n            zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);\n            zero_point_word = ${o.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;\n            let zero_point${A} = ${h}((zero_point_word) & 0xFu);`:""}\n            col_index += 1;`;return e})()}\n            for (var word: u32 = 0; word < ${l}; word += ${u}) {\n              ${(()=>{let e=`col_index = col * ${d};`;for(let A=0;A<d*p;A++)e+=`\n            let b${A}_data = ${a.getByIndices(`${a.type.indices}(col_index, block, word)`)};\n            col_index += 1;`;return e+=`\n            var b_value: u32;\n            let b_mask: u32 = 0x0F0F0F0Fu;\n            var b_value_lower: vec4<u32>;\n            var b_value_upper: vec4<u32>;\n            var b_quantized_values: ${C};\n            var b_dequantized_values: ${C};`,e})()}\n              for (var i: u32 = 0; i < ${u}; i++) {\n                ${(()=>{let e=`\n          // reuse a data\n            var input_offset = ${n.indicesToOffset(`${n.type.indices}(batch, row, word_offset)`)};\n            var a_data: ${C};\n            for (var j: u32 = 0; j < ${8/g}; j++) {\n              a_data[j] = ${n.getByOffset("input_offset")};\n              input_offset++;\n            }\n          `;for(let A=0;A<d*p;A++)e+=`\n            b_value = ${1===u?`b${A}_data`:`b${A}_data[i]`};\n            b_value_lower = unpack4xU8(b_value & b_mask);\n            b_value_upper = unpack4xU8((b_value >> 4) & b_mask);\n            b_quantized_values = ${C}(${Array.from({length:4},((e,A)=>`${h}(b_value_lower[${A}]), ${h}(b_value_upper[${A}])`)).join(", ")});\n            b_dequantized_values = ${1===g?`${C}(${Array.from({length:8},((e,t)=>`(b_quantized_values[${t}] - ${o?`zero_point${A}`:"zero_point"}) * scale${A}`)).join(", ")});`:`(b_quantized_values - ${C}(${Array(8).fill(""+(o?`zero_point${A}`:"zero_point")).join(",")})) * scale${A};`};\n            workgroup_shared[local_id.x * ${p} + ${Math.floor(A/d)}]${d>1?`[${A%d}]`:""} += ${Array.from({length:8/g},((e,A)=>""+(1===g?`a_data[${A}] * b_dequantized_values[${A}]`:`dot(a_data[${A}], b_dequantized_values[${A}])`))).join(" + ")};\n          `;return e})()}\n                word_offset += ${8/g};\n              }\n            }\n          }\n          workgroupBarrier();\n\n          if (local_id.x < ${p}) {\n            var output_value: ${f.type.value} = ${f.type.value}(0);\n            var workgroup_shared_offset: u32 = local_id.x;\n            for (var b: u32 = 0u; b < 64u; b++) {\n              output_value += workgroup_shared[workgroup_shared_offset];\n              workgroup_shared_offset += ${p};\n            }\n            ${f.setByIndices(`${f.type.indices}(batch, row, col + local_id.x)`,"output_value")};\n          }\n        }`}}},Fi=(e,A)=>{let t=e[0].dims,r=t.length,n=t[r-2],a=A.k,s=A.n,i=t.slice(0,r-2),o=QA.size(i),l=e[1].dims[2]/4,c=e[0].dataType,g=ut(A.k),u=ut(l),d=i.concat([n,s]),f=s%8==0?8:s%4==0?4:1,p=128/f,h=p*u*8,m=h/g,C=h/A.blockSize,b=QA.size(d)/f,I=[],w=[o,n,a/g],k=QA.convertShape(e[1].dims).slice();k.splice(-1,1,l/u),I.push(...gt(w)),I.push(...gt(k)),I.push(...gt(e[2].dims)),4===e.length&&I.push(...gt(QA.convertShape(e[3].dims)));let x=[o,n,s];I.push(...gt(x));return{name:"BlockwiseMatMulNBits32",shaderCache:{hint:`${A.blockSize};${g};${u};${p};${f}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:d,dataType:c}],dispatchGroup:{x:b},programUniforms:I}),getShaderSource:t=>{let r=w.length,n=Ct("a",e[0].dataType,r,g),a=Ct("b",12,k.length,u),s=Ct("scales",e[2].dataType,e[2].dims.length),i=[n,a,s],o=4===e.length?Ct("zero_points",12,e[3].dims.length):void 0;o&&i.push(o);let l=x.length,c=bt("output",e[0].dataType,l),d=lt(e[0].dataType);return`\n        var<workgroup> sub_a: array<${n.type.value}, ${m}>;\n        var<workgroup> inter_results: array<array<${c.type.value}, ${p}>, ${f}>;\n        ${t.declareVariables(...i,c)}\n        ${t.mainStart([p,f,1])}\n          let output_indices = ${c.offsetToIndices(`workgroup_index * ${f}`)};\n          let col = output_indices[2];\n          let row = output_indices[1];\n          let batch = output_indices[0];\n          let n_blocks_per_col = uniforms.b_shape[1];\n          let num_tiles =  (n_blocks_per_col - 1) / ${C} + 1;\n\n          // Loop over shared dimension.\n          for (var tile: u32 = 0; tile < num_tiles; tile += 1) {\n            let a_col_start = tile * ${m};\n            // load one tile A data into shared memory.\n            for (var a_offset = local_idx; a_offset < ${m}; a_offset += 128)\n            {\n              let a_col = a_col_start + a_offset;\n              if (a_col < uniforms.a_shape[2])\n              {\n                sub_a[a_offset] = ${n.getByIndices(`${n.type.indices}(batch, row, a_col)`)};\n              } else {\n                sub_a[a_offset] = ${n.type.value}(0);\n              }\n            }\n            workgroupBarrier();\n\n            // each thread process one block\n            let b_row = col + local_id.y;\n            let block = tile * ${C} + local_id.x;\n            ${o?`\n            let zero_point_bytes_per_col = (n_blocks_per_col + 1) / 2;\n            let zero_point_byte_count = b_row * zero_point_bytes_per_col + (block >> 0x1u);\n            let zero_point_word_index = zero_point_byte_count >> 0x2u;\n            let zero_point_byte_offset = zero_point_byte_count & 0x3u;\n            let zero_point_nibble_offset: u32 = block & 0x1u;\n            let zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);\n            let zero_point_word = ${o.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;\n            let zero_point = ${d}((zero_point_word) & 0xFu);`:`\n            // The default zero point is 8 for unsigned 4-bit quantization.\n            let zero_point = ${d}(8);`}\n            let scale = ${s.getByOffset("b_row * n_blocks_per_col + block")};\n            let b_data = ${a.getByIndices(`${a.type.indices}(b_row, block, 0)`)};\n            var word_offset = local_id.x * ${A.blockSize/g};\n            for (var i: u32 = 0; i < ${u}; i++) {\n              ${(()=>{switch(g){case 1:return`\n          let a_data0 = vec4<${d}>(sub_a[word_offset], sub_a[word_offset + 1], sub_a[word_offset + 2], sub_a[word_offset + 3]);\n          let a_data1 = vec4<${d}>(sub_a[word_offset + 4], sub_a[word_offset + 5], sub_a[word_offset + 6], sub_a[word_offset + 7]);`;case 2:return`\n          let a_data0 = vec4<${d}>(sub_a[word_offset], sub_a[word_offset + 1]);\n          let a_data1 = vec4<${d}>(sub_a[word_offset + 2], sub_a[word_offset + 3]);`;case 4:return"\n          let a_data0 = sub_a[word_offset];\n          let a_data1 = sub_a[word_offset + 1];";default:throw new Error(`${g}-component is not supported.`)}})()}\n              let b_value = ${1===u?"b_data":"b_data[i]"};\n              let b_value_lower = unpack4xU8(b_value & 0x0F0F0F0Fu);\n              let b_value_upper = unpack4xU8((b_value >> 4) & 0x0F0F0F0Fu);\n              let b_quantized_values = mat2x4<${d}>(${Array.from({length:4},((e,A)=>`${d}(b_value_lower[${A}]), ${d}(b_value_upper[${A}])`)).join(", ")});\n              let b_dequantized_values = (b_quantized_values - mat2x4<${d}>(${Array(8).fill("zero_point").join(",")})) * scale;\n              inter_results[local_id.y][local_id.x] += ${Array.from({length:2},((e,A)=>`dot(a_data${A}, b_dequantized_values[${A}])`)).join(" + ")};\n              word_offset += ${8/g};\n            }\n            workgroupBarrier();\n          }\n\n          if (local_idx < ${f}) {\n            var output_value: ${c.type.value} = ${c.type.value}(0);\n            for (var b = 0u; b < ${p}; b++) {\n              output_value += inter_results[local_idx][b];\n            }\n            if (col + local_idx < uniforms.output_shape[2])\n            {\n              ${c.setByIndices(`${c.type.indices}(batch, row, col + local_idx)`,"output_value")}\n            }\n          }\n        }`}}},Si=(e,A)=>{Pi(e.inputs,A),32===A.blockSize&&e.adapterInfo.isVendor("intel")&&e.adapterInfo.isArchitecture("gen-12lp")?e.compute(Fi(e.inputs,A)):e.compute(zi(e.inputs,A))},Ni=e=>st(e)})),wc=ee((()=>{xl(),yl(),Pl(),Oi=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(1!==e[0].dataType&&10!==e[0].dataType)throw new Error("Input type must be float or float16.");if(e.length>=2){let A=2*e[0].dims.length===e[1].dims[0];if(4===e.length&&(A=2*e[3].dims[0]===e[1].dims[0]),!A)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Li=(e,A,t)=>{let r="";for(let n=A-1;n>=0;--n)r+=`\n            k = i32(${e.indicesGet("indices",n)}) - ${ht("uniforms.pads",n,t)};\n            if (k < 0) {\n              break;\n            }\n            if (k >= i32(${ht("uniforms.x_shape",n,A)})) {\n              break;\n            }\n            offset += k * i32(${ht("uniforms.x_strides",n,A)});\n        `;return`\n          value = ${e.type.value}(uniforms.constant_value);\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${r}\n            value = x[offset];\n          }\n      `},Yi=(e,A,t)=>{let r="";for(let n=A-1;n>=0;--n)r+=`\n                k = i32(${e.indicesGet("indices",n)}) - ${ht("uniforms.pads",n,t)};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = 2 * (i32(${ht("uniforms.x_shape",n,A)}) - 1);\n                  k = k % _2n_1;\n                  if(k >= i32(${ht("uniforms.x_shape",n,A)})) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * i32(${ht("uniforms.x_strides",n,A)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${r}\n              value = x[offset];\n          `},Hi=(e,A,t)=>{let r="";for(let n=A-1;n>=0;--n)r+=`\n                k = i32(${e.indicesGet("indices",n)}) - ${ht("uniforms.pads",n,t)};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= i32(${ht("uniforms.x_shape",n,A)})) {\n                  k = i32(${ht("uniforms.x_shape",n,A)}) - 1;\n                }\n                offset += k * i32(${ht("uniforms.x_strides",n,A)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${r}\n              value = x[offset];\n          `},Ri=(e,A,t)=>{let r="";for(let n=A-1;n>=0;--n)r+=`\n                k = i32(${e.indicesGet("indices",n)}) - ${ht("uniforms.pads",n,t)};\n                if (k < 0)  {\n                  k += i32(${ht("uniforms.x_shape",n,A)}]);\n                }\n                if (k >= i32(${ht("uniforms.x_shape",n,A)})) {\n                  k -= i32(${ht("uniforms.x_shape",n,A)});\n                }\n                offset += k * i32(${ht("uniforms.x_strides",n,A)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${r}\n              value = x[offset];\n          `},ji=(e,A,t)=>{switch(t.mode){case 0:return Li(e,A,t.pads.length);case 1:return Yi(e,A,t.pads.length);case 2:return Hi(e,A,t.pads.length);case 3:return Ri(e,A,t.pads.length);default:throw new Error("Invalid mode")}},Vi=(e,A)=>{let t=QA.padShape(e[0].dims.slice(),A.pads),r=e[0].dims,n=[{type:12,data:QA.size(t)},{type:6,data:A.pads}],a=e.length>=3&&e[2].data;0===A.mode&&n.push({type:a?e[2].dataType:1,data:A.value}),n.push(...gt(e[0].dims,t));return{name:"Pad",shaderCache:{hint:`${A.mode}${a}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(QA.size(t)/64)},programUniforms:n}),getShaderSource:n=>{let s=bt("output",e[0].dataType,t.length),i=Ct("x",e[0].dataType,r.length),o=i.type.value,l=ji(s,r.length,A),c=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:A.pads.length}];return 0===A.mode&&c.push({name:"constant_value",type:a?o:"f32"}),`\n            ${n.registerUniforms(c).declareVariables(i,s)}\n            ${n.mainStart()}\n            ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n            let indices = ${s.offsetToIndices("global_idx")};\n\n            var value = ${o}(0);\n            ${l}\n            output[global_idx] = value;\n        }`}}},Wi=(e,A)=>{if(e.length>1){let t=e[1].getBigInt64Array(),r=e.length>=3&&e[2].data?10===e[2].dataType?e[2].getUint16Array()[0]:e[2].getFloat32Array()[0]:0,n=e[0].dims.length,a=new Int32Array(2*n).fill(0);if(e.length>=4){let A=e[3].getBigInt64Array();for(let e=0;e<A.length;e++)a[Number(A[e])]=Number(t[e]),a[Number(A[e])+n]=Number(t[e+A.length])}else t.forEach(((e,A)=>a[Number(A)]=Number(e)));let s=[];return a.forEach((e=>s.push(e))),{mode:A.mode,value:r,pads:s}}return A},Ui=(e,A)=>{Oi(e.inputs);let t=Wi(e.inputs,A);e.compute(Vi(e.inputs,t),{inputs:[0]})}})),kc=ee((()=>{ke(),xl(),yl(),Pl(),Ki=e=>{if(B.webgpu.validateInputContent&&(!e||1!==e.length))throw new Error("Pool ops requires 1 input.")},Zi=(e,A,t)=>{let r="NHWC"===A.format,n=e.dims.slice();r&&n.splice(1,0,n.pop());let a=Object.hasOwnProperty.call(A,"dilations"),s=A.kernelShape.slice(),i=A.strides.slice(),o=a?A.dilations.slice():[],l=A.pads.slice();TA.adjustPoolAttributes(t,n,s,i,o,l);let c=TA.computePoolOutputShape(t,n,i,o,s,l,A.autoPad),g=Object.assign({},A);a?Object.assign(g,{kernelShape:s,strides:i,pads:l,dilations:o,cacheKey:A.cacheKey}):Object.assign(g,{kernelShape:s,strides:i,pads:l,cacheKey:A.cacheKey});let u=c.slice();return u.push(u.splice(1,1)[0]),[g,r?u:c]},Xi=(e,A)=>{let t="NHWC"===A.format,r=[{type:12,data:QA.size(e)},{type:12,data:QA.size(A.kernelShape)}],n=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(A.kernelShape.length<=2){let e=A.kernelShape[A.kernelShape.length-1],t=A.strides[A.strides.length-1],a=A.pads[A.pads.length/2-1],s=A.pads[A.pads.length-1],i=!!(a+s);r.push({type:12,data:e},{type:12,data:t},{type:12,data:a},{type:12,data:s}),n.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let o=!1;if(2===A.kernelShape.length){let e=A.kernelShape[A.kernelShape.length-2],t=A.strides[A.strides.length-2],a=A.pads[A.pads.length/2-2],s=A.pads[A.pads.length-2];o=!!(a+s),r.push({type:12,data:e},{type:12,data:t},{type:12,data:a},{type:12,data:s}),n.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[r,n,!0,i,o]}{if(t)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let e=QA.computeStrides(A.kernelShape);r.push({type:12,data:e},{type:12,data:A.pads},{type:12,data:A.strides}),n.push({name:"kernelStrides",type:"u32",length:e.length},{name:"pads",type:"u32",length:A.pads.length},{name:"strides",type:"u32",length:A.strides.length});let a=A.pads.reduce(((e,A)=>e+A));return[r,n,!!a,!1,!1]}},qi=(e,A,t,r,n,a,s,i,o,l,c,g)=>{let u="NHWC"===n.format,d=A.type.value,f=bt("output",A.type.tensor,r);if(n.kernelShape.length<=2){let r="",l="",p="",h=t-(u?2:1);if(r=c?`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${h}] = indices[${h}] * uniforms.sw - uniforms.pwStart + i;\n                  if (xIndices[${h}] < 0 || xIndices[${h}]\n                      >= uniforms.x_shape[${h}]) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${A.indicesToOffset("xIndices")}];\n                  ${a}\n                }`:`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${h}] = indices[${h}] * uniforms.sw - uniforms.pwStart + i;\n                  let x_val = x[${A.indicesToOffset("xIndices")}];\n                  ${a}\n                }`,2===n.kernelShape.length){let e=t-(u?3:2);l=g?`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${e}] = indices[${e}] * uniforms.sh - uniforms.phStart + j;\n                  if (xIndices[${e}] < 0 || xIndices[${e}] >= uniforms.x_shape[${e}]) {\n                    pad += i32(uniforms.kw);\n                    continue;\n                  }\n              `:`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${e}] = indices[${e}] * uniforms.sh - uniforms.phStart + j;\n                `,p="\n              }\n            "}return`\n            ${e.registerUniforms(o).declareVariables(A,f)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n              let indices = ${f.offsetToIndices("global_idx")};\n              var xIndices = ${f.offsetToIndices("global_idx")};\n\n              var value = ${d}(${i});\n              var pad = 0;\n              ${l}\n              ${r}\n              ${p}\n              ${s}\n\n              output[global_idx] = value;\n            }`}{if(u)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let r=n.kernelShape.length,c=n.pads.length,g="";return g=l?`\n                if (xIndices[j] >= uniforms.x_shape[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${A.indicesToOffset("xIndices")}];\n                ${a}\n              }`:`\n              }\n              let x_val = x[${A.indicesToOffset("xIndices")}];\n              ${a}\n            `,`\n            ${e.registerUniforms(o).declareVariables(A,f)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n              let indices = ${f.offsetToIndices("global_idx")};\n              var xIndices = ${f.offsetToIndices("global_idx")};\n\n              var offsets: array<u32, ${r}>;\n\n              var value = ${d}(${i});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${r-1}u; j++) {\n                  offsets[j] = offset / ${ht("uniforms.kernelStrides","j",r)};\n                  offset -= offsets[j] * ${ht("uniforms.kernelStrides","j",r)};\n                }\n                offsets[${r-1}] = offset;\n\n                isPad = false;\n                for (var j = ${t-r}u; j < ${t}u; j++) {\n                  xIndices[j] = indices[j] * ${ht("uniforms.strides",`j - ${t-r}u`,r)}\n                    + offsets[j - ${t-r}u] - ${ht("uniforms.pads","j - 2u",c)};\n                  ${g}\n              }\n              ${s}\n\n              output[global_idx] = value;\n            }`}},Ji=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,_i=e=>`${Ji(e)};${e.countIncludePad}`,$i=e=>`${Ji(e)};${e.storageOrder};${e.dilations}`,eo=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Ao=(e,A,t,r)=>{let[n,a]=Zi(A,r,t),s=Ct("x",A.dataType,A.dims.length),i=s.type.value,o="";n.countIncludePad?o+=`value /= ${i}(uniforms.kernelSize);`:o+=`value /= ${i}(i32(uniforms.kernelSize) - pad);`;let[l,c,g,u,d]=Xi(a,n);l.push(...gt(A.dims,a));return{name:e,shaderCache:{hint:`${r.cacheKey};${g};${u};${d}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:a,dataType:A.dataType}],dispatchGroup:{x:Math.ceil(QA.size(a)/64)},programUniforms:l}),getShaderSource:e=>qi(e,s,A.dims.length,a.length,n,"value += x_val;",o,0,c,g,u,d)}},to=e=>{let A=0!==e.count_include_pad,t=eo(e);if(0!==t.ceilMode)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let r={countIncludePad:A,...t,cacheKey:""};return{...r,cacheKey:_i(r)}},ro=(e,A)=>{Ki(e.inputs),e.compute(Ao("AveragePool",e.inputs[0],!1,A))},no={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},ao=e=>{let A=e.format;return{format:A,...no,cacheKey:A}},so=(e,A)=>{Ki(e.inputs),e.compute(Ao("GlobalAveragePool",e.inputs[0],!0,A))},io=(e,A,t,r)=>{let[n,a]=Zi(A,r,t),s=Ct("x",A.dataType,A.dims.length),[i,o,l,c,g]=Xi(a,n);return i.push(...gt(A.dims,a)),{name:e,shaderCache:{hint:`${r.cacheKey};${l};${c};${g}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:a,dataType:A.dataType}],dispatchGroup:{x:Math.ceil(QA.size(a)/64)},programUniforms:i}),getShaderSource:e=>qi(e,s,A.dims.length,a.length,n,"\n      value = max(x_val, value);\n    ","",10===A.dataType?-65504:-1e5,o,l,c,g)}},oo=(e,A)=>{Ki(e.inputs),e.compute(io("MaxPool",e.inputs[0],!1,A))},lo=e=>{let A=e.storage_order,t=e.dilations,r=eo(e);if(0!==A)throw new Error("column major storage order is not yet supported for MaxPool");if(0!==r.ceilMode)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let n={storageOrder:A,dilations:t,...r,cacheKey:""};return{...n,cacheKey:$i(n)}},co=e=>{let A=e.format;return{format:A,...no,cacheKey:A}},go=(e,A)=>{Ki(e.inputs),e.compute(io("GlobalMaxPool",e.inputs[0],!0,A))}})),xc=ee((()=>{xl(),yl(),Tl(),Pl(),uo=(e,A)=>{if(e.length<2||e.length>3)throw new Error("DequantizeLinear requires 2 or 3 inputs.");if(3===e.length&&e[1].dims===e[2].dims)throw new Error("x-scale and x-zero-point must have the same shape.");if(3===e.length&&e[0].dataType!==e[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(6===e[0].dataType&&e.length>2)throw new Error("In the case of dequantizing int32 there is no zero point.");if(0!==e[1].dims.length&&1!==e[1].dims.length&&e[1].dims.length!==e[0].dims.length)throw new Error("scale input must be a scalar, a 1D tensor, or have the same rank as the input tensor.");if(e.length>2){if(e[0].dataType!==e[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(e[1].dims.length!==e[2].dims.length)throw new Error("scale and zero-point inputs must have the same rank.");if(!e[1].dims.map(((A,t)=>A===e[2].dims[t])).reduce(((e,A)=>e&&A),!0))throw new Error("scale and zero-point inputs must have the same shape.")}if(A.blockSize>0){if(0===e[1].dims.length||1===e[1].dims.length&&1===e[1].dims[0])throw new Error("blockSize must be set only for block quantization.");if(!e[1].dims.map(((t,r)=>r===A.axis||t===e[0].dims[r])).reduce(((e,A)=>e&&A),!0))throw new Error("For block qunatization, scale input shape to match the input shape except for the axis");if(e[1].dims.length!==e[0].dims.length)throw new Error("For block qunatization the scale input rank must be the same as the x rank.");let t=e[0].dims[A.axis],r=e[1].dims[A.axis];if(A.blockSize<Math.ceil(t/r)||A.blockSize>Math.ceil(t/(r-1)-1))throw new Error("blockSize must be with in the range [ceil(dI / Si), ceil(dI / (Si - 1) - 1)].")}},fo=(e,A)=>{let t=QA.normalizeAxis(A.axis,e[0].dims.length),r=e[0].dataType,n=3===r,a=e[0].dims,s=e[1].dataType,i=QA.size(a),o=3===r||2===r,l=o?[Math.ceil(QA.size(e[0].dims)/4)]:e[0].dims,c=e[1].dims,g=e.length>2?e[2]:void 0,u=g?o?[Math.ceil(QA.size(g.dims)/4)]:g.dims:void 0,d=0===c.length||1===c.length&&1===c[0],f=!1===d&&1===c.length,p=ut(i),h=d&&(!o||4===p),m=h?p:1,C=h&&!o?p:1,b=Ct("input",o?12:r,l.length,C),I=Ct("scale",s,c.length),w=g?Ct("zero_point",o?12:r,u.length):void 0,k=bt("output",s,a.length,m),x=[b,I];w&&x.push(w);let v=[l,c];g&&v.push(u);let B=[{type:12,data:i/m},{type:12,data:t},{type:12,data:A.blockSize},...gt(...v,a)];return{name:"DequantizeLinear",shaderCache:{hint:A.cacheKey,inputDependencies:w?["rank","rank","rank"]:["rank","rank"]},getShaderSource:e=>`\n      ${e.registerUniforms([{name:"output_size",type:"u32"},{name:"axis",type:"u32"},{name:"block_size",type:"u32"}]).declareVariables(...x,k)}\n      ${e.mainStart()}\n          ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          let output_indices = ${k.offsetToIndices("global_idx")};\n\n          // Set input x\n          ${o?`\n            let input = ${b.getByOffset("global_idx / 4")};\n            let x_vec = ${n?"unpack4xI8(input)":"unpack4xU8(input)"};\n            let x_value = ${1===m?"x_vec[global_idx % 4]":"x_vec"};`:`let x_value = ${b.getByOffset("global_idx")};`};\n\n          // Set scale input\n          ${d?`let scale_value= ${I.getByOffset("0")}`:f?`\n            let scale_index = ${k.indicesGet("output_indices","uniforms.axis")};\n            let scale_value= ${I.getByOffset("scale_index")};`:`\n            var scale_indices: ${I.type.indices} = output_indices;\n            let index = ${I.indicesGet("scale_indices","uniforms.axis")} / uniforms.block_size;\n            ${I.indicesSet("scale_indices","uniforms.axis","index")};\n            let scale_value= ${I.getByIndices("scale_indices")};`};\n\n          // Set zero-point input\n          ${w?d?o?`\n                let zero_point_input = ${w.getByOffset("0")};\n                let zero_point_vec =  ${n?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};\n                let zero_point_value= zero_point_vec[0]`:`let zero_point_value = ${w.getByOffset("0")}`:f?o?`\n                let zero_point_index = ${k.indicesGet("output_indices","uniforms.axis")};\n                let zero_point_input = ${w.getByOffset("zero_point_index / 4")};\n                let zero_point_vec =  ${n?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};\n                let zero_point_value = zero_point_vec[zero_point_index % 4]`:`\n                let zero_point_index = ${k.indicesGet("output_indices","uniforms.axis")};\n                let zero_point_value = ${w.getByOffset("zero_point_index")};`:o?`\n                let zero_point_offset = ${I.indicesToOffset("scale_indices")};\n                let zero_point_input = ${w.getByOffset("zero_point_offset / 4")};\n                let zero_point_vec = ${n?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};\n                let zero_point_value = zero_point_vec[zero_point_offset % 4];`:`let zero_point_value = ${w.getByIndices("scale_indices")};`:`let zero_point_value = ${o?n?"i32":"u32":b.type.value}(0);`};\n      // Compute and write output\n      ${k.setByOffset("global_idx",`${k.type.value}(x_value - zero_point_value) * scale_value`)};\n      }`,getRunData:()=>({outputs:[{dims:a,dataType:s}],dispatchGroup:{x:Math.ceil(i/m/64),y:1,z:1},programUniforms:B})}},po=(e,A)=>{uo(e.inputs,A),e.compute(fo(e.inputs,A))},ho=e=>st({axis:e.axis,blockSize:e.blockSize})})),vc=ee((()=>{ke(),xl(),Pl(),mo=(e,A,t)=>{if(e===A||e<A&&t<0||e>A&&t>0)throw new Error("Range these inputs' contents are invalid.")},Co=(e,A,t,r)=>{let n=Math.abs(Math.ceil((A-e)/t)),a=[n],s=n,i=[{type:12,data:s},{type:r,data:e},{type:r,data:t},...gt(a)];return{name:"Range",shaderCache:{hint:`${r}`},getShaderSource:e=>{let A=bt("output",r,a.length),t=A.type.value,n=[{name:"outputSize",type:"u32"},{name:"start",type:t},{name:"delta",type:t}];return`\n        ${e.registerUniforms(n).declareVariables(A)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        output[global_idx] = uniforms.start + ${t}(global_idx) * uniforms.delta;\n      }`},getRunData:()=>({outputs:[{dims:a,dataType:r}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:i})}},bo=e=>{let A=0,t=0,r=0;6===e.inputs[0].dataType?(A=e.inputs[0].getInt32Array()[0],t=e.inputs[1].getInt32Array()[0],r=e.inputs[2].getInt32Array()[0]):1===e.inputs[0].dataType&&(A=e.inputs[0].getFloat32Array()[0],t=e.inputs[1].getFloat32Array()[0],r=e.inputs[2].getFloat32Array()[0]),B.webgpu.validateInputContent&&mo(A,t,r),e.compute(Co(A,t,r,e.inputs[0].dataType),{inputs:[]})}})),Bc=ee((()=>{xl(),yl(),Tl(),Pl(),Io=(e,A,t,r)=>{if("none"!==e&&"i32"!==r&&"u32"!==r&&"f32"!==r)throw new Error(`Input ${r} is not supported with reduction ${e}.`);let n="{\n                var oldValue = 0;\n                loop {\n                  let newValueF32 =",a=`;\n                  let newValue = bitcast<i32>(newValueF32);\n                  let res = atomicCompareExchangeWeak(&${A}, oldValue, newValue);\n                  if res.exchanged {\n                    break;\n                  }\n                  oldValue = res.old_value;\n                }\n              }`;switch(e){case"none":return`${A}=${t};`;case"add":return"i32"===r||"u32"===r?`atomicAdd(&${A}, bitcast<${r}>(${t}));`:`\n              ${n}bitcast<${r}>(oldValue) + (${t})${a}`;case"max":return"i32"===r||"u32"===r?`atomicMax(&${A}, bitcast<${r}>(${t}));`:`\n                ${n}max(bitcast<f32>(oldValue), (${t}))${a}`;case"min":return"i32"===r||"u32"===r?`atomicMin(&${A}, bitcast<${r}>(${t}));`:`${n}min(bitcast<${r}>(oldValue), (${t}))${a}`;case"mul":return`${n}(bitcast<${r}>(oldValue) * (${t}))${a}`;default:throw new Error(`Reduction ${e} is not supported.`)}},wo=(e,A)=>(1===e?"\n    let element_count_dim = uniforms.output_strides;\n    let dim_value = uniforms.output_shape;":`\n    let element_count_dim = uniforms.output_strides[${A?"i - indices_start":"i"}];\n    let dim_value = uniforms.output_shape[${A?"i - indices_start":"i"} + uniforms.last_index_dimension];`)+"\n    \n    if (index >= 0) {\n      if (index >= i32(dim_value)) {\n        index = i32(dim_value - 1);\n      }\n    } else {\n      if (index < -i32(dim_value)) {\n        index = 0;\n      } else {\n        index += i32(dim_value);\n      }\n    }\n    data_offset += u32((u32(index) * element_count_dim));",ko=(e,A,t)=>`for (var i = 0u; i < uniforms.num_updates_elements; i++) {\n        let value = updates[uniforms.num_updates_elements * ${t?"global_idx":"idx"} + i];\n        ${Io(e.reduction,"output[data_offset + i]","value",A)}\n      }`,xo=(e,A)=>{let t=e[0].dims,r=e[1].dims,n=t,a=Math.ceil(QA.size(r)/1),s=r[r.length-1],i=QA.sizeFromDimension(t,s),o=QA.sizeFromDimension(r,0)/s,l=[{type:12,data:a},{type:12,data:s},{type:12,data:i},...gt(e[1].dims,e[2].dims,n)];return{name:"ScatterND",shaderCache:{hint:`${A.cacheKey}_${A.reduction}`,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:l}),getShaderSource:r=>{let a=Ct("indices",e[1].dataType,e[1].dims.length),s=Ct("updates",e[2].dataType,e[2].dims.length,1),i="none"!==A.reduction&&""!==A.reduction?It("output",e[0].dataType,n.length):bt("output",e[0].dataType,n.length,1);return`\n      ${r.registerUniform("output_size","u32").registerUniform("last_index_dimension","u32").registerUniform("num_updates_elements","u32").declareVariables(a,s,i)}\n      ${r.mainStart()}\n        ${r.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n  var hasDuplicates = false;\n  if (${"none"===A.reduction}) {\n    for (var i = 0; i < ${o}; i = i + 1) {\n      for (var j = i + 1; j < ${o}; j = j + 1) {\n        var index_i = i32(indices[i].x);\n        var index_j = i32(indices[j].x);\n        if (index_i == index_j) {\n          hasDuplicates = true;\n          break;\n        }\n      }\n      if (hasDuplicates) {\n        break;\n      }\n    }\n  }\n\n  if (${"none"===A.reduction} && hasDuplicates) {\n    if (global_idx != 0u) {\n      return;\n    }\n    // Process each index-update pair individually when duplicates exist\n    for (var idx = 0u; idx < ${o}u; idx++) {\n      var data_offset = 0u;\n      for (var i = 0u; i < uniforms.last_index_dimension; i++) {\n        var index = i32(indices[idx * uniforms.last_index_dimension + i].x);\n        ${wo(t.length,!1)}\n      }\n      ${ko(A,i.type.value,!1)}\n    }\n    return;\n  }\n\n  var data_offset = 0u;\n  var indices_start = uniforms.last_index_dimension * global_idx;\n  var indices_end = indices_start + uniforms.last_index_dimension;\n  for (var i = indices_start; i < indices_end; i++) {\n    var index = i32(indices[i].x);\n    ${wo(t.length,!0)}\n  }\n  ${ko(A,i.type.value,!0)}\n  }`}}},vo=e=>st({reduction:e.reduction}),Bo=(e,A)=>{e.compute(xo(e.inputs,A),{inputs:[e.inputs[1],e.inputs[2]],outputs:[]})}})),yc=ee((()=>{xl(),yl(),Tl(),Pl(),yo=(e,A)=>{if(e.every((e=>e>0||(()=>{throw new Error("Resize requires scales input values to be positive")}))),e.length>0)if("linear"===A.mode){if(!(2===e.length||3===e.length||4===e.length&&1===e[0]&&1===e[1]||4===e.length&&1===e[0]&&1===e[3]||5===e.length&&1===e[0]&&1===e[1]))throw new Error("For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and\n            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1")}else if("cubic"===A.mode&&!(2===e.length||4===e.length&&1===e[0]&&1===e[1]||4===e.length&&1===e[0]&&1===e[3]))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")},Eo=(e,A,t)=>{A.every((e=>e>=0&&e<t||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")})));let r=new Array(t).fill(1);return A.forEach(((A,t)=>r[A]=e[t])),r},Mo=(e,A,t,r,n,a)=>{let[s,i,o]=t>10?[1,2,3]:[-1,e.length>1?1:-1,-1],l=e[0].dims.length;if(s>0&&e.length>s&&e[s].dims.length>0)e[s].getFloat32Array().forEach((e=>a.push(e)));else if("tf_crop_and_resize"===A.coordinateTransformMode)throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(i>0&&e.length>i&&1===e[i].dims.length&&e[i].dims[0]>0){if(e[i].getFloat32Array().forEach((e=>r.push(e))),0!==r.length&&r.length!==l&&t>=18&&r.length!==A.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");yo(r,A),A.axes.length>0&&Eo(r,A.axes,l).forEach(((e,A)=>r[A]=e))}if(o>0&&e.length>o&&1===e[o].dims.length&&e[o].dims[0]>0&&(e[o].getBigInt64Array().forEach((e=>n.push(Number(e)))),0!==n.length&&n.length!==l&&t>=18&&n.length!==A.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(A.axes.length>0){if(0!==r.length&&r.length!==A.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(0!==n.length&&n.length!==A.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof r<"u"&&typeof n<"u"&&r.length>0&&n.length>l)throw new Error("Resize requires only of scales or sizes to be specified")},Go=(e,A,t,r)=>`\n  // The whole part and the fractional part are calculated separately due to inaccuracy of floating\n  // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an\n  // offset-by-one error later in floor().\n  let big = (${e}) * (${A});\n  let whole = ${r}(big / (${t}));\n  let fract = ${r}(big % (${t})) / ${r}(${t});\n  return whole + fract;\n`,Do=(e,A)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,\n     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${A} { `+(()=>{switch(e){case"asymmetric":return`\n          if (xScale < 1.0 || floor(xScale) != xScale) {\n            return ${A}(xResized) / ${A}(xScale);\n          } else {\n            ${Go("xResized","lengthOriginal","lengthResized",A)}\n          }\n        `;case"pytorch_half_pixel":return`if (lengthResized > 1) {\n                    return (${A}(xResized) + 0.5) / ${A}(xScale) - 0.5;\n                  } else {\n                    return 0.0;\n                  }`;case"tf_half_pixel_for_nn":return`return (${A}(xResized) + 0.5) / ${A}(xScale);`;case"align_corners":return`if (lengthResized == 1) {\n                    return 0.0;\n                  } else {\n                    ${Go("xResized","lengthOriginal - 1","lengthResized - 1",A)}\n                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {\n                    return ${A}(roiStart) * ${A}(lengthOriginal - 1) +\n                        (${A}(xResized) * ${A}(roiEnd - roiStart) * ${A}(lengthOriginal - 1)) /\n                        ${A}(lengthResized - 1);\n                  } else {\n                    return 0.5 * ${A}(roiStart + roiEnd) * ${A}(lengthOriginal - 1);\n                  }`;case"half_pixel_symmetric":return`const outputWidth = ${A}xScale * ${A}(lengthResized);\n                  const adjustment = ${A}(lengthResized) / outputWidth;\n                  const center = ${A}(lengthOriginal) / 2;\n                  const offset = center * (1 - adjustment);\n                  return offset + ((${A}(xResized) + 0.5) / ${A}(xScale)) - 0.5;`;case"half_pixel":return`return ((${A}(xResized) + 0.5) / ${A}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",Qo=(e,A,t)=>`fn getNearestPixelFromOriginal(xOriginal: ${t}, isDownSample: bool) -> ${t} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";default:if(A<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",To=(e,A,t)=>{let r=new Array(t).fill(0).concat(new Array(t).fill(1)),n=0===e.length?r:e.slice();return A.length>0?(A.forEach(((e,a)=>{r[e]=n[a],r[a+t]=n[A.length+a]})),r):n},Po=(e,A,t,r)=>{let n=[];if(t.length>0)if(r.length>0){if(e.forEach((e=>n.push(e))),Math.max(...r)>e.length)throw new Error("axes is out of bound");r.forEach(((e,A)=>n[e]=t[A]))}else t.forEach((e=>n.push(e)));else{if(0===A.length)throw new Error("Resize requires either scales or sizes.");n=e.map(((e,t)=>Math.round(e*A[t])))}return n},zo=(e,A,t)=>{let r=(()=>{switch(t.keepAspectRatioPolicy){case"not_larger":return t.axes.length>0?Math.min(...t.axes.map((e=>A[e])),Number.MAX_VALUE):Math.min(...A,Number.MAX_VALUE);case"not_smaller":return t.axes.length>0?Math.max(...t.axes.map((e=>A[e])),Number.MIN_VALUE):Math.max(...A,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${t.keepAspectRatioPolicy} is not supported`)}})();A.fill(1,0,A.length);let n=e.slice();return t.axes.length>0?(t.axes.forEach((e=>A[e]=r)),t.axes.forEach((t=>n[t]=Math.round(e[t]*A[t])))):(A.fill(r,0,A.length),n.forEach(((e,t)=>n[t]=Math.round(e*A[t])))),n},Fo=(e,A,t,r,n)=>`\n    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${t.length}> {\n      var original_indices: array<${e.type.value}, ${t.length}>;\n      for (var i:u32 = 0; i < ${t.length}; i++) {\n        var output_index = ${e.indicesGet("output_indices","i")};\n        var scale = ${ht("uniforms.scales","i",r)};\n        var roi_low = ${ht("uniforms.roi","i",n)};\n        var roi_hi = ${ht("uniforms.roi",`i + ${A.length}`,n)};\n        if (scale == 1.0) {\n          original_indices[i] = ${e.type.value}(output_index);\n        } else {\n          var input_shape_i = ${ht("uniforms.input_shape","i",A.length)};\n          var output_shape_i = ${ht("uniforms.output_shape","i",t.length)};\n          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                           input_shape_i, roi_low, roi_hi);\n        }\n      }\n      return original_indices;\n    }`,So=(e,A,t,r,n,a,s)=>`\n    fn calculateInputIndicesFromOutputIndices(output_indices: ${A.type.indices}) -> ${e.type.indices} {\n      var input_indices: ${e.type.indices};\n      for (var i:u32 = 0; i < ${r.length}; i++) {\n        var output_index = ${A.indicesGet("output_indices","i")};\n        var input_index: u32;\n        var scale = ${ht("uniforms.scales","i",n)};\n        if (scale == 1.0) {\n          input_index = output_index;\n        } else {\n          var roi_low = ${ht("uniforms.roi","i",a)};\n          var roi_hi = ${ht("uniforms.roi",`i + ${t.length}`,a)};\n          var input_shape_i = ${ht("uniforms.input_shape","i",t.length)};\n          var output_shape_i = ${ht("uniforms.output_shape","i",r.length)};\n          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                        input_shape_i, roi_low, roi_hi);\n          if (!${s} || (original_idx >= 0 && original_idx < ${A.type.value}(input_shape_i))) {\n            if (original_idx < 0) {\n              input_index = 0;\n            } else if (original_idx > ${A.type.value}(input_shape_i - 1)) {\n              input_index = input_shape_i - 1;\n            } else {\n              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));\n            }\n          } else {\n            input_index = u32(original_idx);\n          }\n        }\n        ${e.indicesSet("input_indices","i","input_index")}\n      }\n      return input_indices;\n    }`,No=(e,A)=>`\n    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {\n      for (var i:u32 = 0; i < ${A.length}; i++) {\n        var input_index = ${e.indicesGet("input_indices","i")};\n        if (input_index < 0 || input_index >= ${ht("uniforms.input_shape","i",A.length)}) {\n          return false;\n        }\n      }\n      return true;\n    }`,Oo=(e,A,t,r)=>e.rank>r?`\n    ${e.indicesSet("input_indices",A,"channel")};\n    ${e.indicesSet("input_indices",t,"batch")};\n`:"",Lo=(e,A,t,r,n)=>{let[a,s,i,o]=2===t.length?[-1,0,1,-1]:[0,2,3,1],l=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${l} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",s,`max(0, min(row, ${t[s]} - 1))`)};\n      ${e.indicesSet("input_indices",i,`max(0, min(col, ${t[i]} - 1))`)};\n      ${Oo(e,o,a,2)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn bilinearInterpolation(output_indices: ${A.type.indices}) -> ${l} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var row:${l} = originalIndices[${s}];\n      var col:${l} = originalIndices[${i}];\n      ${r?`if (row < 0 || row > (${t[s]} - 1) || col < 0 || col > (${t[i]} - 1)) {\n        return ${n};\n      }`:""};\n      row = max(0, min(row, ${t[s]} - 1));\n      col = max(0, min(col, ${t[i]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = ${t.length>2?`u32(originalIndices[${o}])`:"0"};\n      var batch: u32 =  ${t.length>2?`u32(originalIndices[${a}])`:"0"};\n      var x11: ${l} = getInputValue(batch, channel, row1, col1);\n      var x12: ${l} = getInputValue(batch, channel, row1, col2);\n      var x21: ${l} = getInputValue(batch, channel, row2, col1);\n      var x22: ${l} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${l} = abs(row - ${l}(row1));\n      var dx2: ${l} = abs(${l}(row2) - row);\n      var dy1: ${l} = abs(col - ${l}(col1));\n      var dy2: ${l} = abs(${l}(col2) - col);\n      if (row1 == row2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (col1 == col2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`},Yo=(e,A,t,r,n,a,s,i,o,l)=>{let c=2===t.length,[g,u]=c?[0,1]:[2,3],d=e.type.value,f=s=>{let c=s===g?"row":"col";return`\n      fn ${c}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${A.type.indices}) -> ${d} {\n        var output_index = ${A.indicesGet("output_indices",s)};\n        var originalIdx: ${d} = getOriginalCoordinateFromResizedCoordinate(output_index, ${n[s]},\n        ${r[s]}, ${t[s]}, ${a[s]}, ${a[s]} + ${t.length});\n        var fractOriginalIdx: ${d} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${i} && (originalIdx < 0 || originalIdx > (${t[s]} - 1))) {\n          return ${o};\n        }\n        var data: array<${d}, 4> = array<${d}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${c}: ${d} = originalIdx + ${d}(i);\n          if (${c} < 0 || ${c} >= ${t[s]}) {\n            ${l?"coefs[i + 1] = 0.0;\n                        continue;":i?`return ${o};`:`${c} = max(0, min(${c}, ${t[s]} - 1));`};\n          }\n        var input_indices_copy: ${e.type.indices} = input_indices;\n          ${e.indicesSet("input_indices_copy",s,`u32(${c})`)};\n          data[i + 1] = ${s===g?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`};return`\n    ${f(g)};\n    ${f(u)};\n  fn getCubicInterpolationCoefs(s: ${d}) -> array<${d}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${d}, 4> = array<${d}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${d} = 1.0 - absS;\n    var twoMinusAbsS: ${d} = 2.0 - absS;\n    var onePlusAbsS: ${d} = 1.0 + absS;\n    coeffs[0] = ((${s} * onePlusAbsS - 5 * ${s}) * onePlusAbsS + 8 * ${s}) * onePlusAbsS - 4 * ${s};\n    coeffs[1] = ((${s} + 2) * absS - (${s} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${s} + 2) * oneMinusAbsS - (${s} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${s} * twoMinusAbsS - 5 * ${s}) * twoMinusAbsS + 8 * ${s}) * twoMinusAbsS - 4 * ${s};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${d}, 4>, coefs: array<${d}, 4>) -> ${d} {\n    var coefsSum: ${d} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(output_indices: ${A.type.indices}) -> ${d} {\n    var input_indices: ${e.type.indices} = output_indices;\n    return colCubicInterpolation(input_indices, output_indices);\n  }\n    `},Ho=(e,A,t,r,n)=>{let[a,s,i,o,l]=3===t.length?[-1,0,1,2,-1]:[0,2,3,4,1],c=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${c} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",s,`max(0, min(depth, ${t[s]} - 1))`)};\n      ${e.indicesSet("input_indices",i,`max(0, min(height, ${t[i]} - 1))`)};\n      ${e.indicesSet("input_indices",o,`max(0, min(width, ${t[o]} - 1))`)};\n      ${Oo(e,l,a,3)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn trilinearInterpolation(output_indices: ${A.type.indices}) -> ${c} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var depth:${c} = originalIndices[${s}];\n      var height:${c} = originalIndices[${i}];\n      var width:${c} = originalIndices[${o}];\n      ${r?`if (depth < 0 || depth > (${t[s]} - 1) || height < 0 || height > (${t[i]} - 1) || width < 0 || (width > ${t[o]} - 1)) {\n      return ${n};\n        }`:""};\n\n    depth = max(0, min(depth, ${t[s]} - 1));\n      height = max(0, min(height, ${t[i]} - 1));\n      width = max(0, min(width, ${t[o]} - 1));\n      var depth1: u32 = u32(depth);\n      var height1: u32 = u32(height);\n      var width1: u32 = u32(width);\n      var depth2: u32 = u32(depth + 1);\n      var height2: u32 = u32(height + 1);\n      var width2: u32 = u32(width + 1);\n      var channel: u32 = ${t.length>3?`u32(originalIndices[${l}])`:"0"};\n      var batch: u32 =  ${t.length>3?`u32(originalIndices[${a}])`:"0"};\n\n      var x111: ${c} = getInputValue(batch, channel, depth1, height1, width1);\n      var x112: ${c} = getInputValue(batch, channel, depth1, height1, width2);\n      var x121: ${c} = getInputValue(batch, channel, depth1, height2, width1);\n      var x122: ${c} = getInputValue(batch, channel, depth1, height2, width2);\n      var x211: ${c} = getInputValue(batch, channel, depth2, height1, width1);\n      var x212: ${c} = getInputValue(batch, channel, depth2, height1, width2);\n      var x221: ${c} = getInputValue(batch, channel, depth2, height2, width1);\n      var x222: ${c} = getInputValue(batch, channel, depth2, height2, width2);\n      var dx1: ${c} = abs(depth - ${c}(depth1));\n      var dx2: ${c} = abs(${c}(depth2) - depth);\n      var dy1: ${c} = abs(height - ${c}(height1));\n      var dy2: ${c} = abs(${c}(height2) - height);\n      var dz1: ${c} = abs(width - ${c}(width1));\n      var dz2: ${c} = abs(${c}(width2) - width);\n      if (depth1 == depth2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (height1 == height2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      if (width1 == width2) {\n        dz1 = 0.5;\n        dz2 = 0.5;\n      }\n      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +\n              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);\n    }`},Ro=(e,A,t,r,n,a)=>{let s=e.dims,i=To(a,A.axes,s.length),o=Po(s,r,n,A.axes),l=r.slice();0===r.length&&(l=s.map(((e,A)=>0===e?1:o[A]/e)),"stretch"!==A.keepAspectRatioPolicy&&(o=zo(s,l,A)));let c=bt("output",e.dataType,o.length),g=Ct("input",e.dataType,s.length),u=QA.size(o),d=s.length===o.length&&s.every(((e,A)=>e===o[A])),f="tf_crop_and_resize"===A.coordinateTransformMode,p=A.extrapolationValue,h=g.type.value;return{name:"Resize",shaderCache:{hint:`${A.cacheKey}|${t}|${l.length>0?"cubic"===A.mode?l:l.length:""}|${n.length>0?n:""}|${i.length>0?i:""}|${d}|${"nearest"===A.mode?s.length:s}`,inputDependencies:["rank"]},getShaderSource:e=>`\n      ${d?"":`\n      ${Do(A.coordinateTransformMode,h)};\n      ${(()=>{switch(A.mode){case"nearest":return`\n              ${No(g,s)};\n              ${Qo(A.nearestMode,t,h)};\n              ${So(g,c,s,o,l.length,i.length,f)};\n              `;case"linear":return`\n              ${Fo(c,s,o,l.length,i.length)};\n              ${(()=>{if(2===s.length||4===s.length)return`${Lo(g,c,s,f,p)}`;if(3===s.length||5===s.length)return`${Ho(g,c,s,f,p)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};\n            `;case"cubic":return`\n            ${(()=>{if(2===s.length||4===s.length)return`${Yo(g,c,s,o,l,i,A.cubicCoeffA,f,A.extrapolationValue,A.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};\n            `;default:throw Error("Invalid resize mode")}})()};\n      `}\n      ${e.registerUniform("output_size","u32").registerUniform("scales","f32",l.length).registerUniform("roi","f32",i.length).declareVariables(g,c)}\n      ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n        ${d?"output[global_idx] = input[global_idx];":`\n        let output_indices = ${c.offsetToIndices("global_idx")};\n        var input_indices: ${g.type.indices};\n        ${(()=>{switch(A.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);\n                if (checkInputIndices(input_indices)) {\n                  output[global_idx] = ${g.getByIndices("input_indices")};\n                } else {\n                  output[global_idx] = ${A.extrapolationValue};\n                }`;case"linear":return`output[global_idx] = ${2===s.length||4===s.length?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${A.mode}`)}})()};\n`}\n      }`,getRunData:()=>({outputs:[{dims:o,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:[{type:12,data:u},{type:1,data:l},{type:1,data:i},...gt(s,o)]})}},jo=e=>{let A=e.customDataBuffer;return new Uint32Array(A,A.byteOffset,1)[0]},Vo=(e,A)=>{let t=[],r=[],n=[],a=jo(e);if(0!==A.antialias)throw Error("Only default value (0) for Antialias attribute is supported");Mo(e.inputs,A,a,t,r,n),e.compute(Ro(e.inputs[0],A,a,t,r,n),{inputs:[0]})},Wo=e=>{let A=e.antialias,t=e.axes,r=e.coordinateTransformMode,n=e.cubicCoeffA,a=0!==e.excludeOutside,s=e.extrapolationValue,i=e.keepAspectRatioPolicy,o=e.mode,l=""===e.nearestMode?"simple":e.nearestMode;return st({antialias:A,axes:t,coordinateTransformMode:r,cubicCoeffA:n,excludeOutside:a,extrapolationValue:s,keepAspectRatioPolicy:i,mode:o,nearestMode:l})}})),Ec=ee((()=>{xl(),yl(),Pl(),Uo=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let A=e[0],t=e[1],r=e[2];if(A.dataType!==t.dataType||A.dataType!==r.dataType)throw new Error("All inputs must have the same data type");if(3!==A.dims.length&&2!==A.dims.length)throw new Error("Input must be 2D or 3D");if(3!==t.dims.length&&2!==t.dims.length)throw new Error("Skip must be 2D or 3D");let n=A.dims[A.dims.length-1],a=A.dims[A.dims.length-2];if(t.dims[t.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(t.dims[t.dims.length-2]!==a)throw new Error("Skip must have the same sequence length as input");if(1!==r.dims.length)throw new Error("Gamma must be 1D");if(r.dims[r.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let A=e[3];if(1!==A.dims.length)throw new Error("Beta must be 1D");if(A.dims[A.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let A=e[4];if(1!==A.dims.length)throw new Error("Bias must be 1D");if(A.dims[A.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},Ko=(e,A,t,r)=>{let n=A.simplified,a=e[0].dims,s=QA.size(a),i=a,o=s,l=a.slice(-1)[0],c=r?a.slice(0,-1).concat(1):[],g=!n&&e.length>3,u=e.length>4,d=r&&t>1,f=r&&t>2,p=t>3,h=64,m=ut(l),C=[{type:12,data:o},{type:12,data:m},{type:12,data:l},{type:1,data:A.epsilon}],b=[{dims:i,dataType:e[0].dataType}];return t>1&&b.push({dims:c,dataType:1}),t>2&&b.push({dims:c,dataType:1}),t>3&&b.push({dims:a,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${m};${d};${f};${p}`,inputDependencies:e.map(((e,A)=>"type"))},getShaderSource:A=>{let t=[Ct("x",e[0].dataType,e[0].dims,m),Ct("skip",e[1].dataType,e[1].dims,m),Ct("gamma",e[2].dataType,e[2].dims,m)];g&&t.push(Ct("beta",e[3].dataType,e[3].dims,m)),u&&t.push(Ct("bias",e[4].dataType,e[4].dims,m)),t.push(bt("output",e[0].dataType,i,m)),d&&t.push(bt("mean_output",1,c)),f&&t.push(bt("inv_std_output",1,c)),p&&t.push(bt("input_skip_bias_sum",e[0].dataType,i,m));let r=lt(e[0].dataType),a=lt(1,m);return`\n\n      ${A.registerUniforms([{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}]).declareVariables(...t)}\n      var<workgroup> sum_shared : array<${a}, 64>;\n      var<workgroup> sum_squared_shared : array<${a}, 64>;\n\n      ${A.mainStart([h,1,1])}\n        let ix = local_id.x;\n        let iy = global_id.x / 64;\n\n        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;\n        var stride = hidden_size_vectorized / 64;\n        let offset = ix * stride + iy * hidden_size_vectorized;\n        let offset1d = stride * ix;\n        if (ix == 63) {\n          stride = hidden_size_vectorized - stride * ix;\n        }\n        for (var i: u32 = 0; i < stride; i++) {\n          let skip_value = skip[offset + i];\n          let bias_value = ${u?"bias[offset1d + i]":r+"(0.0)"};\n          let input_value = x[offset + i];\n          let value = input_value + skip_value + bias_value;\n          ${p?"input_skip_bias_sum[offset + i] = value;":""}\n          output[offset + i] = value;\n          let f32_value = ${ft(r,m,"value")};\n          sum_shared[ix] += f32_value;\n          sum_squared_shared[ix] += f32_value * f32_value;\n        }\n        workgroupBarrier();\n\n        var reduce_size : u32 = 64;\n        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {\n          reduce_size = curr_size + (reduce_size & 1);\n          if (ix < curr_size) {\n            sum_shared[ix] += sum_shared[ix + reduce_size];\n            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];\n          }\n          workgroupBarrier();\n        }\n\n        let sum = sum_shared[0];\n        let square_sum = sum_squared_shared[0];\n        let mean = ${pt("sum",m)} / f32(uniforms.hidden_size);\n        let inv_std_dev = inverseSqrt(${pt("square_sum",m)} / f32(uniforms.hidden_size) ${n?"":"- mean * mean"} + uniforms.epsilon);\n        ${d?"mean_output[global_idx] = mean;":""}\n        ${f?"inv_std_output[global_idx] = inv_std_dev;":""}\n\n        for (var i: u32 = 0; i < stride; i++) {\n          output[offset + i] = (output[offset + i] ${n?"":`- ${r}(mean)`}) *\n            ${r}(inv_std_dev) * gamma[offset1d + i]\n            ${g?"+ beta[offset1d + i]":""};\n        }\n      }`},getRunData:()=>({outputs:b,dispatchGroup:{x:Math.ceil(o/l)},programUniforms:C})}},Zo=(e,A)=>{Uo(e.inputs);let t=[0];e.outputCount>1&&t.push(-3),e.outputCount>2&&t.push(-3),e.outputCount>3&&t.push(3),e.compute(Ko(e.inputs,A,e.outputCount,!1),{outputs:t})}})),Mc=ee((()=>{xl(),yl(),Tl(),Pl(),Xo=(e,A)=>{if(!e||e.length<1)throw new Error("too few inputs");if(0!==A.axes.length){if(A.axes.length!==A.starts.length||A.axes.length!==A.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(A.starts.length!==A.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach(((A,t)=>{if(6!==e[t+1].dataType&&7!==e[t+1].dataType)throw new Error(`Input ${t} must be an array of int32 or int64`)}))},qo=(e,A)=>{let t=[];if(e.length>A)if(7===e[A].dataType)e[A].getBigInt64Array().forEach((e=>t.push(Number(e))));else{if(6!==e[A].dataType)throw new Error(`Input ${A} must be an array of int32 or int64`);e[A].getInt32Array().forEach((e=>t.push(Number(e))))}return t},Jo=(e,A)=>{if(e.length>1){let A=qo(e,1),t=qo(e,2),r=qo(e,3);return 0===r.length&&(r=[...Array(e[0].dims.length).keys()]),st({starts:A,ends:t,axes:r})}return A},_o=(e,A,t,r,n)=>{let a=e;return e<0&&(a+=t[r[A]]),n[A]<0?Math.max(0,Math.min(a,t[r[A]]-1)):Math.max(0,Math.min(a,t[r[A]]))},$o=(e,A,t)=>`fn calculateInputIndices(output_indices: ${A.type.indices}) -> ${e.type.indices} {\n          var input_indices: ${e.type.indices};\n          var carry = 0u;\n          for (var i = ${t.length}; i >= 0; i--) {\n            let input_shape_i = ${ht("uniforms.input_shape","i",t.length)};\n            let steps_i = ${ht("uniforms.steps","i",t.length)};\n            let signs_i = ${ht("uniforms.signs","i",t.length)};\n            let starts_i = ${ht("uniforms.starts","i",t.length)};\n            var output_index = ${A.indicesGet("output_indices","i")};\n            var input_index = output_index * steps_i + starts_i + carry;\n            carry = input_index / input_shape_i;\n            input_index = input_index % input_shape_i;\n            if (signs_i < 0) {\n              input_index = input_shape_i - input_index - 1u + starts_i;\n            }\n            ${e.indicesSet("input_indices","i","input_index")};\n          }\n          return input_indices;\n      }`,el=(e,A)=>{let t=e[0].dims,r=QA.size(t),n=A.axes.length>0?QA.normalizeAxes(A.axes,t.length):[...Array(t.length).keys()],a=qo(e,4);a.forEach((e=>0!==e||(()=>{throw new Error("step cannot be 0")}))),0===a.length&&(a=Array(n.length).fill(1));let s=A.starts.map(((e,A)=>_o(e,A,t,n,a))),i=A.ends.map(((e,A)=>_o(e,A,t,n,a)));if(n.length!==s.length||n.length!==i.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==t.length)for(let e=0;e<t.length;++e)n.includes(e)||(s.splice(e,0,0),i.splice(e,0,t[e]),a.splice(e,0,1));let o=a.map((e=>Math.sign(e)));a.forEach(((e,A,t)=>{if(e<0){let r=(i[A]-s[A])/e,n=s[A],o=n+r*a[A];s[A]=o,i[A]=n,t[A]=-e}}));let l=t.slice(0);n.forEach(((e,A)=>{l[e]=Math.ceil((i[e]-s[e])/a[e])}));let c={dims:l,dataType:e[0].dataType},g=bt("output",e[0].dataType,l.length),u=Ct("input",e[0].dataType,e[0].dims.length),d=QA.size(l),f=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:s.length},{name:"signs",type:"i32",length:o.length},{name:"steps",type:"u32",length:a.length}],p=[{type:12,data:d},{type:12,data:s},{type:6,data:o},{type:12,data:a},...gt(e[0].dims,l)];return{name:"Slice",shaderCache:{hint:`${o.length}_${s.length}_${a.length}`,inputDependencies:["rank"]},getShaderSource:e=>`\n      ${e.registerUniforms(f).declareVariables(u,g)}\n        ${$o(u,g,t)}\n        ${e.mainStart()}\n          ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n          let output_indices = ${g.offsetToIndices("global_idx")};\n          let input_indices = calculateInputIndices(output_indices);\n          ${g.setByOffset("global_idx",u.getByIndices("input_indices"))}\n      }`,getRunData:()=>({outputs:[c],dispatchGroup:{x:Math.ceil(r/64)},programUniforms:p})}},Al=(e,A)=>{Xo(e.inputs,A);let t=Jo(e.inputs,A);e.compute(el(e.inputs,t),{inputs:[0]})},tl=e=>{let A=e.starts,t=e.ends,r=e.axes;return st({starts:A,ends:t,axes:r})}})),Gc=ee((()=>{xl(),yl(),Tl(),zl(),Pl(),rl=e=>{if(!e||1!==e.length)throw new Error("Softmax op requires 1 input.")},nl=(e,A)=>{let t,r=e.inputs[0],n=r.dims,a=QA.size(n),s=n.length,i=QA.normalizeAxis(A.axis,s),o=i<n.length-1,l=[];o?(l=Array.from({length:s},((e,A)=>A)),l[i]=s-1,l[s-1]=i,t=e.compute(Dt(r,l),{inputs:[r],outputs:[-1]})[0]):t=r;let c=t.dims,g=c[s-1],u=a/g,d=ut(g),f=g/d,p=64;1===u&&(p=256);let h=Ct("x",t.dataType,t.dims,d),m=bt("result",t.dataType,t.dims,d),C=h.type.value,b="f32"===lt(t.dataType)?`var threadMax = ${C}(-3.402823e+38f);`:`var threadMax = ${C}(-65504.0h);`,I=e.compute({name:"Softmax",shaderCache:{hint:`${d};${p}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:c,dataType:t.dataType}],dispatchGroup:{x:u},programUniforms:[{type:6,data:f}]}),getShaderSource:e=>`\n      var<workgroup> rowMaxShared : ${C};\n      var<workgroup> rowSumShared : ${C};\n      var<workgroup> threadShared : array<${C}, ${p}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${C} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${C}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${e.registerUniform("packedCols","i32").declareVariables(h,m)}\n      ${e.mainStart(p)}\n        let gindex = i32(global_idx);\n        let lindex = i32(local_idx);\n        const wg = ${p};\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${b}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${C}(${((e,A)=>4===A?`max(max(${e}.x, ${e}.y), max(${e}.z, ${e}.w))`:2===A?`max(${e}.x, ${e}.y)`:3===A?`max(max(${e}.x, ${e}.y), ${e}.z)`:e)("threadShared[0]",d)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${C}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${C}(${pt("threadShared[0]",d)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`},{inputs:[t],outputs:[o?-1:0]})[0];o&&e.compute(Dt(I,l),{inputs:[I]})},al=(e,A)=>{rl(e.inputs),nl(e,A)},sl=e=>st({axis:e.axis})})),Dc=ee((()=>{xl(),yl(),Pl(),il=e=>Array.from(e.getBigInt64Array(),Number),ol=e=>{if(!e||2!==e.length)throw new Error("Tile requires 2 inputs.");if(1!==e[0].dataType&&10!==e[0].dataType&&6!==e[0].dataType&&12!==e[0].dataType)throw new Error("Tile only support float, float16, int32, and uint32 data types");if(7!==e[1].dataType)throw new Error("Tile `repeats` input should be of int64 data type");if(1!==e[1].dims.length)throw new Error("Tile `repeats` input should be 1-D");if(il(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},ll=(e,A)=>{let t=[];for(let r=0;r<e.length;++r)t.push(e[r]*A[r]);return t},cl=(e,A)=>{let t=e[0].dims,r=A??il(e[1]),n=ll(t,r),a=QA.size(n),s=e[0].dataType,i=Ct("input",s,t.length),o=bt("output",s,n.length);return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:[{type:12,data:a},...gt(e[0].dims,n)]}),getShaderSource:e=>`\n      const inputShape = ${i.indices(...t)};\n      ${e.registerUniform("output_size","u32").declareVariables(i,o)}\n      ${e.mainStart()}\n      ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n      let output_indices = ${o.offsetToIndices("global_idx")};\n      var input_indices: ${i.type.indices};\n      for (var i = 0; i < ${t.length}; i++) {\n        let input_dim_i = ${i.indicesGet("uniforms.input_shape","i")};\n        let input_dim_value = ${o.indicesGet("output_indices","i")}  % input_dim_i;\n\n        ${i.indicesSet("input_indices","i","input_dim_value")}\n      }\n      ${o.setByOffset("global_idx",i.getByIndices("input_indices"))}\n    }`}},gl=e=>{ol(e.inputs),e.compute(cl(e.inputs),{inputs:[0]})}})),Qc=ee((()=>{xl(),yl(),Pl(),ul=(e,A,t,r,n)=>{let a,s=bt("output_data",n,t.length,4),i=Ct("a_data",A[1].dataType,A[1].dims.length,4),o=Ct("b_data",A[2].dataType,A[2].dims.length,4),l=Ct("c_data",A[0].dataType,A[0].dims.length,4),c=(e,A,t)=>`select(${A}, ${e}, ${t})`;if(r){let e=(e,A,t="")=>{let r=`a_data[index_a${A}][component_a${A}]`,n=`b_data[index_b${A}][component_b${A}]`,a=`bool(c_data[index_c${A}] & (0xffu << (component_c${A} * 8)))`;return`\n            let output_indices${A} = ${s.offsetToIndices(`global_idx * 4u + ${A}u`)};\n            let offset_a${A} = ${i.broadcastedIndicesToOffset(`output_indices${A}`,s)};\n            let offset_b${A} = ${o.broadcastedIndicesToOffset(`output_indices${A}`,s)};\n            let offset_c${A} = ${l.broadcastedIndicesToOffset(`output_indices${A}`,s)};\n            let index_a${A} = offset_a${A} / 4u;\n            let index_b${A} = offset_b${A} / 4u;\n            let index_c${A} = offset_c${A} / 4u;\n            let component_a${A} = offset_a${A} % 4u;\n            let component_b${A} = offset_b${A} % 4u;\n            let component_c${A} = offset_c${A} % 4u;\n            ${e}[${A}] = ${t}(${c(r,n,a)});\n          `};a=9===n?`\n            var data = vec4<u32>(0);\n            ${e("data",0,"u32")}\n            ${e("data",1,"u32")}\n            ${e("data",2,"u32")}\n            ${e("data",3,"u32")}\n            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:`\n            ${e("output_data[global_idx]",0)}\n            ${e("output_data[global_idx]",1)}\n            ${e("output_data[global_idx]",2)}\n            ${e("output_data[global_idx]",3)}\n          `}else a=s.setByOffset("global_idx",c(i.getByOffset("global_idx"),o.getByOffset("global_idx"),l.getByOffset("global_idx")));return`\n        ${e.registerUniform("vec_size","u32").declareVariables(l,i,o,s)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${a}\n      }`},dl=e=>{let A=e[1].dims,t=e[2].dims,r=e[0].dims,n=e[1].dataType,a=!(QA.areEqual(A,t)&&QA.areEqual(t,r)),s=A,i=QA.size(A);if(a){let e=DA.calcShape(DA.calcShape(A,t,!1),r,!1);if(!e)throw new Error("Can't perform where op on the given tensors");s=e,i=QA.size(s)}let o=Math.ceil(i/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:A=>ul(A,e,s,a,n),getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:Math.ceil(i/64/4)},programUniforms:[{type:12,data:o},...gt(r,A,t,s)]})}},fl=e=>{e.compute(dl(e.inputs))}})),Tc=ee((()=>{Nl(),Ol(),Ll(),Yl(),Rl(),jl(),Vl(),$l(),Ac(),tc(),rc(),nc(),ac(),sc(),ic(),oc(),lc(),cc(),gc(),uc(),hc(),mc(),Cc(),bc(),Ic(),dc(),wc(),kc(),xc(),vc(),Bc(),Sl(),yc(),pc(),Ec(),Mc(),Gc(),fc(),Dc(),zl(),Hl(),Qc(),pl=new Map([["Abs",[Kr]],["Acos",[Zr]],["Acosh",[Xr]],["Add",[jn]],["ArgMax",[Mr,Gr]],["ArgMin",[Er,Gr]],["Asin",[qr]],["Asinh",[Jr]],["Atan",[_r]],["Atanh",[$r]],["Attention",[Nr]],["AveragePool",[ro,to]],["BatchNormalization",[Hr]],["BiasAdd",[Vr]],["BiasSplitGelu",[Ln]],["Cast",[An,en]],["Ceil",[nn]],["Clip",[rn]],["Concat",[ra,na]],["Conv",[Ra,Oa]],["ConvTranspose",[_a,Za]],["Cos",[an]],["Cosh",[sn]],["CumSum",[es,As]],["DepthToSpace",[as,ss]],["DequantizeLinear",[po,ho]],["Div",[Vn]],["Einsum",[ps,hs]],["Elu",[ln,on]],["Equal",[Wn]],["Erf",[gn]],["Exp",[un]],["Expand",[ws]],["FastGelu",[xs]],["Floor",[dn]],["FusedConv",[Ra,Oa]],["Gather",[Es,ys]],["GatherElements",[Os,Ns]],["GatherBlockQuantized",[Ps,zs]],["GatherND",[Gs,Ds]],["Gelu",[fn]],["Gemm",[Rs,Hs]],["GlobalAveragePool",[so,ao]],["GlobalMaxPool",[go,co]],["Greater",[Xn]],["GreaterOrEqual",[Jn]],["GridSample",[ei,Ai]],["GroupQueryAttention",[xi]],["HardSigmoid",[kn,wn]],["InstanceNormalization",[Ei]],["LayerNormalization",[Di]],["LeakyRelu",[pn,on]],["Less",[qn]],["LessOrEqual",[_n]],["Log",[Pn]],["MatMul",[Ti]],["MatMulNBits",[Si,Ni]],["MaxPool",[oo,lo]],["Mul",[Un]],["MultiHeadAttention",[oi,ni]],["Neg",[mn]],["Not",[hn]],["Pad",[Ui]],["Pow",[Kn]],["QuickGelu",[Sn,on]],["Range",[bo]],["Reciprocal",[Cn]],["ReduceMin",[wr]],["ReduceMean",[hr]],["ReduceMax",[Ir]],["ReduceSum",[xr]],["ReduceProd",[kr]],["ReduceL1",[mr]],["ReduceL2",[Cr]],["ReduceLogSum",[Br]],["ReduceLogSumExp",[br]],["ReduceSumSquare",[vr]],["Relu",[bn]],["Resize",[Vo,Wo]],["RotaryEmbedding",[Ci]],["ScatterND",[Bo,vo]],["Sigmoid",[In]],["Sin",[xn]],["Sinh",[vn]],["Slice",[Al,tl]],["SkipLayerNormalization",[Zo]],["Split",[fi,pi]],["Sqrt",[Bn]],["Softmax",[al,sl]],["Sub",[Zn]],["Tan",[yn]],["Tanh",[Mn]],["ThresholdedRelu",[Tn,on]],["Tile",[gl]],["Transpose",[Qt,Tt]],["Where",[fl]]])})),Pc=ee((()=>{ke(),Bl(),Pl(),hl=class{constructor(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}getArtifact(e){return this.repo.get(e)}setArtifact(e,A){this.repo.set(e,A)}run(e,A,t,r,n){V(e.programInfo.name);let a=this.backend.device,s=this.backend.getComputePassEncoder();this.backend.writeTimestamp(2*this.backend.pendingDispatchNumber);let i=[];for(let e of A)i.push({binding:i.length,resource:{buffer:e.buffer}});for(let e of t)i.push({binding:i.length,resource:{buffer:e.buffer}});n&&i.push({binding:i.length,resource:n});let o=a.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:i,label:e.programInfo.name});if("capturing"===this.backend.sessionStatus){let A={kernelId:this.backend.currentKernelId,computePipeline:e.computePipeline,bindGroup:o,dispatchGroup:r};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(A)}s.setPipeline(e.computePipeline),s.setBindGroup(0,o),s.dispatchWorkgroups(...r),this.backend.writeTimestamp(2*this.backend.pendingDispatchNumber+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||"at-passes"===this.backend.queryType)&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),W(e.programInfo.name)}dispose(){}build(e,A){V(e.name);let t=this.backend.device,r=[];[{feature:"shader-f16",extension:"f16"},{feature:"subgroups",extension:"subgroups"}].forEach((e=>{t.features.has(e.feature)&&r.push(`enable ${e.extension};`)}));let n=xt(A,this.backend.device.limits),a=e.getShaderSource(n),s=`${r.join("\n")}\n${n.additionalImplementations}\n${a}`,i=t.createShaderModule({code:s,label:e.name});MA("verbose",(()=>`[WebGPU] ${e.name} shader code: ${s}`));let o=t.createComputePipeline({compute:{module:i,entryPoint:"main"},layout:"auto",label:e.name});return W(e.name),{programInfo:e,computePipeline:o,uniformVariablesInfo:n.variablesInfo}}normalizeDispatchGroupSize(e){let A="number"==typeof e?e:e.x,t="number"==typeof e?1:e.y||1,r="number"==typeof e?1:e.z||1,n=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(A<=n&&t<=n&&r<=n)return[A,t,r];let a=A*t*r,s=Math.ceil(Math.sqrt(a));if(s>n){if(s=Math.ceil(Math.cbrt(a)),s>n)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[s,s,s]}return[s,s,1]}}})),zc={};Ae(zc,{WebGpuBackend:()=>Oc});var Fc,Sc,Nc,Oc,Lc=ee((()=>{ke(),xl(),Bl(),El(),Ql(),Tc(),Pc(),Fc=(e,A)=>{if(A.length!==e.length)throw new Error(`inputDependencies length ${A.length} is not equal to inputTensors length ${e.length}.`);let t=[];for(let r=0;r<e.length;++r){let n=e[r].dataType;switch(A[r]){case"none":t.push("");break;case"type":t.push(`${n}`);break;case"rank":{let A=e[r].dims.length;t.push(`${n};${A}`);break}case"dims":{let A=e[r].dims.join(",");t.push(`${n};${A}`);break}default:throw new Error(`unsupported input dependency: ${A[r]}`)}}return t.join("|")},Sc=(e,A,t)=>{let r=e.name;return e.shaderCache?.hint&&(r+="["+e.shaderCache.hint+"]"),r+=":"+t+`:${Fc(A,e.shaderCache?.inputDependencies??new Array(A.length).fill("dims"))}`,r},Nc=class{constructor(e){e&&(this.architecture=e.architecture,this.vendor=e.vendor)}isArchitecture(e){return this.architecture===e}isVendor(e){return this.vendor===e}},Oc=class{constructor(){this.currentSessionId=null,this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionStatus="default",this.capturedCommandList=new Map,this.capturedPendingKernels=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(null===this.currentKernelId)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e}async initialize(e,A){this.env=e;let t=[],r={requiredLimits:{maxComputeWorkgroupStorageSize:A.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:A.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:A.limits.maxStorageBufferBindingSize,maxBufferSize:A.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:A.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:A.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:A.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:A.limits.maxComputeWorkgroupSizeZ},requiredFeatures:t},n=e=>A.features.has(e)&&t.push(e)&&!0;n("chromium-experimental-timestamp-query-inside-passes")||n("timestamp-query"),n("shader-f16"),n("subgroups"),this.device=await A.requestDevice(r),this.adapterInfo=new Nc(A.info||await A.requestAdapterInfo()),this.gpuDataManager=nt(this),this.programManager=new hl(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,yA(e.logLevel,!!e.debug),this.device.onuncapturederror=e=>{e.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${e.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:A,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let e=this.getCommandEncoder(),A={};"at-passes"===this.queryType&&(A.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:2*this.pendingDispatchNumber,endOfPassWriteIndex:2*this.pendingDispatchNumber+1}),this.computePassEncoder=e.beginComputePass(A)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;let e;V(),this.endComputePass(),"none"!==this.queryType&&(this.commandEncoder.resolveQuerySet(this.querySet,0,2*this.pendingDispatchNumber,this.queryResolveBuffer,0),e=this.device.createBuffer({size:2*this.pendingDispatchNumber*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(e,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,2*this.pendingDispatchNumber*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,"none"!==this.queryType&&e.mapAsync(GPUMapMode.READ).then((()=>{let A=new BigUint64Array(e.getMappedRange()),t=this.pendingQueries.get(e);for(let e=0;e<A.length/2;e++){let r=t[e],n=r.kernelId,a=this.kernels.get(n),s=a.kernelType,i=a.kernelName,o=r.programName,l=r.inputTensorViews,c=r.outputTensorViews,g=A[2*e],u=A[2*e+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=g);let d=Number(g-this.queryTimeBase),f=Number(u-this.queryTimeBase);if(!Number.isSafeInteger(d)||!Number.isSafeInteger(f))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:l.map((e=>({dims:e.dims,dataType:fA(e.dataType)}))),outputsMetadata:c.map((e=>({dims:e.dims,dataType:fA(e.dataType)}))),kernelId:n,kernelType:s,kernelName:i,programName:o,startTime:d,endTime:f});else{let e="";l.forEach(((A,t)=>{e+=`input[${t}]: [${A.dims}] | ${fA(A.dataType)}, `}));let A="";c.forEach(((e,t)=>{A+=`output[${t}]: [${e.dims}] | ${fA(e.dataType)}, `})),console.log(`[profiling] kernel "${n}|${s}|${i}|${o}" ${e}${A}execution time: ${f-d} ns`)}R("GPU",`${o}::${g}::${u}`)}e.unmap(),this.pendingQueries.delete(e)})),W()}run(e,A,t,r,n,a){V(e.name);let s=[];for(let e=0;e<A.length;++e){let t=A[e].data;if(0===t)continue;let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for input: ${t}`);s.push(r)}let{outputs:i,dispatchGroup:o,programUniforms:l}=e.getRunData(A),c=0===t.length?i.map(((e,A)=>A)):t;if(c.length!==i.length)throw new Error(`Output size ${c.length} must be equal to ${i.length}.`);let g,u=[],d=[];for(let e=0;e<i.length;++e){if(!Number.isInteger(c[e])||c[e]<-3||c[e]>=a)throw new Error(`Invalid output index: ${c[e]}`);if(-3===c[e])continue;let A=-1===c[e],t=-2===c[e],s=A||t?n(i[e].dataType,i[e].dims):r(c[e],i[e].dataType,i[e].dims);if(u.push(s),0===s.data)continue;let o=this.gpuDataManager.get(s.data);if(!o)throw new Error(`no GPU data for output: ${s.data}`);if(A&&this.temporaryData.push(o),t){let e=this.kernelPersistentData.get(this.currentKernelId);e||(e=[],this.kernelPersistentData.set(this.currentKernelId,e)),e.push(o)}d.push(o)}if(s.length!==A.length||d.length!==u.length){if(0===d.length)return W(e.name),u;throw new Error(`Program ${e.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}if(l){let e=0,A=[];l.forEach((t=>{let r="number"==typeof t.data?[t.data]:t.data;if(0===r.length)return;let n,a,s=10===t.type?2:4;10===t.type?(a=r.length>4?16:r.length>2?8:r.length*s,n=r.length>4?16:s*r.length):(a=r.length<=2?r.length*s:16,n=16),e=Math.ceil(e/a)*a,A.push(e);let i=10===t.type?8:4;e+=r.length>4?Math.ceil(r.length/i)*n:r.length*s}));let t=16;e=Math.ceil(e/t)*t;let r=new ArrayBuffer(e);l.forEach(((e,t)=>{let n=A[t],a="number"==typeof e.data?[e.data]:e.data;if(6===e.type)new Int32Array(r,n,a.length).set(a);else if(12===e.type)new Uint32Array(r,n,a.length).set(a);else if(10===e.type)new Uint16Array(r,n,a.length).set(a);else{if(1!==e.type)throw new Error(`Unsupported uniform type: ${fA(e.type)}`);new Float32Array(r,n,a.length).set(a)}}));let n=this.gpuDataManager.create(e,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(n.buffer,0,r,0,e),this.gpuDataManager.release(n.id),g={offset:0,size:e,buffer:n.buffer}}let f=this.programManager.normalizeDispatchGroupSize(o),p=1===f[1]&&1===f[2],h=Sc(e,A,p),m=this.programManager.getArtifact(h);if(m||(m=this.programManager.build(e,f),this.programManager.setArtifact(h,m),MA("info",(()=>`[artifact] key: ${h}, programName: ${e.name}`))),l&&m.uniformVariablesInfo){if(l.length!==m.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${m.uniformVariablesInfo.length}, got ${l.length} in program "${m.programInfo.name}".`);for(let e=0;e<l.length;e++){let A=l[e],t=A.type,r="number"==typeof A.data?1:A.data.length,[n,a]=m.uniformVariablesInfo[e];if(t!==n||r!==a)throw new Error(`Uniform variable ${e} mismatch: expect type ${n} with size ${a}, got type ${t} with size ${r} in program "${m.programInfo.name}".`)}}if(MA("info",(()=>`[ProgramManager] run "${e.name}" (key=${h}) with ${f[0]}x${f[1]}x${f[2]}`)),"none"!==this.queryType||"capturing"===this.sessionStatus){let e={kernelId:this.currentKernelId,programName:m.programInfo.name,inputTensorViews:A,outputTensorViews:u};this.pendingKernels.push(e),"capturing"===this.sessionStatus&&this.capturedPendingKernels.get(this.currentSessionId).push(e)}return this.programManager.run(m,s,d,f,g),W(e.name),u}upload(e,A){this.gpuDataManager.upload(e,A)}memcpy(e,A){this.gpuDataManager.memcpy(e,A)}async download(e,A){await this.gpuDataManager.download(e,A)}alloc(e){return this.gpuDataManager.create(e).id}free(e){return this.gpuDataManager.release(e)}createKernel(e,A,t,r){let n=pl.get(e);if(!n)throw new Error(`kernel not implemented: ${e}`);let a={kernelType:e,kernelName:r,kernelEntry:n[0],attributes:[n[1],t]};this.kernels.set(A,a)}releaseKernel(e){let A=this.kernelPersistentData.get(e);if(A){for(let e of A)this.gpuDataManager.release(e.id);this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)}computeKernel(e,A,t){let r=this.kernels.get(e);if(!r)throw new Error(`kernel not created: ${e}`);let n=r.kernelType,a=r.kernelName,s=r.kernelEntry,i=r.attributes;if(null!==this.currentKernelId)throw new Error(`kernel "[${n}] ${a}" is not allowed to be called recursively`);this.currentKernelId=e,i[0]&&(i[1]=i[0](i[1]),i[0]=void 0),MA("info",(()=>`[WebGPU] Start to run kernel "[${n}] ${a}"...`));let o=this.env.debug;this.temporaryData=[];try{return o&&this.device.pushErrorScope("validation"),s(A,i[1]),0}catch(e){return t.push(Promise.resolve(`[WebGPU] Kernel "[${n}] ${a}" failed. ${e}`)),1}finally{o&&t.push(this.device.popErrorScope().then((e=>e?`GPU validation error for kernel "[${n}] ${a}": ${e.message}`:null)));for(let e of this.temporaryData)this.gpuDataManager.release(e.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(e,A,t,r){let n=this.sessionExternalDataMapping.get(e);n||(n=new Map,this.sessionExternalDataMapping.set(e,n));let a=n.get(A),s=this.gpuDataManager.registerExternalBuffer(t,r,a);return n.set(A,[s,t]),s}unregisterBuffers(e){let A=this.sessionExternalDataMapping.get(e);A&&(A.forEach((e=>this.gpuDataManager.unregisterExternalBuffer(e[0]))),this.sessionExternalDataMapping.delete(e))}getBuffer(e){let A=this.gpuDataManager.get(e);if(!A)throw new Error(`no GPU data for buffer: ${e}`);return A.buffer}createDownloader(e,A,t){return async()=>{let r=await tt(this,e,A);return SA(r.buffer,t)}}writeTimestamp(e){"inside-passes"===this.queryType&&this.computePassEncoder.writeTimestamp(this.querySet,e)}setQueryType(){this.queryType="none",("default"===this.env.webgpu.profiling?.mode||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),"none"!==this.queryType&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:2*this.maxDispatchNumber}),this.queryResolveBuffer=this.device.createBuffer({size:2*this.maxDispatchNumber*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){MA("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){MA("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){MA("info","replay"),this.sessionStatus="replaying";let e=this.capturedCommandList.get(this.currentSessionId),A=this.capturedPendingKernels.get(this.currentSessionId),t=e.length;this.pendingKernels=[];for(let r=0;r<t;r++){let t=this.getComputePassEncoder(),n=e[r];this.writeTimestamp(2*this.pendingDispatchNumber),t.setPipeline(n.computePipeline),t.setBindGroup(0,n.bindGroup),t.dispatchWorkgroups(...n.dispatchGroup),this.writeTimestamp(2*this.pendingDispatchNumber+1),this.pendingDispatchNumber++,"none"!==this.queryType&&this.pendingKernels.push(A[r]),(this.pendingDispatchNumber>=this.maxDispatchNumber||"at-passes"===this.queryType)&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onCreateSession(){this.gpuDataManager.onCreateSession()}onReleaseSession(e){this.unregisterBuffers(e),this.capturedCommandList.has(e)&&this.capturedCommandList.delete(e),this.capturedPendingKernels.has(e)&&this.capturedPendingKernels.delete(e),this.gpuDataManager.onReleaseSession(e)}onRunStart(e){this.currentSessionId=e,this.setQueryType()}}})),Yc={};Ae(Yc,{init:()=>jc});var Hc,Rc,jc,Vc,Wc,Uc,Kc,Zc,Xc,qc,Jc,_c,$c,eg,Ag,tg,rg,ng,ag,sg,ig,og,lg,cg,gg,ug,dg,fg,pg,hg,mg,Cg,bg,Ig,wg,kg,xg,vg=ee((()=>{xl(),Bl(),yl(),Gl(),Hc=class e{constructor(e,A,t,r){this.module=e,this.dataType=A,this.data=t,this.dims=r}getFloat32Array(){if(1!==this.dataType)throw new Error("Invalid data type");let e=QA.size(this.dims);return 0===e?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,e)}getBigInt64Array(){if(7!==this.dataType)throw new Error("Invalid data type");let e=QA.size(this.dims);return 0===e?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,e)}getInt32Array(){if(6!==this.dataType)throw new Error("Invalid data type");let e=QA.size(this.dims);return 0===e?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,e)}getUint16Array(){if(10!==this.dataType&&4!==this.dataType)throw new Error("Invalid data type");let e=QA.size(this.dims);return 0===e?new Uint16Array:new Uint16Array(this.module.HEAP8.buffer,this.data,e)}reshape(A){if(QA.size(A)!==QA.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,A)}},Rc=class{constructor(e,A,t){this.module=e,this.backend=A,this.customDataOffset=0,this.customDataSize=0,this.adapterInfo=A.adapterInfo;let r=e.PTR_SIZE,n=t/e.PTR_SIZE,a=4===r?"i32":"i64";this.opKernelContext=Number(e.getValue(r*n++,a));let s=Number(e.getValue(r*n++,a));this.outputCount=Number(e.getValue(r*n++,a)),this.customDataOffset=Number(e.getValue(r*n++,"*")),this.customDataSize=Number(e.getValue(r*n++,a));let i=[];for(let A=0;A<s;A++){let A=Number(e.getValue(r*n++,a)),t=Number(e.getValue(r*n++,"*")),s=Number(e.getValue(r*n++,a)),o=[];for(let A=0;A<s;A++)o.push(Number(e.getValue(r*n++,a)));i.push(new Hc(e,A,t,o))}this.inputs=i}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(e,A){let t=A?.inputs?.map((e=>"number"==typeof e?this.inputs[e]:e))??this.inputs,r=A?.outputs??[];return this.backend.run(e,t,r,((e,A,t)=>new Hc(this.module,A,this.output(e,t),t)),((e,A)=>{let t=pA(e,A);if(!t)throw new Error(`Unsupported data type: ${e}`);let r=t>0?this.backend.gpuDataManager.create(t).id:0;return new Hc(this.module,e,r,A)}),this.outputCount)}output(e,A){let t=this.module.stackSave();try{let t=this.module.PTR_SIZE,r=4===t?"i32":"i64",n=this.module.stackAlloc((1+A.length)*t);this.module.setValue(n,A.length,r);for(let e=0;e<A.length;e++)this.module.setValue(n+t*(e+1),A[e],r);return this.module._JsepOutput(this.opKernelContext,e,n)}catch(t){throw new Error(`Failed to generate kernel's output[${e}] with dims [${A}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${t}`)}finally{this.module.stackRestore(t)}}},jc=async(e,A,t,r)=>{let n=A.jsepInit;if(!n)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if("webgpu"===e){let e=new(0,(Lc(),te(zc)).WebGpuBackend);await e.initialize(t,r),n("webgpu",[e,A=>e.alloc(Number(A)),A=>e.free(A),(t,r,n,a=!1)=>{if(a)MA("verbose",(()=>`[WebGPU] jsepCopyGpuToGpu: src=${Number(t)}, dst=${Number(r)}, size=${Number(n)}`)),e.memcpy(Number(t),Number(r));else{MA("verbose",(()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${Number(t)}, gpuDataId=${Number(r)}, size=${Number(n)}`));let a=A.HEAPU8.subarray(Number(t>>>0),Number(t>>>0)+Number(n));e.upload(Number(r),a)}},async(t,r,n)=>{MA("verbose",(()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${t}, dataOffset=${r}, size=${n}`)),await e.download(Number(t),(()=>A.HEAPU8.subarray(Number(r)>>>0,Number(r+n)>>>0)))},(t,r,n)=>e.createKernel(t,Number(r),n,A.UTF8ToString(A._JsepGetNodeName(Number(r)))),A=>e.releaseKernel(A),(t,r,n,a)=>{MA("verbose",(()=>`[WebGPU] jsepRun: sessionHandle=${n}, kernel=${t}, contextDataOffset=${r}`));let s=new Rc(A,e,Number(r));return e.computeKernel(Number(t),s,a)},()=>e.captureBegin(),()=>e.captureEnd(),()=>e.replay()])}else{let e=new XA(t);n("webnn",[e,()=>e.reserveTensorId(),A=>e.releaseTensorId(A),async(A,t,r,n,a)=>e.ensureTensor(A,t,r,n,a),(A,t)=>{e.uploadTensor(A,t)},async(A,t)=>e.downloadTensor(A,t)])}}})),Bg=ee((()=>{wl(),kl(),xl(),bl(),Il(),vl(),Vc=(e,A)=>{0!==tA()._OrtInit(e,A)&&aA("Can't initialize onnxruntime.")},Wc=async e=>{Vc(e.wasm.numThreads,mA(e.logLevel))},Uc=async(e,A)=>{tA().asyncInit?.();{let t=(vg(),te(Yc)).init;if("webgpu"===A){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let A=e.webgpu.adapter;if(A){if("object"!=typeof A.limits||"object"!=typeof A.features||"function"!=typeof A.requestDevice)throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let t=e.webgpu.powerPreference;if(void 0!==t&&"low-power"!==t&&"high-performance"!==t)throw new Error(`Invalid powerPreference setting: "${t}"`);let r=e.webgpu.forceFallbackAdapter;if(void 0!==r&&"boolean"!=typeof r)throw new Error(`Invalid forceFallbackAdapter setting: "${r}"`);if(A=await navigator.gpu.requestAdapter({powerPreference:t,forceFallbackAdapter:r}),!A)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}await t("webgpu",tA(),e,A)}if("webnn"===A){if(typeof navigator>"u"||!navigator.ml)throw new Error("WebNN is not supported in current environment");await t("webnn",tA(),e)}}},Kc=new Map,Zc=e=>{let A=tA(),t=A.stackSave();try{let t=A.PTR_SIZE,r=A.stackAlloc(2*t);0!==A._OrtGetInputOutputCount(e,r,r+t)&&aA("Can't get session input/output count.");let n=4===t?"i32":"i64";return[Number(A.getValue(r,n)),Number(A.getValue(r+t,n))]}finally{A.stackRestore(t)}},Xc=(e,A)=>{let t=tA(),r=t.stackSave(),n=0;try{let r=t.PTR_SIZE,a=t.stackAlloc(2*r);0!==t._OrtGetInputOutputMetadata(e,A,a,a+r)&&aA("Can't get session input/output metadata.");let s=Number(t.getValue(a,"*"));n=Number(t.getValue(a+r,"*"));let i=t.HEAP32[n/4];if(0===i)return[s,0];let o=t.HEAPU32[n/4+1],l=[];for(let e=0;e<o;e++){let A=Number(t.getValue(n+8+e*r,"*"));l.push(0!==A?t.UTF8ToString(A):Number(t.getValue(n+8+(e+o)*r,"*")))}return[s,i,l]}finally{t.stackRestore(r),0!==n&&t._OrtFree(n)}},qc=e=>{let A=tA(),t=A._malloc(e.byteLength);if(0===t)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return A.HEAPU8.set(e,t),[t,e.byteLength]},Jc=async(e,A)=>{let t,r,n=tA();Array.isArray(e)?[t,r]=e:e.buffer===n.HEAPU8.buffer?[t,r]=[e.byteOffset,e.byteLength]:[t,r]=qc(e);let a=0,s=0,i=0,o=[],l=[],c=[];try{if([s,o]=await uA(A),A?.externalData&&n.mountExternalData){let e=[];for(let t of A.externalData){let A="string"==typeof t?t:t.path;e.push(wA("string"==typeof t?t:t.data).then((e=>{n.mountExternalData(A,e)})))}await Promise.all(e)}for(let e of A?.executionProviders??[])if("webnn"===("string"==typeof e?e:e.name)){if(n.shouldTransferToMLTensor=!1,"string"!=typeof e){let A=e,t=A?.context,r=A?.gpuDevice,a=A?.deviceType,s=A?.powerPreference;n.currentContext=t||(r?await n.webnnCreateMLContext(r):await n.webnnCreateMLContext({deviceType:a,powerPreference:s}))}else n.currentContext=await n.webnnCreateMLContext();break}a=await n._OrtCreateSession(t,r,s),n.webgpuOnCreateSession?.(a),0===a&&aA("Can't create a session."),n.jsepOnCreateSession?.(),n.currentContext&&(n.webnnRegisterMLContext(a,n.currentContext),n.currentContext=void 0,n.shouldTransferToMLTensor=!0);let[e,g]=Zc(a),u=!!A?.enableGraphCapture,d=[],f=[],p=[],h=[],m=[];for(let A=0;A<e;A++){let[e,t,r]=Xc(a,A);0===e&&aA("Can't get an input name."),l.push(e);let s=n.UTF8ToString(e);d.push(s),p.push(0===t?{name:s,isTensor:!1}:{name:s,isTensor:!0,type:fA(t),shape:r})}for(let t=0;t<g;t++){let[r,s,i]=Xc(a,t+e);0===r&&aA("Can't get an output name."),c.push(r);let o=n.UTF8ToString(r);f.push(o),h.push(0===s?{name:o,isTensor:!1}:{name:o,isTensor:!0,type:fA(s),shape:i});{if(u&&void 0===A?.preferredOutputLocation){m.push("gpu-buffer");continue}let e="string"==typeof A?.preferredOutputLocation?A.preferredOutputLocation:A?.preferredOutputLocation?.[o]??"cpu";if("cpu"!==e&&"cpu-pinned"!==e&&"gpu-buffer"!==e&&"ml-tensor"!==e)throw new Error(`Not supported preferred output location: ${e}.`);if(u&&"gpu-buffer"!==e)throw new Error(`Not supported preferred output location: ${e}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);m.push(e)}}let C=null;return m.some((e=>"gpu-buffer"===e||"ml-tensor"===e))&&(i=n._OrtCreateBinding(a),0===i&&aA("Can't create IO binding."),C={handle:i,outputPreferredLocations:m,outputPreferredLocationsEncoded:m.map((e=>IA(e)))}),Kc.set(a,[a,l,c,C,u,!1]),[a,d,f,p,h]}catch(e){throw l.forEach((e=>n._OrtFree(e))),c.forEach((e=>n._OrtFree(e))),0!==i&&0!==n._OrtReleaseBinding(i)&&aA("Can't release IO binding."),0!==a&&0!==n._OrtReleaseSession(a)&&aA("Can't release session."),e}finally{n._free(t),0!==s&&0!==n._OrtReleaseSessionOptions(s)&&aA("Can't release session options."),o.forEach((e=>n._free(e))),n.unmountExternalData?.()}},_c=e=>{let A=tA(),t=Kc.get(e);if(!t)throw new Error(`cannot release session. invalid session id: ${e}`);let[r,n,a,s,i]=t;s&&(i&&0!==A._OrtClearBoundOutputs(s.handle)&&aA("Can't clear bound outputs."),0!==A._OrtReleaseBinding(s.handle)&&aA("Can't release IO binding.")),A.jsepOnReleaseSession?.(e),A.webnnOnReleaseSession?.(e),A.webgpuOnReleaseSession?.(e),n.forEach((e=>A._OrtFree(e))),a.forEach((e=>A._OrtFree(e))),0!==A._OrtReleaseSession(r)&&aA("Can't release session."),Kc.delete(e)},$c=async(e,A,t,r,n,a,s=!1)=>{if(!e)return void A.push(0);let i,o,l=tA(),c=l.PTR_SIZE,g=e[0],u=e[1],d=e[3],f=d;if("string"===g&&("gpu-buffer"===d||"ml-tensor"===d))throw new Error("String tensor is not supported on GPU.");if(s&&"gpu-buffer"!==d)throw new Error(`External buffer must be provided for input/output index ${a} when enableGraphCapture is true.`);if("gpu-buffer"===d){let A=e[2].gpuBuffer;o=pA(dA(g),u);{let e=l.jsepRegisterBuffer;if(!e)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');i=e(r,a,A,o)}}else if("ml-tensor"===d){let A=e[2].mlTensor;o=pA(dA(g),u);let t=l.webnnRegisterMLTensor;if(!t)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');i=t(r,A,dA(g),u)}else{let A=e[2];if(Array.isArray(A)){o=c*A.length,i=l._malloc(o),t.push(i);for(let e=0;e<A.length;e++){if("string"!=typeof A[e])throw new TypeError(`tensor data at index ${e} is not a string`);l.setValue(i+e*c,rA(A[e],t),"*")}}else{let e=l.webnnIsGraphInput;if("string"!==g&&e){if(e(r,l.UTF8ToString(n))){let e=dA(g);o=pA(e,u),f="ml-tensor";let t=l.webnnCreateTemporaryTensor,n=l.webnnUploadTensor;if(!t||!n)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');let a=await t(r,e,u);n(a,new Uint8Array(A.buffer,A.byteOffset,A.byteLength)),i=a}else o=A.byteLength,i=l._malloc(o),t.push(i),l.HEAPU8.set(new Uint8Array(A.buffer,A.byteOffset,o),i)}else o=A.byteLength,i=l._malloc(o),t.push(i),l.HEAPU8.set(new Uint8Array(A.buffer,A.byteOffset,o),i)}}let p=l.stackSave(),h=l.stackAlloc(4*u.length);try{u.forEach(((e,A)=>l.setValue(h+A*c,e,4===c?"i32":"i64")));let e=l._OrtCreateTensor(dA(g),i,o,h,u.length,IA(f));0===e&&aA(`Can't create tensor for input/output. session=${r}, index=${a}.`),A.push(e)}finally{l.stackRestore(p)}},eg=async(e,A,t,r,n,a)=>{let s=tA(),i=s.PTR_SIZE,o=Kc.get(e);if(!o)throw new Error(`cannot run inference. invalid session id: ${e}`);let l=o[0],c=o[1],g=o[2],u=o[3],d=o[4],f=o[5],p=A.length,h=r.length,m=0,C=[],b=[],I=[],w=[],k=s.stackSave(),x=s.stackAlloc(p*i),v=s.stackAlloc(p*i),B=s.stackAlloc(h*i),y=s.stackAlloc(h*i);try{[m,C]=sA(a);for(let r=0;r<p;r++)await $c(t[r],b,w,e,c[A[r]],A[r],d);for(let A=0;A<h;A++)await $c(n[A],I,w,e,g[r[A]],p+r[A],d);for(let e=0;e<p;e++)s.setValue(x+e*i,b[e],"*"),s.setValue(v+e*i,c[A[e]],"*");for(let e=0;e<h;e++)s.setValue(B+e*i,I[e],"*"),s.setValue(y+e*i,g[r[e]],"*");if(u&&!f){let{handle:t,outputPreferredLocations:a,outputPreferredLocationsEncoded:i}=u;if(c.length!==p)throw new Error(`input count from feeds (${p}) is expected to be always equal to model's input count (${c.length}).`);for(let r=0;r<p;r++){let n=A[r];0!==await s._OrtBindInput(t,c[n],b[r])&&aA(`Can't bind input[${r}] for session=${e}.`)}for(let A=0;A<h;A++){let o=r[A];n[A]?.[3]?0!==s._OrtBindOutput(t,g[o],I[A],0)&&aA(`Can't bind pre-allocated output[${A}] for session=${e}.`):0!==s._OrtBindOutput(t,g[o],0,i[o])&&aA(`Can't bind output[${A}] to ${a[A]} for session=${e}.`)}Kc.set(e,[l,c,g,u,d,!0])}let o;s.jsepOnRunStart?.(l),s.webnnOnRunStart?.(l),o=u?await s._OrtRunWithBinding(l,u.handle,h,B,m):await s._OrtRun(l,v,x,p,y,h,B,m),0!==o&&aA("failed to call OrtRun().");let k=[];for(let A=0;A<h;A++){let t=Number(s.getValue(B+A*i,"*"));if(t===I[A]){k.push(n[A]);continue}let a,o=s.stackSave(),c=s.stackAlloc(4*i),g=!1,d=0;try{0!==s._OrtGetTensorData(t,c,c+i,c+2*i,c+3*i)&&aA(`Can't access output tensor data on index ${A}.`);let n=4===i?"i32":"i64",o=Number(s.getValue(c,n));d=s.getValue(c+i,"*");let l=s.getValue(c+2*i,"*"),f=Number(s.getValue(c+3*i,n)),p=[];for(let e=0;e<f;e++)p.push(Number(s.getValue(l+e*i,n)));0!==s._OrtFree(l)&&aA("Can't free memory for tensor dims.");let h=p.reduce(((e,A)=>e*A),1);a=fA(o);let m=u?.outputPreferredLocations[r[A]];if("string"===a){if("gpu-buffer"===m||"ml-tensor"===m)throw new Error("String tensor is not supported on GPU.");let e=[];for(let A=0;A<h;A++){let t=s.getValue(d+A*i,"*"),r=s.getValue(d+(A+1)*i,"*"),n=A===h-1?void 0:r-t;e.push(s.UTF8ToString(t,n))}k.push([a,p,e,"cpu"])}else if("gpu-buffer"===m&&h>0){let e=s.jsepGetBuffer;if(!e)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let A=e(d),r=pA(o,h);if(void 0===r||!CA(a))throw new Error(`Unsupported data type: ${a}`);g=!0,k.push([a,p,{gpuBuffer:A,download:s.jsepCreateDownloader(A,r,a),dispose:()=>{0!==s._OrtReleaseTensor(t)&&aA("Can't release tensor.")}},"gpu-buffer"])}else if("ml-tensor"===m&&h>0){let A=s.webnnEnsureTensor,r=s.webnnIsInt64Supported;if(!A||!r)throw new Error('preferredLocation "ml-tensor" is not supported without using WebNN.');if(void 0===pA(o,h)||!bA(a))throw new Error(`Unsupported data type: ${a}`);if("int64"===a&&!r(e))throw new Error('preferredLocation "ml-tensor" for int64 output is not supported by current WebNN Context.');let n=await A(e,d,o,p,!1);g=!0,k.push([a,p,{mlTensor:n,download:s.webnnCreateMLTensorDownloader(d,a),dispose:()=>{s.webnnReleaseTensorId(d),s._OrtReleaseTensor(t)}},"ml-tensor"])}else{let e=new(hA(a))(h);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(s.HEAPU8.subarray(d,d+e.byteLength)),k.push([a,p,e,"cpu"])}}finally{s.stackRestore(o),"string"===a&&d&&s._free(d),g||s._OrtReleaseTensor(t),s.webnnOnRunEnd?.(l)}}return u&&!d&&(0!==s._OrtClearBoundOutputs(u.handle)&&aA("Can't clear bound outputs."),Kc.set(e,[l,c,g,u,d,!1])),k}finally{s.stackRestore(k),b.forEach((e=>s._OrtReleaseTensor(e))),I.forEach((e=>s._OrtReleaseTensor(e))),w.forEach((e=>s._free(e))),0!==m&&s._OrtReleaseRunOptions(m),C.forEach((e=>s._free(e)))}},Ag=e=>{let A=tA(),t=Kc.get(e);if(!t)throw new Error("invalid session id");let r=t[0],n=A._OrtEndProfiling(r);0===n&&aA("Can't get an profile file name."),A._OrtFree(n)},tg=e=>{let A=[];for(let t of e){let e=t[2];!Array.isArray(e)&&"buffer"in e&&A.push(e.buffer)}return A}})),yg=ee((()=>{ke(),Bg(),bl(),Cl(),rg=()=>!!B.wasm.proxy&&typeof document<"u",ag=!1,sg=!1,ig=!1,cg=new Map,gg=(e,A)=>{let t=cg.get(e);t?t.push(A):cg.set(e,[A])},ug=()=>{if(ag||!sg||ig||!ng)throw new Error("worker not ready")},dg=e=>{switch(e.data.type){case"init-wasm":ag=!1,e.data.err?(ig=!0,lg[1](e.data.err)):(sg=!0,lg[0]()),og&&(URL.revokeObjectURL(og),og=void 0);break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let A=cg.get(e.data.type);e.data.err?A.shift()[1](e.data.err):A.shift()[0](e.data.out);break}}},fg=async()=>{if(!sg){if(ag)throw new Error("multiple calls to 'initWasm()' detected.");if(ig)throw new Error("previous call to 'initWasm()' failed.");if(ag=!0,rg())return new Promise(((e,A)=>{ng?.terminate(),We().then((([t,r])=>{try{(ng=r).onerror=e=>A(e),ng.onmessage=dg,lg=[e,A];let n={type:"init-wasm",in:B};!n.in.wasm.wasmPaths&&(t||Fe)&&(n.in.wasm.wasmPaths={wasm:new URL("ort-wasm-simd-threaded.jsep.wasm",import.meta.url).href}),ng.postMessage(n),og=t}catch(e){A(e)}}),A)}));try{await AA(B.wasm),await Wc(B),sg=!0}catch(e){throw ig=!0,e}finally{ag=!1}}},pg=async e=>{if(rg())return ug(),new Promise(((A,t)=>{gg("init-ep",[A,t]);let r={type:"init-ep",in:{epName:e,env:B}};ng.postMessage(r)}));await Uc(B,e)},hg=async e=>rg()?(ug(),new Promise(((A,t)=>{gg("copy-from",[A,t]);let r={type:"copy-from",in:{buffer:e}};ng.postMessage(r,[e.buffer])}))):qc(e),mg=async(e,A)=>{if(rg()){if(A?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return ug(),new Promise(((t,r)=>{gg("create",[t,r]);let n={type:"create",in:{model:e,options:{...A}}},a=[];e instanceof Uint8Array&&a.push(e.buffer),ng.postMessage(n,a)}))}return Jc(e,A)},Cg=async e=>{if(rg())return ug(),new Promise(((A,t)=>{gg("release",[A,t]);let r={type:"release",in:e};ng.postMessage(r)}));_c(e)},bg=async(e,A,t,r,n,a)=>{if(rg()){if(t.some((e=>"cpu"!==e[3])))throw new Error("input tensor on GPU is not supported for proxy.");if(n.some((e=>e)))throw new Error("pre-allocated output tensor is not supported for proxy.");return ug(),new Promise(((n,s)=>{gg("run",[n,s]);let i=t,o={type:"run",in:{sessionId:e,inputIndices:A,inputs:i,outputIndices:r,options:a}};ng.postMessage(o,tg(i))}))}return eg(e,A,t,r,n,a)},Ig=async e=>{if(rg())return ug(),new Promise(((A,t)=>{gg("end-profiling",[A,t]);let r={type:"end-profiling",in:e};ng.postMessage(r)}));Ag(e)}})),Eg=ee((()=>{ke(),yg(),xl(),xe(),vl(),wg=(e,A)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];case"ml-tensor":return[e.type,e.dims,{mlTensor:e.mlTensor},"ml-tensor"];default:throw new Error(`invalid data location: ${e.location} for ${A()}`)}},kg=e=>{switch(e[3]){case"cpu":return new H(e[0],e[2],e[1]);case"gpu-buffer":{let A=e[0];if(!CA(A))throw new Error(`not supported data type: ${A} for deserializing GPU tensor`);let{gpuBuffer:t,download:r,dispose:n}=e[2];return H.fromGpuBuffer(t,{dataType:A,dims:e[1],download:r,dispose:n})}case"ml-tensor":{let A=e[0];if(!bA(A))throw new Error(`not supported data type: ${A} for deserializing MLTensor tensor`);let{mlTensor:t,download:r,dispose:n}=e[2];return H.fromMLTensor(t,{dataType:A,dims:e[1],download:r,dispose:n})}default:throw new Error(`invalid data location: ${e[3]}`)}},xg=class{async fetchModelAndCopyToWasmMemory(e){return hg(await wA(e))}async loadModel(e,A){let t;V(),t="string"==typeof e?await this.fetchModelAndCopyToWasmMemory(e):e,[this.sessionId,this.inputNames,this.outputNames,this.inputMetadata,this.outputMetadata]=await mg(t,A),W()}async dispose(){return Cg(this.sessionId)}async run(e,A,t){V();let r=[],n=[];Object.entries(e).forEach((e=>{let A=e[0],t=e[1],a=this.inputNames.indexOf(A);if(-1===a)throw new Error(`invalid input '${A}'`);r.push(t),n.push(a)}));let a=[],s=[];Object.entries(A).forEach((e=>{let A=e[0],t=e[1],r=this.outputNames.indexOf(A);if(-1===r)throw new Error(`invalid output '${A}'`);a.push(t),s.push(r)}));let i=r.map(((e,A)=>wg(e,(()=>`input "${this.inputNames[n[A]]}"`)))),o=a.map(((e,A)=>e?wg(e,(()=>`output "${this.outputNames[s[A]]}"`)):null)),l=await bg(this.sessionId,n,i,s,o,t),c={};for(let e=0;e<l.length;e++)c[this.outputNames[s[e]]]=a[e]??kg(l[e]);return W(),c}startProfiling(){}endProfiling(){Ig(this.sessionId)}}})),Mg={};Ae(Mg,{OnnxruntimeWebAssemblyBackend:()=>Dg,initializeFlags:()=>Gg,wasmBackend:()=>Qg});var Gg,Dg,Qg,Tg=ee((()=>{ke(),yg(),Eg(),Gg=()=>{("number"!=typeof B.wasm.initTimeout||B.wasm.initTimeout<0)&&(B.wasm.initTimeout=0);let e=B.wasm.simd;if("boolean"!=typeof e&&void 0!==e&&"fixed"!==e&&"relaxed"!==e&&(console.warn(`Property "env.wasm.simd" is set to unknown value "${e}". Reset it to \`false\` and ignore SIMD feature checking.`),B.wasm.simd=!1),"boolean"!=typeof B.wasm.proxy&&(B.wasm.proxy=!1),"boolean"!=typeof B.wasm.trace&&(B.wasm.trace=!1),"number"!=typeof B.wasm.numThreads||!Number.isInteger(B.wasm.numThreads)||B.wasm.numThreads<=0)if(typeof self<"u"&&!self.crossOriginIsolated)B.wasm.numThreads=1;else{let e=typeof navigator>"u"?$("node:os").cpus().length:navigator.hardwareConcurrency;B.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},Dg=class{async init(e){Gg(),await fg(),await pg(e)}async createInferenceSessionHandler(e,A){let t=new xg;return await t.loadModel(e,A),t}},Qg=new Dg}));ke(),ke(),ke();var Pg=we;{let e=(Tg(),te(Mg)).wasmBackend;b("webgpu",e,5),b("webnn",e,5),b("cpu",e,10),b("wasm",e,10)}Object.defineProperty(B.versions,"web",{value:"1.22.0-dev.20250409-89f8206ba4",enumerable:!0});var zg,Fg,Sg=Object.freeze({__proto__:null,get InferenceSession(){return K},get TRACE(){return R},get TRACE_FUNC_BEGIN(){return V},get TRACE_FUNC_END(){return W},get Tensor(){return H},default:Pg,get env(){return B},get registerBackend(){return b}}),Ng={"onnxruntime-common":e=>{e.exports=Z},"onnxruntime-web":e=>{e.exports=Sg},"?2ce3":()=>{},"?7a2c":()=>{},"?a42a":()=>{},"?2b25":()=>{},"?569f":()=>{},"?3f59":()=>{},"?154a":()=>{},"./node_modules/@huggingface/jinja/dist/index.js":(e,A,t)=>{t.r(A),t.d(A,{Environment:()=>Ae,Interpreter:()=>te,Template:()=>ce,parse:()=>O,tokenize:()=>c});var r=Object.freeze({Text:"Text",NumericLiteral:"NumericLiteral",BooleanLiteral:"BooleanLiteral",NullLiteral:"NullLiteral",StringLiteral:"StringLiteral",Identifier:"Identifier",Equals:"Equals",OpenParen:"OpenParen",CloseParen:"CloseParen",OpenStatement:"OpenStatement",CloseStatement:"CloseStatement",OpenExpression:"OpenExpression",CloseExpression:"CloseExpression",OpenSquareBracket:"OpenSquareBracket",CloseSquareBracket:"CloseSquareBracket",OpenCurlyBracket:"OpenCurlyBracket",CloseCurlyBracket:"CloseCurlyBracket",Comma:"Comma",Dot:"Dot",Colon:"Colon",Pipe:"Pipe",CallOperator:"CallOperator",AdditiveBinaryOperator:"AdditiveBinaryOperator",MultiplicativeBinaryOperator:"MultiplicativeBinaryOperator",ComparisonBinaryOperator:"ComparisonBinaryOperator",UnaryOperator:"UnaryOperator",Set:"Set",If:"If",For:"For",In:"In",Is:"Is",NotIn:"NotIn",Else:"Else",EndSet:"EndSet",EndIf:"EndIf",ElseIf:"ElseIf",EndFor:"EndFor",And:"And",Or:"Or",Not:"UnaryOperator",Macro:"Macro",EndMacro:"EndMacro",Break:"Break",Continue:"Continue"}),n=Object.freeze({set:r.Set,for:r.For,in:r.In,is:r.Is,if:r.If,else:r.Else,endset:r.EndSet,endif:r.EndIf,elif:r.ElseIf,endfor:r.EndFor,and:r.And,or:r.Or,not:r.Not,"not in":r.NotIn,macro:r.Macro,endmacro:r.EndMacro,break:r.Break,continue:r.Continue,true:r.BooleanLiteral,false:r.BooleanLiteral,none:r.NullLiteral,True:r.BooleanLiteral,False:r.BooleanLiteral,None:r.NullLiteral}),a=class{constructor(e,A){this.value=e,this.type=A}};function s(e){return/\w/.test(e)}function i(e){return/[0-9]/.test(e)}var o=[["{%",r.OpenStatement],["%}",r.CloseStatement],["{{",r.OpenExpression],["}}",r.CloseExpression],["(",r.OpenParen],[")",r.CloseParen],["{",r.OpenCurlyBracket],["}",r.CloseCurlyBracket],["[",r.OpenSquareBracket],["]",r.CloseSquareBracket],[",",r.Comma],[".",r.Dot],[":",r.Colon],["|",r.Pipe],["<=",r.ComparisonBinaryOperator],[">=",r.ComparisonBinaryOperator],["==",r.ComparisonBinaryOperator],["!=",r.ComparisonBinaryOperator],["<",r.ComparisonBinaryOperator],[">",r.ComparisonBinaryOperator],["+",r.AdditiveBinaryOperator],["-",r.AdditiveBinaryOperator],["*",r.MultiplicativeBinaryOperator],["/",r.MultiplicativeBinaryOperator],["%",r.MultiplicativeBinaryOperator],["=",r.Equals]],l=new Map([["n","\n"],["t","\t"],["r","\r"],["b","\b"],["f","\f"],["v","\v"],["'","'"],['"','"'],["\\","\\"]]);function c(e,A={}){const t=[],c=function(e,A={}){return e.endsWith("\n")&&(e=e.slice(0,-1)),e=e.replace(/{#.*?#}/gs,"{##}"),A.lstrip_blocks&&(e=e.replace(/^[ \t]*({[#%])/gm,"$1")),A.trim_blocks&&(e=e.replace(/([#%]})\n/g,"$1")),e.replace(/{##}/g,"").replace(/-%}\s*/g,"%}").replace(/\s*{%-/g,"{%").replace(/-}}\s*/g,"}}").replace(/\s*{{-/g,"{{")}(e,A);let g=0;const u=e=>{let A="";for(;e(c[g]);)if("\\"!==c[g]){if(A+=c[g++],g>=c.length)throw new SyntaxError("Unexpected end of input")}else{if(++g,g>=c.length)throw new SyntaxError("Unexpected end of input");const e=c[g++],t=l.get(e);if(void 0===t)throw new SyntaxError(`Unexpected escaped character: ${e}`);A+=t}return A};e:for(;g<c.length;){const e=t.at(-1)?.type;if(void 0===e||e===r.CloseStatement||e===r.CloseExpression){let e="";for(;g<c.length&&("{"!==c[g]||"%"!==c[g+1]&&"{"!==c[g+1]);)e+=c[g++];if(e.length>0){t.push(new a(e,r.Text));continue}}u((e=>/\s/.test(e)));const A=c[g];if("-"===A||"+"===A){const e=t.at(-1)?.type;if(e===r.Text||void 0===e)throw new SyntaxError(`Unexpected character: ${A}`);switch(e){case r.Identifier:case r.NumericLiteral:case r.BooleanLiteral:case r.NullLiteral:case r.StringLiteral:case r.CloseParen:case r.CloseSquareBracket:break;default:{++g;const e=u(i);t.push(new a(`${A}${e}`,e.length>0?r.NumericLiteral:r.UnaryOperator));continue}}}for(const[e,A]of o){if(c.slice(g,g+e.length)===e){t.push(new a(e,A)),g+=e.length;continue e}}if("'"!==A&&'"'!==A)if(i(A)){const e=u(i);t.push(new a(e,r.NumericLiteral))}else{if(!s(A))throw new SyntaxError(`Unexpected character: ${A}`);{const e=u(s),A=Object.hasOwn(n,e)?n[e]:r.Identifier;A===r.In&&t.at(-1)?.type===r.Not?(t.pop(),t.push(new a("not in",r.NotIn))):t.push(new a(e,A))}}else{++g;const e=u((e=>e!==A));t.push(new a(e,r.StringLiteral)),++g}}return t}var g=class{type="Statement"},u=class extends g{constructor(e){super(),this.body=e}type="Program"},d=class extends g{constructor(e,A,t){super(),this.test=e,this.body=A,this.alternate=t}type="If"},f=class extends g{constructor(e,A,t,r){super(),this.loopvar=e,this.iterable=A,this.body=t,this.defaultBlock=r}type="For"},p=class extends g{type="Break"},h=class extends g{type="Continue"},m=class extends g{constructor(e,A,t){super(),this.assignee=e,this.value=A,this.body=t}type="Set"},C=class extends g{constructor(e,A,t){super(),this.name=e,this.args=A,this.body=t}type="Macro"},b=class extends g{type="Expression"},I=class extends b{constructor(e,A,t){super(),this.object=e,this.property=A,this.computed=t}type="MemberExpression"},w=class extends b{constructor(e,A){super(),this.callee=e,this.args=A}type="CallExpression"},k=class extends b{constructor(e){super(),this.value=e}type="Identifier"},x=class extends b{constructor(e){super(),this.value=e}type="Literal"},v=class extends x{type="NumericLiteral"},B=class extends x{type="StringLiteral"},y=class extends x{type="BooleanLiteral"},E=class extends x{type="NullLiteral"},M=class extends x{type="ArrayLiteral"},G=class extends x{type="TupleLiteral"},D=class extends x{type="ObjectLiteral"},Q=class extends b{constructor(e,A,t){super(),this.operator=e,this.left=A,this.right=t}type="BinaryExpression"},T=class extends b{constructor(e,A){super(),this.operand=e,this.filter=A}type="FilterExpression"},P=class extends b{constructor(e,A){super(),this.iterable=e,this.test=A}type="SelectExpression"},z=class extends b{constructor(e,A,t){super(),this.operand=e,this.negate=A,this.test=t}type="TestExpression"},F=class extends b{constructor(e,A){super(),this.operator=e,this.argument=A}type="UnaryExpression"},S=class extends b{constructor(e=void 0,A=void 0,t=void 0){super(),this.start=e,this.stop=A,this.step=t}type="SliceExpression"},N=class extends b{constructor(e,A){super(),this.key=e,this.value=A}type="KeywordArgumentExpression"};function O(e){const A=new u([]);let t=0;function n(A,r){const n=e[t++];if(!n||n.type!==A)throw new Error(`Parser Error: ${r}. ${n.type} !== ${A}.`);return n}function a(){switch(e[t].type){case r.Text:return new B(n(r.Text,"Expected text token").value);case r.OpenStatement:return function(){let A;switch(n(r.OpenStatement,"Expected opening statement token"),e[t].type){case r.Set:++t,A=function(){const A=c();if(i(r.Equals)){++t;const e=c();return new m(A,e,[])}{const s=[];for(n(r.CloseStatement,"Expected %} token");e[t]?.type!==r.OpenStatement||e[t+1]?.type!==r.EndSet;){const e=a();s.push(e)}return n(r.OpenStatement,"Expected {% token"),n(r.EndSet,"Expected endset token"),new m(A,null,s)}}(),n(r.CloseStatement,"Expected closing statement token");break;case r.If:++t,A=o(),n(r.OpenStatement,"Expected {% token"),n(r.EndIf,"Expected endif token"),n(r.CloseStatement,"Expected %} token");break;case r.Macro:++t,A=function(){const e=W();if("Identifier"!==e.type)throw new SyntaxError("Expected identifier following macro statement");const A=Y();n(r.CloseStatement,"Expected closing statement token");const t=[];for(;s(r.OpenStatement,r.EndMacro);)t.push(a());return new C(e,A,t)}(),n(r.OpenStatement,"Expected {% token"),n(r.EndMacro,"Expected endmacro token"),n(r.CloseStatement,"Expected %} token");break;case r.For:++t,A=function(){const e=l(!0);if(!(e instanceof k||e instanceof G))throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${e.type} instead`);n(r.In,"Expected `in` keyword following loop variable");const A=c();n(r.CloseStatement,"Expected closing statement token");const o=[];for(;s(r.OpenStatement,r.EndFor)&&s(r.OpenStatement,r.Else);)o.push(a());const g=[];if(i(r.OpenStatement,r.Else))for(++t,++t,n(r.CloseStatement,"Expected closing statement token");s(r.OpenStatement,r.EndFor);)g.push(a());return new f(e,A,o,g)}(),n(r.OpenStatement,"Expected {% token"),n(r.EndFor,"Expected endfor token"),n(r.CloseStatement,"Expected %} token");break;case r.Break:++t,n(r.CloseStatement,"Expected closing statement token"),A=new p;break;case r.Continue:++t,n(r.CloseStatement,"Expected closing statement token"),A=new h;break;default:throw new SyntaxError(`Unknown statement type: ${e[t].type}`)}return A}();case r.OpenExpression:return function(){n(r.OpenExpression,"Expected opening expression token");const e=c();return n(r.CloseExpression,"Expected closing expression token"),e}();default:throw new SyntaxError(`Unexpected token type: ${e[t].type}`)}}function s(...A){return t+A.length<=e.length&&A.some(((A,r)=>A!==e[t+r].type))}function i(...A){return t+A.length<=e.length&&A.every(((A,r)=>A===e[t+r].type))}function o(){const A=c();n(r.CloseStatement,"Expected closing statement token");const s=[],l=[];for(;e[t]?.type!==r.OpenStatement||e[t+1]?.type!==r.ElseIf&&e[t+1]?.type!==r.Else&&e[t+1]?.type!==r.EndIf;)s.push(a());if(e[t]?.type===r.OpenStatement&&e[t+1]?.type!==r.EndIf)if(++t,i(r.ElseIf))n(r.ElseIf,"Expected elseif token"),l.push(o());else for(n(r.Else,"Expected else token"),n(r.CloseStatement,"Expected closing statement token");e[t]?.type!==r.OpenStatement||e[t+1]?.type!==r.EndIf;)l.push(a());return new d(A,s,l)}function l(e=!1){const A=e?W:c,n=[A()],a=i(r.Comma);for(;a&&(++t,n.push(A()),i(r.Comma)););return a?new G(n):n[0]}function c(){return function(){const e=g();if(i(r.If)){++t;const A=g();if(i(r.Else)){++t;const r=g();return new d(A,[e],[r])}return new P(e,A)}return e}()}function g(){let A=b();for(;i(r.Or);){const r=e[t];++t;const n=b();A=new Q(r,A,n)}return A}function b(){let A=x();for(;i(r.And);){const r=e[t];++t;const n=x();A=new Q(r,A,n)}return A}function x(){let A;for(;i(r.Not);){const r=e[t];++t;const n=x();A=new F(r,n)}return A??function(){let A=O();for(;i(r.ComparisonBinaryOperator)||i(r.In)||i(r.NotIn);){const r=e[t];++t;const n=O();A=new Q(r,A,n)}return A}()}function O(){let A=j();for(;i(r.AdditiveBinaryOperator);){const r=e[t];++t;const n=j();A=new Q(r,A,n)}return A}function L(e){let A=new w(e,Y());return A=R(A),i(r.OpenParen)&&(A=L(A)),A}function Y(){n(r.OpenParen,"Expected opening parenthesis for arguments list");const e=function(){const e=[];for(;!i(r.CloseParen);){let A=c();if(i(r.Equals)){if(++t,!(A instanceof k))throw new SyntaxError("Expected identifier for keyword argument");const e=c();A=new N(A,e)}e.push(A),i(r.Comma)&&++t}return e}();return n(r.CloseParen,"Expected closing parenthesis for arguments list"),e}function H(){const e=[];let A=!1;for(;!i(r.CloseSquareBracket);)i(r.Colon)?(e.push(void 0),++t,A=!0):(e.push(c()),i(r.Colon)&&(++t,A=!0));if(0===e.length)throw new SyntaxError("Expected at least one argument for member/slice expression");if(A){if(e.length>3)throw new SyntaxError("Expected 0-3 arguments for slice expression");return new S(...e)}return e[0]}function R(A){for(;i(r.Dot)||i(r.OpenSquareBracket);){const a=e[t];let s;++t;const i=a.type!==r.Dot;if(i)s=H(),n(r.CloseSquareBracket,"Expected closing square bracket");else if(s=W(),"Identifier"!==s.type)throw new SyntaxError("Expected identifier following dot operator");A=new I(A,s,i)}return A}function j(){let A=V();for(;i(r.MultiplicativeBinaryOperator);){const r=e[t];++t;const n=V();A=new Q(r,A,n)}return A}function V(){let e=function(){let e=function(){const e=R(W());return i(r.OpenParen)?L(e):e}();for(;i(r.Pipe);){++t;let A=W();if(!(A instanceof k))throw new SyntaxError("Expected identifier for the filter");i(r.OpenParen)&&(A=L(A)),e=new T(e,A)}return e}();for(;i(r.Is);){++t;const A=i(r.Not);A&&++t;let n=W();if(n instanceof y?n=new k(n.value.toString()):n instanceof E&&(n=new k("none")),!(n instanceof k))throw new SyntaxError("Expected identifier for the test");e=new z(e,A,n)}return e}function W(){const A=e[t];switch(A.type){case r.NumericLiteral:return++t,new v(Number(A.value));case r.StringLiteral:return++t,new B(A.value);case r.BooleanLiteral:return++t,new y("true"===A.value.toLowerCase());case r.NullLiteral:return++t,new E(null);case r.Identifier:return++t,new k(A.value);case r.OpenParen:{++t;const A=l();if(e[t].type!==r.CloseParen)throw new SyntaxError(`Expected closing parenthesis, got ${e[t].type} instead`);return++t,A}case r.OpenSquareBracket:{++t;const e=[];for(;!i(r.CloseSquareBracket);)e.push(c()),i(r.Comma)&&++t;return++t,new M(e)}case r.OpenCurlyBracket:{++t;const e=new Map;for(;!i(r.CloseCurlyBracket);){const A=c();n(r.Colon,"Expected colon between key and value in object literal");const a=c();e.set(A,a),i(r.Comma)&&++t}return++t,new D(e)}default:throw new SyntaxError(`Unexpected token: ${A.type}`)}}for(;t<e.length;)A.body.push(a());return A}function L(e,A,t=1){void 0===A&&(A=e,e=0);const r=[];for(let n=e;n<A;n+=t)r.push(n);return r}function Y(e,A,t,r=1){const n=Math.sign(r);n>=0?(A=(A??=0)<0?Math.max(e.length+A,0):Math.min(A,e.length),t=(t??=e.length)<0?Math.max(e.length+t,0):Math.min(t,e.length)):(A=(A??=e.length-1)<0?Math.max(e.length+A,-1):Math.min(A,e.length-1),t=(t??=-1)<-1?Math.max(e.length+t,-1):Math.min(t,e.length-1));const a=[];for(let s=A;n*s<n*t;s+=r)a.push(e[s]);return a}function H(e){return e.replace(/\b\w/g,(e=>e.toUpperCase()))}var R=class extends Error{},j=class extends Error{},V=class{type="RuntimeValue";value;builtins=new Map;constructor(e=void 0){this.value=e}__bool__(){return new K(!!this.value)}},W=class extends V{type="NumericValue"},U=class extends V{type="StringValue";builtins=new Map([["upper",new _((()=>new U(this.value.toUpperCase())))],["lower",new _((()=>new U(this.value.toLowerCase())))],["strip",new _((()=>new U(this.value.trim())))],["title",new _((()=>new U(H(this.value))))],["length",new W(this.value.length)],["rstrip",new _((()=>new U(this.value.trimEnd())))],["lstrip",new _((()=>new U(this.value.trimStart())))],["startswith",new _((e=>{if(0===e.length)throw new Error("startswith() requires at least one argument");const A=e[0];if(!(A instanceof U))throw new Error("startswith() argument must be a string");return new K(this.value.startsWith(A.value))}))],["endswith",new _((e=>{if(0===e.length)throw new Error("endswith() requires at least one argument");const A=e[0];if(!(A instanceof U))throw new Error("endswith() argument must be a string");return new K(this.value.endsWith(A.value))}))],["split",new _((e=>{const A=e[0]??new $;if(!(A instanceof U||A instanceof $))throw new Error("sep argument must be a string or null");const t=e[1]??new W(-1);if(!(t instanceof W))throw new Error("maxsplit argument must be a number");let r=[];if(A instanceof $){const e=this.value.trimStart();for(const{0:A,index:n}of e.matchAll(/\S+/g)){if(-1!==t.value&&r.length>=t.value&&void 0!==n){r.push(A+e.slice(n+A.length));break}r.push(A)}}else{if(""===A.value)throw new Error("empty separator");r=this.value.split(A.value),-1!==t.value&&r.length>t.value&&r.push(r.splice(t.value).join(A.value))}return new q(r.map((e=>new U(e))))}))]])},K=class extends V{type="BooleanValue"},Z=class extends V{type="ObjectValue";__bool__(){return new K(this.value.size>0)}builtins=new Map([["get",new _((([e,A])=>{if(!(e instanceof U))throw new Error(`Object key must be a string: got ${e.type}`);return this.value.get(e.value)??A??new $}))],["items",new _((()=>new q(Array.from(this.value.entries()).map((([e,A])=>new q([new U(e),A]))))))]])},X=class extends Z{type="KeywordArgumentsValue"},q=class extends V{type="ArrayValue";builtins=new Map([["length",new W(this.value.length)]]);__bool__(){return new K(this.value.length>0)}},J=class extends q{type="TupleValue"},_=class extends V{type="FunctionValue"},$=class extends V{type="NullValue"},ee=class extends V{type="UndefinedValue"},Ae=class{constructor(e){this.parent=e}variables=new Map([["namespace",new _((e=>{if(0===e.length)return new Z(new Map);if(1!==e.length||!(e[0]instanceof Z))throw new Error("`namespace` expects either zero arguments or a single object argument");return e[0]}))]]);tests=new Map([["boolean",e=>"BooleanValue"===e.type],["callable",e=>e instanceof _],["odd",e=>{if("NumericValue"!==e.type)throw new Error(`Cannot apply test "odd" to type: ${e.type}`);return e.value%2!=0}],["even",e=>{if("NumericValue"!==e.type)throw new Error(`Cannot apply test "even" to type: ${e.type}`);return e.value%2==0}],["false",e=>"BooleanValue"===e.type&&!e.value],["true",e=>"BooleanValue"===e.type&&e.value],["none",e=>"NullValue"===e.type],["string",e=>"StringValue"===e.type],["number",e=>"NumericValue"===e.type],["integer",e=>"NumericValue"===e.type&&Number.isInteger(e.value)],["iterable",e=>"ArrayValue"===e.type||"StringValue"===e.type],["mapping",e=>"ObjectValue"===e.type],["lower",e=>{const A=e.value;return"StringValue"===e.type&&A===A.toLowerCase()}],["upper",e=>{const A=e.value;return"StringValue"===e.type&&A===A.toUpperCase()}],["none",e=>"NullValue"===e.type],["defined",e=>"UndefinedValue"!==e.type],["undefined",e=>"UndefinedValue"===e.type],["equalto",(e,A)=>e.value===A.value],["eq",(e,A)=>e.value===A.value]]);set(e,A){return this.declareVariable(e,re(A))}declareVariable(e,A){if(this.variables.has(e))throw new SyntaxError(`Variable already declared: ${e}`);return this.variables.set(e,A),A}setVariable(e,A){return this.variables.set(e,A),A}resolve(e){if(this.variables.has(e))return this;if(this.parent)return this.parent.resolve(e);throw new Error(`Unknown variable: ${e}`)}lookupVariable(e){try{return this.resolve(e).variables.get(e)??new ee}catch{return new ee}}},te=class{global;constructor(e){this.global=e??new Ae}run(e){return this.evaluate(e,this.global)}evaluateBinaryExpression(e,A){const t=this.evaluate(e.left,A);switch(e.operator.value){case"and":return t.__bool__().value?this.evaluate(e.right,A):t;case"or":return t.__bool__().value?t:this.evaluate(e.right,A)}const r=this.evaluate(e.right,A);switch(e.operator.value){case"==":return new K(t.value==r.value);case"!=":return new K(t.value!=r.value)}if(t instanceof ee||r instanceof ee)throw new Error("Cannot perform operation on undefined values");if(t instanceof $||r instanceof $)throw new Error("Cannot perform operation on null values");if(t instanceof W&&r instanceof W)switch(e.operator.value){case"+":return new W(t.value+r.value);case"-":return new W(t.value-r.value);case"*":return new W(t.value*r.value);case"/":return new W(t.value/r.value);case"%":return new W(t.value%r.value);case"<":return new K(t.value<r.value);case">":return new K(t.value>r.value);case">=":return new K(t.value>=r.value);case"<=":return new K(t.value<=r.value)}else if(t instanceof q&&r instanceof q){if("+"===e.operator.value)return new q(t.value.concat(r.value))}else if(r instanceof q){const A=void 0!==r.value.find((e=>e.value===t.value));switch(e.operator.value){case"in":return new K(A);case"not in":return new K(!A)}}if((t instanceof U||r instanceof U)&&"+"===e.operator.value)return new U(t.value.toString()+r.value.toString());if(t instanceof U&&r instanceof U)switch(e.operator.value){case"in":return new K(r.value.includes(t.value));case"not in":return new K(!r.value.includes(t.value))}if(t instanceof U&&r instanceof Z)switch(e.operator.value){case"in":return new K(r.value.has(t.value));case"not in":return new K(!r.value.has(t.value))}throw new SyntaxError(`Unknown operator "${e.operator.value}" between ${t.type} and ${r.type}`)}evaluateArguments(e,A){const t=[],r=new Map;for(const n of e)if("KeywordArgumentExpression"===n.type){const e=n;r.set(e.key.value,this.evaluate(e.value,A))}else{if(r.size>0)throw new Error("Positional arguments must come before keyword arguments");t.push(this.evaluate(n,A))}return[t,r]}evaluateFilterExpression(e,A){const t=this.evaluate(e.operand,A);if("Identifier"===e.filter.type){const A=e.filter;if("tojson"===A.value)return new U(ne(t));if(t instanceof q)switch(A.value){case"list":return t;case"first":return t.value[0];case"last":return t.value[t.value.length-1];case"length":return new W(t.value.length);case"reverse":return new q(t.value.reverse());case"sort":return new q(t.value.sort(((e,A)=>{if(e.type!==A.type)throw new Error(`Cannot compare different types: ${e.type} and ${A.type}`);switch(e.type){case"NumericValue":return e.value-A.value;case"StringValue":return e.value.localeCompare(A.value);default:throw new Error(`Cannot compare type: ${e.type}`)}})));case"join":return new U(t.value.map((e=>e.value)).join(""));case"string":return new U(ne(t));default:throw new Error(`Unknown ArrayValue filter: ${A.value}`)}else if(t instanceof U)switch(A.value){case"length":return new W(t.value.length);case"upper":return new U(t.value.toUpperCase());case"lower":return new U(t.value.toLowerCase());case"title":return new U(H(t.value));case"capitalize":return new U(t.value.charAt(0).toUpperCase()+t.value.slice(1));case"trim":return new U(t.value.trim());case"indent":return new U(t.value.split("\n").map(((e,A)=>0===A||0===e.length?e:"    "+e)).join("\n"));case"join":case"string":return t;default:throw new Error(`Unknown StringValue filter: ${A.value}`)}else{if(t instanceof W){if("abs"===A.value)return new W(Math.abs(t.value));throw new Error(`Unknown NumericValue filter: ${A.value}`)}if(t instanceof Z)switch(A.value){case"items":return new q(Array.from(t.value.entries()).map((([e,A])=>new q([new U(e),A]))));case"length":return new W(t.value.size);default:throw new Error(`Unknown ObjectValue filter: ${A.value}`)}}throw new Error(`Cannot apply filter "${A.value}" to type: ${t.type}`)}if("CallExpression"===e.filter.type){const r=e.filter;if("Identifier"!==r.callee.type)throw new Error(`Unknown filter: ${r.callee.type}`);const n=r.callee.value;if("tojson"===n){const[,e]=this.evaluateArguments(r.args,A),n=e.get("indent")??new $;if(!(n instanceof W||n instanceof $))throw new Error("If set, indent must be a number");return new U(ne(t,n.value))}if("join"===n){let e;if(t instanceof U)e=Array.from(t.value);else{if(!(t instanceof q))throw new Error(`Cannot apply filter "${n}" to type: ${t.type}`);e=t.value.map((e=>e.value))}const[a,s]=this.evaluateArguments(r.args,A),i=a.at(0)??s.get("separator")??new U("");if(!(i instanceof U))throw new Error("separator must be a string");return new U(e.join(i.value))}if(t instanceof q){switch(n){case"selectattr":case"rejectattr":{const e="selectattr"===n;if(t.value.some((e=>!(e instanceof Z))))throw new Error(`\`${n}\` can only be applied to array of objects`);if(r.args.some((e=>"StringLiteral"!==e.type)))throw new Error(`arguments of \`${n}\` must be strings`);const[a,s,i]=r.args.map((e=>this.evaluate(e,A)));let o;if(s){const e=A.tests.get(s.value);if(!e)throw new Error(`Unknown test: ${s.value}`);o=e}else o=(...e)=>e[0].__bool__().value;const l=t.value.filter((A=>{const t=A.value.get(a.value),r=!!t&&o(t,i);return e?r:!r}));return new q(l)}case"map":{const[,e]=this.evaluateArguments(r.args,A);if(e.has("attribute")){const A=e.get("attribute");if(!(A instanceof U))throw new Error("attribute must be a string");const r=e.get("default"),n=t.value.map((e=>{if(!(e instanceof Z))throw new Error("items in map must be an object");return e.value.get(A.value)??r??new ee}));return new q(n)}throw new Error("`map` expressions without `attribute` set are not currently supported.")}}throw new Error(`Unknown ArrayValue filter: ${n}`)}if(t instanceof U){if("indent"===n){const[e,n]=this.evaluateArguments(r.args,A),a=e.at(0)??n.get("width")??new W(4);if(!(a instanceof W))throw new Error("width must be a number");const s=e.at(1)??n.get("first")??new K(!1),i=e.at(2)??n.get("blank")??new K(!1),o=t.value.split("\n"),l=" ".repeat(a.value),c=o.map(((e,A)=>!s.value&&0===A||!i.value&&0===e.length?e:l+e));return new U(c.join("\n"))}throw new Error(`Unknown StringValue filter: ${n}`)}throw new Error(`Cannot apply filter "${n}" to type: ${t.type}`)}throw new Error(`Unknown filter: ${e.filter.type}`)}evaluateTestExpression(e,A){const t=this.evaluate(e.operand,A),r=A.tests.get(e.test.value);if(!r)throw new Error(`Unknown test: ${e.test.value}`);const n=r(t);return new K(e.negate?!n:n)}evaluateUnaryExpression(e,A){const t=this.evaluate(e.argument,A);if("not"===e.operator.value)return new K(!t.value);throw new SyntaxError(`Unknown operator: ${e.operator.value}`)}evalProgram(e,A){return this.evaluateBlock(e.body,A)}evaluateBlock(e,A){let t="";for(const r of e){const e=this.evaluate(r,A);"NullValue"!==e.type&&"UndefinedValue"!==e.type&&(t+=e.value)}return new U(t)}evaluateIdentifier(e,A){return A.lookupVariable(e.value)}evaluateCallExpression(e,A){const[t,r]=this.evaluateArguments(e.args,A);r.size>0&&t.push(new X(r));const n=this.evaluate(e.callee,A);if("FunctionValue"!==n.type)throw new Error(`Cannot call something that is not a function: got ${n.type}`);return n.value(t,A)}evaluateSliceExpression(e,A,t){if(!(e instanceof q||e instanceof U))throw new Error("Slice object must be an array or string");const r=this.evaluate(A.start,t),n=this.evaluate(A.stop,t),a=this.evaluate(A.step,t);if(!(r instanceof W||r instanceof ee))throw new Error("Slice start must be numeric or undefined");if(!(n instanceof W||n instanceof ee))throw new Error("Slice stop must be numeric or undefined");if(!(a instanceof W||a instanceof ee))throw new Error("Slice step must be numeric or undefined");return e instanceof q?new q(Y(e.value,r.value,n.value,a.value)):new U(Y(Array.from(e.value),r.value,n.value,a.value).join(""))}evaluateMemberExpression(e,A){const t=this.evaluate(e.object,A);let r,n;if(e.computed){if("SliceExpression"===e.property.type)return this.evaluateSliceExpression(t,e.property,A);r=this.evaluate(e.property,A)}else r=new U(e.property.value);if(t instanceof Z){if(!(r instanceof U))throw new Error(`Cannot access property with non-string: got ${r.type}`);n=t.value.get(r.value)??t.builtins.get(r.value)}else if(t instanceof q||t instanceof U)if(r instanceof W)n=t.value.at(r.value),t instanceof U&&(n=new U(t.value.at(r.value)));else{if(!(r instanceof U))throw new Error(`Cannot access property with non-string/non-number: got ${r.type}`);n=t.builtins.get(r.value)}else{if(!(r instanceof U))throw new Error(`Cannot access property with non-string: got ${r.type}`);n=t.builtins.get(r.value)}return n instanceof V?n:new ee}evaluateSet(e,A){const t=e.value?this.evaluate(e.value,A):this.evaluateBlock(e.body,A);if("Identifier"===e.assignee.type){const r=e.assignee.value;A.setVariable(r,t)}else{if("MemberExpression"!==e.assignee.type)throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(e.assignee)}`);{const r=e.assignee,n=this.evaluate(r.object,A);if(!(n instanceof Z))throw new Error("Cannot assign to member of non-object");if("Identifier"!==r.property.type)throw new Error("Cannot assign to member with non-identifier property");n.value.set(r.property.value,t)}}return new $}evaluateIf(e,A){const t=this.evaluate(e.test,A);return this.evaluateBlock(t.__bool__().value?e.body:e.alternate,A)}evaluateFor(e,A){const t=new Ae(A);let r,n;if("SelectExpression"===e.iterable.type){const A=e.iterable;n=this.evaluate(A.iterable,t),r=A.test}else n=this.evaluate(e.iterable,t);if(!(n instanceof q))throw new Error(`Expected iterable type in for loop: got ${n.type}`);const a=[],s=[];for(let A=0;A<n.value.length;++A){const i=new Ae(t),o=n.value[A];let l;if("Identifier"===e.loopvar.type)l=A=>A.setVariable(e.loopvar.value,o);else{if("TupleLiteral"!==e.loopvar.type)throw new Error(`Invalid loop variable(s): ${e.loopvar.type}`);{const A=e.loopvar;if("ArrayValue"!==o.type)throw new Error(`Cannot unpack non-iterable type: ${o.type}`);const t=o;if(A.value.length!==t.value.length)throw new Error(`Too ${A.value.length>t.value.length?"few":"many"} items to unpack`);l=e=>{for(let r=0;r<A.value.length;++r){if("Identifier"!==A.value[r].type)throw new Error(`Cannot unpack non-identifier type: ${A.value[r].type}`);e.setVariable(A.value[r].value,t.value[r])}}}}if(r){l(i);if(!this.evaluate(r,i).__bool__().value)continue}a.push(o),s.push(l)}let i="",o=!0;for(let A=0;A<a.length;++A){const r=new Map([["index",new W(A+1)],["index0",new W(A)],["revindex",new W(a.length-A)],["revindex0",new W(a.length-A-1)],["first",new K(0===A)],["last",new K(A===a.length-1)],["length",new W(a.length)],["previtem",A>0?a[A-1]:new ee],["nextitem",A<a.length-1?a[A+1]:new ee]]);t.setVariable("loop",new Z(r)),s[A](t);try{i+=this.evaluateBlock(e.body,t).value}catch(e){if(e instanceof j)continue;if(e instanceof R)break;throw e}o=!1}if(o){i+=this.evaluateBlock(e.defaultBlock,t).value}return new U(i)}evaluateMacro(e,A){return A.setVariable(e.name.value,new _(((A,t)=>{const r=new Ae(t);let n;A=A.slice(),"KeywordArgumentsValue"===A.at(-1)?.type&&(n=A.pop());for(let t=0;t<e.args.length;++t){const a=e.args[t],s=A[t];if("Identifier"===a.type){const e=a;if(!s)throw new Error(`Missing positional argument: ${e.value}`);r.setVariable(e.value,s)}else{if("KeywordArgumentExpression"!==a.type)throw new Error(`Unknown argument type: ${a.type}`);{const e=a,A=s??n?.value.get(e.key.value)??this.evaluate(e.value,r);r.setVariable(e.key.value,A)}}}return this.evaluateBlock(e.body,r)}))),new $}evaluate(e,A){if(void 0===e)return new ee;switch(e.type){case"Program":return this.evalProgram(e,A);case"Set":return this.evaluateSet(e,A);case"If":return this.evaluateIf(e,A);case"For":return this.evaluateFor(e,A);case"Macro":return this.evaluateMacro(e,A);case"Break":throw new R;case"Continue":throw new j;case"NumericLiteral":return new W(Number(e.value));case"StringLiteral":return new U(e.value);case"BooleanLiteral":return new K(e.value);case"NullLiteral":return new $(e.value);case"ArrayLiteral":return new q(e.value.map((e=>this.evaluate(e,A))));case"TupleLiteral":return new J(e.value.map((e=>this.evaluate(e,A))));case"ObjectLiteral":{const t=new Map;for(const[r,n]of e.value){const e=this.evaluate(r,A);if(!(e instanceof U))throw new Error(`Object keys must be strings: got ${e.type}`);t.set(e.value,this.evaluate(n,A))}return new Z(t)}case"Identifier":return this.evaluateIdentifier(e,A);case"CallExpression":return this.evaluateCallExpression(e,A);case"MemberExpression":return this.evaluateMemberExpression(e,A);case"UnaryExpression":return this.evaluateUnaryExpression(e,A);case"BinaryExpression":return this.evaluateBinaryExpression(e,A);case"FilterExpression":return this.evaluateFilterExpression(e,A);case"TestExpression":return this.evaluateTestExpression(e,A);default:throw new SyntaxError(`Unknown node type: ${e.type}`)}}};function re(e){switch(typeof e){case"number":return new W(e);case"string":return new U(e);case"boolean":return new K(e);case"undefined":return new ee;case"object":return null===e?new $:Array.isArray(e)?new q(e.map(re)):new Z(new Map(Object.entries(e).map((([e,A])=>[e,re(A)]))));case"function":return new _(((A,t)=>{const r=e(...A.map((e=>e.value)))??null;return re(r)}));default:throw new Error(`Cannot convert to runtime value: ${e}`)}}function ne(e,A,t){const r=t??0;switch(e.type){case"NullValue":case"UndefinedValue":return"null";case"NumericValue":case"StringValue":case"BooleanValue":return JSON.stringify(e.value);case"ArrayValue":case"ObjectValue":{const t=A?" ".repeat(A):"",n="\n"+t.repeat(r),a=n+t;if("ArrayValue"===e.type){const t=e.value.map((e=>ne(e,A,r+1)));return A?`[${a}${t.join(`,${a}`)}${n}]`:`[${t.join(", ")}]`}{const t=Array.from(e.value.entries()).map((([e,t])=>{const n=`"${e}": ${ne(t,A,r+1)}`;return A?`${a}${n}`:n}));return A?`{${t.join(",")}${n}}`:`{${t.join(", ")}}`}}default:throw new Error(`Cannot convert to JSON: ${e.type}`)}}var ae="\n",se={MultiplicativeBinaryOperator:2,AdditiveBinaryOperator:1,ComparisonBinaryOperator:0};function ie(...e){return"{%- "+e.join(" ")+" -%}"}function oe(e,A,t){return e.map((e=>function(e,A,t){const r=t.repeat(A);switch(e.type){case"Program":return oe(e.body,A,t);case"If":return function(e,A,t){const r=t.repeat(A),n=[];let a=e;for(;a&&(n.push({test:a.test,body:a.body}),1===a.alternate.length&&"If"===a.alternate[0].type);)a=a.alternate[0];let s=r+ie("if",le(n[0].test))+ae+oe(n[0].body,A+1,t);for(let e=1;e<n.length;e++)s+=ae+r+ie("elif",le(n[e].test))+ae+oe(n[e].body,A+1,t);a&&a.alternate.length>0&&(s+=ae+r+ie("else")+ae+oe(a.alternate,A+1,t));return s+=ae+r+ie("endif"),s}(e,A,t);case"For":return function(e,A,t){const r=t.repeat(A);let n="";if("SelectExpression"===e.iterable.type){const A=e.iterable;n=`${le(A.iterable)} if ${le(A.test)}`}else n=le(e.iterable);let a=r+ie("for",le(e.loopvar),"in",n)+ae+oe(e.body,A+1,t);e.defaultBlock.length>0&&(a+=ae+r+ie("else")+ae+oe(e.defaultBlock,A+1,t));return a+=ae+r+ie("endfor"),a}(e,A,t);case"Set":return function(e,A,t){const r=t.repeat(A),n=le(e.assignee),a=e.value?le(e.value):"",s=r+ie("set",`${n}${e.value?" = "+a:""}`);if(0===e.body.length)return s;return s+ae+oe(e.body,A+1,t)+ae+r+ie("endset")}(e,A,t);case"Macro":return function(e,A,t){const r=t.repeat(A),n=e.args.map(le).join(", ");return r+ie("macro",`${e.name.value}(${n})`)+ae+oe(e.body,A+1,t)+ae+r+ie("endmacro")}(e,A,t);case"Break":return r+ie("break");case"Continue":return r+ie("continue");default:return r+"{{- "+le(e)+" -}}"}}(e,A,t))).join(ae)}function le(e,A=-1){switch(e.type){case"Identifier":return e.value;case"NullLiteral":return"none";case"NumericLiteral":case"BooleanLiteral":return`${e.value}`;case"StringLiteral":return JSON.stringify(e.value);case"BinaryExpression":{const t=e,r=se[t.operator.type]??0,n=le(t.left,r),a=le(t.right,r+1),s=`${n} ${t.operator.value} ${a}`;return r<A?`(${s})`:s}case"UnaryExpression":{const A=e;return A.operator.value+("not"===A.operator.value?" ":"")+le(A.argument,1/0)}case"LogicalNegationExpression":return`not ${le(e.argument,1/0)}`;case"CallExpression":{const A=e,t=A.args.map((e=>le(e,-1))).join(", ");return`${le(A.callee,-1)}(${t})`}case"MemberExpression":{const A=e;let t=le(A.object,-1);"Identifier"!==A.object.type&&(t=`(${t})`);let r=le(A.property,-1);return A.computed||"Identifier"===A.property.type||(r=`(${r})`),A.computed?`${t}[${r}]`:`${t}.${r}`}case"FilterExpression":{const A=e,t=le(A.operand,1/0);return"CallExpression"===A.filter.type?`${t} | ${le(A.filter,-1)}`:`${t} | ${A.filter.value}`}case"SelectExpression":{const A=e;return`${le(A.iterable,-1)} | select(${le(A.test,-1)})`}case"TestExpression":{const A=e;return`${le(A.operand,-1)} is${A.negate?" not":""} ${A.test.value}`}case"ArrayLiteral":case"TupleLiteral":{const A=e.value.map((e=>le(e,-1))),t="ArrayLiteral"===e.type?"[]":"()";return`${t[0]}${A.join(", ")}${t[1]}`}case"ObjectLiteral":{const A=Array.from(e.value.entries()).map((([e,A])=>`${le(e,-1)}: ${le(A,-1)}`));return`{ ${A.join(", ")} }`}case"SliceExpression":{const A=e;return`${A.start?le(A.start,-1):""}:${A.stop?le(A.stop,-1):""}${A.step?`:${le(A.step,-1)}`:""}`}case"KeywordArgumentExpression":{const A=e;return`${A.key.value}=${le(A.value,-1)}`}case"If":{const A=e,t=le(A.test,-1);return`${le(A.body[0],0)} if ${t} else ${le(A.alternate[0],-1)}`}default:throw new Error(`Unknown expression type: ${e.type}`)}}var ce=class{parsed;constructor(e){const A=c(e,{lstrip_blocks:!0,trim_blocks:!0});this.parsed=O(A)}render(e){const A=new Ae;if(A.set("false",!1),A.set("true",!0),A.set("raise_exception",(e=>{throw new Error(e)})),A.set("range",L),e)for(const[t,r]of Object.entries(e))A.set(t,r);return new te(A).run(this.parsed).value}format(e){return function(e,A="\t"){const t="number"==typeof A?" ".repeat(A):A;return oe(e.body,0,t).replace(/\n$/,"")}(this.parsed,e?.indent||"\t")}}},"./src/backends/onnx.js":(e,A,t)=>{var r;t.r(A),t.d(A,{Tensor:()=>i.Tensor,createInferenceSession:()=>h,deviceToExecutionProviders:()=>f,isONNXProxy:()=>b,isONNXTensor:()=>m});var n=t("./src/env.js"),a=t("?2ce3"),s=t("onnxruntime-web"),i=t("onnxruntime-common");const o=Object.freeze({auto:null,gpu:null,cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:{name:"webnn",deviceType:"cpu"},"webnn-npu":{name:"webnn",deviceType:"npu"},"webnn-gpu":{name:"webnn",deviceType:"gpu"},"webnn-cpu":{name:"webnn",deviceType:"cpu"}}),l=[];let c,g;const u=Symbol.for("onnxruntime");if(u in globalThis)g=globalThis[u];else if(n.apis.IS_NODE_ENV){switch(g=a??(r||(r=t.t(a,2))),process.platform){case"win32":l.push("dml");break;case"linux":"x64"===process.arch&&l.push("cuda")}l.push("cpu"),c=["cpu"]}else g=s,n.apis.IS_WEBNN_AVAILABLE&&l.push("webnn-npu","webnn-gpu","webnn-cpu","webnn"),n.apis.IS_WEBGPU_AVAILABLE&&l.push("webgpu"),l.push("wasm"),c=["wasm"];const d=g.InferenceSession;function f(e=null){if(!e)return c;switch(e){case"auto":return l;case"gpu":return l.filter((e=>["webgpu","cuda","dml","webnn-gpu"].includes(e)))}if(l.includes(e))return[o[e]??e];throw new Error(`Unsupported device: "${e}". Should be one of: ${l.join(", ")}.`)}let p=null;async function h(e,A,t){p&&await p;const r=d.create(e,A);p??=r;const n=await r;return n.config=t,n}function m(e){return e instanceof g.Tensor}const C=g?.env;function b(){return C?.wasm?.proxy}C?.wasm&&("undefined"!=typeof ServiceWorkerGlobalScope&&self instanceof ServiceWorkerGlobalScope||C.wasm.wasmPaths||(C.wasm.wasmPaths=`https://cdn.jsdelivr.net/npm/@huggingface/transformers@${n.env.version}/dist/`),C.wasm.proxy=!1),C?.webgpu&&(C.webgpu.powerPreference="high-performance"),n.env.backends.onnx=C},"./src/base/feature_extraction_utils.js":(e,A,t)=>{t.r(A),t.d(A,{FeatureExtractor:()=>s,validate_audio_inputs:()=>i});var r=t("./src/utils/constants.js"),n=t("./src/utils/generic.js"),a=t("./src/utils/hub.js");class s extends n.Callable{constructor(e){super(),this.config=e}static async from_pretrained(e,A){return new this(await(0,a.getModelJSON)(e,r.FEATURE_EXTRACTOR_NAME,!0,A))}}function i(e,A){if(!(e instanceof Float32Array||e instanceof Float64Array))throw new Error(`${A} expects input to be a Float32Array or a Float64Array, but got ${e?.constructor?.name??typeof e} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`)}},"./src/base/image_processors_utils.js":(e,A,t)=>{t.r(A),t.d(A,{ImageProcessor:()=>b,center_to_corners_format:()=>g,post_process_instance_segmentation:()=>C,post_process_object_detection:()=>u,post_process_panoptic_segmentation:()=>m,post_process_semantic_segmentation:()=>d});var r=t("./src/utils/generic.js"),n=t("./src/utils/tensor.js"),a=t("./src/utils/maths.js");t("./src/utils/image.js");var s=t("./src/utils/core.js"),i=t("./src/utils/hub.js"),o=t("./src/utils/constants.js");function l(e,A,t=0,r=null){const n=e/A;let s=(0,a.bankers_round)(n)*A;return null!==r&&s>r&&(s=Math.floor(n)*A),s<t&&(s=Math.ceil(n)*A),s}function c([e,A],t){return[Math.max(Math.floor(e/t),1)*t,Math.max(Math.floor(A/t),1)*t]}function g([e,A,t,r]){return[e-t/2,A-r/2,e+t/2,A+r/2]}function u(e,A=.5,t=null,r=!1){const n=e.logits,s=e.pred_boxes,[i,o,l]=n.dims;if(null!==t&&t.length!==i)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let c=[];for(let e=0;e<i;++e){let i=null!==t?t[e]:null,u={boxes:[],classes:[],scores:[]},d=n[e],f=s[e];for(let e=0;e<o;++e){let t,n=d[e],s=[];if(r){t=n.sigmoid().data;for(let e=0;e<t.length;++e)t[e]>A&&s.push(e)}else{let e=(0,a.max)(n.data)[1];if(e===l-1)continue;if(t=(0,a.softmax)(n.data),t[e]<A)continue;s.push(e)}for(const A of s){let r=f[e].data;r=g(r),null!==i&&(r=r.map(((e,A)=>e*i[(A+1)%2]))),u.boxes.push(r),u.classes.push(A),u.scores.push(t[A])}}c.push(u)}return c}function d(e,A=null){const t=e.logits,r=t.dims[0];if(null!==A&&A.length!==r)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const a=[];for(let e=0;e<r;++e){const r=null!==A?A[e]:null;let s=t[e];null!==r&&(s=(0,n.interpolate)(s,r,"bilinear",!1));const[i,o]=r??s.dims.slice(-2),l=new n.Tensor("int32",new Int32Array(i*o),[i,o]),c=s[0].data,g=l.data;for(let e=1;e<s.dims[0];++e){const A=s[e].data;for(let t=0;t<A.length;++t)A[t]>c[t]&&(c[t]=A[t],g[t]=e)}const u=new Array(s.dims[0]);for(let e=0;e<g.length;++e){const A=g[e];u[A]=A}const d=u.filter((e=>void 0!==e));a.push({segmentation:l,labels:d})}return a}function f(e,A,t,r){const n=[],s=[],i=[];for(let o=0;o<e.dims[0];++o){const l=e[o],c=A[o],g=(0,a.max)(l.data)[1];if(g===r)continue;const u=(0,a.softmax)(l.data)[g];u>t&&(n.push(c),s.push(u),i.push(g))}return[n,s,i]}function p(e,A,t,r=.5,n=.8){const a=[];let s=0,i=0;const o=A[t].data;for(let A=0;A<e.length;++A)e[A]===t&&(a.push(A),++s),o[A]>=r&&++i;let l=s>0&&i>0;if(l){l=s/i>n}return[l,a]}function h(e,A,t,r,a,s=null,i=null){const[o,l]=i??e[0].dims,c=new n.Tensor("int32",new Int32Array(o*l),[o,l]),g=[];if(null!==i)for(let A=0;A<e.length;++A)e[A]=(0,n.interpolate)(e[A],i,"bilinear",!1);const u=new Int32Array(e[0].data.length),d=new Float32Array(e[0].data.length);for(let t=0;t<e.length;++t){let r=A[t];const n=e[t].data;for(let e=0;e<n.length;++e)n[e]*=r,n[e]>d[e]&&(u[e]=t,d[e]=n[e])}let f=0;const h=c.data;for(let n=0;n<t.length;++n){const s=t[n],[i,o]=p(u,e,n,r,a);if(i){++f;for(const e of o)h[e]=f;g.push({id:f,label_id:s,score:A[n]})}}return[c,g]}function m(e,A=.5,t=.5,r=.8,a=null,s=null){null===a&&(console.warn("`label_ids_to_fuse` unset. No instance will be fused."),a=new Set);const i=e.class_queries_logits??e.logits,o=(e.masks_queries_logits??e.pred_masks).sigmoid();let[l,c,g]=i.dims;if(g-=1,null!==s&&s.length!==l)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let u=[];for(let e=0;e<l;++e){let l=null!==s?s[e]:null,c=i[e],d=o[e],[p,m,C]=f(c,d,A,g);if(0===C.length){let[e,A]=l??d.dims.slice(-2),t=new n.Tensor("int32",new Int32Array(e*A).fill(-1),[e,A]);u.push({segmentation:t,segments_info:[]});continue}let[b,I]=h(p,m,C,t,r,a,l);u.push({segmentation:b,segments_info:I})}return u}function C(e,A=.5,t=null){throw new Error("`post_process_instance_segmentation` is not yet implemented.")}class b extends r.Callable{constructor(e){super(),this.image_mean=e.image_mean??e.mean,this.image_std=e.image_std??e.std,this.resample=e.resample??2,this.do_rescale=e.do_rescale??!0,this.rescale_factor=e.rescale_factor??1/255,this.do_normalize=e.do_normalize,this.do_thumbnail=e.do_thumbnail,this.size=e.size??e.image_size,this.do_resize=e.do_resize??void 0!==this.size,this.size_divisibility=e.size_divisibility??e.size_divisor,this.do_center_crop=e.do_center_crop,this.crop_size=e.crop_size,this.do_convert_rgb=e.do_convert_rgb??!0,this.do_crop_margin=e.do_crop_margin,this.pad_size=e.pad_size,this.do_pad=e.do_pad,this.min_pixels=e.min_pixels,this.max_pixels=e.max_pixels,this.do_pad&&!this.pad_size&&this.size&&void 0!==this.size.width&&void 0!==this.size.height&&(this.pad_size=this.size),this.do_flip_channel_order=e.do_flip_channel_order??!1,this.config=e}async thumbnail(e,A,t=2){const r=e.height,n=e.width,a=A.height,s=A.width;let i=Math.min(r,a),o=Math.min(n,s);return i===r&&o===n?e:(r>n?o=Math.floor(n*i/r):n>r&&(i=Math.floor(r*o/n)),await e.resize(o,i,{resample:t}))}async crop_margin(e,A=200){const t=e.clone().grayscale(),r=(0,a.min)(t.data)[0],n=(0,a.max)(t.data)[0]-r;if(0===n)return e;const s=A/255;let i=t.width,o=t.height,l=0,c=0;const g=t.data;for(let e=0;e<t.height;++e){const A=e*t.width;for(let a=0;a<t.width;++a)(g[A+a]-r)/n<s&&(i=Math.min(i,a),o=Math.min(o,e),l=Math.max(l,a),c=Math.max(c,e))}return e=await e.crop([i,o,l,c])}pad_image(e,A,t,{mode:r="constant",center:n=!1,constant_values:a=0}={}){const[i,o,l]=A;let c,g;if("number"==typeof t?(c=t,g=t):"square"===t?c=g=Math.max(i,o):(c=t.width,g=t.height),c!==o||g!==i){const t=new Float32Array(c*g*l);if(Array.isArray(a))for(let e=0;e<t.length;++e)t[e]=a[e%l];else 0!==a&&t.fill(a);const[u,d]=n?[Math.floor((c-o)/2),Math.floor((g-i)/2)]:[0,0];for(let A=0;A<i;++A){const r=(A+d)*c,n=A*o;for(let A=0;A<o;++A){const a=(r+A+u)*l,s=(n+A)*l;for(let A=0;A<l;++A)t[a+A]=e[s+A]}}if("symmetric"===r){if(n)throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");const A=i-1,r=o-1;for(let n=0;n<g;++n){const a=n*c,g=(0,s.calculateReflectOffset)(n,A)*o;for(let A=0;A<c;++A){if(n<i&&A<o)continue;const c=(a+A)*l,u=(g+(0,s.calculateReflectOffset)(A,r))*l;for(let A=0;A<l;++A)t[c+A]=e[u+A]}}}e=t,A=[g,c,l]}return[e,A]}rescale(e){for(let A=0;A<e.length;++A)e[A]=this.rescale_factor*e[A]}get_resize_output_image_size(e,A){const[t,r]=e.size;let n,a;if(this.do_thumbnail){const{height:e,width:t}=A;n=Math.min(e,t)}else Number.isInteger(A)?(n=A,a=this.config.max_size??n):void 0!==A&&(n=A.shortest_edge,a=A.longest_edge);if(void 0!==n||void 0!==a){const e=void 0===n?1:Math.max(n/t,n/r),A=t*e,s=r*e,i=void 0===a?1:Math.min(a/A,a/s);let o=Math.floor(Number((A*i).toFixed(2))),l=Math.floor(Number((s*i).toFixed(2)));return void 0!==this.size_divisibility&&([o,l]=c([o,l],this.size_divisibility)),[o,l]}if(void 0!==A&&void 0!==A.width&&void 0!==A.height){let e=A.width,n=A.height;if(this.config.keep_aspect_ratio&&this.config.ensure_multiple_of){let A=n/r,a=e/t;Math.abs(1-a)<Math.abs(1-A)?A=a:a=A,n=l(A*r,this.config.ensure_multiple_of),e=l(a*t,this.config.ensure_multiple_of)}return[e,n]}if(void 0!==this.size_divisibility)return c([t,r],this.size_divisibility);if(void 0!==this.min_pixels&&void 0!==this.max_pixels){return function(e,A,t=28,r=3136,n=1003520){if(e<t||A<t)throw new Error(`height:${e} or width:${A} must be larger than factor:${t}`);if(Math.max(e,A)/Math.min(e,A)>200)throw new Error("absolute aspect ratio must be smaller than 200, got "+Math.max(e,A)/Math.min(e,A));let a=Math.round(e/t)*t,s=Math.round(A/t)*t;if(a*s>n){const r=Math.sqrt(e*A/n);a=Math.floor(e/r/t)*t,s=Math.floor(A/r/t)*t}else if(a*s<r){const n=Math.sqrt(r/(e*A));a=Math.ceil(e*n/t)*t,s=Math.ceil(A*n/t)*t}return[a,s]}(r,t,this.config.patch_size*this.config.merge_size,this.min_pixels,this.max_pixels)}throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(A)}`)}async resize(e){const[A,t]=this.get_resize_output_image_size(e,this.size);return await e.resize(A,t,{resample:this.resample})}async preprocess(e,{do_normalize:A=null,do_pad:t=null,do_convert_rgb:r=null,do_convert_grayscale:a=null,do_flip_channel_order:s=null}={}){this.do_crop_margin&&(e=await this.crop_margin(e));const[i,o]=e.size;if(r??this.do_convert_rgb?e=e.rgb():a&&(e=e.grayscale()),this.do_resize&&(e=await this.resize(e)),this.do_thumbnail&&(e=await this.thumbnail(e,this.size,this.resample)),this.do_center_crop){let A,t;Number.isInteger(this.crop_size)?(A=this.crop_size,t=this.crop_size):(A=this.crop_size.width,t=this.crop_size.height),e=await e.center_crop(A,t)}const l=[e.height,e.width];let g=Float32Array.from(e.data),u=[e.height,e.width,e.channels];if(this.do_rescale&&this.rescale(g),A??this.do_normalize){let A=this.image_mean;Array.isArray(this.image_mean)||(A=new Array(e.channels).fill(A));let t=this.image_std;if(Array.isArray(this.image_std)||(t=new Array(e.channels).fill(A)),A.length!==e.channels||t.length!==e.channels)throw new Error(`When set to arrays, the length of \`image_mean\` (${A.length}) and \`image_std\` (${t.length}) must match the number of channels in the image (${e.channels}).`);for(let r=0;r<g.length;r+=e.channels)for(let n=0;n<e.channels;++n)g[r+n]=(g[r+n]-A[n])/t[n]}if(t??this.do_pad)if(this.pad_size){const A=this.pad_image(g,[e.height,e.width,e.channels],this.pad_size);[g,u]=A}else if(this.size_divisibility){const[e,A]=c([u[1],u[0]],this.size_divisibility);[g,u]=this.pad_image(g,u,{width:e,height:A})}if(s??this.do_flip_channel_order){if(3!==u[2])throw new Error("Flipping channel order is only supported for RGB images.");for(let e=0;e<g.length;e+=3){const A=g[e];g[e]=g[e+2],g[e+2]=A}}return{original_size:[o,i],reshaped_input_size:l,pixel_values:new n.Tensor("float32",g,u).permute(2,0,1)}}async _call(e,...A){Array.isArray(e)||(e=[e]);const t=await Promise.all(e.map((e=>this.preprocess(e)))),r=(0,n.stack)(t.map((e=>e.pixel_values)),0);return{pixel_values:r,original_sizes:t.map((e=>e.original_size)),reshaped_input_sizes:t.map((e=>e.reshaped_input_size))}}static async from_pretrained(e,A){return new this(await(0,i.getModelJSON)(e,o.IMAGE_PROCESSOR_NAME,!0,A))}}},"./src/base/processing_utils.js":(e,A,t)=>{t.r(A),t.d(A,{Processor:()=>s});var r=t("./src/utils/constants.js"),n=t("./src/utils/generic.js"),a=t("./src/utils/hub.js");class s extends n.Callable{static classes=["image_processor_class","tokenizer_class","feature_extractor_class"];static uses_processor_config=!1;constructor(e,A){super(),this.config=e,this.components=A}get image_processor(){return this.components.image_processor}get tokenizer(){return this.components.tokenizer}get feature_extractor(){return this.components.feature_extractor}apply_chat_template(e,A={}){if(!this.tokenizer)throw new Error("Unable to apply chat template without a tokenizer.");return this.tokenizer.apply_chat_template(e,{tokenize:!1,...A})}batch_decode(...e){if(!this.tokenizer)throw new Error("Unable to decode without a tokenizer.");return this.tokenizer.batch_decode(...e)}decode(...e){if(!this.tokenizer)throw new Error("Unable to decode without a tokenizer.");return this.tokenizer.decode(...e)}async _call(e,...A){for(const t of[this.image_processor,this.feature_extractor,this.tokenizer])if(t)return t(e,...A);throw new Error("No image processor, feature extractor, or tokenizer found.")}static async from_pretrained(e,A){const[t,n]=await Promise.all([this.uses_processor_config?(0,a.getModelJSON)(e,r.PROCESSOR_NAME,!0,A):{},Promise.all(this.classes.filter((e=>e in this)).map((async t=>{const r=await this[t].from_pretrained(e,A);return[t.replace(/_class$/,""),r]}))).then(Object.fromEntries)]);return new this(t,n)}}},"./src/configs.js":(e,A,t)=>{t.r(A),t.d(A,{AutoConfig:()=>o,PretrainedConfig:()=>i,getKeyValueShapes:()=>s});var r=t("./src/utils/core.js"),n=t("./src/utils/hub.js");function a(e){const A={};let t={};switch(e.model_type){case"llava":case"paligemma":case"gemma3":case"florence2":case"llava_onevision":case"idefics3":case"ultravox":case"smolvlm":t=a(e.text_config);break;case"moondream1":t=a(e.phi_config);break;case"musicgen":t=a(e.decoder);break;case"multi_modality":t=a(e.language_config);break;case"gpt2":case"gptj":case"jais":case"codegen":case"gpt_bigcode":A.num_heads="n_head",A.num_layers="n_layer",A.hidden_size="n_embd";break;case"gpt_neox":case"stablelm":case"opt":case"falcon":A.num_heads="num_attention_heads",A.num_layers="num_hidden_layers",A.hidden_size="hidden_size";break;case"llama":case"olmo":case"olmo2":case"mobilellm":case"granite":case"cohere":case"mistral":case"starcoder2":case"qwen2":case"qwen2_vl":case"phi":case"phi3":case"phi3_v":A.num_heads="num_key_value_heads",A.num_layers="num_hidden_layers",A.hidden_size="hidden_size",A.num_attention_heads="num_attention_heads";break;case"qwen3":case"gemma":case"gemma2":case"gemma3_text":case"glm":case"helium":A.num_heads="num_key_value_heads",A.num_layers="num_hidden_layers",A.dim_kv="head_dim";break;case"openelm":A.num_heads="num_kv_heads",A.num_layers="num_transformer_layers",A.dim_kv="head_dim";break;case"gpt_neo":case"donut-swin":A.num_heads="num_heads",A.num_layers="num_layers",A.hidden_size="hidden_size";break;case"bloom":A.num_heads="n_head",A.num_layers="n_layer",A.hidden_size="hidden_size";break;case"mpt":A.num_heads="n_heads",A.num_layers="n_layers",A.hidden_size="d_model";break;case"exaone":A.num_heads="num_key_value_heads",A.num_layers="num_layers",A.dim_kv="head_dim",A.num_attention_heads="num_attention_heads";break;case"t5":case"mt5":case"longt5":A.num_decoder_layers="num_decoder_layers",A.num_decoder_heads="num_heads",A.decoder_dim_kv="d_kv",A.num_encoder_layers="num_layers",A.num_encoder_heads="num_heads",A.encoder_dim_kv="d_kv";break;case"bart":case"mbart":case"marian":case"whisper":case"lite-whisper":case"m2m_100":case"blenderbot":case"blenderbot-small":case"florence2_language":A.num_decoder_layers="decoder_layers",A.num_decoder_heads="decoder_attention_heads",A.decoder_hidden_size="d_model",A.num_encoder_layers="encoder_layers",A.num_encoder_heads="encoder_attention_heads",A.encoder_hidden_size="d_model";break;case"speecht5":A.num_decoder_layers="decoder_layers",A.num_decoder_heads="decoder_attention_heads",A.decoder_hidden_size="hidden_size",A.num_encoder_layers="encoder_layers",A.num_encoder_heads="encoder_attention_heads",A.encoder_hidden_size="hidden_size";break;case"trocr":A.num_encoder_layers=A.num_decoder_layers="decoder_layers",A.num_encoder_heads=A.num_decoder_heads="decoder_attention_heads",A.encoder_hidden_size=A.decoder_hidden_size="d_model";break;case"musicgen_decoder":A.num_encoder_layers=A.num_decoder_layers="num_hidden_layers",A.num_encoder_heads=A.num_decoder_heads="num_attention_heads",A.encoder_hidden_size=A.decoder_hidden_size="hidden_size";break;case"moonshine":A.num_decoder_layers="decoder_num_hidden_layers",A.num_decoder_heads="decoder_num_key_value_heads",A.num_encoder_layers="encoder_num_hidden_layers",A.num_encoder_heads="encoder_num_key_value_heads",A.encoder_hidden_size=A.decoder_hidden_size="hidden_size";break;case"vision-encoder-decoder":const n=a(e.decoder),s="num_decoder_layers"in n,i=(0,r.pick)(e,["model_type","is_encoder_decoder"]);return s?(i.num_decoder_layers=n.num_decoder_layers,i.num_decoder_heads=n.num_decoder_heads,i.decoder_hidden_size=n.decoder_hidden_size,i.num_encoder_layers=n.num_encoder_layers,i.num_encoder_heads=n.num_encoder_heads,i.encoder_hidden_size=n.encoder_hidden_size):(i.num_layers=n.num_layers,i.num_heads=n.num_heads,i.hidden_size=n.hidden_size),i}const n={...t,...(0,r.pick)(e,["model_type","multi_query","is_encoder_decoder"])};for(const t in A)n[t]=e[A[t]];return n}function s(e,{prefix:A="past_key_values",batch_size:t=1}={}){const r={},n=e.normalized_config;if(n.is_encoder_decoder&&"num_encoder_heads"in n&&"num_decoder_heads"in n){const e=n.encoder_dim_kv??n.encoder_hidden_size/n.num_encoder_heads,a=n.decoder_dim_kv??n.decoder_hidden_size/n.num_decoder_heads,s=[t,n.num_encoder_heads,0,e],i=[t,n.num_decoder_heads,0,a];for(let e=0;e<n.num_decoder_layers;++e)r[`${A}.${e}.encoder.key`]=s,r[`${A}.${e}.encoder.value`]=s,r[`${A}.${e}.decoder.key`]=i,r[`${A}.${e}.decoder.value`]=i}else{const e=n.num_heads,a=n.num_layers,s=n.dim_kv??n.hidden_size/(n.num_attention_heads??e);if("falcon"===n.model_type){const n=[t*e,0,s];for(let e=0;e<a;++e)r[`${A}.${e}.key`]=n,r[`${A}.${e}.value`]=n}else if(n.multi_query){const n=[t*e,0,2*s];for(let e=0;e<a;++e)r[`${A}.${e}.key_value`]=n}else if("bloom"===n.model_type){const n=[t*e,s,0],i=[t*e,0,s];for(let e=0;e<a;++e)r[`${A}.${e}.key`]=n,r[`${A}.${e}.value`]=i}else if("openelm"===n.model_type)for(let n=0;n<a;++n){const a=[t,e[n],0,s];r[`${A}.${n}.key`]=a,r[`${A}.${n}.value`]=a}else{const n=[t,e,0,s];for(let e=0;e<a;++e)r[`${A}.${e}.key`]=n,r[`${A}.${e}.value`]=n}}return r}class i{model_type=null;is_encoder_decoder=!1;max_position_embeddings;"transformers.js_config";constructor(e){Object.assign(this,e),this.normalized_config=a(this)}static async from_pretrained(e,{progress_callback:A=null,config:t=null,cache_dir:r=null,local_files_only:a=!1,revision:s="main"}={}){!t||t instanceof i||(t=new i(t));const o=t??await async function(e,A){return await(0,n.getModelJSON)(e,"config.json",!0,A)}(e,{progress_callback:A,config:t,cache_dir:r,local_files_only:a,revision:s});return new this(o)}}class o{static async from_pretrained(...e){return i.from_pretrained(...e)}}},"./src/env.js":(e,A,t)=>{t.r(A),t.d(A,{apis:()=>p,env:()=>I});var r=t("?569f"),n=t("?3f59"),a=t("?154a");const s="undefined"!=typeof window&&void 0!==window.document,i="undefined"!=typeof self&&"DedicatedWorkerGlobalScope"===self.constructor?.name,o="undefined"!=typeof self&&"caches"in self,l="undefined"!=typeof navigator&&"gpu"in navigator,c="undefined"!=typeof navigator&&"ml"in navigator,g="undefined"!=typeof process,u=g&&"node"===process?.release?.name,d=!w(r),f=!w(n),p=Object.freeze({IS_BROWSER_ENV:s,IS_WEBWORKER_ENV:i,IS_WEB_CACHE_AVAILABLE:o,IS_WEBGPU_AVAILABLE:l,IS_WEBNN_AVAILABLE:c,IS_PROCESS_AVAILABLE:g,IS_NODE_ENV:u,IS_FS_AVAILABLE:d,IS_PATH_AVAILABLE:f}),h=d&&f;let m="./";if(h){const e=Object(import.meta).url;e?m=n.dirname(n.dirname(a.fileURLToPath(e))):"undefined"!=typeof __dirname&&(m=n.dirname(__dirname))}const C=h?n.join(m,"/.cache/"):null,b="/models/",I={version:"3.5.1",backends:{onnx:{}},allowRemoteModels:!0,remoteHost:"https://huggingface.co/",remotePathTemplate:"{model}/resolve/{revision}/",allowLocalModels:!(s||i),localModelPath:h?n.join(m,b):b,useFS:d,useBrowserCache:o,useFSCache:d,cacheDir:C,useCustomCache:!1,customCache:null};function w(e){return 0===Object.keys(e).length}},"./src/generation/configuration_utils.js":(e,A,t)=>{t.r(A),t.d(A,{GenerationConfig:()=>n});var r=t("./src/utils/core.js");class n{max_length=20;max_new_tokens=null;min_length=0;min_new_tokens=null;early_stopping=!1;max_time=null;do_sample=!1;num_beams=1;num_beam_groups=1;penalty_alpha=null;use_cache=!0;temperature=1;top_k=50;top_p=1;typical_p=1;epsilon_cutoff=0;eta_cutoff=0;diversity_penalty=0;repetition_penalty=1;encoder_repetition_penalty=1;length_penalty=1;no_repeat_ngram_size=0;bad_words_ids=null;force_words_ids=null;renormalize_logits=!1;constraints=null;forced_bos_token_id=null;forced_eos_token_id=null;remove_invalid_values=!1;exponential_decay_length_penalty=null;suppress_tokens=null;streamer=null;begin_suppress_tokens=null;forced_decoder_ids=null;guidance_scale=null;num_return_sequences=1;output_attentions=!1;output_hidden_states=!1;output_scores=!1;return_dict_in_generate=!1;pad_token_id=null;bos_token_id=null;eos_token_id=null;encoder_no_repeat_ngram_size=0;decoder_start_token_id=null;generation_kwargs={};constructor(e){Object.assign(this,(0,r.pick)(e,Object.getOwnPropertyNames(this)))}}},"./src/generation/logits_process.js":(e,A,t)=>{t.r(A),t.d(A,{ClassifierFreeGuidanceLogitsProcessor:()=>m,ForcedBOSTokenLogitsProcessor:()=>o,ForcedEOSTokenLogitsProcessor:()=>l,LogitsProcessor:()=>a,LogitsProcessorList:()=>i,LogitsWarper:()=>s,MinLengthLogitsProcessor:()=>f,MinNewTokensLengthLogitsProcessor:()=>p,NoBadWordsLogitsProcessor:()=>h,NoRepeatNGramLogitsProcessor:()=>u,RepetitionPenaltyLogitsProcessor:()=>d,SuppressTokensAtBeginLogitsProcessor:()=>c,TemperatureLogitsWarper:()=>C,TopKLogitsWarper:()=>I,TopPLogitsWarper:()=>b,WhisperTimeStampLogitsProcessor:()=>g});var r=t("./src/utils/generic.js");t("./src/utils/tensor.js");var n=t("./src/utils/maths.js");class a extends r.Callable{_call(e,A){throw Error("`_call` should be implemented in a subclass")}}class s extends r.Callable{_call(e,A){throw Error("`_call` should be implemented in a subclass")}}class i extends r.Callable{constructor(){super(),this.processors=[]}push(e){this.processors.push(e)}extend(e){this.processors.push(...e)}_call(e,A){let t=A;for(const A of this.processors)t=A(e,t);return t}[Symbol.iterator](){return this.processors.values()}}class o extends a{constructor(e){super(),this.bos_token_id=e}_call(e,A){for(let t=0;t<e.length;++t)if(1===e[t].length){const e=A[t].data;e.fill(-1/0),e[this.bos_token_id]=0}return A}}class l extends a{constructor(e,A){super(),this.max_length=e,this.eos_token_id=Array.isArray(A)?A:[A]}_call(e,A){for(let t=0;t<e.length;++t)if(e[t].length===this.max_length-1){const e=A[t].data;e.fill(-1/0);for(const A of this.eos_token_id)e[A]=0}return A}}class c extends a{constructor(e,A){super(),this.begin_suppress_tokens=e,this.begin_index=A}_call(e,A){for(let t=0;t<e.length;++t)if(e[t].length===this.begin_index){const e=A[t].data;for(const A of this.begin_suppress_tokens)e[A]=-1/0}return A}}class g extends a{constructor(e,A){super(),this.eos_token_id=Array.isArray(e.eos_token_id)?e.eos_token_id[0]:e.eos_token_id,this.no_timestamps_token_id=e.no_timestamps_token_id,this.timestamp_begin=this.no_timestamps_token_id+1,this.begin_index=A.length,A.at(-1)===this.no_timestamps_token_id&&(this.begin_index-=1),this.max_initial_timestamp_index=e.max_initial_timestamp_index}_call(e,A){for(let t=0;t<e.length;++t){const r=A[t].data;if(r[this.no_timestamps_token_id]=-1/0,e[t].length===this.begin_index-1){r.fill(-1/0),r[this.timestamp_begin]=0;continue}const a=e[t].slice(this.begin_index),s=a.length>=1&&a[a.length-1]>=this.timestamp_begin,i=a.length<2||a[a.length-2]>=this.timestamp_begin;if(s&&(i?r.subarray(this.timestamp_begin).fill(-1/0):r.subarray(0,this.eos_token_id).fill(-1/0)),e[t].length===this.begin_index&&null!==this.max_initial_timestamp_index){const e=this.timestamp_begin+this.max_initial_timestamp_index;r.subarray(e+1).fill(-1/0)}const o=(0,n.log_softmax)(r),l=Math.log(o.subarray(this.timestamp_begin).map(Math.exp).reduce(((e,A)=>e+A)));l>(0,n.max)(o.subarray(0,this.timestamp_begin))[0]&&r.subarray(0,this.timestamp_begin).fill(-1/0)}return A}}class u extends a{constructor(e){super(),this.no_repeat_ngram_size=e}getNgrams(e){const A=e.length,t=[];for(let r=0;r<A+1-this.no_repeat_ngram_size;++r){const A=[];for(let t=0;t<this.no_repeat_ngram_size;++t)A.push(e[r+t]);t.push(A.map(Number))}const r=new Map;for(const e of t){const A=e.slice(0,e.length-1),t=JSON.stringify(A),n=r.get(t)??[];n.push(e[e.length-1]),r.set(t,n)}return r}getGeneratedNgrams(e,A){const t=A.slice(A.length+1-this.no_repeat_ngram_size,A.length);return e.get(JSON.stringify(t.map(Number)))??[]}calcBannedNgramTokens(e){const A=[];if(e.length+1<this.no_repeat_ngram_size)return A;{const A=this.getNgrams(e);return this.getGeneratedNgrams(A,e)}}_call(e,A){for(let t=0;t<e.length;++t){const r=A[t].data,n=this.calcBannedNgramTokens(e[t]);for(const e of n)r[e]=-1/0}return A}}class d extends a{constructor(e){super(),this.penalty=e}_call(e,A){for(let t=0;t<e.length;++t){const r=A[t].data;for(const A of new Set(e[t])){const e=Number(A);r[e]<0?r[e]*=this.penalty:r[e]/=this.penalty}}return A}}class f extends a{constructor(e,A){super(),this.min_length=e,this.eos_token_id=Array.isArray(A)?A:[A]}_call(e,A){for(let t=0;t<e.length;++t)if(e[t].length<this.min_length){const e=A[t].data;for(const A of this.eos_token_id)e[A]=-1/0}return A}}class p extends a{constructor(e,A,t){super(),this.prompt_length_to_skip=e,this.min_new_tokens=A,this.eos_token_id=Array.isArray(t)?t:[t]}_call(e,A){for(let t=0;t<e.length;++t){if(e[t].length-this.prompt_length_to_skip<this.min_new_tokens){const e=A[t].data;for(const A of this.eos_token_id)e[A]=-1/0}}return A}}class h extends a{constructor(e,A){super(),this.bad_words_ids=e,this.eos_token_id=Array.isArray(A)?A:[A]}_call(e,A){for(let t=0;t<e.length;++t){const r=A[t].data,n=e[t];for(const e of this.bad_words_ids){if(n.length<e.length-1)continue;let A=!0;for(let t=1;t<=e.length-1;++t)if(e.at(-t-1)!=n.at(-t)){A=!1;break}A&&(r[e.at(-1)]=-1/0)}}return A}}class m extends a{constructor(e){if(super(),e<=1)throw new Error(`Require guidance scale >1 to use the classifier free guidance processor, got guidance scale ${e}.`);this.guidance_scale=e}_call(e,A){if(A.dims[0]!==2*e.length)throw new Error(`Logits should have twice the batch size of the input ids, the first half of batches corresponding to the conditional inputs, and the second half of batches corresponding to the unconditional inputs. Got batch size ${A.dims[0]} for the logits and ${e.length} for the input ids.`);const t=e.length,r=A.slice([0,t],null),n=A.slice([t,A.dims[0]],null);for(let e=0;e<n.data.length;++e)n.data[e]+=(r.data[e]-n.data[e])*this.guidance_scale;return n}}class C extends s{constructor(e){super(),this.temperature=e}_call(e,A){const t=A.data;for(let e=0;e<t.length;++e)t[e]/=this.temperature;return A}}class b extends s{constructor(e,{filter_value:A=-1/0,min_tokens_to_keep:t=1}={}){if(super(),e<0||e>1)throw new Error(`\`top_p\` must be a float > 0 and < 1, but is ${e}`);if(!Number.isInteger(t)||t<1)throw new Error(`\`min_tokens_to_keep\` must be a positive integer, but is ${t}`);this.top_p=e,this.filter_value=A,this.min_tokens_to_keep=t}}class I extends s{constructor(e,{filter_value:A=-1/0,min_tokens_to_keep:t=1}={}){if(super(),!Number.isInteger(e)||e<0)throw new Error(`\`top_k\` must be a positive integer, but is ${e}`);this.top_k=Math.max(e,t),this.filter_value=A}}},"./src/generation/logits_sampler.js":(e,A,t)=>{t.r(A),t.d(A,{LogitsSampler:()=>s});var r=t("./src/utils/generic.js"),n=t("./src/utils/tensor.js"),a=t("./src/utils/maths.js");t("./src/generation/configuration_utils.js");class s extends r.Callable{constructor(e){super(),this.generation_config=e}async _call(e){return this.sample(e)}async sample(e){throw Error("sample should be implemented in subclasses.")}getLogits(e,A){let t=e.dims.at(-1),r=e.data;if(-1===A)r=r.slice(-t);else{let e=A*t;r=r.slice(e,e+t)}return r}randomSelect(e){let A=0;for(let t=0;t<e.length;++t)A+=e[t];let t=Math.random()*A;for(let A=0;A<e.length;++A)if(t-=e[A],t<=0)return A;return 0}static getSampler(e){if(e.do_sample)return new o(e);if(e.num_beams>1)return new l(e);if(e.num_return_sequences>1)throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${e.num_return_sequences}.`);return new i(e)}}class i extends s{async sample(e){const A=(0,a.max)(e.data)[1];return[[BigInt(A),0]]}}class o extends s{async sample(e){let A=e.dims.at(-1);this.generation_config.top_k>0&&(A=Math.min(this.generation_config.top_k,A));const[t,r]=await(0,n.topk)(e,A),s=(0,a.softmax)(t.data);return Array.from({length:this.generation_config.num_beams},(()=>{const e=this.randomSelect(s);return[r.data[e],Math.log(s[e])]}))}}class l extends s{async sample(e){let A=e.dims.at(-1);this.generation_config.top_k>0&&(A=Math.min(this.generation_config.top_k,A));const[t,r]=await(0,n.topk)(e,A),s=(0,a.softmax)(t.data);return Array.from({length:this.generation_config.num_beams},((e,A)=>[r.data[A],Math.log(s[A])]))}}},"./src/generation/stopping_criteria.js":(e,A,t)=>{t.r(A),t.d(A,{EosTokenCriteria:()=>i,InterruptableStoppingCriteria:()=>o,MaxLengthCriteria:()=>s,StoppingCriteria:()=>n,StoppingCriteriaList:()=>a});var r=t("./src/utils/generic.js");class n extends r.Callable{_call(e,A){throw Error("StoppingCriteria needs to be subclassed")}}class a extends r.Callable{constructor(){super(),this.criteria=[]}push(e){this.criteria.push(e)}extend(e){e instanceof a?e=e.criteria:e instanceof n&&(e=[e]),this.criteria.push(...e)}_call(e,A){const t=new Array(e.length).fill(!1);for(const r of this.criteria){const n=r(e,A);for(let e=0;e<t.length;++e)t[e]||=n[e]}return t}[Symbol.iterator](){return this.criteria.values()}}class s extends n{constructor(e,A=null){super(),this.max_length=e,this.max_position_embeddings=A}_call(e){return e.map((e=>e.length>=this.max_length))}}class i extends n{constructor(e){super(),Array.isArray(e)||(e=[e]),this.eos_token_id=e}_call(e,A){return e.map((e=>{const A=e.at(-1);return this.eos_token_id.some((e=>A==e))}))}}class o extends n{constructor(){super(),this.interrupted=!1}interrupt(){this.interrupted=!0}reset(){this.interrupted=!1}_call(e,A){return new Array(e.length).fill(this.interrupted)}}},"./src/generation/streamers.js":(e,A,t)=>{t.r(A),t.d(A,{BaseStreamer:()=>s,TextStreamer:()=>o,WhisperTextStreamer:()=>l});var r=t("./src/utils/core.js"),n=t("./src/tokenizers.js"),a=t("./src/env.js");class s{put(e){throw Error("Not implemented")}end(){throw Error("Not implemented")}}const i=a.apis.IS_PROCESS_AVAILABLE?e=>process.stdout.write(e):e=>console.log(e);class o extends s{constructor(e,{skip_prompt:A=!1,callback_function:t=null,token_callback_function:r=null,skip_special_tokens:n=!0,decode_kwargs:a={},...s}={}){super(),this.tokenizer=e,this.skip_prompt=A,this.callback_function=t??i,this.token_callback_function=r,this.decode_kwargs={skip_special_tokens:n,...a,...s},this.token_cache=[],this.print_len=0,this.next_tokens_are_prompt=!0}put(e){if(e.length>1)throw Error("TextStreamer only supports batch size of 1");const A=this.next_tokens_are_prompt;if(A&&(this.next_tokens_are_prompt=!1,this.skip_prompt))return;const t=e[0];this.token_callback_function?.(t),this.token_cache=(0,r.mergeArrays)(this.token_cache,t);const a=this.tokenizer.decode(this.token_cache,this.decode_kwargs);let s;A||a.endsWith("\n")?(s=a.slice(this.print_len),this.token_cache=[],this.print_len=0):a.length>0&&(0,n.is_chinese_char)(a.charCodeAt(a.length-1))?(s=a.slice(this.print_len),this.print_len+=s.length):(s=a.slice(this.print_len,a.lastIndexOf(" ")+1),this.print_len+=s.length),this.on_finalized_text(s,!1)}end(){let e;if(this.token_cache.length>0){e=this.tokenizer.decode(this.token_cache,this.decode_kwargs).slice(this.print_len),this.token_cache=[],this.print_len=0}else e="";this.next_tokens_are_prompt=!0,this.on_finalized_text(e,!0)}on_finalized_text(e,A){e.length>0&&this.callback_function?.(e),A&&this.callback_function===i&&a.apis.IS_PROCESS_AVAILABLE&&this.callback_function?.("\n")}}class l extends o{constructor(e,{skip_prompt:A=!1,callback_function:t=null,token_callback_function:r=null,on_chunk_start:n=null,on_chunk_end:a=null,on_finalize:s=null,time_precision:i=.02,skip_special_tokens:o=!0,decode_kwargs:l={}}={}){super(e,{skip_prompt:A,skip_special_tokens:o,callback_function:t,token_callback_function:r,decode_kwargs:l}),this.timestamp_begin=e.timestamp_begin,this.on_chunk_start=n,this.on_chunk_end=a,this.on_finalize=s,this.time_precision=i,this.waiting_for_timestamp=!1}put(e){if(e.length>1)throw Error("WhisperTextStreamer only supports batch size of 1");const A=e[0];if(1===A.length){const t=Number(A[0])-this.timestamp_begin;if(t>=0){const A=t*this.time_precision;this.waiting_for_timestamp?this.on_chunk_end?.(A):this.on_chunk_start?.(A),this.waiting_for_timestamp=!this.waiting_for_timestamp,e=[[]]}}return super.put(e)}end(){super.end(),this.on_finalize?.()}}},"./src/models.js":(e,A,t)=>{t.r(A),t.d(A,{ASTForAudioClassification:()=>kt,ASTModel:()=>wt,ASTPreTrainedModel:()=>It,AlbertForMaskedLM:()=>QA,AlbertForQuestionAnswering:()=>DA,AlbertForSequenceClassification:()=>GA,AlbertModel:()=>MA,AlbertPreTrainedModel:()=>EA,AutoModel:()=>rc,AutoModelForAudioClassification:()=>kc,AutoModelForAudioFrameClassification:()=>vc,AutoModelForAudioTextToText:()=>Pc,AutoModelForCTC:()=>wc,AutoModelForCausalLM:()=>cc,AutoModelForDepthEstimation:()=>Mc,AutoModelForDocumentQuestionAnswering:()=>Bc,AutoModelForImageClassification:()=>fc,AutoModelForImageFeatureExtraction:()=>Qc,AutoModelForImageMatting:()=>yc,AutoModelForImageSegmentation:()=>pc,AutoModelForImageTextToText:()=>Tc,AutoModelForImageToImage:()=>Ec,AutoModelForMaskGeneration:()=>Ic,AutoModelForMaskedLM:()=>gc,AutoModelForNormalEstimation:()=>Gc,AutoModelForObjectDetection:()=>Cc,AutoModelForPoseEstimation:()=>Dc,AutoModelForQuestionAnswering:()=>uc,AutoModelForSemanticSegmentation:()=>hc,AutoModelForSeq2SeqLM:()=>sc,AutoModelForSequenceClassification:()=>nc,AutoModelForSpeechSeq2Seq:()=>ic,AutoModelForTextToSpectrogram:()=>oc,AutoModelForTextToWaveform:()=>lc,AutoModelForTokenClassification:()=>ac,AutoModelForUniversalSegmentation:()=>mc,AutoModelForVision2Seq:()=>dc,AutoModelForXVector:()=>xc,AutoModelForZeroShotObjectDetection:()=>bc,BartForConditionalGeneration:()=>jA,BartForSequenceClassification:()=>VA,BartModel:()=>RA,BartPretrainedModel:()=>HA,BaseModelOutput:()=>ne,BeitForImageClassification:()=>ka,BeitModel:()=>wa,BeitPreTrainedModel:()=>Ia,BertForMaskedLM:()=>ie,BertForQuestionAnswering:()=>ce,BertForSequenceClassification:()=>oe,BertForTokenClassification:()=>le,BertModel:()=>se,BertPreTrainedModel:()=>ae,BlenderbotForConditionalGeneration:()=>_A,BlenderbotModel:()=>JA,BlenderbotPreTrainedModel:()=>qA,BlenderbotSmallForConditionalGeneration:()=>At,BlenderbotSmallModel:()=>et,BlenderbotSmallPreTrainedModel:()=>$A,BloomForCausalLM:()=>Tn,BloomModel:()=>Qn,BloomPreTrainedModel:()=>Dn,CLIPModel:()=>Wt,CLIPPreTrainedModel:()=>Vt,CLIPSegForImageSegmentation:()=>or,CLIPSegModel:()=>ir,CLIPSegPreTrainedModel:()=>sr,CLIPTextModel:()=>Ut,CLIPTextModelWithProjection:()=>Kt,CLIPVisionModel:()=>Zt,CLIPVisionModelWithProjection:()=>Xt,CamembertForMaskedLM:()=>Oe,CamembertForQuestionAnswering:()=>He,CamembertForSequenceClassification:()=>Le,CamembertForTokenClassification:()=>Ye,CamembertModel:()=>Ne,CamembertPreTrainedModel:()=>Se,CausalLMOutput:()=>Yc,CausalLMOutputWithPast:()=>Hc,ChineseCLIPModel:()=>Ar,ChineseCLIPPreTrainedModel:()=>er,ClapAudioModelWithProjection:()=>so,ClapModel:()=>no,ClapPreTrainedModel:()=>ro,ClapTextModelWithProjection:()=>ao,CodeGenForCausalLM:()=>Gr,CodeGenModel:()=>Mr,CodeGenPreTrainedModel:()=>Er,CohereForCausalLM:()=>tn,CohereModel:()=>An,CoherePreTrainedModel:()=>en,ConvBertForMaskedLM:()=>ye,ConvBertForQuestionAnswering:()=>Ge,ConvBertForSequenceClassification:()=>Ee,ConvBertForTokenClassification:()=>Me,ConvBertModel:()=>Be,ConvBertPreTrainedModel:()=>ve,ConvNextForImageClassification:()=>Fs,ConvNextModel:()=>zs,ConvNextPreTrainedModel:()=>Ps,ConvNextV2ForImageClassification:()=>Os,ConvNextV2Model:()=>Ns,ConvNextV2PreTrainedModel:()=>Ss,DFineForObjectDetection:()=>ja,DFineModel:()=>Ra,DFinePreTrainedModel:()=>Ha,DPTForDepthEstimation:()=>us,DPTModel:()=>gs,DPTPreTrainedModel:()=>cs,DacDecoderModel:()=>ul,DacDecoderOutput:()=>ll,DacEncoderModel:()=>gl,DacEncoderOutput:()=>ol,DacModel:()=>cl,DacPreTrainedModel:()=>il,DebertaForMaskedLM:()=>Ve,DebertaForQuestionAnswering:()=>Ke,DebertaForSequenceClassification:()=>We,DebertaForTokenClassification:()=>Ue,DebertaModel:()=>je,DebertaPreTrainedModel:()=>Re,DebertaV2ForMaskedLM:()=>qe,DebertaV2ForQuestionAnswering:()=>$e,DebertaV2ForSequenceClassification:()=>Je,DebertaV2ForTokenClassification:()=>_e,DebertaV2Model:()=>Xe,DebertaV2PreTrainedModel:()=>Ze,DecisionTransformerModel:()=>Ho,DecisionTransformerPreTrainedModel:()=>Yo,DeiTForImageClassification:()=>qa,DeiTModel:()=>Xa,DeiTPreTrainedModel:()=>Za,DepthAnythingForDepthEstimation:()=>fs,DepthAnythingPreTrainedModel:()=>ds,DepthProForDepthEstimation:()=>Is,DepthProPreTrainedModel:()=>bs,DetrForObjectDetection:()=>Ba,DetrForSegmentation:()=>ya,DetrModel:()=>va,DetrObjectDetectionOutput:()=>Ea,DetrPreTrainedModel:()=>xa,DetrSegmentationOutput:()=>Ma,Dinov2ForImageClassification:()=>Hs,Dinov2Model:()=>Ys,Dinov2PreTrainedModel:()=>Ls,Dinov2WithRegistersForImageClassification:()=>Vs,Dinov2WithRegistersModel:()=>js,Dinov2WithRegistersPreTrainedModel:()=>Rs,DistilBertForMaskedLM:()=>aA,DistilBertForQuestionAnswering:()=>nA,DistilBertForSequenceClassification:()=>tA,DistilBertForTokenClassification:()=>rA,DistilBertModel:()=>AA,DistilBertPreTrainedModel:()=>eA,DonutSwinModel:()=>Ts,DonutSwinPreTrainedModel:()=>Qs,EfficientNetForImageClassification:()=>bo,EfficientNetModel:()=>Co,EfficientNetPreTrainedModel:()=>mo,ElectraForMaskedLM:()=>Te,ElectraForQuestionAnswering:()=>Fe,ElectraForSequenceClassification:()=>Pe,ElectraForTokenClassification:()=>ze,ElectraModel:()=>Qe,ElectraPreTrainedModel:()=>De,EsmForMaskedLM:()=>oA,EsmForSequenceClassification:()=>lA,EsmForTokenClassification:()=>cA,EsmModel:()=>iA,EsmPreTrainedModel:()=>sA,ExaoneForCausalLM:()=>Hr,ExaoneModel:()=>Yr,ExaonePreTrainedModel:()=>Lr,FalconForCausalLM:()=>to,FalconModel:()=>Ao,FalconPreTrainedModel:()=>eo,FastViTForImageClassification:()=>aa,FastViTModel:()=>na,FastViTPreTrainedModel:()=>ra,Florence2ForConditionalGeneration:()=>St,Florence2PreTrainedModel:()=>Ft,GLPNForDepthEstimation:()=>Ds,GLPNModel:()=>Gs,GLPNPreTrainedModel:()=>Ms,GPT2LMHeadModel:()=>gr,GPT2Model:()=>cr,GPT2PreTrainedModel:()=>lr,GPTBigCodeForCausalLM:()=>yr,GPTBigCodeModel:()=>Br,GPTBigCodePreTrainedModel:()=>vr,GPTJForCausalLM:()=>xr,GPTJModel:()=>kr,GPTJPreTrainedModel:()=>wr,GPTNeoForCausalLM:()=>mr,GPTNeoModel:()=>hr,GPTNeoPreTrainedModel:()=>pr,GPTNeoXForCausalLM:()=>Ir,GPTNeoXModel:()=>br,GPTNeoXPreTrainedModel:()=>Cr,Gemma2ForCausalLM:()=>ln,Gemma2Model:()=>on,Gemma2PreTrainedModel:()=>sn,Gemma3ForCausalLM:()=>un,Gemma3Model:()=>gn,Gemma3PreTrainedModel:()=>cn,GemmaForCausalLM:()=>an,GemmaModel:()=>nn,GemmaPreTrainedModel:()=>rn,GlmForCausalLM:()=>Or,GlmModel:()=>Nr,GlmPreTrainedModel:()=>Sr,GraniteForCausalLM:()=>$r,GraniteModel:()=>_r,GranitePreTrainedModel:()=>Jr,GroundingDinoForObjectDetection:()=>Us,GroundingDinoPreTrainedModel:()=>Ws,GroupViTModel:()=>ta,GroupViTPreTrainedModel:()=>Aa,HeliumForCausalLM:()=>Fr,HeliumModel:()=>zr,HeliumPreTrainedModel:()=>Pr,HieraForImageClassification:()=>$a,HieraModel:()=>_a,HieraPreTrainedModel:()=>Ja,HubertForCTC:()=>Qi,HubertForSequenceClassification:()=>Ti,HubertModel:()=>Di,HubertPreTrainedModel:()=>Gi,IJepaForImageClassification:()=>Vn,IJepaModel:()=>jn,IJepaPreTrainedModel:()=>Rn,Idefics3ForConditionalGeneration:()=>Yt,Idefics3PreTrainedModel:()=>Lt,ImageMattingOutput:()=>Rc,JAISLMHeadModel:()=>fr,JAISModel:()=>dr,JAISPreTrainedModel:()=>ur,JinaCLIPModel:()=>rr,JinaCLIPPreTrainedModel:()=>tr,JinaCLIPTextModel:()=>nr,JinaCLIPVisionModel:()=>ar,LiteWhisperForConditionalGeneration:()=>yt,LlamaForCausalLM:()=>Tr,LlamaModel:()=>Qr,LlamaPreTrainedModel:()=>Dr,LlavaForConditionalGeneration:()=>Tt,LlavaOnevisionForConditionalGeneration:()=>Pt,LlavaPreTrainedModel:()=>Qt,LongT5ForConditionalGeneration:()=>NA,LongT5Model:()=>SA,LongT5PreTrainedModel:()=>FA,M2M100ForConditionalGeneration:()=>ai,M2M100Model:()=>ni,M2M100PreTrainedModel:()=>ri,MBartForCausalLM:()=>XA,MBartForConditionalGeneration:()=>KA,MBartForSequenceClassification:()=>ZA,MBartModel:()=>UA,MBartPreTrainedModel:()=>WA,MPNetForMaskedLM:()=>CA,MPNetForQuestionAnswering:()=>wA,MPNetForSequenceClassification:()=>bA,MPNetForTokenClassification:()=>IA,MPNetModel:()=>mA,MPNetPreTrainedModel:()=>hA,MT5ForConditionalGeneration:()=>YA,MT5Model:()=>LA,MT5PreTrainedModel:()=>OA,MarianMTModel:()=>ti,MarianModel:()=>Ai,MarianPreTrainedModel:()=>ei,MaskFormerForInstanceSegmentation:()=>Es,MaskFormerModel:()=>ys,MaskFormerPreTrainedModel:()=>Bs,MaskedLMOutput:()=>Oc,Metric3DForDepthEstimation:()=>ks,Metric3DPreTrainedModel:()=>ws,Metric3Dv2ForDepthEstimation:()=>vs,Metric3Dv2PreTrainedModel:()=>xs,MgpstrForSceneTextRecognition:()=>Uo,MgpstrModelOutput:()=>Vo,MgpstrPreTrainedModel:()=>Wo,MimiDecoderModel:()=>sl,MimiDecoderOutput:()=>rl,MimiEncoderModel:()=>al,MimiEncoderOutput:()=>tl,MimiModel:()=>nl,MimiPreTrainedModel:()=>Al,MistralForCausalLM:()=>qi,MistralModel:()=>Xi,MistralPreTrainedModel:()=>Zi,MobileBertForMaskedLM:()=>dA,MobileBertForQuestionAnswering:()=>pA,MobileBertForSequenceClassification:()=>fA,MobileBertModel:()=>uA,MobileBertPreTrainedModel:()=>gA,MobileLLMForCausalLM:()=>Vr,MobileLLMModel:()=>jr,MobileLLMPreTrainedModel:()=>Rr,MobileNetV1ForImageClassification:()=>yo,MobileNetV1ForSemanticSegmentation:()=>Eo,MobileNetV1Model:()=>Bo,MobileNetV1PreTrainedModel:()=>vo,MobileNetV2ForImageClassification:()=>Do,MobileNetV2ForSemanticSegmentation:()=>Qo,MobileNetV2Model:()=>Go,MobileNetV2PreTrainedModel:()=>Mo,MobileNetV3ForImageClassification:()=>zo,MobileNetV3ForSemanticSegmentation:()=>Fo,MobileNetV3Model:()=>Po,MobileNetV3PreTrainedModel:()=>To,MobileNetV4ForImageClassification:()=>Oo,MobileNetV4ForSemanticSegmentation:()=>Lo,MobileNetV4Model:()=>No,MobileNetV4PreTrainedModel:()=>So,MobileViTForImageClassification:()=>ca,MobileViTModel:()=>la,MobileViTPreTrainedModel:()=>oa,MobileViTV2ForImageClassification:()=>da,MobileViTV2Model:()=>ua,MobileViTV2PreTrainedModel:()=>ga,ModelOutput:()=>re,ModernBertForMaskedLM:()=>de,ModernBertForSequenceClassification:()=>fe,ModernBertForTokenClassification:()=>pe,ModernBertModel:()=>ue,ModernBertPreTrainedModel:()=>ge,Moondream1ForConditionalGeneration:()=>zt,MoonshineForConditionalGeneration:()=>Gt,MoonshineModel:()=>Mt,MoonshinePreTrainedModel:()=>Et,MptForCausalLM:()=>Fn,MptModel:()=>zn,MptPreTrainedModel:()=>Pn,MultiModalityCausalLM:()=>jo,MultiModalityPreTrainedModel:()=>Ro,MusicgenForCausalLM:()=>ko,MusicgenForConditionalGeneration:()=>xo,MusicgenModel:()=>wo,MusicgenPreTrainedModel:()=>Io,NomicBertModel:()=>me,NomicBertPreTrainedModel:()=>he,OPTForCausalLM:()=>On,OPTModel:()=>Nn,OPTPreTrainedModel:()=>Sn,Olmo2ForCausalLM:()=>qr,Olmo2Model:()=>Xr,Olmo2PreTrainedModel:()=>Zr,OlmoForCausalLM:()=>Kr,OlmoModel:()=>Ur,OlmoPreTrainedModel:()=>Wr,OpenELMForCausalLM:()=>pn,OpenELMModel:()=>fn,OpenELMPreTrainedModel:()=>dn,OwlViTForObjectDetection:()=>ha,OwlViTModel:()=>pa,OwlViTPreTrainedModel:()=>fa,Owlv2ForObjectDetection:()=>ba,Owlv2Model:()=>Ca,Owlv2PreTrainedModel:()=>ma,PaliGemmaForConditionalGeneration:()=>Ot,PaliGemmaPreTrainedModel:()=>Nt,PatchTSMixerForPrediction:()=>_o,PatchTSMixerModel:()=>Jo,PatchTSMixerPreTrainedModel:()=>qo,PatchTSTForPrediction:()=>Xo,PatchTSTModel:()=>Zo,PatchTSTPreTrainedModel:()=>Ko,Phi3ForCausalLM:()=>Gn,Phi3Model:()=>Mn,Phi3PreTrainedModel:()=>En,Phi3VForCausalLM:()=>jt,Phi3VPreTrainedModel:()=>Rt,PhiForCausalLM:()=>yn,PhiModel:()=>Bn,PhiPreTrainedModel:()=>vn,PreTrainedModel:()=>te,PretrainedMixin:()=>ml,PvtForImageClassification:()=>Xn,PvtModel:()=>Zn,PvtPreTrainedModel:()=>Kn,PyAnnoteForAudioFrameClassification:()=>di,PyAnnoteModel:()=>ui,PyAnnotePreTrainedModel:()=>gi,QuestionAnsweringModelOutput:()=>Lc,Qwen2ForCausalLM:()=>Cn,Qwen2Model:()=>mn,Qwen2PreTrainedModel:()=>hn,Qwen2VLForConditionalGeneration:()=>xn,Qwen2VLPreTrainedModel:()=>kn,Qwen3ForCausalLM:()=>wn,Qwen3Model:()=>In,Qwen3PreTrainedModel:()=>bn,RFDetrForObjectDetection:()=>La,RFDetrModel:()=>Oa,RFDetrObjectDetectionOutput:()=>Ya,RFDetrPreTrainedModel:()=>Na,RTDetrForObjectDetection:()=>Qa,RTDetrModel:()=>Da,RTDetrObjectDetectionOutput:()=>Ta,RTDetrPreTrainedModel:()=>Ga,RTDetrV2ForObjectDetection:()=>Fa,RTDetrV2Model:()=>za,RTDetrV2ObjectDetectionOutput:()=>Sa,RTDetrV2PreTrainedModel:()=>Pa,ResNetForImageClassification:()=>ts,ResNetModel:()=>As,ResNetPreTrainedModel:()=>es,RoFormerForMaskedLM:()=>Ie,RoFormerForQuestionAnswering:()=>xe,RoFormerForSequenceClassification:()=>we,RoFormerForTokenClassification:()=>ke,RoFormerModel:()=>be,RoFormerPreTrainedModel:()=>Ce,RobertaForMaskedLM:()=>nt,RobertaForQuestionAnswering:()=>it,RobertaForSequenceClassification:()=>at,RobertaForTokenClassification:()=>st,RobertaModel:()=>rt,RobertaPreTrainedModel:()=>tt,SamImageSegmentationOutput:()=>$s,SamModel:()=>_s,SamPreTrainedModel:()=>Js,SapiensForDepthEstimation:()=>ms,SapiensForNormalEstimation:()=>Cs,SapiensForSemanticSegmentation:()=>hs,SapiensPreTrainedModel:()=>ps,SegformerForImageClassification:()=>go,SegformerForSemanticSegmentation:()=>uo,SegformerModel:()=>co,SegformerPreTrainedModel:()=>lo,Seq2SeqLMOutput:()=>zc,SequenceClassifierOutput:()=>Fc,SiglipModel:()=>Jt,SiglipPreTrainedModel:()=>qt,SiglipTextModel:()=>_t,SiglipVisionModel:()=>$t,SmolVLMForConditionalGeneration:()=>Ht,SnacDecoderModel:()=>hl,SnacEncoderModel:()=>pl,SnacModel:()=>fl,SnacPreTrainedModel:()=>dl,SpeechT5ForSpeechToText:()=>ji,SpeechT5ForTextToSpeech:()=>Vi,SpeechT5HifiGan:()=>Wi,SpeechT5Model:()=>Ri,SpeechT5PreTrainedModel:()=>Hi,SqueezeBertForMaskedLM:()=>vA,SqueezeBertForQuestionAnswering:()=>yA,SqueezeBertForSequenceClassification:()=>BA,SqueezeBertModel:()=>xA,SqueezeBertPreTrainedModel:()=>kA,StableLmForCausalLM:()=>ho,StableLmModel:()=>po,StableLmPreTrainedModel:()=>fo,Starcoder2ForCausalLM:()=>$i,Starcoder2Model:()=>_i,Starcoder2PreTrainedModel:()=>Ji,StyleTextToSpeech2Model:()=>Yi,StyleTextToSpeech2PreTrainedModel:()=>Li,Swin2SRForImageSuperResolution:()=>ls,Swin2SRModel:()=>os,Swin2SRPreTrainedModel:()=>is,SwinForImageClassification:()=>as,SwinForSemanticSegmentation:()=>ss,SwinModel:()=>ns,SwinPreTrainedModel:()=>rs,T5ForConditionalGeneration:()=>zA,T5Model:()=>PA,T5PreTrainedModel:()=>TA,TableTransformerForObjectDetection:()=>Ua,TableTransformerModel:()=>Wa,TableTransformerObjectDetectionOutput:()=>Ka,TableTransformerPreTrainedModel:()=>Va,TokenClassifierOutput:()=>Nc,TrOCRForCausalLM:()=>Ki,TrOCRPreTrainedModel:()=>Ui,UltravoxModel:()=>el,UltravoxPreTrainedModel:()=>$o,UniSpeechForCTC:()=>Ci,UniSpeechForSequenceClassification:()=>bi,UniSpeechModel:()=>mi,UniSpeechPreTrainedModel:()=>hi,UniSpeechSatForAudioFrameClassification:()=>vi,UniSpeechSatForCTC:()=>ki,UniSpeechSatForSequenceClassification:()=>xi,UniSpeechSatModel:()=>wi,UniSpeechSatPreTrainedModel:()=>Ii,ViTForImageClassification:()=>Hn,ViTMAEModel:()=>Jn,ViTMAEPreTrainedModel:()=>qn,ViTMSNForImageClassification:()=>ea,ViTMSNModel:()=>$n,ViTMSNPreTrainedModel:()=>_n,ViTModel:()=>Yn,ViTPreTrainedModel:()=>Ln,VisionEncoderDecoderModel:()=>Dt,VitMatteForImageMatting:()=>ia,VitMattePreTrainedModel:()=>sa,VitPoseForPoseEstimation:()=>Un,VitPosePreTrainedModel:()=>Wn,VitsModel:()=>oo,VitsModelOutput:()=>jc,VitsPreTrainedModel:()=>io,Wav2Vec2BertForCTC:()=>Ei,Wav2Vec2BertForSequenceClassification:()=>Mi,Wav2Vec2BertModel:()=>yi,Wav2Vec2BertPreTrainedModel:()=>Bi,Wav2Vec2ForAudioFrameClassification:()=>ci,Wav2Vec2ForCTC:()=>oi,Wav2Vec2ForSequenceClassification:()=>li,Wav2Vec2Model:()=>ii,Wav2Vec2PreTrainedModel:()=>si,WavLMForAudioFrameClassification:()=>Oi,WavLMForCTC:()=>Fi,WavLMForSequenceClassification:()=>Si,WavLMForXVector:()=>Ni,WavLMModel:()=>zi,WavLMPreTrainedModel:()=>Pi,WeSpeakerResNetModel:()=>pi,WeSpeakerResNetPreTrainedModel:()=>fi,WhisperForConditionalGeneration:()=>Bt,WhisperModel:()=>vt,WhisperPreTrainedModel:()=>xt,XLMForQuestionAnswering:()=>dt,XLMForSequenceClassification:()=>gt,XLMForTokenClassification:()=>ut,XLMModel:()=>lt,XLMPreTrainedModel:()=>ot,XLMRobertaForMaskedLM:()=>ht,XLMRobertaForQuestionAnswering:()=>bt,XLMRobertaForSequenceClassification:()=>mt,XLMRobertaForTokenClassification:()=>Ct,XLMRobertaModel:()=>pt,XLMRobertaPreTrainedModel:()=>ft,XLMWithLMHeadModel:()=>ct,XVectorOutput:()=>Sc,YolosForObjectDetection:()=>Xs,YolosModel:()=>Zs,YolosObjectDetectionOutput:()=>qs,YolosPreTrainedModel:()=>Ks});var r=t("./src/configs.js"),n=t("./src/backends/onnx.js"),a=t("./src/utils/dtypes.js"),s=t("./src/utils/generic.js"),i=t("./src/utils/core.js"),o=t("./src/utils/hub.js"),l=t("./src/utils/constants.js"),c=t("./src/generation/logits_process.js"),g=t("./src/generation/configuration_utils.js"),u=t("./src/utils/tensor.js"),d=t("./src/utils/image.js"),f=t("./src/utils/maths.js"),p=t("./src/generation/stopping_criteria.js"),h=t("./src/generation/logits_sampler.js"),m=t("./src/env.js"),C=t("./src/models/whisper/generation_whisper.js"),b=t("./src/models/whisper/common_whisper.js");const I=0,w=1,k=2,x=3,v=4,B=5,y=6,E=7,M=8,G=9,D=10,Q=11,T=new Map,P=new Map,z=new Map;async function F(e,A,t){return Object.fromEntries(await Promise.all(Object.keys(A).map((async s=>{const{buffer_or_path:i,session_options:l,session_config:c}=await async function(e,A,t){let s=t.config?.["transformers.js_config"]??{},i=t.device??s.device;i&&"string"!=typeof i&&(i.hasOwnProperty(A)?i=i[A]:(console.warn(`device not specified for "${A}". Using the default device.`),i=null));const l=i??(m.apis.IS_NODE_ENV?"cpu":"wasm"),c=(0,n.deviceToExecutionProviders)(l),g=s.device_config??{};g.hasOwnProperty(l)&&(s={...s,...g[l]});let u=t.dtype??s.dtype;if("string"!=typeof u&&(u&&u.hasOwnProperty(A)?u=u[A]:(u=a.DEFAULT_DEVICE_DTYPE_MAPPING[l]??a.DATA_TYPES.fp32,console.warn(`dtype not specified for "${A}". Using the default dtype (${u}) for this device (${l}).`))),u===a.DATA_TYPES.auto){let e=s.dtype;"string"!=typeof e&&(e=e?.[A]),u=e&&e!==a.DATA_TYPES.auto&&a.DATA_TYPES.hasOwnProperty(e)?e:a.DEFAULT_DEVICE_DTYPE_MAPPING[l]??a.DATA_TYPES.fp32}const d=u;if(!a.DEFAULT_DTYPE_SUFFIX_MAPPING.hasOwnProperty(d))throw new Error(`Invalid dtype: ${d}. Should be one of: ${Object.keys(a.DATA_TYPES).join(", ")}`);if(d===a.DATA_TYPES.fp16&&"webgpu"===l&&!await(0,a.isWebGpuFp16Supported)())throw new Error(`The device (${l}) does not support fp16.`);const f=s.kv_cache_dtype,p=f?"string"==typeof f?f:f[d]??"float32":void 0;if(p&&!["float32","float16"].includes(p))throw new Error(`Invalid kv_cache_dtype: ${p}. Should be one of: float32, float16`);const h={dtype:d,kv_cache_dtype:p,device:l},C=`${A}${a.DEFAULT_DTYPE_SUFFIX_MAPPING[d]}.onnx`,b=`${t.subfolder??""}/${C}`,I={...t.session_options};I.executionProviders??=c;const w=s.free_dimension_overrides;w?I.freeDimensionOverrides??=w:l.startsWith("webnn")&&!I.freeDimensionOverrides&&console.warn(`WebNN does not currently support dynamic shapes and requires 'free_dimension_overrides' to be set in config.json, preferably as a field within config["transformers.js_config"]["device_config"]["${l}"]. When 'free_dimension_overrides' is not set, you may experience significant performance degradation.`);const k=m.apis.IS_NODE_ENV&&m.env.useFSCache,x=(0,o.getModelFile)(e,b,!0,t,k),v=t.use_external_data_format??s.use_external_data_format;let B=[];if(v){let r;r="object"==typeof v?v.hasOwnProperty(C)?v[C]:!!v.hasOwnProperty(A)&&v[A]:v;const n=+r;if(n>o.MAX_EXTERNAL_DATA_CHUNKS)throw new Error(`The number of external data chunks (${n}) exceeds the maximum allowed value (${o.MAX_EXTERNAL_DATA_CHUNKS}).`);for(let A=0;A<n;++A){const r=`${C}_data${0===A?"":"_"+A}`,n=`${t.subfolder??""}/${r}`;B.push(new Promise((async(A,a)=>{const s=await(0,o.getModelFile)(e,n,!0,t,k);A(s instanceof Uint8Array?{path:r,data:s}:r)})))}}else void 0!==I.externalData&&(B=I.externalData.map((async A=>{if("string"==typeof A.data){const r=await(0,o.getModelFile)(e,A.data,!0,t);return{...A,data:r}}return A})));if(B.length>0){const e=await Promise.all(B);m.apis.IS_NODE_ENV||(I.externalData=e)}if("webgpu"===l){const e=(0,r.getKeyValueShapes)(t.config,{prefix:"present"});if(Object.keys(e).length>0&&!(0,n.isONNXProxy)()){const A={};for(const t in e)A[t]="gpu-buffer";I.preferredOutputLocation=A}}return{buffer_or_path:await x,session_options:I,session_config:h}}(e,A[s],t);return[s,await(0,n.createInferenceSession)(i,l,c)]}))))}async function S(e,A,t){return Object.fromEntries(await Promise.all(Object.keys(A).map((async r=>[r,await(0,o.getModelJSON)(e,A[r],!1,t)]))))}let N=Promise.resolve();async function O(e,A){const t=function(e,A){const t=Object.create(null),r=[];for(const a of e.inputNames){const e=A[a];e instanceof u.Tensor?t[a]=(0,n.isONNXProxy)()?e.clone():e:r.push(a)}if(r.length>0)throw new Error(`An error occurred during model execution: "Missing the following inputs: ${r.join(", ")}.`);const a=Object.keys(A).length,s=e.inputNames.length;if(a>s){let t=Object.keys(A).filter((A=>!e.inputNames.includes(A)));console.warn(`WARNING: Too many inputs were provided (${a} > ${s}). The following inputs will be ignored: "${t.join(", ")}".`)}return t}(e,A);try{const A=Object.fromEntries(Object.entries(t).map((([e,A])=>[e,A.ort_tensor]))),r=()=>e.run(A);return L(await(m.apis.IS_BROWSER_ENV||m.apis.IS_WEBWORKER_ENV?N=N.then(r):r()))}catch(e){const A=Object.fromEntries(Object.entries(t).map((([e,A])=>{const t={type:A.type,dims:A.dims,location:A.location};return"gpu-buffer"!==t.location&&(t.data=A.data),[e,t]})));throw console.error(`An error occurred during model execution: "${e}".`),console.error("Inputs given to model:",A),e}}function L(e){for(let A in e)(0,n.isONNXTensor)(e[A])?e[A]=new u.Tensor(e[A]):"object"==typeof e[A]&&L(e[A]);return e}function Y(e){if(e instanceof u.Tensor)return e;if(0===e.length)throw Error("items must be non-empty");if(Array.isArray(e[0])){if(e.some((A=>A.length!==e[0].length)))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");return new u.Tensor("int64",BigInt64Array.from(e.flat().map((e=>BigInt(e)))),[e.length,e[0].length])}return new u.Tensor("int64",BigInt64Array.from(e.map((e=>BigInt(e)))),[1,e.length])}function H(e){return new u.Tensor("bool",[e],[1])}async function R(e,A){let{encoder_outputs:t,input_ids:r,decoder_input_ids:n,...a}=A;if(!t){const r=(0,i.pick)(A,e.sessions.model.inputNames);t=(await j(e,r)).last_hidden_state}a.input_ids=n,a.encoder_hidden_states=t,e.sessions.decoder_model_merged.inputNames.includes("encoder_attention_mask")&&(a.encoder_attention_mask=A.attention_mask);return await W(e,a,!0)}async function j(e,A){const t=e.sessions.model,r=(0,i.pick)(A,t.inputNames);if(t.inputNames.includes("inputs_embeds")&&!r.inputs_embeds){if(!A.input_ids)throw new Error("Both `input_ids` and `inputs_embeds` are missing in the model inputs.");r.inputs_embeds=await e.encode_text({input_ids:A.input_ids})}if(t.inputNames.includes("token_type_ids")&&!r.token_type_ids){if(!r.input_ids)throw new Error("Both `input_ids` and `token_type_ids` are missing in the model inputs.");r.token_type_ids=(0,u.zeros_like)(r.input_ids)}if(t.inputNames.includes("pixel_mask")&&!r.pixel_mask){if(!r.pixel_values)throw new Error("Both `pixel_values` and `pixel_mask` are missing in the model inputs.");const e=r.pixel_values.dims;r.pixel_mask=(0,u.ones)([e[0],e[2],e[3]])}return await O(t,r)}async function V(e,A){const t=await e.encode(A);return await e.decode(t)}async function W(e,A,t=!1){const r=e.sessions[t?"decoder_model_merged":"model"],{past_key_values:n,...a}=A;if(r.inputNames.includes("use_cache_branch")&&(a.use_cache_branch=H(!!n)),r.inputNames.includes("position_ids")&&a.attention_mask&&!a.position_ids){const A=["paligemma","gemma3_text","gemma3"].includes(e.config.model_type)?1:0;a.position_ids=function(e,A=null,t=0){const{input_ids:r,inputs_embeds:n,attention_mask:a}=e,{data:s,dims:i}=J(a,t);let o=new u.Tensor("int64",s,i);if(A){const e=-(r??n).dims.at(1);o=o.slice(null,[e,null])}return o}(a,n,A)}e.addPastKeyValues(a,n);const s=(0,i.pick)(a,r.inputNames);return await O(r,s)}function U({modality_token_id:e,inputs_embeds:A,modality_features:t,input_ids:r,attention_mask:n}){const a=r.tolist().map((A=>A.reduce(((A,t,r)=>(t==e&&A.push(r),A)),[]))),s=a.reduce(((e,A)=>e+A.length),0),i=t.dims[0];if(s!==i)throw new Error(`Number of tokens and features do not match: tokens: ${s}, features ${i}`);let o=0;for(let e=0;e<a.length;++e){const r=a[e],n=A[e];for(let e=0;e<r.length;++e)n[r[e]].data.set(t[o++].data)}return{inputs_embeds:A,attention_mask:n}}function K({image_token_id:e,inputs_embeds:A,image_features:t,input_ids:r,attention_mask:n}){return U({modality_token_id:e,inputs_embeds:A,modality_features:t,input_ids:r,attention_mask:n})}async function Z(e,{encode_function:A,merge_function:t,modality_input_name:r,modality_output_name:n,input_ids:a=null,attention_mask:s=null,position_ids:i=null,inputs_embeds:o=null,past_key_values:l=null,generation_config:c=null,logits_processor:g=null,...d}){const f=d[r];if(!o)if(o=await e.encode_text({input_ids:a,...d}),f&&1!==a.dims[1]){const e=await A({[r]:f,...d});({inputs_embeds:o,attention_mask:s}=t({[n]:e,inputs_embeds:o,input_ids:a,attention_mask:s}))}else if(l&&f&&1===a.dims[1]){const e=a.dims[1],A=Object.values(l)[0].dims.at(-2);s=(0,u.cat)([(0,u.ones)([a.dims[0],A]),s.slice(null,[s.dims[1]-e,s.dims[1]])],1)}if(!i&&"qwen2_vl"===e.config.model_type){const{image_grid_thw:A,video_grid_thw:t}=d;[i]=e.get_rope_index(a,A,t,s)}return await W(e,{inputs_embeds:o,past_key_values:l,attention_mask:s,position_ids:i,generation_config:c,logits_processor:g},!0)}async function X(e,A){return await Z(e,{...A,modality_input_name:"audio_values",modality_output_name:"audio_features",encode_function:e.encode_audio.bind(e),merge_function:e._merge_input_ids_with_audio_features.bind(e)})}async function q(e,A){return await Z(e,{...A,modality_input_name:"pixel_values",modality_output_name:"image_features",encode_function:e.encode_image.bind(e),merge_function:e._merge_input_ids_with_image_features.bind(e)})}function J(e,A=0){const[t,r]=e.dims,n=e.data,a=new BigInt64Array(n.length);for(let e=0;e<t;++e){const t=e*r;let s=BigInt(A);for(let e=0;e<r;++e){const A=t+e;0n===n[A]?a[A]=BigInt(1):(a[A]=s,s+=n[A])}}return{data:a,dims:e.dims}}function _(e,A,t,r){if(t.past_key_values){const A=Object.values(t.past_key_values)[0].dims.at(-2),{input_ids:r,attention_mask:n}=t;if(n&&n.dims[1]>r.dims[1]);else if(A<r.dims[1])t.input_ids=r.slice(null,[A,null]);else if(null!=e.config.image_token_index&&r.data.some((A=>A==e.config.image_token_index))){const n=e.config.num_image_tokens;if(!n)throw new Error("`num_image_tokens` is missing in the model configuration.");const a=r.dims[1]-(A-n);t.input_ids=r.slice(null,[-a,null]),t.attention_mask=(0,u.ones)([1,A+a])}}return t}function $(e,A,t,r){return t.past_key_values&&(A=A.map((e=>[e.at(-1)]))),{...t,decoder_input_ids:Y(A)}}function ee(e,...A){return e.config.is_encoder_decoder?$(e,...A):_(e,...A)}function Ae(e,A,t,r){const n=!!t.past_key_values;if(null!==r.guidance_scale&&r.guidance_scale>1&&(n?t.input_ids=(0,u.cat)([t.input_ids,t.input_ids],0):(t.input_ids=(0,u.cat)([t.input_ids,(0,u.full_like)(t.input_ids,BigInt(r.pad_token_id))],0),t.attention_mask=(0,u.cat)([t.attention_mask,(0,u.full_like)(t.attention_mask,0n)],0))),!n&&t.pixel_values||(t.pixel_values=(0,u.full)([0,0,3,384,384],1)),n){const e=0,A=1,r=1;t.images_seq_mask=new u.Tensor("bool",new Array(e+A).fill(!0).fill(!1,0,A),[r,e+A]),t.images_emb_mask=new u.Tensor("bool",new Array(e).fill(!1),[r,1,e])}return t}class te extends s.Callable{main_input_name="input_ids";forward_params=["input_ids","attention_mask"];constructor(e,A,t){super(),this.config=e,this.sessions=A,this.configs=t;const r=z.get(this.constructor),n=T.get(r);switch(this.can_generate=!1,this._forward=null,this._prepare_inputs_for_generation=null,n){case v:this.can_generate=!0,this._forward=W,this._prepare_inputs_for_generation=_;break;case k:case x:case E:this.can_generate=!0,this._forward=R,this._prepare_inputs_for_generation=$;break;case w:this._forward=R;break;case y:this.can_generate=!0,this._forward=q,this._prepare_inputs_for_generation=ee;break;case D:this.can_generate=!0,this._forward=X,this._prepare_inputs_for_generation=ee;break;case G:this.can_generate=!0,this._prepare_inputs_for_generation=ee;break;case M:this.can_generate=!0,this._prepare_inputs_for_generation=Ae;break;case Q:this._forward=V;break;default:this._forward=j}this.can_generate&&this.forward_params.push("past_key_values"),this.custom_config=this.config["transformers.js_config"]??{}}async dispose(){const e=[];for(const A of Object.values(this.sessions))A?.handler?.dispose&&e.push(A.handler.dispose());return await Promise.all(e)}static async from_pretrained(e,{progress_callback:A=null,config:t=null,cache_dir:n=null,local_files_only:a=!1,revision:s="main",model_file_name:i=null,subfolder:o="onnx",device:c=null,dtype:g=null,use_external_data_format:u=null,session_options:d={}}={}){let f={progress_callback:A,config:t,cache_dir:n,local_files_only:a,revision:s,model_file_name:i,subfolder:o,device:c,dtype:g,use_external_data_format:u,session_options:d};const p=z.get(this),h=T.get(p);let m;if(t=f.config=await r.AutoConfig.from_pretrained(e,f),h===v)m=await Promise.all([F(e,{model:f.model_file_name??"model"},f),S(e,{generation_config:"generation_config.json"},f)]);else if(h===k||h===x)m=await Promise.all([F(e,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},f),S(e,{generation_config:"generation_config.json"},f)]);else if(h===B)m=await Promise.all([F(e,{model:"vision_encoder",prompt_encoder_mask_decoder:"prompt_encoder_mask_decoder"},f)]);else if(h===w)m=await Promise.all([F(e,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},f)]);else if(h===y){const A={embed_tokens:"embed_tokens",vision_encoder:"vision_encoder",decoder_model_merged:"decoder_model_merged"};t.is_encoder_decoder&&(A.model="encoder_model"),m=await Promise.all([F(e,A,f),S(e,{generation_config:"generation_config.json"},f)])}else if(h===D){const A={embed_tokens:"embed_tokens",audio_encoder:"audio_encoder",decoder_model_merged:"decoder_model_merged"};m=await Promise.all([F(e,A,f),S(e,{generation_config:"generation_config.json"},f)])}else if(h===E)m=await Promise.all([F(e,{model:"text_encoder",decoder_model_merged:"decoder_model_merged",encodec_decode:"encodec_decode"},f),S(e,{generation_config:"generation_config.json"},f)]);else if(h===M)m=await Promise.all([F(e,{prepare_inputs_embeds:"prepare_inputs_embeds",model:"language_model",lm_head:"lm_head",gen_head:"gen_head",gen_img_embeds:"gen_img_embeds",image_decode:"image_decode"},f),S(e,{generation_config:"generation_config.json"},f)]);else if(h===G)m=await Promise.all([F(e,{prepare_inputs_embeds:"prepare_inputs_embeds",model:"model",vision_encoder:"vision_encoder"},f),S(e,{generation_config:"generation_config.json"},f)]);else if(h===Q)m=await Promise.all([F(e,{encoder_model:"encoder_model",decoder_model:"decoder_model"},f)]);else{if(h!==I){const e=p??t?.model_type;"custom"!==e&&console.warn(`Model type for '${e}' not found, assuming encoder-only architecture. Please report this at ${l.GITHUB_ISSUE_URL}.`)}m=await Promise.all([F(e,{model:f.model_file_name??"model"},f)])}return new this(t,...m)}async _call(e){return await this.forward(e)}async forward(e){return await this._forward(this,e)}get generation_config(){return this.configs?.generation_config??null}_get_logits_warper(e){const A=new c.LogitsProcessorList;return null!==e.temperature&&1!==e.temperature&&A.push(new c.TemperatureLogitsWarper(e.temperature)),null!==e.top_k&&0!==e.top_k&&A.push(new c.TopKLogitsWarper(e.top_k)),null!==e.top_p&&e.top_p<1&&A.push(new c.TopPLogitsWarper(e.top_p)),A}_get_logits_processor(e,A,t=null){const r=new c.LogitsProcessorList;if(null!==e.repetition_penalty&&1!==e.repetition_penalty&&r.push(new c.RepetitionPenaltyLogitsProcessor(e.repetition_penalty)),null!==e.no_repeat_ngram_size&&e.no_repeat_ngram_size>0&&r.push(new c.NoRepeatNGramLogitsProcessor(e.no_repeat_ngram_size)),null!==e.bad_words_ids&&r.push(new c.NoBadWordsLogitsProcessor(e.bad_words_ids,e.eos_token_id)),null!==e.min_length&&null!==e.eos_token_id&&e.min_length>0&&r.push(new c.MinLengthLogitsProcessor(e.min_length,e.eos_token_id)),null!==e.min_new_tokens&&null!==e.eos_token_id&&e.min_new_tokens>0&&r.push(new c.MinNewTokensLengthLogitsProcessor(A,e.min_new_tokens,e.eos_token_id)),null!==e.forced_bos_token_id&&r.push(new c.ForcedBOSTokenLogitsProcessor(e.forced_bos_token_id)),null!==e.forced_eos_token_id&&r.push(new c.ForcedEOSTokenLogitsProcessor(e.max_length,e.forced_eos_token_id)),null!==e.begin_suppress_tokens){const t=A>1||null===e.forced_bos_token_id?A:A+1;r.push(new c.SuppressTokensAtBeginLogitsProcessor(e.begin_suppress_tokens,t))}return null!==e.guidance_scale&&e.guidance_scale>1&&r.push(new c.ClassifierFreeGuidanceLogitsProcessor(e.guidance_scale)),null!==t&&r.extend(t),r}_prepare_generation_config(e,A,t=g.GenerationConfig){const r={...this.config};for(const e of["decoder","generator","text_config"])e in r&&Object.assign(r,r[e]);const n=new t(r);return Object.assign(n,this.generation_config??{}),e&&Object.assign(n,e),A&&Object.assign(n,(0,i.pick)(A,Object.getOwnPropertyNames(n))),n}_get_stopping_criteria(e,A=null){const t=new p.StoppingCriteriaList;return null!==e.max_length&&t.push(new p.MaxLengthCriteria(e.max_length,this.config.max_position_embeddings??null)),null!==e.eos_token_id&&t.push(new p.EosTokenCriteria(e.eos_token_id)),A&&t.extend(A),t}_validate_model_class(){if(!this.can_generate){const e=[Ml,Tl,El,kl],A=z.get(this.constructor),t=new Set,r=this.config.model_type;for(const A of e){const e=A.get(r);e&&t.add(e[0])}let n=`The current model class (${A}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;throw t.size>0&&(n+=` Please use the following class instead: ${[...t].join(", ")}`),Error(n)}}prepare_inputs_for_generation(...e){return this._prepare_inputs_for_generation(this,...e)}_update_model_kwargs_for_generation({generated_input_ids:e,outputs:A,model_inputs:t,is_encoder_decoder:r}){return t.past_key_values=this.getPastKeyValues(A,t.past_key_values),t.input_ids=new u.Tensor("int64",e.flat(),[e.length,1]),r||(t.attention_mask=(0,u.cat)([t.attention_mask,(0,u.ones)([t.attention_mask.dims[0],1])],1)),t.position_ids=null,t}_prepare_model_inputs({inputs:e,bos_token_id:A,model_kwargs:t}){const r=(0,i.pick)(t,this.forward_params),n=this.main_input_name;if(n in r){if(e)throw new Error("`inputs`: {inputs}` were passed alongside {input_name} which is not allowed. Make sure to either pass {inputs} or {input_name}=...")}else r[n]=e;return{inputs_tensor:r[n],model_inputs:r,model_input_name:n}}async _prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:e,model_inputs:A,model_input_name:t,generation_config:r}){if(this.sessions.model.inputNames.includes("inputs_embeds")&&!A.inputs_embeds&&"_prepare_inputs_embeds"in this){const{input_ids:e,pixel_values:t,attention_mask:r,...n}=A,a=await this._prepare_inputs_embeds(A);A={...n,...(0,i.pick)(a,["inputs_embeds","attention_mask"])}}let{last_hidden_state:n}=await j(this,A);if(null!==r.guidance_scale&&r.guidance_scale>1)n=(0,u.cat)([n,(0,u.full_like)(n,0)],0),"attention_mask"in A&&(A.attention_mask=(0,u.cat)([A.attention_mask,(0,u.zeros_like)(A.attention_mask)],0));else if(A.decoder_input_ids){const e=Y(A.decoder_input_ids).dims[0];if(e!==n.dims[0]){if(1!==n.dims[0])throw new Error(`The encoder outputs have a different batch size (${n.dims[0]}) than the decoder inputs (${e}).`);n=(0,u.cat)(Array.from({length:e},(()=>n)),0)}}return A.encoder_outputs=n,A}_prepare_decoder_input_ids_for_generation({batch_size:e,model_input_name:A,model_kwargs:t,decoder_start_token_id:r,bos_token_id:n,generation_config:a}){let{decoder_input_ids:s,...i}=t;if(!(s instanceof u.Tensor)){if(s)Array.isArray(s[0])||(s=Array.from({length:e},(()=>s)));else if(r??=n,"musicgen"===this.config.model_type)s=Array.from({length:e*this.config.decoder.num_codebooks},(()=>[r]));else if(Array.isArray(r)){if(r.length!==e)throw new Error(`\`decoder_start_token_id\` expcted to have length ${e} but got ${r.length}`);s=r}else s=Array.from({length:e},(()=>[r]));s=Y(s)}return t.decoder_attention_mask=(0,u.ones_like)(s),{input_ids:s,model_inputs:i}}async generate({inputs:e=null,generation_config:A=null,logits_processor:t=null,stopping_criteria:r=null,streamer:n=null,...a}){this._validate_model_class(),A=this._prepare_generation_config(A,a);let{inputs_tensor:s,model_inputs:i,model_input_name:o}=this._prepare_model_inputs({inputs:e,model_kwargs:a});const l=this.config.is_encoder_decoder;let c;l&&("encoder_outputs"in i||(i=await this._prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:s,model_inputs:i,model_input_name:o,generation_config:A}))),l?({input_ids:c,model_inputs:i}=this._prepare_decoder_input_ids_for_generation({batch_size:i[o].dims.at(0),model_input_name:o,model_kwargs:i,decoder_start_token_id:A.decoder_start_token_id,bos_token_id:A.bos_token_id,generation_config:A})):c=i[o];let g=c.dims.at(-1);null!==A.max_new_tokens&&(A.max_length=g+A.max_new_tokens);const d=this._get_logits_processor(A,g,t),f=this._get_stopping_criteria(A,r),p=i[o].dims.at(0),m=h.LogitsSampler.getSampler(A),C=new Array(p).fill(0),b=c.tolist();let I;n&&n.put(b);let w={};for(;;){if(i=this.prepare_inputs_for_generation(b,i,A),I=await this.forward(i),A.output_attentions&&A.return_dict_in_generate){const e=this.getAttentions(I);for(const A in e)A in w||(w[A]=[]),w[A].push(e[A])}const e=d(b,I.logits.slice(null,-1,null)),t=[];for(let A=0;A<e.dims.at(0);++A){const r=e[A],n=await m(r);for(const[e,r]of n){const n=BigInt(e);C[A]+=r,b[A].push(n),t.push([n]);break}}n&&n.put(t);if(f(b).every((e=>e)))break;i=this._update_model_kwargs_for_generation({generated_input_ids:t,outputs:I,model_inputs:i,is_encoder_decoder:l})}n&&n.end();const k=this.getPastKeyValues(I,i.past_key_values,!0),x=new u.Tensor("int64",b.flat(),[b.length,b[0].length]);if(A.return_dict_in_generate)return{sequences:x,past_key_values:k,...w};for(const e of Object.values(I))"gpu-buffer"===e.location&&e.dispose();return x}getPastKeyValues(e,A,t=!1){const r=Object.create(null);for(const n in e)if(n.startsWith("present")){const a=n.replace("present","past_key_values"),s=n.includes("encoder");if(r[a]=s&&A?A[a]:e[n],A&&(!s||t)){const e=A[a];"gpu-buffer"===e.location&&e.dispose()}}return r}getAttentions(e){const A={};for(const t of["cross_attentions","encoder_attentions","decoder_attentions"])for(const r in e)r.startsWith(t)&&(t in A||(A[t]=[]),A[t].push(e[r]));return A}addPastKeyValues(e,A){if(A)Object.assign(e,A);else{const A=this.sessions.decoder_model_merged??this.sessions.model,t=A?.config?.kv_cache_dtype??"float32",n="float16"===t?new u.DataTypeMap.float16:[],a=(e[this.main_input_name]??e.attention_mask)?.dims?.[0]??1,s=(0,r.getKeyValueShapes)(this.config,{batch_size:a});for(const A in s)e[A]=new u.Tensor(t,n,s[A])}}async encode_image({pixel_values:e}){const A=(await O(this.sessions.vision_encoder,{pixel_values:e})).image_features;return this.config.num_image_tokens||(console.warn(`The number of image tokens was not set in the model configuration. Setting it to the number of features detected by the vision encoder (${A.dims[1]}).`),this.config.num_image_tokens=A.dims[1]),A}async encode_text({input_ids:e}){return(await O(this.sessions.embed_tokens,{input_ids:e})).inputs_embeds}async encode_audio({audio_values:e}){return(await O(this.sessions.audio_encoder,{audio_values:e})).audio_features}}class re{}class ne extends re{constructor({last_hidden_state:e,hidden_states:A=null,attentions:t=null}){super(),this.last_hidden_state=e,this.hidden_states=A,this.attentions=t}}class ae extends te{}class se extends ae{}class ie extends ae{async _call(e){return new Oc(await super._call(e))}}class oe extends ae{async _call(e){return new Fc(await super._call(e))}}class le extends ae{async _call(e){return new Nc(await super._call(e))}}class ce extends ae{async _call(e){return new Lc(await super._call(e))}}class ge extends te{}class ue extends ge{}class de extends ge{async _call(e){return new Oc(await super._call(e))}}class fe extends ge{async _call(e){return new Fc(await super._call(e))}}class pe extends ge{async _call(e){return new Nc(await super._call(e))}}class he extends te{}class me extends he{}class Ce extends te{}class be extends Ce{}class Ie extends Ce{async _call(e){return new Oc(await super._call(e))}}class we extends Ce{async _call(e){return new Fc(await super._call(e))}}class ke extends Ce{async _call(e){return new Nc(await super._call(e))}}class xe extends Ce{async _call(e){return new Lc(await super._call(e))}}class ve extends te{}class Be extends ve{}class ye extends ve{async _call(e){return new Oc(await super._call(e))}}class Ee extends ve{async _call(e){return new Fc(await super._call(e))}}class Me extends ve{async _call(e){return new Nc(await super._call(e))}}class Ge extends ve{async _call(e){return new Lc(await super._call(e))}}class De extends te{}class Qe extends De{}class Te extends De{async _call(e){return new Oc(await super._call(e))}}class Pe extends De{async _call(e){return new Fc(await super._call(e))}}class ze extends De{async _call(e){return new Nc(await super._call(e))}}class Fe extends De{async _call(e){return new Lc(await super._call(e))}}class Se extends te{}class Ne extends Se{}class Oe extends Se{async _call(e){return new Oc(await super._call(e))}}class Le extends Se{async _call(e){return new Fc(await super._call(e))}}class Ye extends Se{async _call(e){return new Nc(await super._call(e))}}class He extends Se{async _call(e){return new Lc(await super._call(e))}}class Re extends te{}class je extends Re{}class Ve extends Re{async _call(e){return new Oc(await super._call(e))}}class We extends Re{async _call(e){return new Fc(await super._call(e))}}class Ue extends Re{async _call(e){return new Nc(await super._call(e))}}class Ke extends Re{async _call(e){return new Lc(await super._call(e))}}class Ze extends te{}class Xe extends Ze{}class qe extends Ze{async _call(e){return new Oc(await super._call(e))}}class Je extends Ze{async _call(e){return new Fc(await super._call(e))}}class _e extends Ze{async _call(e){return new Nc(await super._call(e))}}class $e extends Ze{async _call(e){return new Lc(await super._call(e))}}class eA extends te{}class AA extends eA{}class tA extends eA{async _call(e){return new Fc(await super._call(e))}}class rA extends eA{async _call(e){return new Nc(await super._call(e))}}class nA extends eA{async _call(e){return new Lc(await super._call(e))}}class aA extends eA{async _call(e){return new Oc(await super._call(e))}}class sA extends te{}class iA extends sA{}class oA extends sA{async _call(e){return new Oc(await super._call(e))}}class lA extends sA{async _call(e){return new Fc(await super._call(e))}}class cA extends sA{async _call(e){return new Nc(await super._call(e))}}class gA extends te{}class uA extends gA{}class dA extends gA{async _call(e){return new Oc(await super._call(e))}}class fA extends gA{async _call(e){return new Fc(await super._call(e))}}class pA extends gA{async _call(e){return new Lc(await super._call(e))}}class hA extends te{}class mA extends hA{}class CA extends hA{async _call(e){return new Oc(await super._call(e))}}class bA extends hA{async _call(e){return new Fc(await super._call(e))}}class IA extends hA{async _call(e){return new Nc(await super._call(e))}}class wA extends hA{async _call(e){return new Lc(await super._call(e))}}class kA extends te{}class xA extends kA{}class vA extends kA{async _call(e){return new Oc(await super._call(e))}}class BA extends kA{async _call(e){return new Fc(await super._call(e))}}class yA extends kA{async _call(e){return new Lc(await super._call(e))}}class EA extends te{}class MA extends EA{}class GA extends EA{async _call(e){return new Fc(await super._call(e))}}class DA extends EA{async _call(e){return new Lc(await super._call(e))}}class QA extends EA{async _call(e){return new Oc(await super._call(e))}}class TA extends te{forward_params=["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"]}class PA extends TA{}class zA extends TA{}class FA extends te{}class SA extends FA{}class NA extends FA{}class OA extends te{}class LA extends OA{}class YA extends OA{}class HA extends te{}class RA extends HA{}class jA extends HA{}class VA extends HA{async _call(e){return new Fc(await super._call(e))}}class WA extends te{}class UA extends WA{}class KA extends WA{}class ZA extends WA{async _call(e){return new Fc(await super._call(e))}}class XA extends WA{}class qA extends te{}class JA extends qA{}class _A extends qA{}class $A extends te{}class et extends $A{}class At extends $A{}class tt extends te{}class rt extends tt{}class nt extends tt{async _call(e){return new Oc(await super._call(e))}}class at extends tt{async _call(e){return new Fc(await super._call(e))}}class st extends tt{async _call(e){return new Nc(await super._call(e))}}class it extends tt{async _call(e){return new Lc(await super._call(e))}}class ot extends te{}class lt extends ot{}class ct extends ot{async _call(e){return new Oc(await super._call(e))}}class gt extends ot{async _call(e){return new Fc(await super._call(e))}}class ut extends ot{async _call(e){return new Nc(await super._call(e))}}class dt extends ot{async _call(e){return new Lc(await super._call(e))}}class ft extends te{}class pt extends ft{}class ht extends ft{async _call(e){return new Oc(await super._call(e))}}class mt extends ft{async _call(e){return new Fc(await super._call(e))}}class Ct extends ft{async _call(e){return new Nc(await super._call(e))}}class bt extends ft{async _call(e){return new Lc(await super._call(e))}}class It extends te{}class wt extends It{}class kt extends It{}class xt extends te{requires_attention_mask=!1;main_input_name="input_features";forward_params=["input_features","attention_mask","decoder_input_ids","decoder_attention_mask","past_key_values"]}class vt extends xt{}class Bt extends xt{_prepare_generation_config(e,A){return super._prepare_generation_config(e,A,C.WhisperGenerationConfig)}_retrieve_init_tokens(e){const A=[e.decoder_start_token_id];let t=e.language;const r=e.task;if(e.is_multilingual){t||(console.warn("No language specified - defaulting to English (en)."),t="en");const n=`<|${(0,b.whisper_language_to_code)(t)}|>`;A.push(e.lang_to_id[n]),A.push(e.task_to_id[r??"transcribe"])}else if(t||r)throw new Error("Cannot specify `task` or `language` for an English-only model. If the model is intended to be multilingual, pass `is_multilingual=true` to generate, or update the generation config.");return!e.return_timestamps&&e.no_timestamps_token_id&&A.at(-1)!==e.no_timestamps_token_id?A.push(e.no_timestamps_token_id):e.return_timestamps&&A.at(-1)===e.no_timestamps_token_id&&(console.warn("<|notimestamps|> prompt token is removed from generation_config since `return_timestamps` is set to `true`."),A.pop()),A.filter((e=>null!=e))}async generate({inputs:e=null,generation_config:A=null,logits_processor:t=null,stopping_criteria:r=null,...n}){A=this._prepare_generation_config(A,n);const a=n.decoder_input_ids??this._retrieve_init_tokens(A);if(A.return_timestamps&&(t??=new c.LogitsProcessorList,t.push(new c.WhisperTimeStampLogitsProcessor(A,a))),A.begin_suppress_tokens&&(t??=new c.LogitsProcessorList,t.push(new c.SuppressTokensAtBeginLogitsProcessor(A.begin_suppress_tokens,a.length))),A.return_token_timestamps){if(!A.alignment_heads)throw new Error("Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.");"translate"===A.task&&console.warn("Token-level timestamps may not be reliable for task 'translate'."),A.output_attentions=!0,A.return_dict_in_generate=!0}const s=await super.generate({inputs:e,generation_config:A,logits_processor:t,decoder_input_ids:a,...n});return A.return_token_timestamps&&(s.token_timestamps=this._extract_token_timestamps(s,A.alignment_heads,A.num_frames)),s}_extract_token_timestamps(e,A,t=null,r=.02){if(!e.cross_attentions)throw new Error("Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`.");null==t&&console.warn("`num_frames` has not been set, meaning the entire audio will be analyzed. This may lead to inaccurate token-level timestamps for short audios (< 30 seconds).");let n=this.config.median_filter_width;void 0===n&&(console.warn("Model config has no `median_filter_width`, using default value of 7."),n=7);const a=e.cross_attentions,s=Array.from({length:this.config.decoder_layers},((e,A)=>(0,u.cat)(a.map((e=>e[A])),2))),o=(0,u.stack)(A.map((([e,A])=>{if(e>=s.length)throw new Error(`Layer index ${e} is out of bounds for cross attentions (length ${s.length}).`);return t?s[e].slice(null,A,null,[0,t]):s[e].slice(null,A)}))).transpose(1,0,2,3),[l,c]=(0,u.std_mean)(o,-2,0,!0),g=o.clone();for(let e=0;e<g.dims[0];++e){const A=g[e];for(let t=0;t<A.dims[0];++t){const r=A[t],a=l[e][t][0].data,s=c[e][t][0].data;for(let e=0;e<r.dims[0];++e){let A=r[e].data;for(let e=0;e<A.length;++e)A[e]=(A[e]-s[e])/a[e];A.set((0,f.medianFilter)(A,n))}}}const d=[(0,u.mean)(g,1)],p=e.sequences.dims,h=new u.Tensor("float32",new Float32Array(p[0]*p[1]),p);for(let e=0;e<p[0];++e){const A=d[e].neg().squeeze_(0),[t,n]=(0,f.dynamic_time_warping)(A.tolist()),a=Array.from({length:t.length-1},((e,A)=>t[A+1]-t[A])),s=(0,i.mergeArrays)([1],a).map((e=>!!e)),o=[];for(let e=0;e<s.length;++e)s[e]&&o.push(n[e]*r);h[e].data.set(o,1)}return h}}class yt extends Bt{}class Et extends te{requires_attention_mask=!1;main_input_name="input_values";forward_params=["input_values","decoder_input_ids","past_key_values"]}class Mt extends Et{}class Gt extends Et{}class Dt extends te{main_input_name="pixel_values";forward_params=["pixel_values","decoder_input_ids","encoder_hidden_states","past_key_values"]}class Qt extends te{forward_params=["input_ids","attention_mask","pixel_values","position_ids","past_key_values"]}class Tt extends Qt{_merge_input_ids_with_image_features({inputs_embeds:e,image_features:A,input_ids:t,attention_mask:r}){const n=this.config.image_token_index,a=t.tolist().map((e=>e.findIndex((e=>e==n)))),s=a.every((e=>-1===e)),i=a.every((e=>-1!==e));if(!s&&!i)throw new Error("Every input should contain either 0 or 1 image token.");if(s)return{inputs_embeds:e,attention_mask:r};const o=[],l=[];for(let t=0;t<a.length;++t){const n=a[t],s=e[t],i=A[t],c=r[t];o.push((0,u.cat)([s.slice([0,n]),i,s.slice([n+1,s.dims[0]])],0)),l.push((0,u.cat)([c.slice([0,n]),(0,u.ones)([i.dims[0]]),c.slice([n+1,c.dims[0]])],0))}return{inputs_embeds:(0,u.stack)(o,0),attention_mask:(0,u.stack)(l,0)}}}class Pt extends Tt{}class zt extends Tt{}class Ft extends te{forward_params=["input_ids","inputs_embeds","attention_mask","pixel_values","encoder_outputs","decoder_input_ids","decoder_inputs_embeds","decoder_attention_mask","past_key_values"];main_input_name="inputs_embeds"}class St extends Ft{_merge_input_ids_with_image_features({inputs_embeds:e,image_features:A,input_ids:t,attention_mask:r}){return{inputs_embeds:(0,u.cat)([A,e],1),attention_mask:(0,u.cat)([(0,u.ones)(A.dims.slice(0,2)),r],1)}}async _prepare_inputs_embeds({input_ids:e,pixel_values:A,inputs_embeds:t,attention_mask:r}){if(!e&&!A)throw new Error("Either `input_ids` or `pixel_values` should be provided.");let n,a;return e&&(n=await this.encode_text({input_ids:e})),A&&(a=await this.encode_image({pixel_values:A})),n&&a?({inputs_embeds:t,attention_mask:r}=this._merge_input_ids_with_image_features({inputs_embeds:n,image_features:a,input_ids:e,attention_mask:r})):t=n||a,{inputs_embeds:t,attention_mask:r}}async forward({input_ids:e,pixel_values:A,attention_mask:t,decoder_input_ids:r,decoder_attention_mask:n,encoder_outputs:a,past_key_values:s,inputs_embeds:i,decoder_inputs_embeds:o}){if(i||({inputs_embeds:i,attention_mask:t}=await this._prepare_inputs_embeds({input_ids:e,pixel_values:A,inputs_embeds:i,attention_mask:t})),!a){let{last_hidden_state:e}=await j(this,{inputs_embeds:i,attention_mask:t});a=e}if(!o){if(!r)throw new Error("Either `decoder_input_ids` or `decoder_inputs_embeds` should be provided.");o=await this.encode_text({input_ids:r})}const l={inputs_embeds:o,attention_mask:n,encoder_attention_mask:t,encoder_hidden_states:a,past_key_values:s};return await W(this,l,!0)}}class Nt extends te{forward_params=["input_ids","attention_mask","pixel_values","position_ids","past_key_values"]}class Ot extends Nt{_merge_input_ids_with_image_features(e){const A=e.image_features.dims.at(-1),t=e.image_features.view(-1,A);return K({image_token_id:this.config.image_token_index,...e,image_features:t})}}class Lt extends te{forward_params=["input_ids","attention_mask","pixel_values","pixel_attention_mask","position_ids","past_key_values"]}class Yt extends Lt{async encode_image({pixel_values:e,pixel_attention_mask:A}){return(await O(this.sessions.vision_encoder,{pixel_values:e,pixel_attention_mask:A})).image_features}_merge_input_ids_with_image_features(e){const A=e.image_features.dims.at(-1),t=e.image_features.view(-1,A);return K({image_token_id:this.config.image_token_id,...e,image_features:t})}}class Ht extends Yt{}class Rt extends te{forward_params=["input_ids","inputs_embeds","attention_mask","position_ids","pixel_values","image_sizes","past_key_values"]}class jt extends Rt{async forward({input_ids:e=null,attention_mask:A=null,pixel_values:t=null,image_sizes:r=null,position_ids:n=null,inputs_embeds:a=null,past_key_values:s=null,generation_config:i=null,logits_processor:o=null,...l}){if(!a){let A;if(t&&1!==e.dims[1]){if(!r)throw new Error("`image_sizes` must be provided when `pixel_values` is provided.");({image_features:A}=await O(this.sessions.vision_encoder,{pixel_values:t,image_sizes:r}))}else{const e=this.config.normalized_config.hidden_size;A=new u.Tensor("float32",[],[0,e])}({inputs_embeds:a}=await O(this.sessions.prepare_inputs_embeds,{input_ids:e,image_features:A}))}return await W(this,{inputs_embeds:a,past_key_values:s,attention_mask:A,position_ids:n,generation_config:i,logits_processor:o},!1)}}class Vt extends te{}class Wt extends Vt{}class Ut extends Vt{static async from_pretrained(e,A={}){return super.from_pretrained(e,{...A,model_file_name:A.model_file_name??"text_model"})}}class Kt extends Vt{static async from_pretrained(e,A={}){return super.from_pretrained(e,{...A,model_file_name:A.model_file_name??"text_model"})}}class Zt extends Vt{static async from_pretrained(e,A={}){return super.from_pretrained(e,{...A,model_file_name:A.model_file_name??"vision_model"})}}class Xt extends Vt{static async from_pretrained(e,A={}){return super.from_pretrained(e,{...A,model_file_name:A.model_file_name??"vision_model"})}}class qt extends te{}class Jt extends qt{}class _t extends qt{static async from_pretrained(e,A={}){return super.from_pretrained(e,{...A,model_file_name:A.model_file_name??"text_model"})}}class $t extends Vt{static async from_pretrained(e,A={}){return super.from_pretrained(e,{...A,model_file_name:A.model_file_name??"vision_model"})}}class er extends te{}class Ar extends er{}class tr extends te{}class rr extends tr{async forward(e){const A=!e.input_ids,t=!e.pixel_values;if(A&&t)throw new Error("Either `input_ids` or `pixel_values` should be provided.");if(A&&(e.input_ids=(0,u.ones)([e.pixel_values.dims[0],1])),t){const{image_size:A}=this.config.vision_config;e.pixel_values=(0,u.full)([0,3,A,A],0)}const{text_embeddings:r,image_embeddings:n,l2norm_text_embeddings:a,l2norm_image_embeddings:s}=await super.forward(e),i={};return A||(i.text_embeddings=r,i.l2norm_text_embeddings=a),t||(i.image_embeddings=n,i.l2norm_image_embeddings=s),i}}class nr extends tr{static async from_pretrained(e,A={}){return super.from_pretrained(e,{...A,model_file_name:A.model_file_name??"text_model"})}}class ar extends tr{static async from_pretrained(e,A={}){return super.from_pretrained(e,{...A,model_file_name:A.model_file_name??"vision_model"})}}class sr extends te{}class ir extends sr{}class or extends sr{}class lr extends te{}class cr extends lr{}class gr extends lr{}class ur extends te{}class dr extends ur{}class fr extends ur{}class pr extends te{}class hr extends pr{}class mr extends pr{}class Cr extends te{}class br extends Cr{}class Ir extends Cr{}class wr extends te{}class kr extends wr{}class xr extends wr{}class vr extends te{}class Br extends vr{}class yr extends vr{}class Er extends te{}class Mr extends Er{}class Gr extends Er{}class Dr extends te{}class Qr extends Dr{}class Tr extends Dr{}class Pr extends te{}class zr extends Pr{}class Fr extends Pr{}class Sr extends te{}class Nr extends Sr{}class Or extends Sr{}class Lr extends te{}class Yr extends Lr{}class Hr extends Lr{}class Rr extends te{}class jr extends Rr{}class Vr extends Rr{}class Wr extends te{}class Ur extends Wr{}class Kr extends Wr{}class Zr extends te{}class Xr extends Zr{}class qr extends Zr{}class Jr extends te{}class _r extends Jr{}class $r extends Jr{}class en extends te{}class An extends en{}class tn extends en{}class rn extends te{}class nn extends rn{}class an extends rn{}class sn extends te{}class on extends sn{}class ln extends sn{}class cn extends te{}class gn extends cn{}class un extends cn{}class dn extends te{}class fn extends dn{}class pn extends dn{}class hn extends te{}class mn extends hn{}class Cn extends hn{}class bn extends te{}class In extends bn{}class wn extends bn{}class kn extends te{forward_params=["input_ids","attention_mask","position_ids","past_key_values","pixel_values","image_grid_thw"]}class xn extends kn{get_rope_index(e,A,t,r){const{vision_config:n,image_token_id:a,video_token_id:s,vision_start_token_id:i}=this.config,o=n.spatial_merge_size??2,l=[];if(A||t){let n=e.tolist();r||(r=(0,u.ones_like)(e));const c=r.tolist(),g=Array.from({length:3},(A=>Array.from({length:e.dims[0]},(A=>Array.from({length:e.dims[1]},(e=>1)))))),d=A?A.tolist():[],p=t?t.tolist():[];let h=0,m=0;for(let e=0;e<n.length;++e){const A=n[e].filter(((A,t)=>1==c[e][t])),t=A.reduce(((e,A,t)=>(A==i&&e.push(t),e)),[]),r=t.map((e=>A[e+1])),u=r.filter((e=>e==a)).length,C=r.filter((e=>e==s)).length;let b=[],I=0,w=u,k=C;for(let e=0;e<r.length;++e){const e=A.findIndex(((e,A)=>A>I&&e==a)),t=A.findIndex(((e,A)=>A>I&&e==s)),r=w>0&&-1!==e?e:A.length+1,n=k>0&&-1!==t?t:A.length+1;let i,l,c,g;r<n?([l,c,g]=d[h],++h,--w,i=r):([l,c,g]=p[m],++m,--k,i=n);const[u,C,x]=[Number(l),Math.floor(Number(c)/o),Math.floor(Number(g)/o)],v=i-I,B=b.length>0?(0,f.max)(b.at(-1))[0]+1:0;b.push(Array.from({length:3*v},((e,A)=>B+A%v)));const y=v+B,E=u*C*x,M=Array.from({length:E},((e,A)=>y+Math.floor(A/(C*x)))),G=Array.from({length:E},((e,A)=>y+Math.floor(A/x)%C)),D=Array.from({length:E},((e,A)=>y+A%x));b.push([M,G,D].flat()),I=i+E}if(I<A.length){const e=b.length>0?(0,f.max)(b.at(-1))[0]+1:0,t=A.length-I;b.push(Array.from({length:3*t},((A,r)=>e+r%t)))}const x=b.reduce(((e,A)=>e+A.length),0),v=new Array(x);let B=0;for(let e=0;e<3;++e)for(let A=0;A<b.length;++A){const t=b[A],r=t.length/3;for(let A=e*r;A<(e+1)*r;++A)v[B++]=t[A]}let y=0;const E=c[e];for(let A=0;A<E.length;++A)if(1==E[A]){for(let t=0;t<3;++t)g[t][e][A]=v[t*x/3+y];++y}const M=(0,f.max)(v)[0];l.push(M+1-n[e].length)}return[new u.Tensor("int64",g.flat(1/0),[3,e.dims[0],e.dims[1]]),new u.Tensor("int64",l,[l.length,1])]}if(r){const{data:e,dims:A}=J(r),t=BigInt64Array.from({length:3*e.length},((A,t)=>e[t%e.length])),n=Array.from({length:A[0]},((t,r)=>(0,f.max)(e.subarray(A[1]*r,A[1]*(r+1)))[0]+1n+BigInt(A[1])));return[new u.Tensor("int64",t,[3,...A]),new u.Tensor("int64",n,[n.length,1])]}{const[A,t]=e.dims,r=BigInt64Array.from({length:3*A*t},((e,r)=>BigInt(Math.floor(r%t/A))));return[new u.Tensor("int64",r,[3,...e.dims]),(0,u.zeros)([A,1])]}}async encode_image({pixel_values:e,image_grid_thw:A}){return(await O(this.sessions.vision_encoder,{pixel_values:e,grid_thw:A})).image_features}_merge_input_ids_with_image_features(e){return K({image_token_id:this.config.image_token_id,...e})}prepare_inputs_for_generation(e,A,t){if(A.attention_mask&&!A.position_ids)if(A.past_key_values){A.pixel_values=null;const e=BigInt(Object.values(A.past_key_values)[0].dims.at(-2)),t=A.rope_deltas.map((A=>e+A));A.position_ids=(0,u.stack)([t,t,t],0)}else[A.position_ids,A.rope_deltas]=this.get_rope_index(A.input_ids,A.image_grid_thw,A.video_grid_thw,A.attention_mask);return A}}class vn extends te{}class Bn extends vn{}class yn extends vn{}class En extends te{}class Mn extends En{}class Gn extends En{}class Dn extends te{}class Qn extends Dn{}class Tn extends Dn{}class Pn extends te{}class zn extends Pn{}class Fn extends Pn{}class Sn extends te{}class Nn extends Sn{}class On extends Sn{}class Ln extends te{}class Yn extends Ln{}class Hn extends Ln{async _call(e){return new Fc(await super._call(e))}}class Rn extends te{}class jn extends Rn{}class Vn extends Rn{async _call(e){return new Fc(await super._call(e))}}class Wn extends te{}class Un extends Wn{}class Kn extends te{}class Zn extends Kn{}class Xn extends Kn{async _call(e){return new Fc(await super._call(e))}}class qn extends te{}class Jn extends qn{}class _n extends te{}class $n extends _n{}class ea extends _n{async _call(e){return new Fc(await super._call(e))}}class Aa extends te{}class ta extends Aa{}class ra extends te{}class na extends ra{}class aa extends ra{async _call(e){return new Fc(await super._call(e))}}class sa extends te{}class ia extends sa{async _call(e){return new Rc(await super._call(e))}}class oa extends te{}class la extends oa{}class ca extends oa{async _call(e){return new Fc(await super._call(e))}}class ga extends te{}class ua extends ga{}class da extends ga{async _call(e){return new Fc(await super._call(e))}}class fa extends te{}class pa extends fa{}class ha extends fa{}class ma extends te{}class Ca extends ma{}class ba extends ma{}class Ia extends te{}class wa extends Ia{}class ka extends Ia{async _call(e){return new Fc(await super._call(e))}}class xa extends te{}class va extends xa{}class Ba extends xa{async _call(e){return new Ea(await super._call(e))}}class ya extends xa{async _call(e){return new Ma(await super._call(e))}}class Ea extends re{constructor({logits:e,pred_boxes:A}){super(),this.logits=e,this.pred_boxes=A}}class Ma extends re{constructor({logits:e,pred_boxes:A,pred_masks:t}){super(),this.logits=e,this.pred_boxes=A,this.pred_masks=t}}class Ga extends te{}class Da extends Ga{}class Qa extends Ga{async _call(e){return new Ta(await super._call(e))}}class Ta extends re{constructor({logits:e,pred_boxes:A}){super(),this.logits=e,this.pred_boxes=A}}class Pa extends te{}class za extends Pa{}class Fa extends Pa{async _call(e){return new Sa(await super._call(e))}}class Sa extends Ta{}class Na extends te{}class Oa extends Na{}class La extends Na{async _call(e){return new Ya(await super._call(e))}}class Ya extends Ta{}class Ha extends te{}class Ra extends Ha{}class ja extends Ha{async _call(e){return new Ta(await super._call(e))}}class Va extends te{}class Wa extends Va{}class Ua extends Va{async _call(e){return new Ka(await super._call(e))}}class Ka extends Ea{}class Za extends te{}class Xa extends Za{}class qa extends Za{async _call(e){return new Fc(await super._call(e))}}class Ja extends te{}class _a extends Ja{}class $a extends Ja{async _call(e){return new Fc(await super._call(e))}}class es extends te{}class As extends es{}class ts extends es{async _call(e){return new Fc(await super._call(e))}}class rs extends te{}class ns extends rs{}class as extends rs{async _call(e){return new Fc(await super._call(e))}}class ss extends rs{}class is extends te{}class os extends is{}class ls extends is{}class cs extends te{}class gs extends cs{}class us extends cs{}class ds extends te{}class fs extends ds{}class ps extends te{}class hs extends ps{}class ms extends ps{}class Cs extends ps{}class bs extends te{}class Is extends bs{}class ws extends te{}class ks extends ws{}class xs extends te{}class vs extends xs{}class Bs extends te{}class ys extends Bs{}class Es extends Bs{}class Ms extends te{}class Gs extends Ms{}class Ds extends Ms{}class Qs extends te{}class Ts extends Qs{}class Ps extends te{}class zs extends Ps{}class Fs extends Ps{async _call(e){return new Fc(await super._call(e))}}class Ss extends te{}class Ns extends Ss{}class Os extends Ss{async _call(e){return new Fc(await super._call(e))}}class Ls extends te{}class Ys extends Ls{}class Hs extends Ls{async _call(e){return new Fc(await super._call(e))}}class Rs extends te{}class js extends Rs{}class Vs extends Rs{async _call(e){return new Fc(await super._call(e))}}class Ws extends te{}class Us extends Ws{}class Ks extends te{}class Zs extends Ks{}class Xs extends Ks{async _call(e){return new qs(await super._call(e))}}class qs extends re{constructor({logits:e,pred_boxes:A}){super(),this.logits=e,this.pred_boxes=A}}class Js extends te{}class _s extends Js{async get_image_embeddings({pixel_values:e}){return await j(this,{pixel_values:e})}async forward(e){if(e.image_embeddings&&e.image_positional_embeddings||(e={...e,...await this.get_image_embeddings(e)}),!e.input_labels&&e.input_points){const A=e.input_points.dims.slice(0,-1),t=A.reduce(((e,A)=>e*A),1);e.input_labels=new u.Tensor("int64",new BigInt64Array(t).fill(1n),A)}const A={image_embeddings:e.image_embeddings,image_positional_embeddings:e.image_positional_embeddings};return e.input_points&&(A.input_points=e.input_points),e.input_labels&&(A.input_labels=e.input_labels),e.input_boxes&&(A.input_boxes=e.input_boxes),await O(this.sessions.prompt_encoder_mask_decoder,A)}async _call(e){return new $s(await super._call(e))}}class $s extends re{constructor({iou_scores:e,pred_masks:A}){super(),this.iou_scores=e,this.pred_masks=A}}class ei extends te{}class Ai extends ei{}class ti extends ei{}class ri extends te{}class ni extends ri{}class ai extends ri{}class si extends te{}class ii extends si{}class oi extends si{async _call(e){return new Yc(await super._call(e))}}class li extends si{async _call(e){return new Fc(await super._call(e))}}class ci extends si{async _call(e){return new Nc(await super._call(e))}}class gi extends te{}class ui extends gi{}class di extends gi{async _call(e){return new Nc(await super._call(e))}}class fi extends te{}class pi extends fi{}class hi extends te{}class mi extends hi{}class Ci extends hi{async _call(e){return new Yc(await super._call(e))}}class bi extends hi{async _call(e){return new Fc(await super._call(e))}}class Ii extends te{}class wi extends Ii{}class ki extends Ii{async _call(e){return new Yc(await super._call(e))}}class xi extends Ii{async _call(e){return new Fc(await super._call(e))}}class vi extends Ii{async _call(e){return new Nc(await super._call(e))}}class Bi extends te{}class yi extends Bi{}class Ei extends Bi{async _call(e){return new Yc(await super._call(e))}}class Mi extends Bi{async _call(e){return new Fc(await super._call(e))}}class Gi extends te{}class Di extends si{}class Qi extends si{async _call(e){return new Yc(await super._call(e))}}class Ti extends si{async _call(e){return new Fc(await super._call(e))}}class Pi extends te{}class zi extends Pi{}class Fi extends Pi{async _call(e){return new Yc(await super._call(e))}}class Si extends Pi{async _call(e){return new Fc(await super._call(e))}}class Ni extends Pi{async _call(e){return new Sc(await super._call(e))}}class Oi extends Pi{async _call(e){return new Nc(await super._call(e))}}class Li extends te{}class Yi extends Li{}class Hi extends te{}class Ri extends Hi{}class ji extends Hi{}class Vi extends Hi{async generate_speech(e,A,{threshold:t=.5,minlenratio:r=0,maxlenratio:n=20,vocoder:a=null}={}){const s={input_ids:e},{encoder_outputs:i,encoder_attention_mask:o}=await j(this,s),l=i.dims[1]/this.config.reduction_factor,c=Math.floor(l*n),g=Math.floor(l*r),d=this.config.num_mel_bins;let f=[],p=null,h=null,m=0;for(;;){++m;const e=H(!!h);let r;r=h?h.output_sequence_out:new u.Tensor("float32",new Float32Array(d),[1,1,d]);let n={use_cache_branch:e,output_sequence:r,encoder_attention_mask:o,speaker_embeddings:A,encoder_hidden_states:i};this.addPastKeyValues(n,p),h=await O(this.sessions.decoder_model_merged,n),p=this.getPastKeyValues(h,p);const{prob:a,spectrum:s}=h;if(f.push(s),m>=g&&(Array.from(a.data).filter((e=>e>=t)).length>0||m>=c))break}const C=(0,u.cat)(f),{waveform:b}=await O(a.sessions.model,{spectrogram:C});return{spectrogram:C,waveform:b}}}class Wi extends te{main_input_name="spectrogram"}class Ui extends te{}class Ki extends Ui{}class Zi extends te{}class Xi extends Zi{}class qi extends Zi{}class Ji extends te{}class _i extends Ji{}class $i extends Ji{}class eo extends te{}class Ao extends eo{}class to extends eo{}class ro extends te{}class no extends ro{}class ao extends ro{static async from_pretrained(e,A={}){return super.from_pretrained(e,{...A,model_file_name:A.model_file_name??"text_model"})}}class so extends ro{static async from_pretrained(e,A={}){return super.from_pretrained(e,{...A,model_file_name:A.model_file_name??"audio_model"})}}class io extends te{}class oo extends io{async _call(e){return new jc(await super._call(e))}}class lo extends te{}class co extends lo{}class go extends lo{}class uo extends lo{}class fo extends te{}class po extends fo{}class ho extends fo{}class mo extends te{}class Co extends mo{}class bo extends mo{async _call(e){return new Fc(await super._call(e))}}class Io extends te{}class wo extends Io{}class ko extends Io{}class xo extends te{forward_params=["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"];_apply_and_filter_by_delay_pattern_mask(e){const[A,t]=e.dims,r=this.config.decoder.num_codebooks,n=t-r;let a=0;for(let A=0;A<e.size;++A){if(e.data[A]===this.config.decoder.pad_token_id)continue;const s=A%t-Math.floor(A/t)%r;s>0&&s<=n&&(e.data[a++]=e.data[A])}const s=Math.floor(A/r),i=a/(s*r);return new u.Tensor(e.type,e.data.slice(0,a),[s,r,i])}prepare_inputs_for_generation(e,A,t){let r=structuredClone(e);for(let e=0;e<r.length;++e)for(let A=0;A<r[e].length;++A)e%this.config.decoder.num_codebooks>=A&&(r[e][A]=BigInt(this.config.decoder.pad_token_id));null!==t.guidance_scale&&t.guidance_scale>1&&(r=r.concat(r));return super.prepare_inputs_for_generation(r,A,t)}async generate(e){const A=await super.generate(e),t=this._apply_and_filter_by_delay_pattern_mask(A).unsqueeze_(0),{audio_values:r}=await O(this.sessions.encodec_decode,{audio_codes:t});return r}}class vo extends te{}class Bo extends vo{}class yo extends vo{async _call(e){return new Fc(await super._call(e))}}class Eo extends vo{}class Mo extends te{}class Go extends Mo{}class Do extends Mo{async _call(e){return new Fc(await super._call(e))}}class Qo extends Mo{}class To extends te{}class Po extends To{}class zo extends To{async _call(e){return new Fc(await super._call(e))}}class Fo extends To{}class So extends te{}class No extends So{}class Oo extends So{async _call(e){return new Fc(await super._call(e))}}class Lo extends So{}class Yo extends te{}class Ho extends Yo{}class Ro extends te{}class jo extends Ro{forward_params=["input_ids","pixel_values","images_seq_mask","images_emb_mask","attention_mask","position_ids","past_key_values"];constructor(...e){super(...e),this._generation_mode="text"}async forward(e){const A=this._generation_mode??"text";let t;if("text"!==A&&e.past_key_values){const A=this.sessions.gen_img_embeds,r=(0,i.pick)({image_ids:e.input_ids},A.inputNames);t=await O(A,r)}else{const A=this.sessions.prepare_inputs_embeds,r=(0,i.pick)(e,A.inputNames);t=await O(A,r)}const r={...e,...t},n=await W(this,r),a=this.sessions["text"===A?"lm_head":"gen_head"];if(!a)throw new Error(`Unable to find "${a}" generation head`);const s=await O(a,(0,i.pick)(n,a.inputNames));return{...t,...n,...s}}async generate(e){return this._generation_mode="text",super.generate(e)}async generate_images(e){this._generation_mode="image";const A=(e.inputs??e[this.main_input_name]).dims[1],t=(await super.generate(e)).slice(null,[A,null]),r=this.sessions.image_decode,{decoded_image:n}=await O(r,{generated_tokens:t}),a=n.add_(1).mul_(127.5).clamp_(0,255).to("uint8"),s=[];for(const e of a){const A=d.RawImage.fromTensor(e);s.push(A)}return s}}class Vo extends re{constructor({char_logits:e,bpe_logits:A,wp_logits:t}){super(),this.char_logits=e,this.bpe_logits=A,this.wp_logits=t}get logits(){return[this.char_logits,this.bpe_logits,this.wp_logits]}}class Wo extends te{}class Uo extends Wo{async _call(e){return new Vo(await super._call(e))}}class Ko extends te{}class Zo extends Ko{}class Xo extends Ko{}class qo extends te{}class Jo extends qo{}class _o extends qo{}class $o extends te{forward_params=["input_ids","attention_mask","position_ids","audio_values","past_key_values"]}class el extends $o{_merge_input_ids_with_audio_features(e){const A=e.audio_features.dims.at(-1),t=e.audio_features.view(-1,A);return function({audio_token_id:e,inputs_embeds:A,audio_features:t,input_ids:r,attention_mask:n}){return U({modality_token_id:e,inputs_embeds:A,modality_features:t,input_ids:r,attention_mask:n})}({audio_token_id:this.config.ignore_index,...e,audio_features:t})}}class Al extends te{main_input_name="input_values";forward_params=["input_values"]}class tl extends re{constructor({audio_codes:e}){super(),this.audio_codes=e}}class rl extends re{constructor({audio_values:e}){super(),this.audio_values=e}}class nl extends Al{async encode(e){return new tl(await O(this.sessions.encoder_model,e))}async decode(e){return new rl(await O(this.sessions.decoder_model,e))}}class al extends Al{static async from_pretrained(e,A={}){return super.from_pretrained(e,{...A,model_file_name:A.model_file_name??"encoder_model"})}}class sl extends Al{static async from_pretrained(e,A={}){return super.from_pretrained(e,{...A,model_file_name:A.model_file_name??"decoder_model"})}}class il extends te{main_input_name="input_values";forward_params=["input_values"]}class ol extends re{constructor({audio_codes:e}){super(),this.audio_codes=e}}class ll extends re{constructor({audio_values:e}){super(),this.audio_values=e}}class cl extends il{async encode(e){return new ol(await O(this.sessions.encoder_model,e))}async decode(e){return new ll(await O(this.sessions.decoder_model,e))}}class gl extends il{static async from_pretrained(e,A={}){return super.from_pretrained(e,{...A,model_file_name:A.model_file_name??"encoder_model"})}}class ul extends il{static async from_pretrained(e,A={}){return super.from_pretrained(e,{...A,model_file_name:A.model_file_name??"decoder_model"})}}class dl extends te{main_input_name="input_values";forward_params=["input_values"]}class fl extends dl{async encode(e){return await O(this.sessions.encoder_model,e)}async decode(e){return await O(this.sessions.decoder_model,e)}}class pl extends dl{static async from_pretrained(e,A={}){return super.from_pretrained(e,{...A,model_file_name:A.model_file_name??"encoder_model"})}}class hl extends dl{static async from_pretrained(e,A={}){return super.from_pretrained(e,{...A,model_file_name:A.model_file_name??"decoder_model"})}}class ml{static MODEL_CLASS_MAPPINGS=null;static BASE_IF_FAIL=!1;static async from_pretrained(e,{progress_callback:A=null,config:t=null,cache_dir:n=null,local_files_only:a=!1,revision:s="main",model_file_name:i=null,subfolder:o="onnx",device:l=null,dtype:c=null,use_external_data_format:g=null,session_options:u={}}={}){const d={progress_callback:A,config:t,cache_dir:n,local_files_only:a,revision:s,model_file_name:i,subfolder:o,device:l,dtype:c,use_external_data_format:g,session_options:u};if(d.config=await r.AutoConfig.from_pretrained(e,d),!this.MODEL_CLASS_MAPPINGS)throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: "+this.name);const f=d.config.model_type;for(const A of this.MODEL_CLASS_MAPPINGS){let t=A.get(f);if(!t){for(const e of A.values())if(e[0]===f){t=e;break}if(!t)continue}return await t[1].from_pretrained(e,d)}if(this.BASE_IF_FAIL)return tc.has(f)||console.warn(`Unknown model class "${f}", attempting to construct from base class.`),await te.from_pretrained(e,d);throw Error(`Unsupported model type: ${f}`)}}const Cl=new Map([["bert",["BertModel",se]],["modernbert",["ModernBertModel",ue]],["nomic_bert",["NomicBertModel",me]],["roformer",["RoFormerModel",be]],["electra",["ElectraModel",Qe]],["esm",["EsmModel",iA]],["convbert",["ConvBertModel",Be]],["camembert",["CamembertModel",Ne]],["deberta",["DebertaModel",je]],["deberta-v2",["DebertaV2Model",Xe]],["mpnet",["MPNetModel",mA]],["albert",["AlbertModel",MA]],["distilbert",["DistilBertModel",AA]],["roberta",["RobertaModel",rt]],["xlm",["XLMModel",lt]],["xlm-roberta",["XLMRobertaModel",pt]],["clap",["ClapModel",no]],["clip",["CLIPModel",Wt]],["clipseg",["CLIPSegModel",ir]],["chinese_clip",["ChineseCLIPModel",Ar]],["siglip",["SiglipModel",Jt]],["jina_clip",["JinaCLIPModel",rr]],["mobilebert",["MobileBertModel",uA]],["squeezebert",["SqueezeBertModel",xA]],["wav2vec2",["Wav2Vec2Model",ii]],["wav2vec2-bert",["Wav2Vec2BertModel",yi]],["unispeech",["UniSpeechModel",mi]],["unispeech-sat",["UniSpeechSatModel",wi]],["hubert",["HubertModel",Di]],["wavlm",["WavLMModel",zi]],["audio-spectrogram-transformer",["ASTModel",wt]],["vits",["VitsModel",oo]],["pyannote",["PyAnnoteModel",ui]],["wespeaker-resnet",["WeSpeakerResNetModel",pi]],["detr",["DetrModel",va]],["rt_detr",["RTDetrModel",Da]],["rt_detr_v2",["RTDetrV2Model",za]],["rf_detr",["RFDetrModel",Oa]],["d_fine",["DFineModel",Ra]],["table-transformer",["TableTransformerModel",Wa]],["vit",["ViTModel",Yn]],["ijepa",["IJepaModel",jn]],["pvt",["PvtModel",Zn]],["vit_msn",["ViTMSNModel",$n]],["vit_mae",["ViTMAEModel",Jn]],["groupvit",["GroupViTModel",ta]],["fastvit",["FastViTModel",na]],["mobilevit",["MobileViTModel",la]],["mobilevitv2",["MobileViTV2Model",ua]],["owlvit",["OwlViTModel",pa]],["owlv2",["Owlv2Model",Ca]],["beit",["BeitModel",wa]],["deit",["DeiTModel",Xa]],["hiera",["HieraModel",_a]],["convnext",["ConvNextModel",zs]],["convnextv2",["ConvNextV2Model",Ns]],["dinov2",["Dinov2Model",Ys]],["dinov2_with_registers",["Dinov2WithRegistersModel",js]],["resnet",["ResNetModel",As]],["swin",["SwinModel",ns]],["swin2sr",["Swin2SRModel",os]],["donut-swin",["DonutSwinModel",Ts]],["yolos",["YolosModel",Zs]],["dpt",["DPTModel",gs]],["glpn",["GLPNModel",Gs]],["hifigan",["SpeechT5HifiGan",Wi]],["efficientnet",["EfficientNetModel",Co]],["decision_transformer",["DecisionTransformerModel",Ho]],["patchtst",["PatchTSTForPrediction",Zo]],["patchtsmixer",["PatchTSMixerForPrediction",Jo]],["mobilenet_v1",["MobileNetV1Model",Bo]],["mobilenet_v2",["MobileNetV2Model",Go]],["mobilenet_v3",["MobileNetV3Model",Po]],["mobilenet_v4",["MobileNetV4Model",No]],["maskformer",["MaskFormerModel",ys]],["mgp-str",["MgpstrForSceneTextRecognition",Uo]],["style_text_to_speech_2",["StyleTextToSpeech2Model",Yi]]]),bl=new Map([["t5",["T5Model",PA]],["longt5",["LongT5Model",SA]],["mt5",["MT5Model",LA]],["bart",["BartModel",RA]],["mbart",["MBartModel",UA]],["marian",["MarianModel",Ai]],["whisper",["WhisperModel",vt]],["m2m_100",["M2M100Model",ni]],["blenderbot",["BlenderbotModel",JA]],["blenderbot-small",["BlenderbotSmallModel",et]]]),Il=new Map([["mimi",["MimiModel",nl]],["dac",["DacModel",cl]],["snac",["SnacModel",fl]]]),wl=new Map([["bloom",["BloomModel",Qn]],["jais",["JAISModel",dr]],["gpt2",["GPT2Model",cr]],["gptj",["GPTJModel",kr]],["gpt_bigcode",["GPTBigCodeModel",Br]],["gpt_neo",["GPTNeoModel",hr]],["gpt_neox",["GPTNeoXModel",br]],["codegen",["CodeGenModel",Mr]],["llama",["LlamaModel",Qr]],["exaone",["ExaoneModel",Yr]],["olmo",["OlmoModel",Ur]],["olmo2",["Olmo2Model",Xr]],["mobilellm",["MobileLLMModel",jr]],["granite",["GraniteModel",_r]],["cohere",["CohereModel",An]],["gemma",["GemmaModel",nn]],["gemma2",["Gemma2Model",on]],["gemma3_text",["Gemma3Model",gn]],["helium",["HeliumModel",zr]],["glm",["GlmModel",Nr]],["openelm",["OpenELMModel",fn]],["qwen2",["Qwen2Model",mn]],["qwen3",["Qwen3Model",In]],["phi",["PhiModel",Bn]],["phi3",["Phi3Model",Mn]],["mpt",["MptModel",zn]],["opt",["OPTModel",Nn]],["mistral",["MistralModel",Xi]],["starcoder2",["Starcoder2Model",_i]],["falcon",["FalconModel",Ao]],["stablelm",["StableLmModel",po]]]),kl=new Map([["speecht5",["SpeechT5ForSpeechToText",ji]],["whisper",["WhisperForConditionalGeneration",Bt]],["lite-whisper",["LiteWhisperForConditionalGeneration",yt]],["moonshine",["MoonshineForConditionalGeneration",Gt]]]),xl=new Map([["speecht5",["SpeechT5ForTextToSpeech",Vi]]]),vl=new Map([["vits",["VitsModel",oo]],["musicgen",["MusicgenForConditionalGeneration",xo]]]),Bl=new Map([["bert",["BertForSequenceClassification",oe]],["modernbert",["ModernBertForSequenceClassification",fe]],["roformer",["RoFormerForSequenceClassification",we]],["electra",["ElectraForSequenceClassification",Pe]],["esm",["EsmForSequenceClassification",lA]],["convbert",["ConvBertForSequenceClassification",Ee]],["camembert",["CamembertForSequenceClassification",Le]],["deberta",["DebertaForSequenceClassification",We]],["deberta-v2",["DebertaV2ForSequenceClassification",Je]],["mpnet",["MPNetForSequenceClassification",bA]],["albert",["AlbertForSequenceClassification",GA]],["distilbert",["DistilBertForSequenceClassification",tA]],["roberta",["RobertaForSequenceClassification",at]],["xlm",["XLMForSequenceClassification",gt]],["xlm-roberta",["XLMRobertaForSequenceClassification",mt]],["bart",["BartForSequenceClassification",VA]],["mbart",["MBartForSequenceClassification",ZA]],["mobilebert",["MobileBertForSequenceClassification",fA]],["squeezebert",["SqueezeBertForSequenceClassification",BA]]]),yl=new Map([["bert",["BertForTokenClassification",le]],["modernbert",["ModernBertForTokenClassification",pe]],["roformer",["RoFormerForTokenClassification",ke]],["electra",["ElectraForTokenClassification",ze]],["esm",["EsmForTokenClassification",cA]],["convbert",["ConvBertForTokenClassification",Me]],["camembert",["CamembertForTokenClassification",Ye]],["deberta",["DebertaForTokenClassification",Ue]],["deberta-v2",["DebertaV2ForTokenClassification",_e]],["mpnet",["MPNetForTokenClassification",IA]],["distilbert",["DistilBertForTokenClassification",rA]],["roberta",["RobertaForTokenClassification",st]],["xlm",["XLMForTokenClassification",ut]],["xlm-roberta",["XLMRobertaForTokenClassification",Ct]]]),El=new Map([["t5",["T5ForConditionalGeneration",zA]],["longt5",["LongT5ForConditionalGeneration",NA]],["mt5",["MT5ForConditionalGeneration",YA]],["bart",["BartForConditionalGeneration",jA]],["mbart",["MBartForConditionalGeneration",KA]],["marian",["MarianMTModel",ti]],["m2m_100",["M2M100ForConditionalGeneration",ai]],["blenderbot",["BlenderbotForConditionalGeneration",_A]],["blenderbot-small",["BlenderbotSmallForConditionalGeneration",At]]]),Ml=new Map([["bloom",["BloomForCausalLM",Tn]],["gpt2",["GPT2LMHeadModel",gr]],["jais",["JAISLMHeadModel",fr]],["gptj",["GPTJForCausalLM",xr]],["gpt_bigcode",["GPTBigCodeForCausalLM",yr]],["gpt_neo",["GPTNeoForCausalLM",mr]],["gpt_neox",["GPTNeoXForCausalLM",Ir]],["codegen",["CodeGenForCausalLM",Gr]],["llama",["LlamaForCausalLM",Tr]],["exaone",["ExaoneForCausalLM",Hr]],["olmo",["OlmoForCausalLM",Kr]],["olmo2",["Olmo2ForCausalLM",qr]],["mobilellm",["MobileLLMForCausalLM",Vr]],["granite",["GraniteForCausalLM",$r]],["cohere",["CohereForCausalLM",tn]],["gemma",["GemmaForCausalLM",an]],["gemma2",["Gemma2ForCausalLM",ln]],["gemma3_text",["Gemma3ForCausalLM",un]],["helium",["HeliumForCausalLM",Fr]],["glm",["GlmForCausalLM",Or]],["openelm",["OpenELMForCausalLM",pn]],["qwen2",["Qwen2ForCausalLM",Cn]],["qwen3",["Qwen3ForCausalLM",wn]],["phi",["PhiForCausalLM",yn]],["phi3",["Phi3ForCausalLM",Gn]],["mpt",["MptForCausalLM",Fn]],["opt",["OPTForCausalLM",On]],["mbart",["MBartForCausalLM",XA]],["mistral",["MistralForCausalLM",qi]],["starcoder2",["Starcoder2ForCausalLM",$i]],["falcon",["FalconForCausalLM",to]],["trocr",["TrOCRForCausalLM",Ki]],["stablelm",["StableLmForCausalLM",ho]],["phi3_v",["Phi3VForCausalLM",jt]]]),Gl=new Map([["multi_modality",["MultiModalityCausalLM",jo]]]),Dl=new Map([["bert",["BertForMaskedLM",ie]],["modernbert",["ModernBertForMaskedLM",de]],["roformer",["RoFormerForMaskedLM",Ie]],["electra",["ElectraForMaskedLM",Te]],["esm",["EsmForMaskedLM",oA]],["convbert",["ConvBertForMaskedLM",ye]],["camembert",["CamembertForMaskedLM",Oe]],["deberta",["DebertaForMaskedLM",Ve]],["deberta-v2",["DebertaV2ForMaskedLM",qe]],["mpnet",["MPNetForMaskedLM",CA]],["albert",["AlbertForMaskedLM",QA]],["distilbert",["DistilBertForMaskedLM",aA]],["roberta",["RobertaForMaskedLM",nt]],["xlm",["XLMWithLMHeadModel",ct]],["xlm-roberta",["XLMRobertaForMaskedLM",ht]],["mobilebert",["MobileBertForMaskedLM",dA]],["squeezebert",["SqueezeBertForMaskedLM",vA]]]),Ql=new Map([["bert",["BertForQuestionAnswering",ce]],["roformer",["RoFormerForQuestionAnswering",xe]],["electra",["ElectraForQuestionAnswering",Fe]],["convbert",["ConvBertForQuestionAnswering",Ge]],["camembert",["CamembertForQuestionAnswering",He]],["deberta",["DebertaForQuestionAnswering",Ke]],["deberta-v2",["DebertaV2ForQuestionAnswering",$e]],["mpnet",["MPNetForQuestionAnswering",wA]],["albert",["AlbertForQuestionAnswering",DA]],["distilbert",["DistilBertForQuestionAnswering",nA]],["roberta",["RobertaForQuestionAnswering",it]],["xlm",["XLMForQuestionAnswering",dt]],["xlm-roberta",["XLMRobertaForQuestionAnswering",bt]],["mobilebert",["MobileBertForQuestionAnswering",pA]],["squeezebert",["SqueezeBertForQuestionAnswering",yA]]]),Tl=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",Dt]],["idefics3",["Idefics3ForConditionalGeneration",Yt]],["smolvlm",["SmolVLMForConditionalGeneration",Ht]]]),Pl=new Map([["llava",["LlavaForConditionalGeneration",Tt]],["llava_onevision",["LlavaOnevisionForConditionalGeneration",Pt]],["moondream1",["Moondream1ForConditionalGeneration",zt]],["florence2",["Florence2ForConditionalGeneration",St]],["qwen2-vl",["Qwen2VLForConditionalGeneration",xn]],["idefics3",["Idefics3ForConditionalGeneration",Yt]],["smolvlm",["SmolVLMForConditionalGeneration",Ht]],["paligemma",["PaliGemmaForConditionalGeneration",Ot]]]),zl=new Map([["ultravox",["UltravoxModel",el]]]),Fl=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",Dt]]]),Sl=new Map([["vit",["ViTForImageClassification",Hn]],["ijepa",["IJepaForImageClassification",Vn]],["pvt",["PvtForImageClassification",Xn]],["vit_msn",["ViTMSNForImageClassification",ea]],["fastvit",["FastViTForImageClassification",aa]],["mobilevit",["MobileViTForImageClassification",ca]],["mobilevitv2",["MobileViTV2ForImageClassification",da]],["beit",["BeitForImageClassification",ka]],["deit",["DeiTForImageClassification",qa]],["hiera",["HieraForImageClassification",$a]],["convnext",["ConvNextForImageClassification",Fs]],["convnextv2",["ConvNextV2ForImageClassification",Os]],["dinov2",["Dinov2ForImageClassification",Hs]],["dinov2_with_registers",["Dinov2WithRegistersForImageClassification",Vs]],["resnet",["ResNetForImageClassification",ts]],["swin",["SwinForImageClassification",as]],["segformer",["SegformerForImageClassification",go]],["efficientnet",["EfficientNetForImageClassification",bo]],["mobilenet_v1",["MobileNetV1ForImageClassification",yo]],["mobilenet_v2",["MobileNetV2ForImageClassification",Do]],["mobilenet_v3",["MobileNetV3ForImageClassification",zo]],["mobilenet_v4",["MobileNetV4ForImageClassification",Oo]]]),Nl=new Map([["detr",["DetrForObjectDetection",Ba]],["rt_detr",["RTDetrForObjectDetection",Qa]],["rt_detr_v2",["RTDetrV2ForObjectDetection",Fa]],["rf_detr",["RFDetrForObjectDetection",La]],["d_fine",["DFineForObjectDetection",ja]],["table-transformer",["TableTransformerForObjectDetection",Ua]],["yolos",["YolosForObjectDetection",Xs]]]),Ol=new Map([["owlvit",["OwlViTForObjectDetection",ha]],["owlv2",["Owlv2ForObjectDetection",ba]],["grounding-dino",["GroundingDinoForObjectDetection",Us]]]),Ll=new Map([["detr",["DetrForSegmentation",ya]],["clipseg",["CLIPSegForImageSegmentation",or]]]),Yl=new Map([["segformer",["SegformerForSemanticSegmentation",uo]],["sapiens",["SapiensForSemanticSegmentation",hs]],["swin",["SwinForSemanticSegmentation",ss]],["mobilenet_v1",["MobileNetV1ForSemanticSegmentation",Eo]],["mobilenet_v2",["MobileNetV2ForSemanticSegmentation",Qo]],["mobilenet_v3",["MobileNetV3ForSemanticSegmentation",Fo]],["mobilenet_v4",["MobileNetV4ForSemanticSegmentation",Lo]]]),Hl=new Map([["detr",["DetrForSegmentation",ya]],["maskformer",["MaskFormerForInstanceSegmentation",Es]]]),Rl=new Map([["sam",["SamModel",_s]]]),jl=new Map([["wav2vec2",["Wav2Vec2ForCTC",oi]],["wav2vec2-bert",["Wav2Vec2BertForCTC",Ei]],["unispeech",["UniSpeechForCTC",Ci]],["unispeech-sat",["UniSpeechSatForCTC",ki]],["wavlm",["WavLMForCTC",Fi]],["hubert",["HubertForCTC",Qi]]]),Vl=new Map([["wav2vec2",["Wav2Vec2ForSequenceClassification",li]],["wav2vec2-bert",["Wav2Vec2BertForSequenceClassification",Mi]],["unispeech",["UniSpeechForSequenceClassification",bi]],["unispeech-sat",["UniSpeechSatForSequenceClassification",xi]],["wavlm",["WavLMForSequenceClassification",Si]],["hubert",["HubertForSequenceClassification",Ti]],["audio-spectrogram-transformer",["ASTForAudioClassification",kt]]]),Wl=new Map([["wavlm",["WavLMForXVector",Ni]]]),Ul=new Map([["unispeech-sat",["UniSpeechSatForAudioFrameClassification",vi]],["wavlm",["WavLMForAudioFrameClassification",Oi]],["wav2vec2",["Wav2Vec2ForAudioFrameClassification",ci]],["pyannote",["PyAnnoteForAudioFrameClassification",di]]]),Kl=new Map([["vitmatte",["VitMatteForImageMatting",ia]]]),Zl=new Map([["patchtst",["PatchTSTForPrediction",Xo]],["patchtsmixer",["PatchTSMixerForPrediction",_o]]]),Xl=new Map([["swin2sr",["Swin2SRForImageSuperResolution",ls]]]),ql=new Map([["dpt",["DPTForDepthEstimation",us]],["depth_anything",["DepthAnythingForDepthEstimation",fs]],["glpn",["GLPNForDepthEstimation",Ds]],["sapiens",["SapiensForDepthEstimation",ms]],["depth_pro",["DepthProForDepthEstimation",Is]],["metric3d",["Metric3DForDepthEstimation",ks]],["metric3dv2",["Metric3Dv2ForDepthEstimation",vs]]]),Jl=new Map([["sapiens",["SapiensForNormalEstimation",Cs]]]),_l=new Map([["vitpose",["VitPoseForPoseEstimation",Un]]]),$l=new Map([["clip",["CLIPVisionModelWithProjection",Xt]],["siglip",["SiglipVisionModel",$t]],["jina_clip",["JinaCLIPVisionModel",ar]]]),ec=[[Cl,I],[bl,w],[wl,v],[Il,Q],[Bl,I],[yl,I],[El,k],[kl,k],[Ml,v],[Gl,M],[Dl,I],[Ql,I],[Tl,x],[Pl,y],[zl,D],[Sl,I],[Ll,I],[Hl,I],[Yl,I],[Kl,I],[Zl,I],[Xl,I],[ql,I],[Jl,I],[_l,I],[Nl,I],[Ol,I],[Rl,B],[jl,I],[Vl,I],[xl,k],[vl,I],[Wl,I],[Ul,I],[$l,I]];for(const[e,A]of ec)for(const[t,r]of e.values())T.set(t,A),z.set(r,t),P.set(t,r);const Ac=[["MusicgenForConditionalGeneration",xo,E],["Phi3VForCausalLM",jt,G],["CLIPTextModelWithProjection",Kt,I],["SiglipTextModel",_t,I],["JinaCLIPTextModel",nr,I],["ClapTextModelWithProjection",ao,I],["ClapAudioModelWithProjection",so,I],["DacEncoderModel",gl,I],["DacDecoderModel",ul,I],["MimiEncoderModel",al,I],["MimiDecoderModel",sl,I],["SnacEncoderModel",pl,I],["SnacDecoderModel",hl,I]];for(const[e,A,t]of Ac)T.set(e,t),z.set(A,e),P.set(e,A);const tc=new Map([["modnet",Ll],["birefnet",Ll],["isnet",Ll],["ben",Ll]]);for(const[e,A]of tc.entries())A.set(e,["PreTrainedModel",te]),T.set(e,I),z.set(te,e),P.set(e,te);class rc extends ml{static MODEL_CLASS_MAPPINGS=ec.map((e=>e[0]));static BASE_IF_FAIL=!0}class nc extends ml{static MODEL_CLASS_MAPPINGS=[Bl]}class ac extends ml{static MODEL_CLASS_MAPPINGS=[yl]}class sc extends ml{static MODEL_CLASS_MAPPINGS=[El]}class ic extends ml{static MODEL_CLASS_MAPPINGS=[kl]}class oc extends ml{static MODEL_CLASS_MAPPINGS=[xl]}class lc extends ml{static MODEL_CLASS_MAPPINGS=[vl]}class cc extends ml{static MODEL_CLASS_MAPPINGS=[Ml]}class gc extends ml{static MODEL_CLASS_MAPPINGS=[Dl]}class uc extends ml{static MODEL_CLASS_MAPPINGS=[Ql]}class dc extends ml{static MODEL_CLASS_MAPPINGS=[Tl]}class fc extends ml{static MODEL_CLASS_MAPPINGS=[Sl]}class pc extends ml{static MODEL_CLASS_MAPPINGS=[Ll]}class hc extends ml{static MODEL_CLASS_MAPPINGS=[Yl]}class mc extends ml{static MODEL_CLASS_MAPPINGS=[Hl]}class Cc extends ml{static MODEL_CLASS_MAPPINGS=[Nl]}class bc extends ml{static MODEL_CLASS_MAPPINGS=[Ol]}class Ic extends ml{static MODEL_CLASS_MAPPINGS=[Rl]}class wc extends ml{static MODEL_CLASS_MAPPINGS=[jl]}class kc extends ml{static MODEL_CLASS_MAPPINGS=[Vl]}class xc extends ml{static MODEL_CLASS_MAPPINGS=[Wl]}class vc extends ml{static MODEL_CLASS_MAPPINGS=[Ul]}class Bc extends ml{static MODEL_CLASS_MAPPINGS=[Fl]}class yc extends ml{static MODEL_CLASS_MAPPINGS=[Kl]}class Ec extends ml{static MODEL_CLASS_MAPPINGS=[Xl]}class Mc extends ml{static MODEL_CLASS_MAPPINGS=[ql]}class Gc extends ml{static MODEL_CLASS_MAPPINGS=[Jl]}class Dc extends ml{static MODEL_CLASS_MAPPINGS=[_l]}class Qc extends ml{static MODEL_CLASS_MAPPINGS=[$l]}class Tc extends ml{static MODEL_CLASS_MAPPINGS=[Pl]}class Pc extends ml{static MODEL_CLASS_MAPPINGS=[zl]}class zc extends re{constructor({logits:e,past_key_values:A,encoder_outputs:t,decoder_attentions:r=null,cross_attentions:n=null}){super(),this.logits=e,this.past_key_values=A,this.encoder_outputs=t,this.decoder_attentions=r,this.cross_attentions=n}}class Fc extends re{constructor({logits:e,...A}){super(),this.logits=e;const t=Object.values(A);t.length>0&&(this.attentions=t)}}class Sc extends re{constructor({logits:e,embeddings:A}){super(),this.logits=e,this.embeddings=A}}class Nc extends re{constructor({logits:e}){super(),this.logits=e}}class Oc extends re{constructor({logits:e}){super(),this.logits=e}}class Lc extends re{constructor({start_logits:e,end_logits:A}){super(),this.start_logits=e,this.end_logits=A}}class Yc extends re{constructor({logits:e}){super(),this.logits=e}}class Hc extends re{constructor({logits:e,past_key_values:A}){super(),this.logits=e,this.past_key_values=A}}class Rc extends re{constructor({alphas:e}){super(),this.alphas=e}}class jc extends re{constructor({waveform:e,spectrogram:A}){super(),this.waveform=e,this.spectrogram=A}}},"./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js":(e,A,t)=>{t.r(A),t.d(A,{ASTFeatureExtractor:()=>a});var r=t("./src/base/feature_extraction_utils.js");t("./src/utils/tensor.js");var n=t("./src/utils/audio.js");class a extends r.FeatureExtractor{constructor(e){super(e);const A=this.config.sampling_rate,t=(0,n.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(A/2),A,null,"kaldi",!0);this.mel_filters=t,this.window=(0,n.window_function)(400,"hann",{periodic:!1}),this.mean=this.config.mean,this.std=this.config.std}async _extract_fbank_features(e,A){return(0,n.spectrogram)(e,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1.192092955078125e-7,remove_dc_offset:!0,max_num_frames:A,transpose:!0})}async _call(e){(0,r.validate_audio_inputs)(e,"ASTFeatureExtractor");const A=await this._extract_fbank_features(e,this.config.max_length);if(this.config.do_normalize){const e=2*this.std,t=A.data;for(let A=0;A<t.length;++A)t[A]=(t[A]-this.mean)/e}return{input_values:A.unsqueeze_(0)}}}},"./src/models/auto/feature_extraction_auto.js":(e,A,t)=>{t.r(A),t.d(A,{AutoFeatureExtractor:()=>s});var r=t("./src/utils/constants.js"),n=t("./src/utils/hub.js");t("./src/base/feature_extraction_utils.js");var a=t("./src/models/feature_extractors.js");class s{static async from_pretrained(e,A={}){const t=await(0,n.getModelJSON)(e,r.FEATURE_EXTRACTOR_NAME,!0,A),s=t.feature_extractor_type,i=a[s];if(!i)throw new Error(`Unknown feature_extractor_type: '${s}'. Please report this at ${r.GITHUB_ISSUE_URL}.`);return new i(t)}}},"./src/models/auto/image_processing_auto.js":(e,A,t)=>{t.r(A),t.d(A,{AutoImageProcessor:()=>i});var r=t("./src/utils/constants.js"),n=t("./src/utils/hub.js"),a=t("./src/base/image_processors_utils.js"),s=t("./src/models/image_processors.js");class i{static async from_pretrained(e,A={}){const t=await(0,n.getModelJSON)(e,r.IMAGE_PROCESSOR_NAME,!0,A),i=t.image_processor_type??t.feature_extractor_type;let o=s[i];return o||(void 0!==i&&console.warn(`Image processor type '${i}' not found, assuming base ImageProcessor. Please report this at ${r.GITHUB_ISSUE_URL}.`),o=a.ImageProcessor),new o(t)}}},"./src/models/auto/processing_auto.js":(e,A,t)=>{t.r(A),t.d(A,{AutoProcessor:()=>l});var r=t("./src/utils/constants.js"),n=t("./src/utils/hub.js"),a=t("./src/base/processing_utils.js"),s=t("./src/models/processors.js"),i=t("./src/models/image_processors.js"),o=t("./src/models/feature_extractors.js");class l{static async from_pretrained(e,A={}){const t=await(0,n.getModelJSON)(e,r.IMAGE_PROCESSOR_NAME,!0,A),{image_processor_type:l,feature_extractor_type:c,processor_class:g}=t;if(g&&s[g])return s[g].from_pretrained(e,A);if(!l&&!c)throw new Error("No `image_processor_type` or `feature_extractor_type` found in the config.");const u={};if(l){const e=i[l];if(!e)throw new Error(`Unknown image_processor_type: '${l}'.`);u.image_processor=new e(t)}if(c){const e=i[c];if(e)u.image_processor=new e(t);else{const e=o[c];if(!e)throw new Error(`Unknown feature_extractor_type: '${c}'.`);u.feature_extractor=new e(t)}}return new a.Processor({},u)}}},"./src/models/beit/image_processing_beit.js":(e,A,t)=>{t.r(A),t.d(A,{BeitFeatureExtractor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{}},"./src/models/bit/image_processing_bit.js":(e,A,t)=>{t.r(A),t.d(A,{BitImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{}},"./src/models/chinese_clip/image_processing_chinese_clip.js":(e,A,t)=>{t.r(A),t.d(A,{ChineseCLIPFeatureExtractor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{}},"./src/models/clap/feature_extraction_clap.js":(e,A,t)=>{t.r(A),t.d(A,{ClapFeatureExtractor:()=>a});var r=t("./src/base/feature_extraction_utils.js");t("./src/utils/tensor.js");var n=t("./src/utils/audio.js");class a extends r.FeatureExtractor{constructor(e){super(e),this.mel_filters=(0,n.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,null,"htk"),this.mel_filters_slaney=(0,n.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,"slaney","slaney"),this.window=(0,n.window_function)(this.config.fft_window_size,"hann")}async _get_input_mel(e,A,t,r){let n;const a=e.length-A;if(a>0){if("rand_trunc"!==t)throw new Error(`Truncation strategy "${t}" not implemented`);{const t=Math.floor(Math.random()*(a+1));e=e.subarray(t,t+A),n=await this._extract_fbank_features(e,this.mel_filters_slaney,this.config.nb_max_samples)}}else{if(a<0){let t=new Float64Array(A);if(t.set(e),"repeat"===r)for(let r=e.length;r<A;r+=e.length)t.set(e.subarray(0,Math.min(e.length,A-r)),r);else if("repeatpad"===r)for(let A=e.length;A<-a;A+=e.length)t.set(e,A);e=t}if("fusion"===t)throw new Error(`Truncation strategy "${t}" not implemented`);n=await this._extract_fbank_features(e,this.mel_filters_slaney,this.config.nb_max_samples)}return n.unsqueeze_(0)}async _extract_fbank_features(e,A,t=null){return(0,n.spectrogram)(e,this.window,this.config.fft_window_size,this.config.hop_length,{power:2,mel_filters:A,log_mel:"dB",max_num_frames:t,do_pad:!1,transpose:!0})}async _call(e,{max_length:A=null}={}){(0,r.validate_audio_inputs)(e,"ClapFeatureExtractor");return{input_features:(await this._get_input_mel(e,A??this.config.nb_max_samples,this.config.truncation,this.config.padding)).unsqueeze_(0)}}}},"./src/models/clip/image_processing_clip.js":(e,A,t)=>{t.r(A),t.d(A,{CLIPFeatureExtractor:()=>a,CLIPImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{}class a extends n{}},"./src/models/convnext/image_processing_convnext.js":(e,A,t)=>{t.r(A),t.d(A,{ConvNextFeatureExtractor:()=>a,ConvNextImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{constructor(e){super(e),this.crop_pct=this.config.crop_pct??.875}async resize(e){const A=this.size?.shortest_edge;if(void 0===A)throw new Error("Size dictionary must contain 'shortest_edge' key.");if(A<384){const t=Math.floor(A/this.crop_pct),[r,n]=this.get_resize_output_image_size(e,{shortest_edge:t});e=await e.resize(r,n,{resample:this.resample}),e=await e.center_crop(A,A)}else e=await e.resize(A,A,{resample:this.resample});return e}}class a extends n{}},"./src/models/dac/feature_extraction_dac.js":(e,A,t)=>{t.r(A),t.d(A,{DacFeatureExtractor:()=>n});var r=t("./src/models/encodec/feature_extraction_encodec.js");class n extends r.EncodecFeatureExtractor{}},"./src/models/deit/image_processing_deit.js":(e,A,t)=>{t.r(A),t.d(A,{DeiTFeatureExtractor:()=>a,DeiTImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{}class a extends n{}},"./src/models/detr/image_processing_detr.js":(e,A,t)=>{t.r(A),t.d(A,{DetrFeatureExtractor:()=>s,DetrImageProcessor:()=>a});var r=t("./src/base/image_processors_utils.js"),n=t("./src/utils/tensor.js");class a extends r.ImageProcessor{async _call(e){const A=await super._call(e),t=[A.pixel_values.dims[0],64,64],r=(0,n.full)(t,1n);return{...A,pixel_mask:r}}post_process_object_detection(...e){return(0,r.post_process_object_detection)(...e)}post_process_panoptic_segmentation(...e){return(0,r.post_process_panoptic_segmentation)(...e)}post_process_instance_segmentation(...e){return(0,r.post_process_instance_segmentation)(...e)}}class s extends a{}},"./src/models/donut/image_processing_donut.js":(e,A,t)=>{t.r(A),t.d(A,{DonutFeatureExtractor:()=>a,DonutImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{pad_image(e,A,t,r={}){const[n,a,s]=A;let i=this.image_mean;Array.isArray(this.image_mean)||(i=new Array(s).fill(i));let o=this.image_std;Array.isArray(o)||(o=new Array(s).fill(i));const l=i.map(((e,A)=>-e/o[A]));return super.pad_image(e,A,t,{center:!0,constant_values:l,...r})}}class a extends n{}},"./src/models/dpt/image_processing_dpt.js":(e,A,t)=>{t.r(A),t.d(A,{DPTFeatureExtractor:()=>a,DPTImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{}class a extends n{}},"./src/models/efficientnet/image_processing_efficientnet.js":(e,A,t)=>{t.r(A),t.d(A,{EfficientNetImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{constructor(e){super(e),this.include_top=this.config.include_top??!0,this.include_top&&(this.image_std=this.image_std.map((e=>e*e)))}}},"./src/models/encodec/feature_extraction_encodec.js":(e,A,t)=>{t.r(A),t.d(A,{EncodecFeatureExtractor:()=>a});var r=t("./src/base/feature_extraction_utils.js"),n=t("./src/utils/tensor.js");class a extends r.FeatureExtractor{async _call(e){(0,r.validate_audio_inputs)(e,"EncodecFeatureExtractor"),e instanceof Float64Array&&(e=new Float32Array(e));const A=this.config.feature_size;if(e.length%A!=0)throw new Error(`The length of the audio data must be a multiple of the number of channels (${A}).`);const t=[1,A,e.length/A];return{input_values:new n.Tensor("float32",e,t)}}}},"./src/models/feature_extractors.js":(e,A,t)=>{t.r(A),t.d(A,{ASTFeatureExtractor:()=>r.ASTFeatureExtractor,ClapFeatureExtractor:()=>a.ClapFeatureExtractor,DacFeatureExtractor:()=>s.DacFeatureExtractor,EncodecFeatureExtractor:()=>n.EncodecFeatureExtractor,ImageFeatureExtractor:()=>p.ImageProcessor,MoonshineFeatureExtractor:()=>i.MoonshineFeatureExtractor,PyAnnoteFeatureExtractor:()=>o.PyAnnoteFeatureExtractor,SeamlessM4TFeatureExtractor:()=>l.SeamlessM4TFeatureExtractor,SnacFeatureExtractor:()=>c.SnacFeatureExtractor,SpeechT5FeatureExtractor:()=>g.SpeechT5FeatureExtractor,Wav2Vec2FeatureExtractor:()=>u.Wav2Vec2FeatureExtractor,WeSpeakerFeatureExtractor:()=>d.WeSpeakerFeatureExtractor,WhisperFeatureExtractor:()=>f.WhisperFeatureExtractor});var r=t("./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js"),n=t("./src/models/encodec/feature_extraction_encodec.js"),a=t("./src/models/clap/feature_extraction_clap.js"),s=t("./src/models/dac/feature_extraction_dac.js"),i=t("./src/models/moonshine/feature_extraction_moonshine.js"),o=t("./src/models/pyannote/feature_extraction_pyannote.js"),l=t("./src/models/seamless_m4t/feature_extraction_seamless_m4t.js"),c=t("./src/models/snac/feature_extraction_snac.js"),g=t("./src/models/speecht5/feature_extraction_speecht5.js"),u=t("./src/models/wav2vec2/feature_extraction_wav2vec2.js"),d=t("./src/models/wespeaker/feature_extraction_wespeaker.js"),f=t("./src/models/whisper/feature_extraction_whisper.js"),p=t("./src/base/image_processors_utils.js")},"./src/models/florence2/processing_florence2.js":(e,A,t)=>{t.r(A),t.d(A,{Florence2Processor:()=>s});var r=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),a=t("./src/tokenizers.js");class s extends r.Processor{static tokenizer_class=a.AutoTokenizer;static image_processor_class=n.AutoImageProcessor;constructor(e,A){super(e,A);const{tasks_answer_post_processing_type:t,task_prompts_without_inputs:r,task_prompts_with_input:n}=this.image_processor.config;this.tasks_answer_post_processing_type=new Map(Object.entries(t??{})),this.task_prompts_without_inputs=new Map(Object.entries(r??{})),this.task_prompts_with_input=new Map(Object.entries(n??{})),this.regexes={quad_boxes:/(.+?)<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm,bboxes:/([^<]+)?<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm},this.size_per_bin=1e3}construct_prompts(e){"string"==typeof e&&(e=[e]);const A=[];for(const t of e)if(this.task_prompts_without_inputs.has(t))A.push(this.task_prompts_without_inputs.get(t));else{for(const[e,r]of this.task_prompts_with_input)if(t.includes(e)){A.push(r.replaceAll("{input}",t).replaceAll(e,""));break}A.length!==e.length&&A.push(t)}return A}post_process_generation(e,A,t){const r=this.tasks_answer_post_processing_type.get(A)??"pure_text";let n;switch(e=e.replaceAll("<s>","").replaceAll("</s>",""),r){case"pure_text":n=e;break;case"description_with_bboxes":case"bboxes":case"phrase_grounding":case"ocr":const a="ocr"===r?"quad_boxes":"bboxes",s=e.matchAll(this.regexes[a]),i=[],o=[];for(const[e,A,...r]of s)i.push(A?A.trim():i.at(-1)??""),o.push(r.map(((e,A)=>(Number(e)+.5)/this.size_per_bin*t[A%2])));n={labels:i,[a]:o};break;default:throw new Error(`Task "${A}" (of type "${r}") not yet implemented.`)}return{[A]:n}}async _call(e,A=null,t={}){if(!e&&!A)throw new Error("Either text or images must be provided");return{...await this.image_processor(e,t),...A?this.tokenizer(A,t):{}}}}},"./src/models/glpn/image_processing_glpn.js":(e,A,t)=>{t.r(A),t.d(A,{GLPNFeatureExtractor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{}},"./src/models/grounding_dino/image_processing_grounding_dino.js":(e,A,t)=>{t.r(A),t.d(A,{GroundingDinoImageProcessor:()=>a});var r=t("./src/base/image_processors_utils.js"),n=t("./src/utils/tensor.js");class a extends r.ImageProcessor{async _call(e){const A=await super._call(e),t=A.pixel_values.dims,r=(0,n.ones)([t[0],t[2],t[3]]);return{...A,pixel_mask:r}}}},"./src/models/grounding_dino/processing_grounding_dino.js":(e,A,t)=>{t.r(A),t.d(A,{GroundingDinoProcessor:()=>o});var r=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),a=t("./src/tokenizers.js"),s=t("./src/base/image_processors_utils.js");function i(e,A){const t=e.dims.at(-1)-1,r=e.tolist();r.fill(!1,0,1),r.fill(!1,t);const n=A.tolist();return r.map(((e,A)=>e?A:null)).filter((e=>null!==e)).map((e=>n[e]))}class o extends r.Processor{static tokenizer_class=a.AutoTokenizer;static image_processor_class=n.AutoImageProcessor;async _call(e,A,t={}){const r=e?await this.image_processor(e,t):{};return{...A?this.tokenizer(A,t):{},...r}}post_process_grounded_object_detection(e,A,{box_threshold:t=.25,text_threshold:r=.25,target_sizes:n=null}={}){const{logits:a,pred_boxes:o}=e,l=a.dims[0];if(null!==n&&n.length!==l)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const c=a.dims.at(1),g=a.sigmoid(),u=g.max(-1).tolist(),d=o.tolist().map((e=>e.map((e=>(0,s.center_to_corners_format)(e))))),f=[];for(let e=0;e<l;++e){const a=null!==n?n[e]:null;null!==a&&(d[e]=d[e].map((e=>e.map(((e,A)=>e*a[(A+1)%2])))));const s=u[e],o=[],l=[],p=[];for(let n=0;n<c;++n){const a=s[n];if(a<=t)continue;const c=d[e][n],u=g[e][n];o.push(a),p.push(c);const f=i(u.gt(r),A[e]);l.push(f)}f.push({scores:o,boxes:p,labels:this.batch_decode(l)})}return f}}},"./src/models/idefics3/image_processing_idefics3.js":(e,A,t)=>{t.r(A),t.d(A,{Idefics3ImageProcessor:()=>a});var r=t("./src/base/image_processors_utils.js"),n=t("./src/utils/tensor.js");class a extends r.ImageProcessor{constructor(e){super(e),this.do_image_splitting=e.do_image_splitting??!0,this.max_image_size=e.max_image_size}get_resize_for_vision_encoder(e,A){let[t,r]=e.dims.slice(-2);const n=r/t;return r>=t?(r=Math.ceil(r/A)*A,t=Math.floor(r/n),t=Math.ceil(t/A)*A):(t=Math.ceil(t/A)*A,r=Math.floor(t*n),r=Math.ceil(r/A)*A),{height:t,width:r}}async _call(e,{do_image_splitting:A=null,return_row_col_info:t=!1}={}){let r;if(Array.isArray(e)){if(0===e.length||!e[0])throw new Error("No images provided.");r=Array.isArray(e[0])?e:[e]}else r=[[e]];let a=[],s=[],i=[];const o=[],l=[];for(const e of r){let t=await Promise.all(e.map((e=>this.preprocess(e))));o.push(...t.map((e=>e.original_size))),l.push(...t.map((e=>e.reshaped_input_size))),t.forEach((e=>e.pixel_values.unsqueeze_(0)));const{longest_edge:r}=this.max_image_size;let c;if(A??this.do_image_splitting){let e=new Array(t.length),A=new Array(t.length);c=await Promise.all(t.map((async(t,a)=>{const s=this.get_resize_for_vision_encoder(t.pixel_values,r),i=await(0,n.interpolate_4d)(t.pixel_values,{size:[s.height,s.width]}),{frames:o,num_splits_h:l,num_splits_w:c}=await this.split_image(i,this.max_image_size);return e[a]=l,A[a]=c,(0,n.cat)(o,0)}))),s.push(e),i.push(A)}else{const e=[r,r];c=await Promise.all(t.map((A=>(0,n.interpolate_4d)(A.pixel_values,{size:e})))),s.push(new Array(t.length).fill(0)),i.push(new Array(t.length).fill(0))}a.push((0,n.cat)(c,0))}const c=a.length,[g,u,d,f]=a[0].dims;let p,h;if(1===c)p=a[0].unsqueeze_(0),h=(0,n.full)([c,g,d,f],!0);else{const e=Math.max(...a.map((e=>e.dims.at(0))));h=(0,n.full)([c,e,d,f],!0);const A=h.data,t=e*d*f;for(let r=0;r<c;++r){const s=a[r].dims[0];if(s<e){a[r]=(0,n.cat)([a[r],(0,n.full)([e-s,u,d,f],0)],0);const i=r*t+s*d*f,o=(r+1)*t;A.fill(!1,i,o)}}p=(0,n.stack)(a,0)}return{pixel_values:p,pixel_attention_mask:h,original_sizes:o,reshaped_input_sizes:l,...t?{rows:s,cols:i}:{}}}async split_image(e,{longest_edge:A}){const t=A,r=A,a=[],[s,i]=e.dims.slice(-2);let o=0,l=0;if(s>t||i>r){o=Math.ceil(s/t),l=Math.ceil(i/r);const A=Math.ceil(s/o),c=Math.ceil(i/l);for(let t=0;t<o;++t)for(let r=0;r<l;++r){let g,u,d,f;t===o-1?(u=s-A,f=s):(u=t*A,f=(t+1)*A),r===l-1?(g=i-c,d=i):(g=r*c,d=(r+1)*c);const p=[u,g],h=[f,d],m=await(0,n.slice)(e,p,h,[2,3]);a.push(m)}const g=t,u=r;s===g&&i===u||(e=await(0,n.interpolate_4d)(e,{size:[g,u]}))}return a.push(e),{frames:a,num_splits_h:o,num_splits_w:l}}}},"./src/models/idefics3/processing_idefics3.js":(e,A,t)=>{t.r(A),t.d(A,{Idefics3Processor:()=>o});var r=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),a=t("./src/tokenizers.js");t("./src/utils/image.js");var s=t("./src/utils/core.js");function i(e,A,t,r,n,a){return 0===e&&0===A?function(e,A,t,r){return`${A}${r}`+t.repeat(e)+`${A}`}(t,r,n,a):function(e,A,t,r,n,a){let s="";for(let a=0;a<A;++a){for(let A=0;A<t;++A)s+=r+`<row_${a+1}_col_${A+1}>`+n.repeat(e);s+="\n"}return s+=`\n${r}${a}`+n.repeat(e)+`${r}`,s}(t,e,A,r,n,a)}class o extends r.Processor{static image_processor_class=n.AutoImageProcessor;static tokenizer_class=a.AutoTokenizer;static uses_processor_config=!0;fake_image_token="<fake_token_around_image>";image_token="<image>";global_img_token="<global-img>";async _call(e,A=null,t={}){let r;t.return_row_col_info??=!0,A&&(r=await this.image_processor(A,t)),Array.isArray(e)||(e=[e]);const n=r.rows??[new Array(e.length).fill(0)],a=r.cols??[new Array(e.length).fill(0)],o=this.config.image_seq_len,l=[],c=[];for(let A=0;A<e.length;++A){const t=e[A],r=n[A],g=a[A];l.push((0,s.count)(t,this.image_token));const u=r.map(((e,A)=>i(e,g[A],o,this.fake_image_token,this.image_token,this.global_img_token))),d=t.split(this.image_token);if(0===d.length)throw new Error("The image token should be present in the text.");let f=d[0];for(let e=0;e<u.length;++e)f+=u[e]+d[e+1];c.push(f)}return{...this.tokenizer(c),...r}}}},"./src/models/image_processors.js":(e,A,t)=>{t.r(A),t.d(A,{BeitFeatureExtractor:()=>r.BeitFeatureExtractor,BitImageProcessor:()=>n.BitImageProcessor,CLIPFeatureExtractor:()=>s.CLIPFeatureExtractor,CLIPImageProcessor:()=>s.CLIPImageProcessor,ChineseCLIPFeatureExtractor:()=>a.ChineseCLIPFeatureExtractor,ConvNextFeatureExtractor:()=>i.ConvNextFeatureExtractor,ConvNextImageProcessor:()=>i.ConvNextImageProcessor,DPTFeatureExtractor:()=>g.DPTFeatureExtractor,DPTImageProcessor:()=>g.DPTImageProcessor,DeiTFeatureExtractor:()=>o.DeiTFeatureExtractor,DeiTImageProcessor:()=>o.DeiTImageProcessor,DetrFeatureExtractor:()=>l.DetrFeatureExtractor,DetrImageProcessor:()=>l.DetrImageProcessor,DonutFeatureExtractor:()=>c.DonutFeatureExtractor,DonutImageProcessor:()=>c.DonutImageProcessor,EfficientNetImageProcessor:()=>u.EfficientNetImageProcessor,GLPNFeatureExtractor:()=>d.GLPNFeatureExtractor,GroundingDinoImageProcessor:()=>f.GroundingDinoImageProcessor,Idefics3ImageProcessor:()=>p.Idefics3ImageProcessor,JinaCLIPImageProcessor:()=>m.JinaCLIPImageProcessor,LlavaOnevisionImageProcessor:()=>C.LlavaOnevisionImageProcessor,Mask2FormerImageProcessor:()=>b.Mask2FormerImageProcessor,MaskFormerFeatureExtractor:()=>I.MaskFormerFeatureExtractor,MaskFormerImageProcessor:()=>I.MaskFormerImageProcessor,MobileNetV1FeatureExtractor:()=>w.MobileNetV1FeatureExtractor,MobileNetV1ImageProcessor:()=>w.MobileNetV1ImageProcessor,MobileNetV2FeatureExtractor:()=>k.MobileNetV2FeatureExtractor,MobileNetV2ImageProcessor:()=>k.MobileNetV2ImageProcessor,MobileNetV3FeatureExtractor:()=>x.MobileNetV3FeatureExtractor,MobileNetV3ImageProcessor:()=>x.MobileNetV3ImageProcessor,MobileNetV4FeatureExtractor:()=>v.MobileNetV4FeatureExtractor,MobileNetV4ImageProcessor:()=>v.MobileNetV4ImageProcessor,MobileViTFeatureExtractor:()=>B.MobileViTFeatureExtractor,MobileViTImageProcessor:()=>B.MobileViTImageProcessor,NougatImageProcessor:()=>y.NougatImageProcessor,OwlViTFeatureExtractor:()=>M.OwlViTFeatureExtractor,OwlViTImageProcessor:()=>M.OwlViTImageProcessor,Owlv2ImageProcessor:()=>E.Owlv2ImageProcessor,Phi3VImageProcessor:()=>G.Phi3VImageProcessor,PvtImageProcessor:()=>D.PvtImageProcessor,Qwen2VLImageProcessor:()=>Q.Qwen2VLImageProcessor,RTDetrImageProcessor:()=>T.RTDetrImageProcessor,SamImageProcessor:()=>P.SamImageProcessor,SegformerFeatureExtractor:()=>z.SegformerFeatureExtractor,SegformerImageProcessor:()=>z.SegformerImageProcessor,SiglipImageProcessor:()=>F.SiglipImageProcessor,SmolVLMImageProcessor:()=>S.SmolVLMImageProcessor,Swin2SRImageProcessor:()=>N.Swin2SRImageProcessor,VLMImageProcessor:()=>h.VLMImageProcessor,ViTFeatureExtractor:()=>O.ViTFeatureExtractor,ViTImageProcessor:()=>O.ViTImageProcessor,VitMatteImageProcessor:()=>L.VitMatteImageProcessor,VitPoseImageProcessor:()=>Y.VitPoseImageProcessor,YolosFeatureExtractor:()=>H.YolosFeatureExtractor,YolosImageProcessor:()=>H.YolosImageProcessor});var r=t("./src/models/beit/image_processing_beit.js"),n=t("./src/models/bit/image_processing_bit.js"),a=t("./src/models/chinese_clip/image_processing_chinese_clip.js"),s=t("./src/models/clip/image_processing_clip.js"),i=t("./src/models/convnext/image_processing_convnext.js"),o=t("./src/models/deit/image_processing_deit.js"),l=t("./src/models/detr/image_processing_detr.js"),c=t("./src/models/donut/image_processing_donut.js"),g=t("./src/models/dpt/image_processing_dpt.js"),u=t("./src/models/efficientnet/image_processing_efficientnet.js"),d=t("./src/models/glpn/image_processing_glpn.js"),f=t("./src/models/grounding_dino/image_processing_grounding_dino.js"),p=t("./src/models/idefics3/image_processing_idefics3.js"),h=t("./src/models/janus/image_processing_janus.js"),m=t("./src/models/jina_clip/image_processing_jina_clip.js"),C=t("./src/models/llava_onevision/image_processing_llava_onevision.js"),b=t("./src/models/mask2former/image_processing_mask2former.js"),I=t("./src/models/maskformer/image_processing_maskformer.js"),w=t("./src/models/mobilenet_v1/image_processing_mobilenet_v1.js"),k=t("./src/models/mobilenet_v2/image_processing_mobilenet_v2.js"),x=t("./src/models/mobilenet_v3/image_processing_mobilenet_v3.js"),v=t("./src/models/mobilenet_v4/image_processing_mobilenet_v4.js"),B=t("./src/models/mobilevit/image_processing_mobilevit.js"),y=t("./src/models/nougat/image_processing_nougat.js"),E=t("./src/models/owlv2/image_processing_owlv2.js"),M=t("./src/models/owlvit/image_processing_owlvit.js"),G=t("./src/models/phi3_v/image_processing_phi3_v.js"),D=t("./src/models/pvt/image_processing_pvt.js"),Q=t("./src/models/qwen2_vl/image_processing_qwen2_vl.js"),T=t("./src/models/rt_detr/image_processing_rt_detr.js"),P=t("./src/models/sam/image_processing_sam.js"),z=t("./src/models/segformer/image_processing_segformer.js"),F=t("./src/models/siglip/image_processing_siglip.js"),S=t("./src/models/smolvlm/image_processing_smolvlm.js"),N=t("./src/models/swin2sr/image_processing_swin2sr.js"),O=t("./src/models/vit/image_processing_vit.js"),L=t("./src/models/vitmatte/image_processing_vitmatte.js"),Y=t("./src/models/vitpose/image_processing_vitpose.js"),H=t("./src/models/yolos/image_processing_yolos.js")},"./src/models/janus/image_processing_janus.js":(e,A,t)=>{t.r(A),t.d(A,{VLMImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{constructor(e){super({do_pad:!0,pad_size:{width:e.image_size,height:e.image_size},...e}),this.constant_values=this.config.background_color.map((e=>e*this.rescale_factor))}pad_image(e,A,t,r){return super.pad_image(e,A,t,{constant_values:this.constant_values,center:!0,...r})}}},"./src/models/janus/processing_janus.js":(e,A,t)=>{t.r(A),t.d(A,{VLChatProcessor:()=>l});var r=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),a=t("./src/tokenizers.js"),s=t("./src/utils/core.js"),i=t("./src/utils/tensor.js"),o=t("./src/utils/image.js");class l extends r.Processor{static image_processor_class=n.AutoImageProcessor;static tokenizer_class=a.AutoTokenizer;static uses_processor_config=!0;constructor(e,A){super(e,A),this.image_tag=this.config.image_tag,this.image_start_tag=this.config.image_start_tag,this.image_end_tag=this.config.image_end_tag,this.num_image_tokens=this.config.num_image_tokens}async _call(e,{images:A=null,chat_template:t="default"}={}){A?Array.isArray(A)||(A=[A]):A=await Promise.all(e.filter((e=>e.images)).flatMap((e=>e.images)).map((e=>o.RawImage.read(e))));const r=this.tokenizer,n=e=>r.encode(e,{add_special_tokens:!1}),a=r.apply_chat_template(e,{tokenize:!1,add_generation_prompt:!0,chat_template:t}).split(this.image_tag),l=a.length-1;if(A.length!==l)throw new Error(`Number of images provided (${A.length}) does not match number of "${this.image_tag}" image tags (${l})`);const[c,g,u]=r.model.convert_tokens_to_ids([this.image_tag,this.image_start_tag,this.image_end_tag]);let d=n(a[0]),f=new Array(d.length).fill(!1);for(let e=1;e<a.length;++e){const A=new Array(this.num_image_tokens).fill(c),t=n(a[e]);d=(0,s.mergeArrays)(d,[g],A,[u],t);const r=new Array(this.num_image_tokens).fill(!0);f=(0,s.mergeArrays)(f,[!1],r,[!1],new Array(t.length).fill(!1))}const p=[1,d.length],h={input_ids:new i.Tensor("int64",d,p),attention_mask:new i.Tensor("int64",new Array(d.length).fill(1),p),images_seq_mask:new i.Tensor("bool",f,p),images_emb_mask:new i.Tensor("bool",new Array(l*this.num_image_tokens).fill(!0),[1,l,this.num_image_tokens])};if(A&&A.length>0){const e=await this.image_processor(A);return e.pixel_values.unsqueeze_(0),{...h,...e}}return h}}},"./src/models/jina_clip/image_processing_jina_clip.js":(e,A,t)=>{t.r(A),t.d(A,{JinaCLIPImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{constructor(e){const{resize_mode:A,fill_color:t,interpolation:r,size:n,...a}=e;super({...a,size:"squash"===A?{width:n,height:n}:"shortest"===A?{shortest_edge:n}:{longest_edge:n},resample:"bicubic"===r?3:2,do_center_crop:!0,crop_size:n,do_normalize:!0})}}},"./src/models/jina_clip/processing_jina_clip.js":(e,A,t)=>{t.r(A),t.d(A,{JinaCLIPProcessor:()=>s});var r=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),a=t("./src/tokenizers.js");class s extends r.Processor{static tokenizer_class=a.AutoTokenizer;static image_processor_class=n.AutoImageProcessor;async _call(e=null,A=null,t={}){if(!e&&!A)throw new Error("Either text or images must be provided");return{...e?this.tokenizer(e,t):{},...A?await this.image_processor(A,t):{}}}}},"./src/models/llava_onevision/image_processing_llava_onevision.js":(e,A,t)=>{t.r(A),t.d(A,{LlavaOnevisionImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{}},"./src/models/mask2former/image_processing_mask2former.js":(e,A,t)=>{t.r(A),t.d(A,{Mask2FormerImageProcessor:()=>n});var r=t("./src/models/maskformer/image_processing_maskformer.js");class n extends r.MaskFormerImageProcessor{}},"./src/models/maskformer/image_processing_maskformer.js":(e,A,t)=>{t.r(A),t.d(A,{MaskFormerFeatureExtractor:()=>a,MaskFormerImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{post_process_panoptic_segmentation(...e){return(0,r.post_process_panoptic_segmentation)(...e)}post_process_instance_segmentation(...e){return(0,r.post_process_instance_segmentation)(...e)}}class a extends n{}},"./src/models/mgp_str/processing_mgp_str.js":(e,A,t)=>{t.r(A),t.d(A,{MgpstrProcessor:()=>o});var r=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),a=t("./src/tokenizers.js"),s=t("./src/utils/maths.js");const i={char:["char_decode",1],bpe:["bpe_decode",2],wp:["wp_decode",102]};class o extends r.Processor{static tokenizer_class=a.AutoTokenizer;static image_processor_class=n.AutoImageProcessor;get char_tokenizer(){return this.components.char_tokenizer}get bpe_tokenizer(){return this.components.bpe_tokenizer}get wp_tokenizer(){return this.components.wp_tokenizer}_decode_helper(e,A){if(!i.hasOwnProperty(A))throw new Error(`Format ${A} is not supported.`);const[t,r]=i[A],n=this[t].bind(this),[a,o]=e.dims,l=[],c=[],g=e.tolist();for(let e=0;e<a;++e){const A=g[e],t=[],n=[];for(let e=1;e<o;++e){const[a,i]=(0,s.max)((0,s.softmax)(A[e]));if(n.push(a),i==r)break;t.push(i)}const a=n.length>0?n.reduce(((e,A)=>e*A),1):0;c.push(t),l.push(a)}return[n(c),l]}char_decode(e){return this.char_tokenizer.batch_decode(e).map((e=>e.replaceAll(" ","")))}bpe_decode(e){return this.bpe_tokenizer.batch_decode(e)}wp_decode(e){return this.wp_tokenizer.batch_decode(e).map((e=>e.replaceAll(" ","")))}batch_decode([e,A,t]){const[r,n]=this._decode_helper(e,"char"),[a,i]=this._decode_helper(A,"bpe"),[o,l]=this._decode_helper(t,"wp"),c=[],g=[];for(let e=0;e<r.length;++e){const[A,t]=(0,s.max)([n[e],i[e],l[e]]);c.push([r[e],a[e],o[e]][t]),g.push(A)}return{generated_text:c,scores:g,char_preds:r,bpe_preds:a,wp_preds:o}}static async from_pretrained(...e){const A=await super.from_pretrained(...e),t=await a.AutoTokenizer.from_pretrained("Xenova/gpt2"),r=await a.AutoTokenizer.from_pretrained("Xenova/bert-base-uncased");return A.components={image_processor:A.image_processor,char_tokenizer:A.tokenizer,bpe_tokenizer:t,wp_tokenizer:r},A}async _call(e,A=null){const t=await this.image_processor(e);return A&&(t.labels=this.tokenizer(A).input_ids),t}}},"./src/models/mobilenet_v1/image_processing_mobilenet_v1.js":(e,A,t)=>{t.r(A),t.d(A,{MobileNetV1FeatureExtractor:()=>a,MobileNetV1ImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{}class a extends n{}},"./src/models/mobilenet_v2/image_processing_mobilenet_v2.js":(e,A,t)=>{t.r(A),t.d(A,{MobileNetV2FeatureExtractor:()=>a,MobileNetV2ImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{}class a extends n{}},"./src/models/mobilenet_v3/image_processing_mobilenet_v3.js":(e,A,t)=>{t.r(A),t.d(A,{MobileNetV3FeatureExtractor:()=>a,MobileNetV3ImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{}class a extends n{}},"./src/models/mobilenet_v4/image_processing_mobilenet_v4.js":(e,A,t)=>{t.r(A),t.d(A,{MobileNetV4FeatureExtractor:()=>a,MobileNetV4ImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{}class a extends n{}},"./src/models/mobilevit/image_processing_mobilevit.js":(e,A,t)=>{t.r(A),t.d(A,{MobileViTFeatureExtractor:()=>a,MobileViTImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{}class a extends n{}},"./src/models/moonshine/feature_extraction_moonshine.js":(e,A,t)=>{t.r(A),t.d(A,{MoonshineFeatureExtractor:()=>a});var r=t("./src/base/feature_extraction_utils.js"),n=t("./src/utils/tensor.js");class a extends r.FeatureExtractor{async _call(e){(0,r.validate_audio_inputs)(e,"MoonshineFeatureExtractor"),e instanceof Float64Array&&(e=new Float32Array(e));const A=[1,e.length];return{input_values:new n.Tensor("float32",e,A)}}}},"./src/models/moonshine/processing_moonshine.js":(e,A,t)=>{t.r(A),t.d(A,{MoonshineProcessor:()=>s});var r=t("./src/models/auto/feature_extraction_auto.js"),n=t("./src/tokenizers.js"),a=t("./src/base/processing_utils.js");class s extends a.Processor{static tokenizer_class=n.AutoTokenizer;static feature_extractor_class=r.AutoFeatureExtractor;async _call(e){return await this.feature_extractor(e)}}},"./src/models/nougat/image_processing_nougat.js":(e,A,t)=>{t.r(A),t.d(A,{NougatImageProcessor:()=>n});var r=t("./src/models/donut/image_processing_donut.js");class n extends r.DonutImageProcessor{}},"./src/models/owlv2/image_processing_owlv2.js":(e,A,t)=>{t.r(A),t.d(A,{Owlv2ImageProcessor:()=>n});var r=t("./src/models/owlvit/image_processing_owlvit.js");class n extends r.OwlViTImageProcessor{}},"./src/models/owlvit/image_processing_owlvit.js":(e,A,t)=>{t.r(A),t.d(A,{OwlViTFeatureExtractor:()=>a,OwlViTImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{post_process_object_detection(...e){return(0,r.post_process_object_detection)(...e)}}class a extends n{}},"./src/models/owlvit/processing_owlvit.js":(e,A,t)=>{t.r(A),t.d(A,{OwlViTProcessor:()=>s});var r=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),a=t("./src/tokenizers.js");class s extends r.Processor{static tokenizer_class=a.AutoTokenizer;static image_processor_class=n.AutoImageProcessor}},"./src/models/paligemma/processing_paligemma.js":(e,A,t)=>{t.r(A),t.d(A,{PaliGemmaProcessor:()=>i});var r=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),a=t("./src/tokenizers.js");const s="<image>";class i extends r.Processor{static tokenizer_class=a.AutoTokenizer;static image_processor_class=n.AutoImageProcessor;static uses_processor_config=!1;async _call(e,A=null,t={}){A||(console.warn("You are using PaliGemma without a text prefix. It will perform as a picture-captioning model."),A=""),Array.isArray(e)||(e=[e]),Array.isArray(A)||(A=[A]);const r=this.tokenizer.bos_token,n=this.image_processor.config.image_seq_length;let a;A.some((e=>e.includes(s)))?a=A.map((e=>{const A=e.replaceAll(s,s.repeat(n)),t=A.lastIndexOf(s),a=-1===t?0:t+7;return A.slice(0,a)+r+A.slice(a)+"\n"})):(console.warn("You are passing both `text` and `images` to `PaliGemmaProcessor`. The processor expects special image tokens in the text, as many tokens as there are images per each text. It is recommended to add `<image>` tokens in the very beginning of your text. For this call, we will infer how many images each text has and add special tokens."),a=A.map((A=>function(e,A,t,r,n){return`${r.repeat(t*n)}${A}${e}\n`}(A,r,n,s,e.length))));const i=this.tokenizer(a,t);return{...await this.image_processor(e,t),...i}}}},"./src/models/phi3_v/image_processing_phi3_v.js":(e,A,t)=>{t.r(A),t.d(A,{Phi3VImageProcessor:()=>c});var r=t("./src/base/image_processors_utils.js"),n=t("./src/utils/tensor.js");const a=336,s=[2,3],{ceil:i,floor:o,sqrt:l}=Math;class c extends r.ImageProcessor{constructor(e){super({...e,do_normalize:!0,do_pad:!0,pad_size:"custom",do_convert_rgb:!0,do_resize:!0}),this._num_crops=e.num_crops}calc_num_image_tokens_from_image_size(e,A){const{num_img_tokens:t}=this.config;return o((o(A/a)*o(e/a)+1)*t+1+(o(A/a)+1)*l(t))}get_resize_output_image_size(e,A){const t=this._num_crops,[r,n]=e.size;let a=r/n,s=1;for(;s*Math.ceil(s/a)<=t;)s+=1;s-=1;const i=Math.floor(336*s);return[i,Math.floor(i/a)]}pad_image(e,A,t,r={}){const[n,s]=A,o=a*i(n/a),l=a*i(s/a),c=[1,1,1].map(((e,A)=>(e-this.image_mean[A])/this.image_std[A]));return super.pad_image(e,A,{width:l,height:o},{center:!0,constant_values:c,...r})}async _call(e,{num_crops:A=null}={}){if(this._num_crops=A??=this.config.num_crops,A<4||l(A)%1!=0)throw new Error("num_crops must be a square number >= 4");Array.isArray(e)||(e=[e]);const t=e.length,r=await Promise.all(e.map((e=>this.preprocess(e)))),c=r.map((e=>e.original_size)),g=r.map((e=>e.reshaped_input_size)),u=[];for(const{pixel_values:e}of r){e.unsqueeze_(0);const[t,r]=e.dims.slice(-2),i=await(0,n.interpolate_4d)(e,{size:[a,a],mode:"bicubic"});if(A>0){const c=[],g=l(A),d=o(r/g),f=o(t/g);for(let A=0;A<g;++A)for(let a=0;a<g;++a){let i,o,l,u;A===g-1?(o=t-f,u=t):(o=A*f,u=(A+1)*f),a===g-1?(i=r-d,l=r):(i=a*d,l=(a+1)*d);const p=[o,i],h=[u,l],m=await(0,n.slice)(e,p,h,s);c.push(m)}const p=await(0,n.interpolate_4d)((0,n.cat)(c,0),{size:[a,a],mode:"bicubic"});u.push((0,n.cat)([i,p],0))}else u.push(i)}const d=(0,n.stack)(u,0),f=g.map((e=>e.map((e=>a*i(e/a)))));return{pixel_values:d,original_sizes:c,reshaped_input_sizes:g,image_sizes:new n.Tensor("int64",f.flat(),[t,2]),num_img_tokens:f.map((([e,A])=>this.calc_num_image_tokens_from_image_size(A,e)))}}}},"./src/models/phi3_v/processing_phi3_v.js":(e,A,t)=>{t.r(A),t.d(A,{Phi3VProcessor:()=>o});var r=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),a=t("./src/tokenizers.js");t("./src/utils/image.js");const s="<|image|>",i=/<\|image_\d+\|>/g;class o extends r.Processor{static image_processor_class=n.AutoImageProcessor;static tokenizer_class=a.AutoTokenizer;async _call(e,A=null,{padding:t=!0,truncation:r=!0,num_crops:n=null}={}){let a,o;if(Array.isArray(e)||(e=[e]),A){o=await this.image_processor(A,{num_crops:n});const{num_img_tokens:l}=o,c=e.map(((e,A)=>e.split(i).join(s.repeat(l[A]))));a=this.tokenizer(c,{padding:t,truncation:r});const g=this.tokenizer.model.convert_tokens_to_ids([s])[0];a.input_ids.map_((e=>e==g?-e:e))}else a=this.tokenizer(e);return{...a,...o}}}},"./src/models/processors.js":(e,A,t)=>{t.r(A),t.d(A,{Florence2Processor:()=>r.Florence2Processor,GroundingDinoProcessor:()=>n.GroundingDinoProcessor,Idefics3Processor:()=>a.Idefics3Processor,JinaCLIPProcessor:()=>i.JinaCLIPProcessor,MgpstrProcessor:()=>o.MgpstrProcessor,MoonshineProcessor:()=>l.MoonshineProcessor,OwlViTProcessor:()=>c.OwlViTProcessor,PaliGemmaProcessor:()=>u.PaliGemmaProcessor,Phi3VProcessor:()=>g.Phi3VProcessor,PyAnnoteProcessor:()=>d.PyAnnoteProcessor,Qwen2VLProcessor:()=>f.Qwen2VLProcessor,SamProcessor:()=>p.SamProcessor,SmolVLMProcessor:()=>h.SmolVLMProcessor,SpeechT5Processor:()=>m.SpeechT5Processor,UltravoxProcessor:()=>C.UltravoxProcessor,VLChatProcessor:()=>s.VLChatProcessor,Wav2Vec2Processor:()=>b.Wav2Vec2Processor,Wav2Vec2ProcessorWithLM:()=>I.Wav2Vec2ProcessorWithLM,WhisperProcessor:()=>w.WhisperProcessor});var r=t("./src/models/florence2/processing_florence2.js"),n=t("./src/models/grounding_dino/processing_grounding_dino.js"),a=t("./src/models/idefics3/processing_idefics3.js"),s=t("./src/models/janus/processing_janus.js"),i=t("./src/models/jina_clip/processing_jina_clip.js"),o=t("./src/models/mgp_str/processing_mgp_str.js"),l=t("./src/models/moonshine/processing_moonshine.js"),c=t("./src/models/owlvit/processing_owlvit.js"),g=t("./src/models/phi3_v/processing_phi3_v.js"),u=t("./src/models/paligemma/processing_paligemma.js"),d=t("./src/models/pyannote/processing_pyannote.js"),f=t("./src/models/qwen2_vl/processing_qwen2_vl.js"),p=t("./src/models/sam/processing_sam.js"),h=t("./src/models/smolvlm/processing_smolvlm.js"),m=t("./src/models/speecht5/processing_speecht5.js"),C=t("./src/models/ultravox/processing_ultravox.js"),b=t("./src/models/wav2vec2/processing_wav2vec2.js"),I=t("./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js"),w=t("./src/models/whisper/processing_whisper.js")},"./src/models/pvt/image_processing_pvt.js":(e,A,t)=>{t.r(A),t.d(A,{PvtImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{}},"./src/models/pyannote/feature_extraction_pyannote.js":(e,A,t)=>{t.r(A),t.d(A,{PyAnnoteFeatureExtractor:()=>s});var r=t("./src/base/feature_extraction_utils.js"),n=t("./src/utils/tensor.js"),a=t("./src/utils/maths.js");class s extends r.FeatureExtractor{async _call(e){(0,r.validate_audio_inputs)(e,"PyAnnoteFeatureExtractor"),e instanceof Float64Array&&(e=new Float32Array(e));const A=[1,1,e.length];return{input_values:new n.Tensor("float32",e,A)}}samples_to_frames(e){return(e-this.config.offset)/this.config.step}post_process_speaker_diarization(e,A){const t=A/this.samples_to_frames(A)/this.config.sampling_rate,r=[];for(const A of e.tolist()){const e=[];let n=-1;for(let t=0;t<A.length;++t){const r=(0,a.softmax)(A[t]),[s,i]=(0,a.max)(r),[o,l]=[t,t+1];i!==n?(n=i,e.push({id:i,start:o,end:l,score:s})):(e.at(-1).end=l,e.at(-1).score+=s)}r.push(e.map((({id:e,start:A,end:r,score:n})=>({id:e,start:A*t,end:r*t,confidence:n/(r-A)}))))}return r}}},"./src/models/pyannote/processing_pyannote.js":(e,A,t)=>{t.r(A),t.d(A,{PyAnnoteProcessor:()=>a});var r=t("./src/base/processing_utils.js"),n=t("./src/models/pyannote/feature_extraction_pyannote.js");class a extends r.Processor{static feature_extractor_class=n.PyAnnoteFeatureExtractor;async _call(e){return await this.feature_extractor(e)}post_process_speaker_diarization(...e){return this.feature_extractor.post_process_speaker_diarization(...e)}get sampling_rate(){return this.feature_extractor.config.sampling_rate}}},"./src/models/qwen2_vl/image_processing_qwen2_vl.js":(e,A,t)=>{t.r(A),t.d(A,{Qwen2VLImageProcessor:()=>a});var r=t("./src/base/image_processors_utils.js"),n=t("./src/utils/tensor.js");class a extends r.ImageProcessor{async _call(e,...A){const{pixel_values:t,original_sizes:r,reshaped_input_sizes:a}=await super._call(e,...A);let s=t;const{temporal_patch_size:i,merge_size:o,patch_size:l}=this.config;1===s.dims[0]&&(s=(0,n.cat)(Array.from({length:i},(()=>s)),0));const c=s.dims[0]/i,g=s.dims[1],u=Math.floor(s.dims[2]/l),d=Math.floor(s.dims[3]/l);return{pixel_values:s.view(c,i,g,Math.floor(u/o),o,l,Math.floor(d/o),o,l).permute(0,3,6,4,7,2,1,5,8).view(c*u*d,g*i*l*l),image_grid_thw:new n.Tensor("int64",[c,u,d],[1,3]),original_sizes:r,reshaped_input_sizes:a}}}},"./src/models/qwen2_vl/processing_qwen2_vl.js":(e,A,t)=>{t.r(A),t.d(A,{Qwen2VLProcessor:()=>s});var r=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),a=t("./src/tokenizers.js");t("./src/utils/image.js");class s extends r.Processor{static image_processor_class=n.AutoImageProcessor;static tokenizer_class=a.AutoTokenizer;async _call(e,A=null,...t){let r,n;if(Array.isArray(e)||(e=[e]),A&&(r=await this.image_processor(A),n=r.image_grid_thw),n){let A=this.image_processor.config.merge_size**2,t=0;const r=n.tolist();e=e.map((e=>{for(;e.includes("<|image_pad|>");){const n=Number(r[t++].reduce(((e,A)=>e*A),1n));e=e.replace("<|image_pad|>","<|placeholder|>".repeat(Math.floor(n/A)))}return e.replaceAll("<|placeholder|>","<|image_pad|>")}))}return{...this.tokenizer(e),...r}}}},"./src/models/rt_detr/image_processing_rt_detr.js":(e,A,t)=>{t.r(A),t.d(A,{RTDetrImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{post_process_object_detection(...e){return(0,r.post_process_object_detection)(...e)}}},"./src/models/sam/image_processing_sam.js":(e,A,t)=>{t.r(A),t.d(A,{SamImageProcessor:()=>s});var r=t("./src/base/image_processors_utils.js"),n=t("./src/utils/core.js"),a=t("./src/utils/tensor.js");class s extends r.ImageProcessor{reshape_input_points(e,A,t,r=!1){e=structuredClone(e);let s=(0,n.calculateDimensions)(e);if(3===s.length)r||(s=[1,...s]),e=[e];else if(4!==s.length)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");for(let r=0;r<e.length;++r){let n=A[r],a=t[r],s=[a[0]/n[0],a[1]/n[1]];for(let A=0;A<e[r].length;++A)for(let t=0;t<e[r][A].length;++t)for(let n=0;n<e[r][A][t].length;++n)e[r][A][t][n]*=s[n%2]}return new a.Tensor("float32",Float32Array.from(e.flat(1/0)),s)}add_input_labels(e,A){let t=(0,n.calculateDimensions)(e);if(2===t.length)t=[1,...t],e=[e];else if(3!==t.length)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");if(t.some(((e,t)=>e!==A.dims[t])))throw Error(`The first ${t.length} dimensions of 'input_points' and 'input_labels' must be the same.`);return new a.Tensor("int64",e.flat(1/0).map(BigInt),t)}async _call(e,{input_points:A=null,input_labels:t=null,input_boxes:r=null}={}){const n=await super._call(e);if(A&&(n.input_points=this.reshape_input_points(A,n.original_sizes,n.reshaped_input_sizes)),t){if(!n.input_points)throw Error("`input_points` must be provided if `input_labels` are provided.");n.input_labels=this.add_input_labels(t,n.input_points)}return r&&(n.input_boxes=this.reshape_input_points(r,n.original_sizes,n.reshaped_input_sizes,!0)),n}async post_process_masks(e,A,t,{mask_threshold:r=0,binarize:n=!0,pad_size:s=null}={}){const i=[],o=[(s=s??this.pad_size).height,s.width];for(let s=0;s<A.length;++s){const l=A[s],c=t[s];let g=await(0,a.interpolate_4d)(e[s],{mode:"bilinear",size:o});if(g=g.slice(null,null,[0,c[0]],[0,c[1]]),g=await(0,a.interpolate_4d)(g,{mode:"bilinear",size:l}),n){const e=g.data,A=new Uint8Array(e.length);for(let t=0;t<e.length;++t)e[t]>r&&(A[t]=1);g=new a.Tensor("bool",A,g.dims)}i.push(g)}return i}generate_crop_boxes(e,A,{crop_n_layers:t=0,overlap_ratio:r=512/1500,points_per_crop:n=32,crop_n_points_downscale_factor:a=1}={}){}}},"./src/models/sam/processing_sam.js":(e,A,t)=>{t.r(A),t.d(A,{SamProcessor:()=>a});var r=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js");class a extends r.Processor{static image_processor_class=n.AutoImageProcessor;async _call(...e){return await this.image_processor(...e)}post_process_masks(...e){return this.image_processor.post_process_masks(...e)}reshape_input_points(...e){return this.image_processor.reshape_input_points(...e)}}},"./src/models/seamless_m4t/feature_extraction_seamless_m4t.js":(e,A,t)=>{t.r(A),t.d(A,{SeamlessM4TFeatureExtractor:()=>s});var r=t("./src/base/feature_extraction_utils.js"),n=t("./src/utils/tensor.js"),a=t("./src/utils/audio.js");class s extends r.FeatureExtractor{constructor(e){super(e);const A=this.config.sampling_rate,t=(0,a.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(A/2),A,null,"kaldi",!0);this.mel_filters=t,this.window=(0,a.window_function)(400,"povey",{periodic:!1})}async _extract_fbank_features(e,A){return e=e.map((e=>32768*e)),(0,a.spectrogram)(e,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1.192092955078125e-7,remove_dc_offset:!0,max_num_frames:A,transpose:!0})}async _call(e,{padding:A=!0,pad_to_multiple_of:t=2,do_normalize_per_mel_bins:a=!0,return_attention_mask:s=!0}={}){(0,r.validate_audio_inputs)(e,"SeamlessM4TFeatureExtractor");let i,o=await this._extract_fbank_features(e,this.config.max_length);if(a){const[e,A]=o.dims,t=o.data;for(let r=0;r<A;++r){let n=0;for(let a=0;a<e;++a)n+=t[a*A+r];const a=n/e;let s=0;for(let n=0;n<e;++n)s+=(t[n*A+r]-a)**2;s/=e-1;const i=Math.sqrt(s+1e-7);for(let n=0;n<e;++n){const e=n*A+r;t[e]=(t[e]-a)/i}}}if(A){const[e,A]=o.dims,r=o.data,a=e%t;if(a>0){const t=new Float32Array(A*(e+a));t.set(r),t.fill(this.config.padding_value,r.length);const l=e+a;o=new n.Tensor(o.type,t,[l,A]),s&&(i=new n.Tensor("int64",new BigInt64Array(l),[1,l]),i.data.fill(1n,0,e))}}const[l,c]=o.dims,g=this.config.stride;if(0!==l%g)throw new Error(`The number of frames (${l}) must be a multiple of the stride (${g}).`);const u=o.view(1,Math.floor(l/g),c*g),d={input_features:u};if(s){const e=u.dims[1],A=new BigInt64Array(e);if(i){const e=i.data;for(let t=1,r=0;t<l;t+=g,++r)A[r]=e[t]}else A.fill(1n);d.attention_mask=new n.Tensor("int64",A,[1,e])}return d}}},"./src/models/segformer/image_processing_segformer.js":(e,A,t)=>{t.r(A),t.d(A,{SegformerFeatureExtractor:()=>a,SegformerImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{post_process_semantic_segmentation(...e){return(0,r.post_process_semantic_segmentation)(...e)}}class a extends n{}},"./src/models/siglip/image_processing_siglip.js":(e,A,t)=>{t.r(A),t.d(A,{SiglipImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{}},"./src/models/smolvlm/image_processing_smolvlm.js":(e,A,t)=>{t.r(A),t.d(A,{SmolVLMImageProcessor:()=>r.Idefics3ImageProcessor});var r=t("./src/models/idefics3/image_processing_idefics3.js")},"./src/models/smolvlm/processing_smolvlm.js":(e,A,t)=>{t.r(A),t.d(A,{SmolVLMProcessor:()=>r.Idefics3Processor});var r=t("./src/models/idefics3/processing_idefics3.js")},"./src/models/snac/feature_extraction_snac.js":(e,A,t)=>{t.r(A),t.d(A,{SnacFeatureExtractor:()=>n});var r=t("./src/models/dac/feature_extraction_dac.js");class n extends r.DacFeatureExtractor{}},"./src/models/speecht5/feature_extraction_speecht5.js":(e,A,t)=>{t.r(A),t.d(A,{SpeechT5FeatureExtractor:()=>n});var r=t("./src/base/feature_extraction_utils.js");class n extends r.FeatureExtractor{}},"./src/models/speecht5/processing_speecht5.js":(e,A,t)=>{t.r(A),t.d(A,{SpeechT5Processor:()=>s});var r=t("./src/base/processing_utils.js"),n=t("./src/tokenizers.js"),a=t("./src/models/auto/feature_extraction_auto.js");class s extends r.Processor{static tokenizer_class=n.AutoTokenizer;static feature_extractor_class=a.AutoFeatureExtractor;async _call(e){return await this.feature_extractor(e)}}},"./src/models/swin2sr/image_processing_swin2sr.js":(e,A,t)=>{t.r(A),t.d(A,{Swin2SRImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{pad_image(e,A,t,r={}){const[n,a,s]=A;return super.pad_image(e,A,{width:a+(t-a%t)%t,height:n+(t-n%t)%t},{mode:"symmetric",center:!1,constant_values:-1,...r})}}},"./src/models/ultravox/processing_ultravox.js":(e,A,t)=>{t.r(A),t.d(A,{UltravoxProcessor:()=>s});var r=t("./src/models/auto/feature_extraction_auto.js"),n=t("./src/tokenizers.js"),a=t("./src/base/processing_utils.js");class s extends a.Processor{static tokenizer_class=n.AutoTokenizer;static feature_extractor_class=r.AutoFeatureExtractor;static uses_processor_config=!0;async _call(e,A=null,t={}){if(Array.isArray(e))throw new Error("Batched inputs are not supported yet.");let r={};if(A){const n=A.length,{input_features:a}=await this.feature_extractor(A,{...t,max_length:n}),s=Math.round(n/this.config.encoder_ds_factor+1e-4),i=1+Math.ceil(s/this.config.stack_factor);r.audio_token_len=[i],r.audio_values=a;const o=this.config.audio_placeholder;if(!e.includes(o))throw new Error(`The input text does not contain the image token ${o}.`);e=e.replaceAll(o,o.repeat(i))}return{...this.tokenizer(e,{add_special_tokens:!1,...t}),...r}}}},"./src/models/vit/image_processing_vit.js":(e,A,t)=>{t.r(A),t.d(A,{ViTFeatureExtractor:()=>a,ViTImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{}class a extends n{}},"./src/models/vitmatte/image_processing_vitmatte.js":(e,A,t)=>{t.r(A),t.d(A,{VitMatteImageProcessor:()=>a});var r=t("./src/base/image_processors_utils.js"),n=t("./src/utils/tensor.js");class a extends r.ImageProcessor{async _call(e,A){Array.isArray(e)||(e=[e]),Array.isArray(A)||(A=[A]);const t=await Promise.all(e.map((e=>this.preprocess(e)))),r=await Promise.all(A.map((e=>this.preprocess(e,{do_normalize:!1,do_convert_rgb:!1,do_convert_grayscale:!0})))),a=(0,n.stack)(t.map(((e,A)=>(0,n.cat)([e.pixel_values,r[A].pixel_values],0))),0);return{pixel_values:a,original_sizes:t.map((e=>e.original_size)),reshaped_input_sizes:t.map((e=>e.reshaped_input_size))}}}},"./src/models/vitpose/image_processing_vitpose.js":(e,A,t)=>{t.r(A),t.d(A,{VitPoseImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{post_process_pose_estimation(e,A,{threshold:t=null}={}){const r=e.tolist(),[n,a,s,i]=e.dims,o=[];for(let e=0;e<n;++e){const n=r[e],a=A[e],l=[];for(let e=0;e<a.length;++e){const A=a[e],r=[],o=[],c=[],g=A.at(-2)/i,u=A.at(-1)/s;for(let e=0;e<n.length;++e){let[A,a]=[0,0],s=0,i=-1/0;const l=n[e];for(let e=0;e<l.length;++e){const t=l[e];for(let r=0;r<t.length;++r){const n=t[r];s+=n,i=Math.max(i,n),A+=(r+.5)*n,a+=e*n}}if(null!=t&&i<t)continue;const d=[g*A/s,u*a/s];r.push(d),c.push(e),o.push(i)}l.push({bbox:A,scores:o,labels:c,keypoints:r})}o.push(l)}return o}}},"./src/models/wav2vec2/feature_extraction_wav2vec2.js":(e,A,t)=>{t.r(A),t.d(A,{Wav2Vec2FeatureExtractor:()=>a});var r=t("./src/base/feature_extraction_utils.js"),n=t("./src/utils/tensor.js");class a extends r.FeatureExtractor{_zero_mean_unit_var_norm(e){const A=e.reduce(((e,A)=>e+A),0),t=A/e.length,r=e.reduce(((e,A)=>e+(A-t)**2),0)/e.length;return e.map((e=>(e-t)/Math.sqrt(r+1e-7)))}async _call(e){(0,r.validate_audio_inputs)(e,"Wav2Vec2FeatureExtractor"),e instanceof Float64Array&&(e=new Float32Array(e));let A=e;this.config.do_normalize&&(A=this._zero_mean_unit_var_norm(A));const t=[1,A.length];return{input_values:new n.Tensor("float32",A,t),attention_mask:new n.Tensor("int64",new BigInt64Array(A.length).fill(1n),t)}}}},"./src/models/wav2vec2/processing_wav2vec2.js":(e,A,t)=>{t.r(A),t.d(A,{Wav2Vec2Processor:()=>s});var r=t("./src/tokenizers.js"),n=t("./src/models/auto/feature_extraction_auto.js"),a=t("./src/base/processing_utils.js");class s extends a.Processor{static tokenizer_class=r.AutoTokenizer;static feature_extractor_class=n.AutoFeatureExtractor;async _call(e){return await this.feature_extractor(e)}}},"./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js":(e,A,t)=>{t.r(A),t.d(A,{Wav2Vec2ProcessorWithLM:()=>s});var r=t("./src/tokenizers.js"),n=t("./src/models/auto/feature_extraction_auto.js"),a=t("./src/base/processing_utils.js");class s extends a.Processor{static tokenizer_class=r.AutoTokenizer;static feature_extractor_class=n.AutoFeatureExtractor;async _call(e){return await this.feature_extractor(e)}}},"./src/models/wespeaker/feature_extraction_wespeaker.js":(e,A,t)=>{t.r(A),t.d(A,{WeSpeakerFeatureExtractor:()=>a});var r=t("./src/base/feature_extraction_utils.js");t("./src/utils/tensor.js");var n=t("./src/utils/audio.js");class a extends r.FeatureExtractor{constructor(e){super(e);const A=this.config.sampling_rate,t=(0,n.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(A/2),A,null,"kaldi",!0);this.mel_filters=t,this.window=(0,n.window_function)(400,"hamming",{periodic:!1}),this.min_num_frames=this.config.min_num_frames}async _extract_fbank_features(e){return e=e.map((e=>32768*e)),(0,n.spectrogram)(e,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1.192092955078125e-7,remove_dc_offset:!0,transpose:!0,min_num_frames:this.min_num_frames})}async _call(e){(0,r.validate_audio_inputs)(e,"WeSpeakerFeatureExtractor");const A=(await this._extract_fbank_features(e)).unsqueeze_(0);if(null===this.config.fbank_centering_span){const e=A.mean(1).data,t=A.data,[r,n,a]=A.dims;for(let A=0;A<r;++A){const r=A*n*a,s=A*a;for(let A=0;A<n;++A){const n=r+A*a;for(let A=0;A<a;++A)t[n+A]-=e[s+A]}}}return{input_features:A}}}},"./src/models/whisper/common_whisper.js":(e,A,t)=>{t.r(A),t.d(A,{WHISPER_LANGUAGE_MAPPING:()=>n,WHISPER_TO_LANGUAGE_CODE_MAPPING:()=>a,whisper_language_to_code:()=>s});const r=[["en","english"],["zh","chinese"],["de","german"],["es","spanish"],["ru","russian"],["ko","korean"],["fr","french"],["ja","japanese"],["pt","portuguese"],["tr","turkish"],["pl","polish"],["ca","catalan"],["nl","dutch"],["ar","arabic"],["sv","swedish"],["it","italian"],["id","indonesian"],["hi","hindi"],["fi","finnish"],["vi","vietnamese"],["he","hebrew"],["uk","ukrainian"],["el","greek"],["ms","malay"],["cs","czech"],["ro","romanian"],["da","danish"],["hu","hungarian"],["ta","tamil"],["no","norwegian"],["th","thai"],["ur","urdu"],["hr","croatian"],["bg","bulgarian"],["lt","lithuanian"],["la","latin"],["mi","maori"],["ml","malayalam"],["cy","welsh"],["sk","slovak"],["te","telugu"],["fa","persian"],["lv","latvian"],["bn","bengali"],["sr","serbian"],["az","azerbaijani"],["sl","slovenian"],["kn","kannada"],["et","estonian"],["mk","macedonian"],["br","breton"],["eu","basque"],["is","icelandic"],["hy","armenian"],["ne","nepali"],["mn","mongolian"],["bs","bosnian"],["kk","kazakh"],["sq","albanian"],["sw","swahili"],["gl","galician"],["mr","marathi"],["pa","punjabi"],["si","sinhala"],["km","khmer"],["sn","shona"],["yo","yoruba"],["so","somali"],["af","afrikaans"],["oc","occitan"],["ka","georgian"],["be","belarusian"],["tg","tajik"],["sd","sindhi"],["gu","gujarati"],["am","amharic"],["yi","yiddish"],["lo","lao"],["uz","uzbek"],["fo","faroese"],["ht","haitian creole"],["ps","pashto"],["tk","turkmen"],["nn","nynorsk"],["mt","maltese"],["sa","sanskrit"],["lb","luxembourgish"],["my","myanmar"],["bo","tibetan"],["tl","tagalog"],["mg","malagasy"],["as","assamese"],["tt","tatar"],["haw","hawaiian"],["ln","lingala"],["ha","hausa"],["ba","bashkir"],["jw","javanese"],["su","sundanese"]],n=new Map(r),a=new Map([...r.map((([e,A])=>[A,e])),["burmese","my"],["valencian","ca"],["flemish","nl"],["haitian","ht"],["letzeburgesch","lb"],["pushto","ps"],["panjabi","pa"],["moldavian","ro"],["moldovan","ro"],["sinhalese","si"],["castilian","es"]]);function s(e){e=e.toLowerCase();let A=a.get(e);if(void 0===A){const t=e.match(/^<\|([a-z]{2})\|>$/);if(t&&(e=t[1]),!n.has(e)){const A=2===e.length?n.keys():n.values();throw new Error(`Language "${e}" is not supported. Must be one of: ${JSON.stringify(Array.from(A))}`)}A=e}return A}},"./src/models/whisper/feature_extraction_whisper.js":(e,A,t)=>{t.r(A),t.d(A,{WhisperFeatureExtractor:()=>s});var r=t("./src/base/feature_extraction_utils.js");t("./src/utils/tensor.js");var n=t("./src/utils/audio.js"),a=t("./src/utils/maths.js");class s extends r.FeatureExtractor{constructor(e){super(e),this.config.mel_filters??=(0,n.mel_filter_bank)(Math.floor(1+this.config.n_fft/2),this.config.feature_size,0,8e3,this.config.sampling_rate,"slaney","slaney"),this.window=(0,n.window_function)(this.config.n_fft,"hann")}async _extract_fbank_features(e){const A=await(0,n.spectrogram)(e,this.window,this.config.n_fft,this.config.hop_length,{power:2,mel_filters:this.config.mel_filters,log_mel:"log10",max_num_frames:Math.min(Math.floor(e.length/this.config.hop_length),this.config.nb_max_frames)}),t=A.data,r=(0,a.max)(t)[0];for(let e=0;e<t.length;++e)t[e]=(Math.max(t[e],r-8)+4)/4;return A}async _call(e,{max_length:A=null}={}){let t;(0,r.validate_audio_inputs)(e,"WhisperFeatureExtractor");const n=A??this.config.n_samples;e.length>n?(e.length>this.config.n_samples&&console.warn("Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."),t=e.slice(0,n)):(t=new Float32Array(n),t.set(e));return{input_features:(await this._extract_fbank_features(t)).unsqueeze_(0)}}}},"./src/models/whisper/generation_whisper.js":(e,A,t)=>{t.r(A),t.d(A,{WhisperGenerationConfig:()=>n});var r=t("./src/generation/configuration_utils.js");class n extends r.GenerationConfig{return_timestamps=null;return_token_timestamps=null;num_frames=null;alignment_heads=null;task=null;language=null;no_timestamps_token_id=null;prompt_ids=null;is_multilingual=null;lang_to_id=null;task_to_id=null;max_initial_timestamp_index=1}},"./src/models/whisper/processing_whisper.js":(e,A,t)=>{t.r(A),t.d(A,{WhisperProcessor:()=>s});var r=t("./src/models/auto/feature_extraction_auto.js"),n=t("./src/tokenizers.js"),a=t("./src/base/processing_utils.js");class s extends a.Processor{static tokenizer_class=n.AutoTokenizer;static feature_extractor_class=r.AutoFeatureExtractor;async _call(e){return await this.feature_extractor(e)}}},"./src/models/yolos/image_processing_yolos.js":(e,A,t)=>{t.r(A),t.d(A,{YolosFeatureExtractor:()=>a,YolosImageProcessor:()=>n});var r=t("./src/base/image_processors_utils.js");class n extends r.ImageProcessor{post_process_object_detection(...e){return(0,r.post_process_object_detection)(...e)}}class a extends n{}},"./src/ops/registry.js":(e,A,t)=>{t.r(A),t.d(A,{TensorOpRegistry:()=>o});var r=t("./src/backends/onnx.js"),n=t("./src/utils/tensor.js"),a=t("./src/env.js");const s=a.apis.IS_BROWSER_ENV||a.apis.IS_WEBWORKER_ENV,i=async(e,A,t)=>{const a=await(0,r.createInferenceSession)(new Uint8Array(e),A);let i=Promise.resolve();return async e=>{const A=(0,r.isONNXProxy)(),o=Object.fromEntries(Object.entries(e).map((([e,t])=>[e,(A?t.clone():t).ort_tensor]))),l=await(i=s?i.then((()=>a.run(o))):a.run(o));return Array.isArray(t)?t.map((e=>new n.Tensor(l[e]))):new n.Tensor(l[t])}};class o{static session_options={};static get nearest_interpolate_4d(){return this._nearest_interpolate_4d||(this._nearest_interpolate_4d=i([8,10,18,0,58,129,1,10,41,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,18,10,4,109,111,100,101,34,7,110,101,97,114,101,115,116,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,21],this.session_options,"y")),this._nearest_interpolate_4d}static get bilinear_interpolate_4d(){return this._bilinear_interpolate_4d||(this._bilinear_interpolate_4d=i([8,9,18,0,58,128,1,10,40,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,17,10,4,109,111,100,101,34,6,108,105,110,101,97,114,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bilinear_interpolate_4d}static get bicubic_interpolate_4d(){return this._bicubic_interpolate_4d||(this._bicubic_interpolate_4d=i([8,9,18,0,58,127,10,39,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,16,10,4,109,111,100,101,34,5,99,117,98,105,99,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bicubic_interpolate_4d}static get matmul(){return this._matmul||(this._matmul=i([8,9,18,0,58,55,10,17,10,1,97,10,1,98,18,1,99,34,6,77,97,116,77,117,108,18,1,114,90,9,10,1,97,18,4,10,2,8,1,90,9,10,1,98,18,4,10,2,8,1,98,9,10,1,99,18,4,10,2,8,1,66,2,16,20],this.session_options,"c")),this._matmul}static get stft(){return this._stft||(this._stft=i([8,7,18,0,58,148,1,10,38,10,1,115,10,1,106,10,1,119,10,1,108,18,1,111,34,4,83,84,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,115,90,26,10,1,115,18,21,10,19,8,1,18,15,10,3,18,1,98,10,3,18,1,115,10,3,18,1,99,90,11,10,1,106,18,6,10,4,8,7,18,0,90,16,10,1,119,18,11,10,9,8,1,18,5,10,3,18,1,119,90,11,10,1,108,18,6,10,4,8,7,18,0,98,31,10,1,111,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,102,10,3,18,1,100,10,3,18,1,99,66,2,16,17],this.session_options,"o")),this._stft}static get rfft(){return this._rfft||(this._rfft=i([8,9,18,0,58,97,10,33,10,1,120,10,0,10,1,97,18,1,121,34,3,68,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,100,90,21,10,1,120,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,90,11,10,1,97,18,6,10,4,8,7,18,0,98,21,10,1,121,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,66,2,16,20],this.session_options,"y")),this._rfft}static get top_k(){return this._top_k||(this._top_k=i([8,10,18,0,58,73,10,18,10,1,120,10,1,107,18,1,118,18,1,105,34,4,84,111,112,75,18,1,116,90,9,10,1,120,18,4,10,2,8,1,90,15,10,1,107,18,10,10,8,8,7,18,4,10,2,8,1,98,9,10,1,118,18,4,10,2,8,1,98,9,10,1,105,18,4,10,2,8,7,66,2,16,21],this.session_options,["v","i"])),this._top_k}static get slice(){return this._slice||(this._slice=i([8,7,18,0,58,96,10,25,10,1,120,10,1,115,10,1,101,10,1,97,10,1,116,18,1,121,34,5,83,108,105,99,101,18,1,114,90,9,10,1,120,18,4,10,2,8,1,90,9,10,1,115,18,4,10,2,8,7,90,9,10,1,101,18,4,10,2,8,7,90,9,10,1,97,18,4,10,2,8,7,90,9,10,1,116,18,4,10,2,8,7,98,9,10,1,121,18,4,10,2,8,1,66,2,16,13],this.session_options,"y")),this._slice}}},"./src/pipelines.js":(e,A,t)=>{t.r(A),t.d(A,{AudioClassificationPipeline:()=>M,AutomaticSpeechRecognitionPipeline:()=>D,BackgroundRemovalPipeline:()=>z,DepthEstimationPipeline:()=>H,DocumentQuestionAnsweringPipeline:()=>O,FeatureExtractionPipeline:()=>y,FillMaskPipeline:()=>b,ImageClassificationPipeline:()=>T,ImageFeatureExtractionPipeline:()=>E,ImageSegmentationPipeline:()=>P,ImageToImagePipeline:()=>Y,ImageToTextPipeline:()=>Q,ObjectDetectionPipeline:()=>S,Pipeline:()=>p,QuestionAnsweringPipeline:()=>C,SummarizationPipeline:()=>w,Text2TextGenerationPipeline:()=>I,TextClassificationPipeline:()=>h,TextGenerationPipeline:()=>v,TextToAudioPipeline:()=>L,TokenClassificationPipeline:()=>m,TranslationPipeline:()=>k,ZeroShotAudioClassificationPipeline:()=>G,ZeroShotClassificationPipeline:()=>B,ZeroShotImageClassificationPipeline:()=>F,ZeroShotObjectDetectionPipeline:()=>N,pipeline:()=>V});var r=t("./src/tokenizers.js"),n=t("./src/models.js"),a=t("./src/models/auto/processing_auto.js");t("./src/base/processing_utils.js");var s=t("./src/utils/generic.js"),i=t("./src/utils/core.js"),o=t("./src/utils/maths.js"),l=t("./src/utils/audio.js"),c=t("./src/utils/tensor.js"),g=t("./src/utils/image.js");async function u(e){return Array.isArray(e)||(e=[e]),await Promise.all(e.map((e=>g.RawImage.read(e))))}async function d(e,A){return Array.isArray(e)||(e=[e]),await Promise.all(e.map((e=>"string"==typeof e||e instanceof URL?(0,l.read_audio)(e,A):e instanceof Float64Array?new Float32Array(e):e)))}function f(e,A){A&&(e=e.map((e=>0|e)));const[t,r,n,a]=e;return{xmin:t,ymin:r,xmax:n,ymax:a}}class p extends s.Callable{constructor({task:e,model:A,tokenizer:t=null,processor:r=null}){super(),this.task=e,this.model=A,this.tokenizer=t,this.processor=r}async dispose(){await this.model.dispose()}}class h extends p{constructor(e){super(e)}async _call(e,{top_k:A=1}={}){const t=this.tokenizer(e,{padding:!0,truncation:!0}),r=await this.model(t),n="multi_label_classification"===this.model.config.problem_type?e=>e.sigmoid():e=>new c.Tensor("float32",(0,o.softmax)(e.data),e.dims),a=this.model.config.id2label,s=[];for(const e of r.logits){const t=n(e),r=await(0,c.topk)(t,A),i=r[0].tolist(),o=r[1].tolist().map(((e,A)=>({label:a?a[e]:`LABEL_${e}`,score:i[A]})));1===A?s.push(...o):s.push(o)}return Array.isArray(e)||1===A?s:s[0]}}class m extends p{constructor(e){super(e)}async _call(e,{ignore_labels:A=["O"]}={}){const t=Array.isArray(e),r=this.tokenizer(t?e:[e],{padding:!0,truncation:!0}),n=(await this.model(r)).logits,a=this.model.config.id2label,s=[];for(let e=0;e<n.dims[0];++e){const t=r.input_ids[e],i=n[e],l=[];for(let e=0;e<i.dims[0];++e){const r=i[e],n=(0,o.max)(r.data)[1],s=a?a[n]:`LABEL_${n}`;if(A.includes(s))continue;const c=this.tokenizer.decode([t[e].item()],{skip_special_tokens:!0});if(""===c)continue;const g=(0,o.softmax)(r.data);l.push({entity:s,score:g[n],index:e,word:c})}s.push(l)}return t?s:s[0]}}class C extends p{constructor(e){super(e)}async _call(e,A,{top_k:t=1}={}){const r=this.tokenizer(e,{text_pair:A,padding:!0,truncation:!0}),{start_logits:n,end_logits:a}=await this.model(r),s=r.input_ids.tolist(),l=r.attention_mask.tolist(),c=this.tokenizer.all_special_ids,g=[];for(let e=0;e<n.dims[0];++e){const A=s[e],r=A.findIndex((e=>e==this.tokenizer.sep_token_id));l[e].map(((e,t)=>1==e&&(0===t||t>r&&-1===c.findIndex((e=>e==A[t])))));const u=n[e].tolist(),d=a[e].tolist();for(let t=1;t<u.length;++t)(0==l[e]||t<=r||-1!==c.findIndex((e=>e==A[t])))&&(u[t]=-1/0,d[t]=-1/0);const f=(0,o.softmax)(u).map(((e,A)=>[e,A])),p=(0,o.softmax)(d).map(((e,A)=>[e,A]));f[0][0]=0,p[0][0]=0;const h=(0,i.product)(f,p).filter((e=>e[0][1]<=e[1][1])).map((e=>[e[0][1],e[1][1],e[0][0]*e[1][0]])).sort(((e,A)=>A[2]-e[2]));for(let e=0;e<Math.min(h.length,t);++e){const[t,r,n]=h[e],a=A.slice(t,r+1),s=this.tokenizer.decode(a,{skip_special_tokens:!0});g.push({answer:s,score:n})}}return 1===t?g[0]:g}}class b extends p{constructor(e){super(e)}async _call(e,{top_k:A=5}={}){const t=this.tokenizer(e,{padding:!0,truncation:!0}),{logits:r}=await this.model(t),n=[],a=t.input_ids.tolist();for(let e=0;e<a.length;++e){const t=a[e],s=t.findIndex((e=>e==this.tokenizer.mask_token_id));if(-1===s)throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);const i=r[e][s],l=await(0,c.topk)(new c.Tensor("float32",(0,o.softmax)(i.data),i.dims),A),g=l[0].tolist(),u=l[1].tolist();n.push(u.map(((e,A)=>{const r=t.slice();return r[s]=e,{score:g[A],token:Number(e),token_str:this.tokenizer.decode([e]),sequence:this.tokenizer.decode(r,{skip_special_tokens:!0})}})))}return Array.isArray(e)?n:n[0]}}class I extends p{_key="generated_text";constructor(e){super(e)}async _call(e,A={}){Array.isArray(e)||(e=[e]),this.model.config.prefix&&(e=e.map((e=>this.model.config.prefix+e)));const t=this.model.config.task_specific_params;t&&t[this.task]&&t[this.task].prefix&&(e=e.map((e=>t[this.task].prefix+e)));const r=this.tokenizer,n={padding:!0,truncation:!0};let a;a=this instanceof k&&"_build_translation_inputs"in r?r._build_translation_inputs(e,n,A):r(e,n);const s=await this.model.generate({...a,...A});return r.batch_decode(s,{skip_special_tokens:!0}).map((e=>({[this._key]:e})))}}class w extends I{_key="summary_text";constructor(e){super(e)}}class k extends I{_key="translation_text";constructor(e){super(e)}}function x(e){return Array.isArray(e)&&e.every((e=>"role"in e&&"content"in e))}class v extends p{constructor(e){super(e)}async _call(e,A={}){let t,r=!1,n=!1;if("string"==typeof e)t=e=[e];else if(Array.isArray(e)&&e.every((e=>"string"==typeof e)))r=!0,t=e;else{if(x(e))e=[e];else{if(!Array.isArray(e)||!e.every(x))throw new Error("Input must be a string, an array of strings, a Chat, or an array of Chats");r=!0}n=!0,t=e.map((e=>this.tokenizer.apply_chat_template(e,{tokenize:!1,add_generation_prompt:!0})))}const a=A.add_special_tokens??!1,s=!n&&(A.return_full_text??!0);this.tokenizer.padding_side="left";const i=this.tokenizer(t,{add_special_tokens:a,padding:!0,truncation:!0}),o=await this.model.generate({...i,...A}),l=this.tokenizer.batch_decode(o,{skip_special_tokens:!0});let c;!s&&i.input_ids.dims.at(-1)>0&&(c=this.tokenizer.batch_decode(i.input_ids,{skip_special_tokens:!0}).map((e=>e.length)));const g=Array.from({length:e.length},(e=>[]));for(let A=0;A<l.length;++A){const t=Math.floor(A/o.dims[0]*e.length);c&&(l[A]=l[A].slice(c[t])),g[t].push({generated_text:n?[...e[t],{role:"assistant",content:l[A]}]:l[A]})}return r||1!==g.length?g:g[0]}}class B extends p{constructor(e){super(e),this.label2id=Object.fromEntries(Object.entries(this.model.config.label2id).map((([e,A])=>[e.toLowerCase(),A]))),this.entailment_id=this.label2id.entailment,void 0===this.entailment_id&&(console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id."),this.entailment_id=2),this.contradiction_id=this.label2id.contradiction??this.label2id.not_entailment,void 0===this.contradiction_id&&(console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id."),this.contradiction_id=0)}async _call(e,A,{hypothesis_template:t="This example is {}.",multi_label:r=!1}={}){const n=Array.isArray(e);n||(e=[e]),Array.isArray(A)||(A=[A]);const a=A.map((e=>t.replace("{}",e))),s=r||1===A.length,i=[];for(const t of e){const e=[];for(const A of a){const r=this.tokenizer(t,{text_pair:A,padding:!0,truncation:!0}),n=await this.model(r);s?e.push([n.logits.data[this.contradiction_id],n.logits.data[this.entailment_id]]):e.push(n.logits.data[this.entailment_id])}const r=s?e.map((e=>(0,o.softmax)(e)[1])):(0,o.softmax)(e),n=r.map(((e,A)=>[e,A])).sort(((e,A)=>A[0]-e[0]));i.push({sequence:t,labels:n.map((e=>A[e[1]])),scores:n.map((e=>e[0]))})}return n?i:i[0]}}class y extends p{constructor(e){super(e)}async _call(e,{pooling:A="none",normalize:t=!1,quantize:r=!1,precision:n="binary"}={}){const a=this.tokenizer(e,{padding:!0,truncation:!0}),s=await this.model(a);let i=s.last_hidden_state??s.logits??s.token_embeddings;if("none"===A);else if("mean"===A)i=(0,c.mean_pooling)(i,a.attention_mask);else{if("cls"!==A)throw Error(`Pooling method '${A}' not supported.`);i=i.slice(null,0)}return t&&(i=i.normalize(2,-1)),r&&(i=(0,c.quantize_embeddings)(i,n)),i}}class E extends p{constructor(e){super(e)}async _call(e,{pool:A=null}={}){const t=await u(e),{pixel_values:r}=await this.processor(t),n=await this.model({pixel_values:r});let a;if(A){if(!("pooler_output"in n))throw Error("No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.");a=n.pooler_output}else a=n.last_hidden_state??n.logits??n.image_embeds;return a}}class M extends p{constructor(e){super(e)}async _call(e,{top_k:A=5}={}){const t=this.processor.feature_extractor.config.sampling_rate,r=await d(e,t),n=this.model.config.id2label,a=[];for(const e of r){const t=await this.processor(e),r=(await this.model(t)).logits[0],s=await(0,c.topk)(new c.Tensor("float32",(0,o.softmax)(r.data),r.dims),A),i=s[0].tolist(),l=s[1].tolist().map(((e,A)=>({label:n?n[e]:`LABEL_${e}`,score:i[A]})));a.push(l)}return Array.isArray(e)?a:a[0]}}class G extends p{constructor(e){super(e)}async _call(e,A,{hypothesis_template:t="This is a sound of {}."}={}){const r=!Array.isArray(e);r&&(e=[e]);const n=A.map((e=>t.replace("{}",e))),a=this.tokenizer(n,{padding:!0,truncation:!0}),s=this.processor.feature_extractor.config.sampling_rate,i=await d(e,s),l=[];for(const e of i){const t=await this.processor(e),r=await this.model({...a,...t}),n=(0,o.softmax)(r.logits_per_audio.data);l.push([...n].map(((e,t)=>({score:e,label:A[t]}))))}return r?l[0]:l}}class D extends p{constructor(e){super(e)}async _call(e,A={}){switch(this.model.config.model_type){case"whisper":case"lite-whisper":return this._call_whisper(e,A);case"wav2vec2":case"wav2vec2-bert":case"unispeech":case"unispeech-sat":case"hubert":return this._call_wav2vec2(e,A);case"moonshine":return this._call_moonshine(e,A);default:throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`)}}async _call_wav2vec2(e,A){A.language&&console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".'),A.task&&console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');const t=!Array.isArray(e);t&&(e=[e]);const r=this.processor.feature_extractor.config.sampling_rate,n=await d(e,r),a=[];for(const e of n){const A=await this.processor(e),t=(await this.model(A)).logits[0],r=[];for(const e of t)r.push((0,o.max)(e.data)[1]);const n=this.tokenizer.decode(r);a.push({text:n})}return t?a[0]:a}async _call_whisper(e,A){const t=A.return_timestamps??!1,r=A.chunk_length_s??0,n=A.force_full_sequences??!1;let a=A.stride_length_s??null;const s={...A};"word"===t&&(s.return_token_timestamps=!0,s.return_timestamps=!1);const i=!Array.isArray(e);i&&(e=[e]);const l=this.processor.feature_extractor.config.chunk_length/this.model.config.max_source_positions,c=this.processor.feature_extractor.config.hop_length,g=this.processor.feature_extractor.config.sampling_rate,u=await d(e,g),f=[];for(const e of u){let A=[];if(r>0){if(null===a)a=r/6;else if(r<=a)throw Error("`chunk_length_s` must be larger than `stride_length_s`.");const t=g*r,n=g*a,s=t-2*n;let i=0;for(;;){const r=i+t,a=e.subarray(i,r),o=await this.processor(a),l=0===i,c=r>=e.length;if(A.push({stride:[a.length,l?0:n,c?0:n],input_features:o.input_features,is_last:c}),c)break;i+=s}}else A=[{stride:[e.length,0,0],input_features:(await this.processor(e)).input_features,is_last:!0}];for(const e of A){s.num_frames=Math.floor(e.stride[0]/c);const A=await this.model.generate({inputs:e.input_features,...s});"word"===t?(e.tokens=A.sequences.tolist()[0],e.token_timestamps=A.token_timestamps.tolist()[0].map((e=>(0,o.round)(e,2)))):e.tokens=A[0].tolist(),e.stride=e.stride.map((e=>e/g))}const[i,u]=this.tokenizer._decode_asr(A,{time_precision:l,return_timestamps:t,force_full_sequences:n});f.push({text:i,...u})}return i?f[0]:f}async _call_moonshine(e,A){const t=!Array.isArray(e);t&&(e=[e]);const r=this.processor.feature_extractor.config.sampling_rate,n=await d(e,r),a=[];for(const e of n){const t=await this.processor(e),n=6*Math.floor(e.length/r),s=await this.model.generate({max_new_tokens:n,...A,...t}),i=this.processor.batch_decode(s,{skip_special_tokens:!0})[0];a.push({text:i})}return t?a[0]:a}}class Q extends p{constructor(e){super(e)}async _call(e,A={}){const t=Array.isArray(e),r=await u(e),{pixel_values:n}=await this.processor(r),a=[];for(const e of n){e.dims=[1,...e.dims];const t=await this.model.generate({inputs:e,...A}),r=this.tokenizer.batch_decode(t,{skip_special_tokens:!0}).map((e=>({generated_text:e.trim()})));a.push(r)}return t?a:a[0]}}class T extends p{constructor(e){super(e)}async _call(e,{top_k:A=5}={}){const t=await u(e),{pixel_values:r}=await this.processor(t),n=await this.model({pixel_values:r}),a=this.model.config.id2label,s=[];for(const e of n.logits){const t=await(0,c.topk)(new c.Tensor("float32",(0,o.softmax)(e.data),e.dims),A),r=t[0].tolist(),n=t[1].tolist().map(((e,A)=>({label:a?a[e]:`LABEL_${e}`,score:r[A]})));s.push(n)}return Array.isArray(e)?s:s[0]}}class P extends p{constructor(e){super(e),this.subtasks_mapping={panoptic:"post_process_panoptic_segmentation",instance:"post_process_instance_segmentation",semantic:"post_process_semantic_segmentation"}}async _call(e,{threshold:A=.5,mask_threshold:t=.5,overlap_mask_area_threshold:r=.8,label_ids_to_fuse:n=null,target_sizes:a=null,subtask:s=null}={}){if(Array.isArray(e)&&1!==e.length)throw Error("Image segmentation pipeline currently only supports a batch size of 1.");const i=await u(e),o=i.map((e=>[e.height,e.width])),l=await this.processor(i),{inputNames:c,outputNames:d}=this.model.sessions.model;if(!c.includes("pixel_values")){if(1!==c.length)throw Error(`Expected a single input name, but got ${c.length} inputs: ${c}.`);const e=c[0];if(e in l)throw Error(`Input name ${e} already exists in the inputs.`);l[e]=l.pixel_values}const f=await this.model(l);let p=null;if(null!==s)p=this.subtasks_mapping[s];else if(this.processor.image_processor)for(const[e,A]of Object.entries(this.subtasks_mapping))if(A in this.processor.image_processor){p=this.processor.image_processor[A].bind(this.processor.image_processor),s=e;break}const h=this.model.config.id2label,m=[];if(s)if("panoptic"===s||"instance"===s){const e=p(f,A,t,r,n,a??o)[0],s=e.segmentation;for(const A of e.segments_info){const e=new Uint8ClampedArray(s.data.length);for(let t=0;t<s.data.length;++t)s.data[t]===A.id&&(e[t]=255);const t=new g.RawImage(e,s.dims[1],s.dims[0],1);m.push({score:A.score,label:h[A.label_id],mask:t})}}else{if("semantic"!==s)throw Error(`Subtask ${s} not supported.`);{const{segmentation:e,labels:A}=p(f,a??o)[0];for(const t of A){const A=new Uint8ClampedArray(e.data.length);for(let r=0;r<e.data.length;++r)e.data[r]===t&&(A[r]=255);const r=new g.RawImage(A,e.dims[1],e.dims[0],1);m.push({score:null,label:h[t],mask:r})}}}else{const e=1e-5,A=f[d[0]];for(let t=0;t<o.length;++t){const r=o[t],n=A[t];n.data.some((A=>A<-1e-5||A>1+e))&&n.sigmoid_();const a=await g.RawImage.fromTensor(n.mul_(255).to("uint8")).resize(r[1],r[0]);m.push({label:null,score:null,mask:a})}}return m}}class z extends P{constructor(e){super(e)}async _call(e,A={}){if(Array.isArray(e)&&1!==e.length)throw Error("Background removal pipeline currently only supports a batch size of 1.");const t=await u(e),r=await super._call(e,A),n=t.map(((e,A)=>{const t=e.clone();return t.putAlpha(r[A].mask),t}));return n}}class F extends p{constructor(e){super(e)}async _call(e,A,{hypothesis_template:t="This is a photo of {}"}={}){const r=Array.isArray(e),n=await u(e),a=A.map((e=>t.replace("{}",e))),s=this.tokenizer(a,{padding:"siglip"!==this.model.config.model_type||"max_length",truncation:!0}),{pixel_values:i}=await this.processor(n),l=await this.model({...s,pixel_values:i}),c="siglip"===this.model.config.model_type?e=>e.sigmoid().data:e=>(0,o.softmax)(e.data),g=[];for(const e of l.logits_per_image){const t=[...c(e)].map(((e,t)=>({score:e,label:A[t]})));t.sort(((e,A)=>A.score-e.score)),g.push(t)}return r?g:g[0]}}class S extends p{constructor(e){super(e)}async _call(e,{threshold:A=.9,percentage:t=!1}={}){const r=Array.isArray(e);if(r&&1!==e.length)throw Error("Object detection pipeline currently only supports a batch size of 1.");const n=await u(e),a=t?null:n.map((e=>[e.height,e.width])),{pixel_values:s,pixel_mask:i}=await this.processor(n),o=await this.model({pixel_values:s,pixel_mask:i}),l=this.processor.image_processor.post_process_object_detection(o,A,a),c=this.model.config.id2label,g=l.map((e=>e.boxes.map(((A,r)=>({score:e.scores[r],label:c[e.classes[r]],box:f(A,!t)})))));return r?g:g[0]}}class N extends p{constructor(e){super(e)}async _call(e,A,{threshold:t=.1,top_k:r=null,percentage:n=!1}={}){const a=Array.isArray(e),s=await u(e),i=this.tokenizer(A,{padding:!0,truncation:!0}),o=await this.processor(s),l=[];for(let e=0;e<s.length;++e){const a=s[e],c=n?null:[[a.height,a.width]],g=o.pixel_values[e].unsqueeze_(0),u=await this.model({...i,pixel_values:g});let d;if("post_process_grounded_object_detection"in this.processor){const e=this.processor.post_process_grounded_object_detection(u,i.input_ids,{box_threshold:t,text_threshold:t,target_sizes:c})[0];d=e.boxes.map(((A,t)=>({score:e.scores[t],label:e.labels[t],box:f(A,!n)})))}else{const e=this.processor.image_processor.post_process_object_detection(u,t,c,!0)[0];d=e.boxes.map(((t,r)=>({score:e.scores[r],label:A[e.classes[r]],box:f(t,!n)})))}d.sort(((e,A)=>A.score-e.score)),null!==r&&(d=d.slice(0,r)),l.push(d)}return a?l:l[0]}}class O extends p{constructor(e){super(e)}async _call(e,A,t={}){const r=(await u(e))[0],{pixel_values:n}=await this.processor(r),a=`<s_docvqa><s_question>${A}</s_question><s_answer>`,s=this.tokenizer(a,{add_special_tokens:!1,padding:!0,truncation:!0}).input_ids,i=await this.model.generate({inputs:n,max_length:this.model.config.decoder.max_position_embeddings,decoder_input_ids:s,...t}),o=this.tokenizer.batch_decode(i)[0].match(/<s_answer>(.*?)<\/s_answer>/);let l=null;return o&&o.length>=2&&(l=o[1].trim()),[{answer:l}]}}class L extends p{DEFAULT_VOCODER_ID="Xenova/speecht5_hifigan";constructor(e){super(e),this.vocoder=e.vocoder??null}async _call(e,{speaker_embeddings:A=null}={}){return this.processor?this._call_text_to_spectrogram(e,{speaker_embeddings:A}):this._call_text_to_waveform(e)}async _call_text_to_waveform(e){const A=this.tokenizer(e,{padding:!0,truncation:!0}),{waveform:t}=await this.model(A),r=this.model.config.sampling_rate;return new l.RawAudio(t.data,r)}async _call_text_to_spectrogram(e,{speaker_embeddings:A}){if(this.vocoder||(console.log("No vocoder specified, using default HifiGan vocoder."),this.vocoder=await n.AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID,{dtype:"fp32"})),("string"==typeof A||A instanceof URL)&&(A=new Float32Array(await(await fetch(A)).arrayBuffer())),A instanceof Float32Array)A=new c.Tensor("float32",A,[1,A.length]);else if(!(A instanceof c.Tensor))throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");const{input_ids:t}=this.tokenizer(e,{padding:!0,truncation:!0}),{waveform:r}=await this.model.generate_speech(t,A,{vocoder:this.vocoder}),a=this.processor.feature_extractor.config.sampling_rate;return new l.RawAudio(r.data,a)}}class Y extends p{constructor(e){super(e)}async _call(e){const A=await u(e),t=await this.processor(A),r=await this.model(t),n=[];for(const e of r.reconstruction){const A=e.squeeze().clamp_(0,1).mul_(255).round_().to("uint8");n.push(g.RawImage.fromTensor(A))}return n.length>1?n:n[0]}}class H extends p{constructor(e){super(e)}async _call(e){const A=await u(e),t=await this.processor(A),{predicted_depth:r}=await this.model(t),n=[];for(let e=0;e<A.length;++e){const t=r[e],[a,s]=t.dims.slice(-2),[i,o]=A[e].size,l=(await(0,c.interpolate_4d)(t.view(1,1,a,s),{size:[o,i],mode:"bilinear"})).view(o,i),u=l.min().item(),d=l.max().item(),f=l.sub(u).div_(d-u).mul_(255).to("uint8").unsqueeze(0),p=g.RawImage.fromTensor(f);n.push({predicted_depth:l,depth:p})}return n.length>1?n:n[0]}}const R=Object.freeze({"text-classification":{tokenizer:r.AutoTokenizer,pipeline:h,model:n.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-finetuned-sst-2-english"},type:"text"},"token-classification":{tokenizer:r.AutoTokenizer,pipeline:m,model:n.AutoModelForTokenClassification,default:{model:"Xenova/bert-base-multilingual-cased-ner-hrl"},type:"text"},"question-answering":{tokenizer:r.AutoTokenizer,pipeline:C,model:n.AutoModelForQuestionAnswering,default:{model:"Xenova/distilbert-base-cased-distilled-squad"},type:"text"},"fill-mask":{tokenizer:r.AutoTokenizer,pipeline:b,model:n.AutoModelForMaskedLM,default:{model:"Xenova/bert-base-uncased"},type:"text"},summarization:{tokenizer:r.AutoTokenizer,pipeline:w,model:n.AutoModelForSeq2SeqLM,default:{model:"Xenova/distilbart-cnn-6-6"},type:"text"},translation:{tokenizer:r.AutoTokenizer,pipeline:k,model:n.AutoModelForSeq2SeqLM,default:{model:"Xenova/t5-small"},type:"text"},"text2text-generation":{tokenizer:r.AutoTokenizer,pipeline:I,model:n.AutoModelForSeq2SeqLM,default:{model:"Xenova/flan-t5-small"},type:"text"},"text-generation":{tokenizer:r.AutoTokenizer,pipeline:v,model:n.AutoModelForCausalLM,default:{model:"Xenova/gpt2"},type:"text"},"zero-shot-classification":{tokenizer:r.AutoTokenizer,pipeline:B,model:n.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-mnli"},type:"text"},"audio-classification":{pipeline:M,model:n.AutoModelForAudioClassification,processor:a.AutoProcessor,default:{model:"Xenova/wav2vec2-base-superb-ks"},type:"audio"},"zero-shot-audio-classification":{tokenizer:r.AutoTokenizer,pipeline:G,model:n.AutoModel,processor:a.AutoProcessor,default:{model:"Xenova/clap-htsat-unfused"},type:"multimodal"},"automatic-speech-recognition":{tokenizer:r.AutoTokenizer,pipeline:D,model:[n.AutoModelForSpeechSeq2Seq,n.AutoModelForCTC],processor:a.AutoProcessor,default:{model:"Xenova/whisper-tiny.en"},type:"multimodal"},"text-to-audio":{tokenizer:r.AutoTokenizer,pipeline:L,model:[n.AutoModelForTextToWaveform,n.AutoModelForTextToSpectrogram],processor:[a.AutoProcessor,null],default:{model:"Xenova/speecht5_tts"},type:"text"},"image-to-text":{tokenizer:r.AutoTokenizer,pipeline:Q,model:n.AutoModelForVision2Seq,processor:a.AutoProcessor,default:{model:"Xenova/vit-gpt2-image-captioning"},type:"multimodal"},"image-classification":{pipeline:T,model:n.AutoModelForImageClassification,processor:a.AutoProcessor,default:{model:"Xenova/vit-base-patch16-224"},type:"multimodal"},"image-segmentation":{pipeline:P,model:[n.AutoModelForImageSegmentation,n.AutoModelForSemanticSegmentation,n.AutoModelForUniversalSegmentation],processor:a.AutoProcessor,default:{model:"Xenova/detr-resnet-50-panoptic"},type:"multimodal"},"background-removal":{pipeline:z,model:[n.AutoModelForImageSegmentation,n.AutoModelForSemanticSegmentation,n.AutoModelForUniversalSegmentation],processor:a.AutoProcessor,default:{model:"Xenova/modnet"},type:"image"},"zero-shot-image-classification":{tokenizer:r.AutoTokenizer,pipeline:F,model:n.AutoModel,processor:a.AutoProcessor,default:{model:"Xenova/clip-vit-base-patch32"},type:"multimodal"},"object-detection":{pipeline:S,model:n.AutoModelForObjectDetection,processor:a.AutoProcessor,default:{model:"Xenova/detr-resnet-50"},type:"multimodal"},"zero-shot-object-detection":{tokenizer:r.AutoTokenizer,pipeline:N,model:n.AutoModelForZeroShotObjectDetection,processor:a.AutoProcessor,default:{model:"Xenova/owlvit-base-patch32"},type:"multimodal"},"document-question-answering":{tokenizer:r.AutoTokenizer,pipeline:O,model:n.AutoModelForDocumentQuestionAnswering,processor:a.AutoProcessor,default:{model:"Xenova/donut-base-finetuned-docvqa"},type:"multimodal"},"image-to-image":{pipeline:Y,model:n.AutoModelForImageToImage,processor:a.AutoProcessor,default:{model:"Xenova/swin2SR-classical-sr-x2-64"},type:"image"},"depth-estimation":{pipeline:H,model:n.AutoModelForDepthEstimation,processor:a.AutoProcessor,default:{model:"Xenova/dpt-large"},type:"image"},"feature-extraction":{tokenizer:r.AutoTokenizer,pipeline:y,model:n.AutoModel,default:{model:"Xenova/all-MiniLM-L6-v2"},type:"text"},"image-feature-extraction":{processor:a.AutoProcessor,pipeline:E,model:[n.AutoModelForImageFeatureExtraction,n.AutoModel],default:{model:"Xenova/vit-base-patch16-224-in21k"},type:"image"}}),j=Object.freeze({"sentiment-analysis":"text-classification",ner:"token-classification",asr:"automatic-speech-recognition","text-to-speech":"text-to-audio",embeddings:"feature-extraction"});async function V(e,A=null,{progress_callback:t=null,config:r=null,cache_dir:n=null,local_files_only:a=!1,revision:s="main",device:o=null,dtype:l=null,subfolder:c="onnx",use_external_data_format:g=null,model_file_name:u=null,session_options:d={}}={}){e=j[e]??e;const f=R[e.split("_",1)[0]];if(!f)throw Error(`Unsupported pipeline: ${e}. Must be one of [${Object.keys(R)}]`);A||(A=f.default.model,console.log(`No model specified. Using default model: "${A}".`));const p={progress_callback:t,config:r,cache_dir:n,local_files_only:a,revision:s,device:o,dtype:l,subfolder:c,use_external_data_format:g,model_file_name:u,session_options:d},h=new Map([["tokenizer",f.tokenizer],["model",f.model],["processor",f.processor]]),m=await async function(e,A,t){const r=Object.create(null),n=[];for(const[a,s]of e.entries()){if(!s)continue;let e;e=Array.isArray(s)?new Promise((async(e,r)=>{let n;for(const a of s){if(null===a)return void e(null);try{return void e(await a.from_pretrained(A,t))}catch(e){if(e.message?.includes("Unsupported model type"))n=e;else{if(!e.message?.includes("Could not locate file"))return void r(e);n=e}}}r(n)})):s.from_pretrained(A,t),r[a]=e,n.push(e)}await Promise.all(n);for(const[e,A]of Object.entries(r))r[e]=await A;return r}(h,A,p);m.task=e,(0,i.dispatchCallback)(t,{status:"ready",task:e,model:A});return new(0,f.pipeline)(m)}},"./src/tokenizers.js":(e,A,t)=>{t.r(A),t.d(A,{AlbertTokenizer:()=>ve,AutoTokenizer:()=>hA,BartTokenizer:()=>Oe,BertTokenizer:()=>xe,BlenderbotSmallTokenizer:()=>cA,BlenderbotTokenizer:()=>lA,BloomTokenizer:()=>Re,CLIPTokenizer:()=>aA,CamembertTokenizer:()=>Pe,CodeGenTokenizer:()=>nA,CodeLlamaTokenizer:()=>We,CohereTokenizer:()=>fA,ConvBertTokenizer:()=>De,DebertaTokenizer:()=>Ee,DebertaV2Tokenizer:()=>Me,DistilBertTokenizer:()=>Te,ElectraTokenizer:()=>Fe,EsmTokenizer:()=>qe,FalconTokenizer:()=>Ze,GPT2Tokenizer:()=>Ne,GPTNeoXTokenizer:()=>Xe,GemmaTokenizer:()=>_e,Grok1Tokenizer:()=>$e,HerbertTokenizer:()=>Ge,LlamaTokenizer:()=>Ve,M2M100Tokenizer:()=>tA,MBart50Tokenizer:()=>Ye,MBartTokenizer:()=>Le,MPNetTokenizer:()=>Ke,MarianTokenizer:()=>iA,MgpstrTokenizer:()=>pA,MobileBertTokenizer:()=>Be,NllbTokenizer:()=>AA,NougatTokenizer:()=>uA,PreTrainedTokenizer:()=>ke,Qwen2Tokenizer:()=>Je,RoFormerTokenizer:()=>Qe,RobertaTokenizer:()=>He,SiglipTokenizer:()=>sA,SpeechT5Tokenizer:()=>gA,SqueezeBertTokenizer:()=>ye,T5Tokenizer:()=>Se,TokenizerModel:()=>x,VitsTokenizer:()=>dA,Wav2Vec2CTCTokenizer:()=>oA,WhisperTokenizer:()=>rA,XLMRobertaTokenizer:()=>Ue,XLMTokenizer:()=>ze,is_chinese_char:()=>m});var r=t("./src/utils/generic.js"),n=t("./src/utils/core.js"),a=t("./src/utils/hub.js"),s=t("./src/utils/maths.js"),i=t("./src/utils/tensor.js"),o=t("./src/utils/data-structures.js"),l=t("./node_modules/@huggingface/jinja/dist/index.js"),c=t("./src/models/whisper/common_whisper.js");async function g(e,A){const t=await Promise.all([(0,a.getModelJSON)(e,"tokenizer.json",!0,A),(0,a.getModelJSON)(e,"tokenizer_config.json",!0,A)]);return null!==A.legacy&&(t[1].legacy=A.legacy),t}function u(e,A=!0){if(void 0!==e.Regex){let A=e.Regex.replace(/\\([#&~])/g,"$1");for(const[e,t]of w)A=A.replaceAll(e,t);return new RegExp(A,"gu")}if(void 0!==e.String){const t=(0,n.escapeRegExp)(e.String);return new RegExp(A?t:`(${t})`,"gu")}return console.warn("Unknown pattern type:",e),null}function d(e){return new Map(Object.entries(e))}function f(e){const A=e.dims;switch(A.length){case 1:return e.tolist();case 2:if(1!==A[0])throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");return e.tolist()[0];default:throw new Error(`Expected tensor to have 1-2 dimensions, got ${A.length}.`)}}function p(e){return e.replace(/ \./g,".").replace(/ \?/g,"?").replace(/ \!/g,"!").replace(/ ,/g,",").replace(/ \' /g,"'").replace(/ n\'t/g,"n't").replace(/ \'m/g,"'m").replace(/ \'s/g,"'s").replace(/ \'ve/g,"'ve").replace(/ \'re/g,"'re")}function h(e){return e.replace(/\p{M}/gu,"")}function m(e){return e>=19968&&e<=40959||e>=13312&&e<=19903||e>=131072&&e<=173791||e>=173824&&e<=177983||e>=177984&&e<=178207||e>=178208&&e<=183983||e>=63744&&e<=64255||e>=194560&&e<=195103}const C="\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E",b=new RegExp(`^[${C}]+$`,"gu"),I=".,!?…。，、।۔،",w=new Map([["(?i:'s|'t|'re|'ve|'m|'ll|'d)","(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"],[` ?[^(\\s|[${I}])]+`,` ?[^\\s${I}]+`]]);class k{constructor(e){this.content=e.content,this.id=e.id,this.single_word=e.single_word??!1,this.lstrip=e.lstrip??!1,this.rstrip=e.rstrip??!1,this.special=e.special??!1,this.normalized=e.normalized??null}}class x extends r.Callable{constructor(e){super(),this.config=e,this.vocab=[],this.tokens_to_ids=new Map,this.unk_token_id=void 0,this.unk_token=void 0,this.end_of_word_suffix=void 0,this.fuse_unk=this.config.fuse_unk??!1}static fromConfig(e,...A){switch(e.type){case"WordPiece":return new v(e);case"Unigram":return new B(e,...A);case"BPE":return new M(e);default:if(e.vocab)return Array.isArray(e.vocab)?new B(e,...A):"object"==typeof e.vocab&&e.continuing_subword_prefix&&e.unk_token?new v(e):new G(e,...A);throw new Error(`Unknown TokenizerModel type: ${e.type}`)}}_call(e){return e=this.encode(e),this.fuse_unk&&(e=function(e,A,t){const r=[];let n=0;for(;n<e.length;)if(r.push(e[n]),(A.get(e[n])??t)===t)for(;++n<e.length&&(A.get(e[n])??t)===t;)A.get(r.at(-1))!==t&&(r[r.length-1]+=e[n]);else++n;return r}(e,this.tokens_to_ids,this.unk_token_id)),e}encode(e){throw Error("encode should be implemented in subclass.")}convert_tokens_to_ids(e){return e.map((e=>this.tokens_to_ids.get(e)??this.unk_token_id))}convert_ids_to_tokens(e){return e.map((e=>this.vocab[e]??this.unk_token))}}class v extends x{constructor(e){super(e),this.tokens_to_ids=d(e.vocab),this.unk_token_id=this.tokens_to_ids.get(e.unk_token),this.unk_token=e.unk_token,this.max_input_chars_per_word=e.max_input_chars_per_word??100,this.vocab=new Array(this.tokens_to_ids.size);for(const[e,A]of this.tokens_to_ids)this.vocab[A]=e}encode(e){const A=[];for(const t of e){const e=[...t];if(e.length>this.max_input_chars_per_word){A.push(this.unk_token);continue}let r=!1,n=0;const a=[];for(;n<e.length;){let A=e.length,t=null;for(;n<A;){let r=e.slice(n,A).join("");if(n>0&&(r=this.config.continuing_subword_prefix+r),this.tokens_to_ids.has(r)){t=r;break}--A}if(null===t){r=!0;break}a.push(t),n=A}r?A.push(this.unk_token):A.push(...a)}return A}}class B extends x{constructor(e,A){super(e);const t=e.vocab.length;this.vocab=new Array(t),this.scores=new Array(t);for(let A=0;A<t;++A)[this.vocab[A],this.scores[A]]=e.vocab[A];this.unk_token_id=e.unk_id,this.unk_token=this.vocab[e.unk_id],this.tokens_to_ids=new Map(this.vocab.map(((e,A)=>[e,A]))),this.bos_token=" ",this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=A.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.unk_token=this.vocab[this.unk_token_id],this.minScore=(0,s.min)(this.scores)[0],this.unk_score=this.minScore-10,this.scores[this.unk_token_id]=this.unk_score,this.trie=new o.CharTrie,this.trie.extend(this.vocab),this.fuse_unk=!0}populateNodes(e){const A=e.chars;let t=0;for(;t<A.length;){let r=!1;const a=A.slice(t).join(""),s=this.trie.commonPrefixSearch(a);for(const A of s){const a=this.tokens_to_ids.get(A),s=this.scores[a],i=(0,n.len)(A);e.insert(t,i,s,a),r||1!==i||(r=!0)}r||e.insert(t,1,this.unk_score,this.unk_token_id),t+=1}}tokenize(e){const A=new o.TokenLattice(e,this.bos_token_id,this.eos_token_id);return this.populateNodes(A),A.tokens()}encode(e){const A=[];for(const t of e){const e=this.tokenize(t);A.push(...e)}return A}}const y=(()=>{const e=[...Array.from({length:"~".charCodeAt(0)-"!".charCodeAt(0)+1},((e,A)=>A+"!".charCodeAt(0))),...Array.from({length:"¬".charCodeAt(0)-"¡".charCodeAt(0)+1},((e,A)=>A+"¡".charCodeAt(0))),...Array.from({length:"ÿ".charCodeAt(0)-"®".charCodeAt(0)+1},((e,A)=>A+"®".charCodeAt(0)))],A=e.slice();let t=0;for(let r=0;r<256;++r)e.includes(r)||(e.push(r),A.push(256+t),t+=1);const r=A.map((e=>String.fromCharCode(e)));return Object.fromEntries(e.map(((e,A)=>[e,r[A]])))})(),E=(0,n.reverseDictionary)(y);class M extends x{constructor(e){super(e),this.tokens_to_ids=d(e.vocab),this.unk_token_id=this.tokens_to_ids.get(e.unk_token),this.unk_token=e.unk_token,this.vocab=new Array(this.tokens_to_ids.size);for(const[e,A]of this.tokens_to_ids)this.vocab[A]=e;const A=Array.isArray(e.merges[0]);this.merges=A?e.merges:e.merges.map((e=>e.split(" ",2))),this.bpe_ranks=new Map(this.merges.map(((e,A)=>[JSON.stringify(e),A]))),this.end_of_word_suffix=e.end_of_word_suffix,this.continuing_subword_suffix=e.continuing_subword_suffix??null,this.byte_fallback=this.config.byte_fallback??!1,this.byte_fallback&&(this.text_encoder=new TextEncoder),this.ignore_merges=this.config.ignore_merges??!1,this.max_length_to_cache=256,this.cache_capacity=1e4,this.cache=new o.LRUCache(this.cache_capacity)}clear_cache(){this.cache.clear()}bpe(e){if(0===e.length)return[];const A=this.cache.get(e);if(void 0!==A)return A;const t=Array.from(e);this.end_of_word_suffix&&(t[t.length-1]+=this.end_of_word_suffix);let r=[];if(t.length>1){const e=new o.PriorityQueue(((e,A)=>e.score<A.score));let A={token:t[0],bias:0,prev:null,next:null},n=A;for(let A=1;A<t.length;++A){const r={bias:A/t.length,token:t[A],prev:n,next:null};n.next=r,this._add_node(e,n),n=r}for(;!e.isEmpty();){const t=e.pop();if(t.deleted||!t.next||t.next.deleted)continue;if(t.deleted=!0,t.next.deleted=!0,t.prev){const e={...t.prev};t.prev.deleted=!0,t.prev=e,e.prev?e.prev.next=e:A=e}const r={token:t.token+t.next.token,bias:t.bias,prev:t.prev,next:t.next.next};r.prev?(r.prev.next=r,this._add_node(e,r.prev)):A=r,r.next&&(r.next.prev=r,this._add_node(e,r))}for(let e=A;null!==e;e=e.next)r.push(e.token)}else r=t;if(this.continuing_subword_suffix)for(let e=0;e<r.length-1;++e)r[e]+=this.continuing_subword_suffix;return e.length<this.max_length_to_cache&&this.cache.put(e,r),r}_add_node(e,A){const t=this.bpe_ranks.get(JSON.stringify([A.token,A.next.token]));void 0!==t&&(A.score=t+A.bias,e.push(A))}encode(e){const A=[];for(const t of e){if(this.ignore_merges&&this.tokens_to_ids.has(t)){A.push(t);continue}const e=this.bpe(t);for(const t of e)if(this.tokens_to_ids.has(t))A.push(t);else if(this.byte_fallback){const e=Array.from(this.text_encoder.encode(t)).map((e=>`<0x${e.toString(16).toUpperCase().padStart(2,"0")}>`));e.every((e=>this.tokens_to_ids.has(e)))?A.push(...e):A.push(this.unk_token)}else A.push(this.unk_token)}return A}}class G extends x{constructor(e,A){super(e),this.tokens_to_ids=d(A.target_lang?e.vocab[A.target_lang]:e.vocab),this.bos_token=A.bos_token,this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=A.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.pad_token=A.pad_token,this.pad_token_id=this.tokens_to_ids.get(this.pad_token),this.unk_token=A.unk_token,this.unk_token_id=this.tokens_to_ids.get(this.unk_token),this.vocab=new Array(this.tokens_to_ids.size);for(const[e,A]of this.tokens_to_ids)this.vocab[A]=e}encode(e){return e}}class D extends r.Callable{constructor(e){super(),this.config=e}static fromConfig(e){if(null===e)return null;switch(e.type){case"BertNormalizer":return new R(e);case"Precompiled":return new fe(e);case"Sequence":return new H(e);case"Replace":return new Q(e);case"NFC":return new P(e);case"NFD":return new z(e);case"NFKC":return new F(e);case"NFKD":return new S(e);case"Strip":return new N(e);case"StripAccents":return new O(e);case"Lowercase":return new L(e);case"Prepend":return new Y(e);default:throw new Error(`Unknown Normalizer type: ${e.type}`)}}normalize(e){throw Error("normalize should be implemented in subclass.")}_call(e){return this.normalize(e)}}class Q extends D{normalize(e){const A=u(this.config.pattern);return null===A?e:e.replaceAll(A,this.config.content)}}class T extends D{form=void 0;normalize(e){return e=e.normalize(this.form)}}class P extends T{form="NFC"}class z extends T{form="NFD"}class F extends T{form="NFKC"}class S extends T{form="NFKD"}class N extends D{normalize(e){return this.config.strip_left&&this.config.strip_right?e=e.trim():(this.config.strip_left&&(e=e.trimStart()),this.config.strip_right&&(e=e.trimEnd())),e}}class O extends D{normalize(e){return e=h(e)}}class L extends D{normalize(e){return e=e.toLowerCase()}}class Y extends D{normalize(e){return e=this.config.prepend+e}}class H extends D{constructor(e){super(e),this.normalizers=e.normalizers.map((e=>D.fromConfig(e)))}normalize(e){return this.normalizers.reduce(((e,A)=>A.normalize(e)),e)}}class R extends D{_tokenize_chinese_chars(e){const A=[];for(let t=0;t<e.length;++t){const r=e[t];m(r.charCodeAt(0))?(A.push(" "),A.push(r),A.push(" ")):A.push(r)}return A.join("")}stripAccents(e){return e.normalize("NFD").replace(/\p{Mn}/gu,"")}_is_control(e){switch(e){case"\t":case"\n":case"\r":return!1;default:return/^\p{Cc}|\p{Cf}|\p{Co}|\p{Cs}$/u.test(e)}}_clean_text(e){const A=[];for(const t of e){const e=t.charCodeAt(0);0===e||65533===e||this._is_control(t)||(/^\s$/.test(t)?A.push(" "):A.push(t))}return A.join("")}normalize(e){return this.config.clean_text&&(e=this._clean_text(e)),this.config.handle_chinese_chars&&(e=this._tokenize_chinese_chars(e)),this.config.lowercase?(e=e.toLowerCase(),!1!==this.config.strip_accents&&(e=this.stripAccents(e))):this.config.strip_accents&&(e=this.stripAccents(e)),e}}class j extends r.Callable{static fromConfig(e){if(null===e)return null;switch(e.type){case"BertPreTokenizer":return new V(e);case"Sequence":return new pe(e);case"Whitespace":return new he(e);case"WhitespaceSplit":return new me(e);case"Metaspace":return new ue(e);case"ByteLevel":return new W(e);case"Split":return new U(e);case"Punctuation":return new K(e);case"Digits":return new Z(e);case"Replace":return new Ce(e);default:throw new Error(`Unknown PreTokenizer type: ${e.type}`)}}pre_tokenize_text(e,A){throw Error("pre_tokenize_text should be implemented in subclass.")}pre_tokenize(e,A){return(Array.isArray(e)?e.map((e=>this.pre_tokenize_text(e,A))):this.pre_tokenize_text(e,A)).flat()}_call(e,A){return this.pre_tokenize(e,A)}}class V extends j{constructor(e){super(),this.pattern=new RegExp(`[^\\s${C}]+|[${C}]`,"gu")}pre_tokenize_text(e,A){return e.trim().match(this.pattern)||[]}}class W extends j{constructor(e){super(),this.config=e,this.add_prefix_space=this.config.add_prefix_space,this.trim_offsets=this.config.trim_offsets,this.use_regex=this.config.use_regex??!0,this.pattern=/'s|'t|'re|'ve|'m|'ll|'d| ?\p{L}+| ?\p{N}+| ?[^\s\p{L}\p{N}]+|\s+(?!\S)|\s+/gu,this.byte_encoder=y,this.text_encoder=new TextEncoder}pre_tokenize_text(e,A){this.add_prefix_space&&!e.startsWith(" ")&&(e=" "+e);return(this.use_regex?e.match(this.pattern)||[]:[e]).map((e=>Array.from(this.text_encoder.encode(e),(e=>this.byte_encoder[e])).join("")))}}class U extends j{constructor(e){super(),this.config=e,this.pattern=u(this.config.pattern,this.config.invert)}pre_tokenize_text(e,A){return null===this.pattern?[]:this.config.invert?e.match(this.pattern)||[]:"removed"===this.config.behavior?.toLowerCase()?e.split(this.pattern).filter((e=>e)):function(e,A){const t=[];let r=0;for(const n of e.matchAll(A)){const A=n[0];r<n.index&&t.push(e.slice(r,n.index)),A.length>0&&t.push(A),r=n.index+A.length}return r<e.length&&t.push(e.slice(r)),t}(e,this.pattern)}}class K extends j{constructor(e){super(),this.config=e,this.pattern=new RegExp(`[^${C}]+|[${C}]+`,"gu")}pre_tokenize_text(e,A){return e.match(this.pattern)||[]}}class Z extends j{constructor(e){super(),this.config=e;const A="[^\\d]+|\\d"+(this.config.individual_digits?"":"+");this.pattern=new RegExp(A,"gu")}pre_tokenize_text(e,A){return e.match(this.pattern)||[]}}class X extends r.Callable{constructor(e){super(),this.config=e}static fromConfig(e){if(null===e)return null;switch(e.type){case"TemplateProcessing":return new _(e);case"ByteLevel":return new $(e);case"RobertaProcessing":return new J(e);case"BertProcessing":return new q(e);case"Sequence":return new ee(e);default:throw new Error(`Unknown PostProcessor type: ${e.type}`)}}post_process(e,...A){throw Error("post_process should be implemented in subclass.")}_call(e,...A){return this.post_process(e,...A)}}class q extends X{constructor(e){super(e),this.cls=e.cls[0],this.sep=e.sep[0]}post_process(e,A=null,{add_special_tokens:t=!0}={}){t&&(e=(0,n.mergeArrays)([this.cls],e,[this.sep]));let r=new Array(e.length).fill(0);if(null!==A){const a=t&&this instanceof J?[this.sep]:[],s=t?[this.sep]:[];e=(0,n.mergeArrays)(e,a,A,s),r=(0,n.mergeArrays)(r,new Array(A.length+a.length+s.length).fill(1))}return{tokens:e,token_type_ids:r}}}class J extends q{}class _ extends X{constructor(e){super(e),this.single=e.single,this.pair=e.pair}post_process(e,A=null,{add_special_tokens:t=!0}={}){const r=null===A?this.single:this.pair;let a=[],s=[];for(const i of r)"SpecialToken"in i?t&&(a.push(i.SpecialToken.id),s.push(i.SpecialToken.type_id)):"Sequence"in i&&("A"===i.Sequence.id?(a=(0,n.mergeArrays)(a,e),s=(0,n.mergeArrays)(s,new Array(e.length).fill(i.Sequence.type_id))):"B"===i.Sequence.id&&(a=(0,n.mergeArrays)(a,A),s=(0,n.mergeArrays)(s,new Array(A.length).fill(i.Sequence.type_id))));return{tokens:a,token_type_ids:s}}}class $ extends X{post_process(e,A=null){return A&&(e=(0,n.mergeArrays)(e,A)),{tokens:e}}}class ee extends X{constructor(e){super(e),this.processors=e.processors.map((e=>X.fromConfig(e)))}post_process(e,A=null,t={}){let r;for(const n of this.processors)if(n instanceof $){if(e=n.post_process(e).tokens,A){A=n.post_process(A).tokens}}else{const a=n.post_process(e,A,t);e=a.tokens,r=a.token_type_ids}return{tokens:e,token_type_ids:r}}}class Ae extends r.Callable{constructor(e){super(),this.config=e,this.added_tokens=[],this.end_of_word_suffix=null,this.trim_offsets=e.trim_offsets}static fromConfig(e){if(null===e)return null;switch(e.type){case"WordPiece":return new se(e);case"Metaspace":return new de(e);case"ByteLevel":return new ie(e);case"Replace":return new te(e);case"ByteFallback":return new re(e);case"Fuse":return new ne(e);case"Strip":return new ae(e);case"Sequence":return new le(e);case"CTC":return new oe(e);case"BPEDecoder":return new ce(e);default:throw new Error(`Unknown Decoder type: ${e.type}`)}}_call(e){return this.decode(e)}decode(e){return this.decode_chain(e).join("")}decode_chain(e){throw Error("`decode_chain` should be implemented in subclass.")}}class te extends Ae{decode_chain(e){const A=u(this.config.pattern);return null===A?e:e.map((e=>e.replaceAll(A,this.config.content)))}}class re extends Ae{constructor(e){super(e),this.text_decoder=new TextDecoder}decode_chain(e){const A=[];let t=[];for(const r of e){let e=null;if(6===r.length&&r.startsWith("<0x")&&r.endsWith(">")){const A=parseInt(r.slice(3,5),16);isNaN(A)||(e=A)}if(null!==e)t.push(e);else{if(t.length>0){const e=this.text_decoder.decode(Uint8Array.from(t));A.push(e),t=[]}A.push(r)}}if(t.length>0){const e=this.text_decoder.decode(Uint8Array.from(t));A.push(e),t=[]}return A}}class ne extends Ae{decode_chain(e){return[e.join("")]}}class ae extends Ae{constructor(e){super(e),this.content=this.config.content,this.start=this.config.start,this.stop=this.config.stop}decode_chain(e){return e.map((e=>{let A=0;for(let t=0;t<this.start&&e[t]===this.content;++t)A=t+1;let t=e.length;for(let A=0;A<this.stop;++A){const r=e.length-A-1;if(e[r]!==this.content)break;t=r}return e.slice(A,t)}))}}class se extends Ae{constructor(e){super(e),this.cleanup=e.cleanup}decode_chain(e){return e.map(((e,A)=>(0!==A&&(e=e.startsWith(this.config.prefix)?e.replace(this.config.prefix,""):" "+e),this.cleanup&&(e=p(e)),e)))}}class ie extends Ae{constructor(e){super(e),this.byte_decoder=E,this.text_decoder=new TextDecoder("utf-8",{fatal:!1,ignoreBOM:!0}),this.end_of_word_suffix=null}convert_tokens_to_string(e){const A=e.join(""),t=new Uint8Array([...A].map((e=>this.byte_decoder[e])));return this.text_decoder.decode(t)}decode_chain(e){const A=[];let t=[];for(const r of e)void 0!==this.added_tokens.find((e=>e.content===r))?(t.length>0&&(A.push(this.convert_tokens_to_string(t)),t=[]),A.push(r)):t.push(r);return t.length>0&&A.push(this.convert_tokens_to_string(t)),A}}class oe extends Ae{constructor(e){super(e),this.pad_token=this.config.pad_token,this.word_delimiter_token=this.config.word_delimiter_token,this.cleanup=this.config.cleanup}convert_tokens_to_string(e){if(0===e.length)return"";const A=[e[0]];for(let t=1;t<e.length;++t)e[t]!==A.at(-1)&&A.push(e[t]);let t=A.filter((e=>e!==this.pad_token)).join("");return this.cleanup&&(t=p(t).replaceAll(this.word_delimiter_token," ").trim()),t}decode_chain(e){return[this.convert_tokens_to_string(e)]}}class le extends Ae{constructor(e){super(e),this.decoders=e.decoders.map((e=>Ae.fromConfig(e)))}decode_chain(e){return this.decoders.reduce(((e,A)=>A.decode_chain(e)),e)}}class ce extends Ae{constructor(e){super(e),this.suffix=this.config.suffix}decode_chain(e){return e.map(((A,t)=>A.replaceAll(this.suffix,t===e.length-1?"":" ")))}}class ge extends Ae{decode_chain(e){let A="";for(let t=1;t<e.length;t+=2)A+=e[t];return[A]}}class ue extends j{constructor(e){super(),this.addPrefixSpace=e.add_prefix_space,this.replacement=e.replacement,this.strRep=e.str_rep||this.replacement,this.prepend_scheme=e.prepend_scheme??"always"}pre_tokenize_text(e,{section_index:A}={}){let t=e.replaceAll(" ",this.strRep);return this.addPrefixSpace&&!t.startsWith(this.replacement)&&("always"===this.prepend_scheme||"first"===this.prepend_scheme&&0===A)&&(t=this.strRep+t),[t]}}class de extends Ae{constructor(e){super(e),this.addPrefixSpace=e.add_prefix_space,this.replacement=e.replacement}decode_chain(e){const A=[];for(let t=0;t<e.length;++t){let r=e[t].replaceAll(this.replacement," ");this.addPrefixSpace&&0==t&&r.startsWith(" ")&&(r=r.substring(1)),A.push(r)}return A}}class fe extends D{constructor(e){super(e),this.charsmap=e.precompiled_charsmap}normalize(e){if((e=(e=e.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm,"")).replace(/[\u0009\u000A\u000C\u000D\u00A0\u1680\u2000-\u200F\u2028\u2029\u202F\u205F\u2581\u3000\uFEFF\uFFFD]/gm," ")).includes("～")){const A=e.split("～");e=A.map((e=>e.normalize("NFKC"))).join("～")}else e=e.normalize("NFKC");return e}}class pe extends j{constructor(e){super(),this.tokenizers=e.pretokenizers.map((e=>j.fromConfig(e)))}pre_tokenize_text(e,A){return this.tokenizers.reduce(((e,t)=>t.pre_tokenize(e,A)),[e])}}class he extends j{constructor(e){super()}pre_tokenize_text(e,A){return e.match(/\w+|[^\w\s]+/g)||[]}}class me extends j{constructor(e){super()}pre_tokenize_text(e,A){return function(e){return e.match(/\S+/g)||[]}(e)}}class Ce extends j{constructor(e){super(),this.config=e,this.pattern=u(this.config.pattern),this.content=this.config.content}pre_tokenize_text(e,A){return null===this.pattern?[e]:[e.replaceAll(this.pattern,this.config.content)]}}const be=["bos_token","eos_token","unk_token","sep_token","pad_token","cls_token","mask_token"];function Ie(e,A,t,r){for(const a of Object.keys(e)){const s=A-e[a].length,i=t(a),o=new Array(s).fill(i);e[a]="right"===r?(0,n.mergeArrays)(e[a],o):(0,n.mergeArrays)(o,e[a])}}function we(e,A){for(const t of Object.keys(e))e[t].length=A}class ke extends r.Callable{return_token_type_ids=!1;padding_side="right";constructor(e,A){super(),this._tokenizer_config=A,this.normalizer=D.fromConfig(e.normalizer),this.pre_tokenizer=j.fromConfig(e.pre_tokenizer),this.model=x.fromConfig(e.model,A),this.post_processor=X.fromConfig(e.post_processor),this.decoder=Ae.fromConfig(e.decoder),this.special_tokens=[],this.all_special_ids=[],this.added_tokens=[];for(const A of e.added_tokens){const e=new k(A);this.added_tokens.push(e),this.model.tokens_to_ids.set(e.content,e.id),this.model.vocab[e.id]=e.content,e.special&&(this.special_tokens.push(e.content),this.all_special_ids.push(e.id))}if(this.additional_special_tokens=A.additional_special_tokens??[],this.special_tokens.push(...this.additional_special_tokens),this.special_tokens=[...new Set(this.special_tokens)],this.decoder&&(this.decoder.added_tokens=this.added_tokens,this.decoder.end_of_word_suffix=this.model.end_of_word_suffix),this.added_tokens_splitter=new o.DictionarySplitter(this.added_tokens.map((e=>e.content))),this.added_tokens_map=new Map(this.added_tokens.map((e=>[e.content,e]))),this.mask_token=this.getToken("mask_token"),this.mask_token_id=this.model.tokens_to_ids.get(this.mask_token),this.pad_token=this.getToken("pad_token","eos_token"),this.pad_token_id=this.model.tokens_to_ids.get(this.pad_token),this.sep_token=this.getToken("sep_token"),this.sep_token_id=this.model.tokens_to_ids.get(this.sep_token),this.unk_token=this.getToken("unk_token"),this.unk_token_id=this.model.tokens_to_ids.get(this.unk_token),this.bos_token=this.getToken("bos_token"),this.bos_token_id=this.model.tokens_to_ids.get(this.bos_token),this.eos_token=this.getToken("eos_token"),this.eos_token_id=this.model.tokens_to_ids.get(this.eos_token),this.model_max_length=A.model_max_length,this.remove_space=A.remove_space,this.clean_up_tokenization_spaces=A.clean_up_tokenization_spaces??!0,this.do_lowercase_and_remove_accent=A.do_lowercase_and_remove_accent??!1,A.padding_side&&(this.padding_side=A.padding_side),this.legacy=!1,this.chat_template=A.chat_template??null,Array.isArray(this.chat_template)){const e=Object.create(null);for(const{name:A,template:t}of this.chat_template){if("string"!=typeof A||"string"!=typeof t)throw new Error('Chat template must be a list of objects with "name" and "template" properties');e[A]=t}this.chat_template=e}this._compiled_template_cache=new Map}getToken(...e){for(const A of e){const e=this._tokenizer_config[A];if(e){if("object"==typeof e){if("AddedToken"===e.__type)return e.content;throw Error(`Unknown token: ${e}`)}return e}}return null}static async from_pretrained(e,{progress_callback:A=null,config:t=null,cache_dir:r=null,local_files_only:n=!1,revision:a="main",legacy:s=null}={}){return new this(...await g(e,{progress_callback:A,config:t,cache_dir:r,local_files_only:n,revision:a,legacy:s}))}_call(e,{text_pair:A=null,add_special_tokens:t=!0,padding:r=!1,truncation:n=null,max_length:a=null,return_tensor:o=!0,return_token_type_ids:l=null}={}){const c=Array.isArray(e);let g;if(c){if(0===e.length)throw Error("text array must be non-empty");if(null!==A){if(!Array.isArray(A))throw Error("text_pair must also be an array");if(e.length!==A.length)throw Error("text and text_pair must have the same length");g=e.map(((e,r)=>this._encode_plus(e,{text_pair:A[r],add_special_tokens:t,return_token_type_ids:l})))}else g=e.map((e=>this._encode_plus(e,{add_special_tokens:t,return_token_type_ids:l})))}else{if(null==e)throw Error("text may not be null or undefined");if(Array.isArray(A))throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");g=[this._encode_plus(e,{text_pair:A,add_special_tokens:t,return_token_type_ids:l})]}if(null===a?a=this.model_max_length:null===n&&(!0===r?(console.warn("`max_length` is ignored when `padding: true` and there is no truncation strategy. To pad to max length, use `padding: 'max_length'`."),a=this.model_max_length):!1===r&&(console.warn("Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation: true` to explicitly truncate examples to max length."),n=!0)),!0===r&&(a=Math.min((0,s.max)(g.map((e=>e.input_ids.length)))[0],a??1/0)),a=Math.min(a,this.model_max_length??1/0),r||n)for(let e=0;e<g.length;++e)g[e].input_ids.length!==a&&(g[e].input_ids.length>a?n&&we(g[e],a):r&&Ie(g[e],a,(e=>"input_ids"===e?this.pad_token_id:0),this.padding_side));const u={};if(o){if((!r||!n)&&g.some((e=>{for(const A of Object.keys(e))if(e[A].length!==g[0][A]?.length)return!0;return!1})))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length.");const e=[g.length,g[0].input_ids.length];for(const A of Object.keys(g[0]))u[A]=new i.Tensor("int64",BigInt64Array.from(g.flatMap((e=>e[A])).map(BigInt)),e)}else{for(const e of Object.keys(g[0]))u[e]=g.map((A=>A[e]));if(!c)for(const e of Object.keys(u))u[e]=u[e][0]}return u}_encode_text(e){if(null===e)return null;const A=this.added_tokens_splitter.split(e);for(let e=0;e<A.length;++e){const t=this.added_tokens_map.get(A[e]);t&&(t.lstrip&&e>0&&(A[e-1]=A[e-1].trimEnd()),t.rstrip&&e<A.length-1&&(A[e+1]=A[e+1].trimStart()))}const t=A.flatMap(((e,A)=>{if(0===e.length)return[];if(this.added_tokens_map.has(e))return[e];if(!0===this.remove_space&&(e=e.trim().split(/\s+/).join(" ")),this.do_lowercase_and_remove_accent&&(e=function(e){return h(e.toLowerCase())}(e)),null!==this.normalizer&&(e=this.normalizer(e)),0===e.length)return[];const t=null!==this.pre_tokenizer?this.pre_tokenizer(e,{section_index:A}):[e];return this.model(t)}));return t}_encode_plus(e,{text_pair:A=null,add_special_tokens:t=!0,return_token_type_ids:r=null}={}){const{tokens:n,token_type_ids:a}=this._tokenize_helper(e,{pair:A,add_special_tokens:t}),s=this.model.convert_tokens_to_ids(n),i={input_ids:s,attention_mask:new Array(s.length).fill(1)};return(r??this.return_token_type_ids)&&a&&(i.token_type_ids=a),i}_tokenize_helper(e,{pair:A=null,add_special_tokens:t=!1}={}){const r=this._encode_text(e),a=this._encode_text(A);return this.post_processor?this.post_processor(r,a,{add_special_tokens:t}):{tokens:(0,n.mergeArrays)(r??[],a??[])}}tokenize(e,{pair:A=null,add_special_tokens:t=!1}={}){return this._tokenize_helper(e,{pair:A,add_special_tokens:t}).tokens}encode(e,{text_pair:A=null,add_special_tokens:t=!0,return_token_type_ids:r=null}={}){return this._encode_plus(e,{text_pair:A,add_special_tokens:t,return_token_type_ids:r}).input_ids}batch_decode(e,A={}){return e instanceof i.Tensor&&(e=e.tolist()),e.map((e=>this.decode(e,A)))}decode(e,A={}){if(e instanceof i.Tensor&&(e=f(e)),!Array.isArray(e)||0===e.length||!(0,n.isIntegralNumber)(e[0]))throw Error("token_ids must be a non-empty array of integers.");return this.decode_single(e,A)}decode_single(e,{skip_special_tokens:A=!1,clean_up_tokenization_spaces:t=null}){let r=this.model.convert_ids_to_tokens(e);A&&(r=r.filter((e=>!this.special_tokens.includes(e))));let n=this.decoder?this.decoder(r):r.join(" ");return this.decoder&&this.decoder.end_of_word_suffix&&(n=n.replaceAll(this.decoder.end_of_word_suffix," "),A&&(n=n.trim())),(t??this.clean_up_tokenization_spaces)&&(n=p(n)),n}get_chat_template({chat_template:e=null,tools:A=null}={}){if(this.chat_template&&"object"==typeof this.chat_template){const t=this.chat_template;if(null!==e&&Object.hasOwn(t,e))e=t[e];else if(null===e)if(null!==A&&"tool_use"in t)e=t.tool_use;else{if(!("default"in t))throw Error(`This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(t).sort()}.`);e=t.default}}else if(null===e){if(!this.chat_template)throw Error("Cannot use apply_chat_template() because tokenizer.chat_template is not set and no template argument was passed! For information about writing templates and setting the tokenizer.chat_template attribute, please see the documentation at https://huggingface.co/docs/transformers/main/en/chat_templating");e=this.chat_template}return e}apply_chat_template(e,{tools:A=null,documents:t=null,chat_template:r=null,add_generation_prompt:n=!1,tokenize:a=!0,padding:s=!1,truncation:i=!1,max_length:o=null,return_tensor:c=!0,return_dict:g=!1,tokenizer_kwargs:u={},...d}={}){if("string"!=typeof(r=this.get_chat_template({chat_template:r,tools:A})))throw Error("chat_template must be a string, but got "+typeof r);let f=this._compiled_template_cache.get(r);void 0===f&&(f=new l.Template(r),this._compiled_template_cache.set(r,f));const p=Object.create(null);for(const e of be){const A=this.getToken(e);A&&(p[e]=A)}const h=f.render({messages:e,add_generation_prompt:n,tools:A,documents:t,...p,...d});if(a){const e=this._call(h,{add_special_tokens:!1,padding:s,truncation:i,max_length:o,return_tensor:c,...u});return g?e:e.input_ids}return h}}class xe extends ke{return_token_type_ids=!0}class ve extends ke{return_token_type_ids=!0}class Be extends ke{return_token_type_ids=!0}class ye extends ke{return_token_type_ids=!0}class Ee extends ke{return_token_type_ids=!0}class Me extends ke{return_token_type_ids=!0}class Ge extends ke{return_token_type_ids=!0}class De extends ke{return_token_type_ids=!0}class Qe extends ke{return_token_type_ids=!0}class Te extends ke{}class Pe extends ke{}class ze extends ke{return_token_type_ids=!0;constructor(e,A){super(e,A),console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}}class Fe extends ke{return_token_type_ids=!0}class Se extends ke{}class Ne extends ke{}class Oe extends ke{}class Le extends ke{constructor(e,A){super(e,A),this.languageRegex=/^[a-z]{2}_[A-Z]{2}$/,this.language_codes=this.special_tokens.filter((e=>this.languageRegex.test(e))),this.lang_to_token=e=>e}_build_translation_inputs(e,A,t){return eA(this,e,A,t)}}class Ye extends Le{}class He extends ke{}class Re extends ke{}const je="▁";class Ve extends ke{padding_side="left";constructor(e,A){super(e,A),this.legacy=A.legacy??!0,this.legacy||(this.normalizer=null,this.pre_tokenizer=new ue({replacement:je,add_prefix_space:!0,prepend_scheme:"first"}))}_encode_text(e){if(null===e)return null;if(this.legacy||0===e.length)return super._encode_text(e);let A=super._encode_text(je+e.replaceAll(je," "));return A.length>1&&A[0]===je&&this.special_tokens.includes(A[1])&&(A=A.slice(1)),A}}class We extends ke{}class Ue extends ke{}class Ke extends ke{}class Ze extends ke{}class Xe extends ke{}class qe extends ke{}class Je extends ke{}class _e extends ke{}class $e extends ke{}function eA(e,A,t,r){if(!("language_codes"in e)||!Array.isArray(e.language_codes))throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");if(!("languageRegex"in e&&e.languageRegex instanceof RegExp))throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");if(!("lang_to_token"in e)||"function"!=typeof e.lang_to_token)throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");const n=r.src_lang,a=r.tgt_lang;if(!e.language_codes.includes(a))throw new Error(`Target language code "${a}" is not valid. Must be one of: {${e.language_codes.join(", ")}}`);if(void 0!==n){if(!e.language_codes.includes(n))throw new Error(`Source language code "${n}" is not valid. Must be one of: {${e.language_codes.join(", ")}}`);for(const A of e.post_processor.config.single)if("SpecialToken"in A&&e.languageRegex.test(A.SpecialToken.id)){A.SpecialToken.id=e.lang_to_token(n);break}}return r.forced_bos_token_id=e.model.convert_tokens_to_ids([e.lang_to_token(a)])[0],e._call(A,t)}class AA extends ke{constructor(e,A){super(e,A),this.languageRegex=/^[a-z]{3}_[A-Z][a-z]{3}$/,this.language_codes=this.special_tokens.filter((e=>this.languageRegex.test(e))),this.lang_to_token=e=>e}_build_translation_inputs(e,A,t){return eA(this,e,A,t)}}class tA extends ke{constructor(e,A){super(e,A),this.languageRegex=/^__[a-z]{2,3}__$/,this.language_codes=this.special_tokens.filter((e=>this.languageRegex.test(e))).map((e=>e.slice(2,-2))),this.lang_to_token=e=>`__${e}__`}_build_translation_inputs(e,A,t){return eA(this,e,A,t)}}class rA extends ke{get timestamp_begin(){return this.model.convert_tokens_to_ids(["<|notimestamps|>"])[0]+1}_decode_asr(e,{return_timestamps:A=!1,return_language:t=!1,time_precision:r=null,force_full_sequences:n=!0}={}){if(null===r)throw Error("Must specify time_precision");let a=null;const i="word"===A;function o(){return{language:a,timestamp:[null,null],text:""}}const l=[];let g=o(),u=0;const d=this.timestamp_begin,f=d+1500;let p=[],h=[],m=!1,C=null;const I=new Set(this.all_special_ids);for(const t of e){const e=t.tokens,n=i?t.token_timestamps:null;let w=null,k=d;if("stride"in t){const[A,n,a]=t.stride;if(u-=n,C=A-a,n&&(k=n/r+d),a)for(let A=e.length-1;A>=0;--A){const t=Number(e[A]);if(t>=d){if(null!==w&&(t-d)*r<C)break;w=t}}}let x=[],v=[];for(let t=0;t<e.length;++t){const C=Number(e[t]);if(I.has(C)){const e=this.decode([C]),t=c.WHISPER_LANGUAGE_MAPPING.get(e.slice(2,-2));if(void 0!==t){if(null!==a&&t!==a&&!A){p.push(x);const e=this.findLongestCommonSequence(p)[0],A=this.decode(e);g.text=A,l.push(g),p=[],x=[],g=o()}a=g.language=t}}else if(C>=d&&C<=f){const e=(C-d)*r+u,A=(0,s.round)(e,2);if(null!==w&&C>=w)m=!0;else if(m||p.length>0&&C<k)m=!1;else if(null===g.timestamp[0])g.timestamp[0]=A;else if(A===g.timestamp[0]);else{g.timestamp[1]=A,p.push(x),i&&h.push(v);const[e,t]=this.findLongestCommonSequence(p,h),r=this.decode(e);g.text=r,i&&(g.words=this.collateWordTimestamps(e,t,a)),l.push(g),p=[],x=[],h=[],v=[],g=o()}}else if(x.push(C),i){let e,A=(0,s.round)(n[t]+u,2);if(t+1<n.length){e=(0,s.round)(n[t+1]+u,2);const a=this.decode([C]);b.test(a)&&(e=(0,s.round)(Math.min(A+r,e),2))}else e=null;v.push([A,e])}}if("stride"in t){const[e,A,r]=t.stride;u+=e-r}x.length>0?(p.push(x),i&&h.push(v)):p.every((e=>0===e.length))&&(g=o(),p=[],x=[],h=[],v=[])}if(p.length>0){if(n&&A)throw new Error("Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation.");const[e,t]=this.findLongestCommonSequence(p,h),r=this.decode(e);g.text=r,i&&(g.words=this.collateWordTimestamps(e,t,a)),l.push(g)}let w=Object.create(null);const k=l.map((e=>e.text)).join("");if(A||t){for(let e=0;e<l.length;++e){const r=l[e];A||delete r.timestamp,t||delete r.language}if(i){const e=[];for(const A of l)for(const t of A.words)e.push(t);w={chunks:e}}else w={chunks:l}}return[k,w]}findLongestCommonSequence(e,A=null){let t=e[0],r=t.length,n=[];const a=Array.isArray(A)&&A.length>0;let s=a?[]:null,i=a?A[0]:null;for(let o=1;o<e.length;++o){const l=e[o];let c=0,g=[r,r,0,0];const u=l.length;for(let e=1;e<r+u;++e){const n=Math.max(0,r-e),s=Math.min(r,r+u-e),d=t.slice(n,s),f=Math.max(0,e-r),p=Math.min(u,e),h=l.slice(f,p);if(d.length!==h.length)throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");let m;m=a?d.filter(((e,t)=>e===h[t]&&i[n+t]<=A[o][f+t])).length:d.filter(((e,A)=>e===h[A])).length;const C=m/e+e/1e4;m>1&&C>c&&(c=C,g=[n,s,f,p])}const[d,f,p,h]=g,m=Math.floor((f+d)/2),C=Math.floor((h+p)/2);n.push(...t.slice(0,m)),t=l.slice(C),r=t.length,a&&(s.push(...i.slice(0,m)),i=A[o].slice(C))}return n.push(...t),a?(s.push(...i),[n,s]):[n,[]]}collateWordTimestamps(e,A,t){const[r,n,a]=this.combineTokensIntoWords(e,t),s=[];for(let e=0;e<r.length;++e){const t=a[e];s.push({text:r[e],timestamp:[A[t.at(0)][0],A[t.at(-1)][1]]})}return s}combineTokensIntoWords(e,A,t="\"'“¡¿([{-",r="\"'.。,，!！?？:：”)]}、"){let n,a,s;return["chinese","japanese","thai","lao","myanmar"].includes(A=A??"english")?[n,a,s]=this.splitTokensOnUnicode(e):[n,a,s]=this.splitTokensOnSpaces(e),this.mergePunctuations(n,a,s,t,r)}decode(e,A){let t;return A?.decode_with_timestamps?(e instanceof i.Tensor&&(e=f(e)),t=this.decodeWithTimestamps(e,A)):t=super.decode(e,A),t}decodeWithTimestamps(e,A){const t=A?.time_precision??.02,r=Array.from(this.all_special_ids).at(-1)+1;let n=[[]];for(let A of e)if(A=Number(A),A>=r){const e=((A-r)*t).toFixed(2);n.push(`<|${e}|>`),n.push([])}else n[n.length-1].push(A);return n=n.map((e=>"string"==typeof e?e:super.decode(e,A))),n.join("")}splitTokensOnUnicode(e){const A=this.decode(e,{decode_with_timestamps:!0}),t=[],r=[],n=[];let a=[],s=[],i=0;for(let o=0;o<e.length;++o){const l=e[o];a.push(l),s.push(o);const c=this.decode(a,{decode_with_timestamps:!0});c.includes("�")&&"�"!==A[i+c.indexOf("�")]||(t.push(c),r.push(a),n.push(s),a=[],s=[],i+=c.length)}return[t,r,n]}splitTokensOnSpaces(e){const[A,t,r]=this.splitTokensOnUnicode(e),n=[],a=[],s=[],i=new RegExp(`^[${C}]$`,"gu");for(let e=0;e<A.length;++e){const o=A[e],l=t[e],c=r[e],g=l[0]>=this.model.tokens_to_ids.get("<|endoftext|>"),u=o.startsWith(" "),d=o.trim(),f=i.test(d);if(g||u||f||0===n.length)n.push(o),a.push(l),s.push(c);else{const e=n.length-1;n[e]+=o,a[e].push(...l),s[e].push(...c)}}return[n,a,s]}mergePunctuations(e,A,t,r,a){const s=structuredClone(e),i=structuredClone(A),o=structuredClone(t);let l=s.length-2,c=s.length-1;for(;l>=0;)s[l].startsWith(" ")&&r.includes(s[l].trim())?(s[c]=s[l]+s[c],i[c]=(0,n.mergeArrays)(i[l],i[c]),o[c]=(0,n.mergeArrays)(o[l],o[c]),s[l]="",i[l]=[],o[l]=[]):c=l,--l;for(l=0,c=1;c<s.length;)!s[l].endsWith(" ")&&a.includes(s[c])?(s[l]+=s[c],i[l]=(0,n.mergeArrays)(i[l],i[c]),o[l]=(0,n.mergeArrays)(o[l],o[c]),s[c]="",i[c]=[],o[c]=[]):l=c,++c;return[s.filter((e=>e)),i.filter((e=>e.length>0)),o.filter((e=>e.length>0))]}}class nA extends ke{}class aA extends ke{}class sA extends ke{}class iA extends ke{constructor(e,A){super(e,A),this.languageRegex=/^(>>\w+<<)\s*/g,this.supported_language_codes=this.model.vocab.filter((e=>this.languageRegex.test(e))),console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}_encode_text(e){if(null===e)return null;const[A,...t]=e.trim().split(this.languageRegex);if(0===t.length)return super._encode_text(A);if(2===t.length){const[e,A]=t;return this.supported_language_codes.includes(e)||console.warn(`Unsupported language code "${e}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`),(0,n.mergeArrays)([e],super._encode_text(A))}}}class oA extends ke{}class lA extends ke{}class cA extends ke{}class gA extends ke{}class uA extends ke{}class dA extends ke{constructor(e,A){super(e,A),this.decoder=new ge({})}}class fA extends ke{}class pA extends ke{}class hA{static TOKENIZER_CLASS_MAPPING={T5Tokenizer:Se,DistilBertTokenizer:Te,CamembertTokenizer:Pe,DebertaTokenizer:Ee,DebertaV2Tokenizer:Me,BertTokenizer:xe,HerbertTokenizer:Ge,ConvBertTokenizer:De,RoFormerTokenizer:Qe,XLMTokenizer:ze,ElectraTokenizer:Fe,MobileBertTokenizer:Be,SqueezeBertTokenizer:ye,AlbertTokenizer:ve,GPT2Tokenizer:Ne,BartTokenizer:Oe,MBartTokenizer:Le,MBart50Tokenizer:Ye,RobertaTokenizer:He,WhisperTokenizer:rA,CodeGenTokenizer:nA,CLIPTokenizer:aA,SiglipTokenizer:sA,MarianTokenizer:iA,BloomTokenizer:Re,NllbTokenizer:AA,M2M100Tokenizer:tA,LlamaTokenizer:Ve,CodeLlamaTokenizer:We,XLMRobertaTokenizer:Ue,MPNetTokenizer:Ke,FalconTokenizer:Ze,GPTNeoXTokenizer:Xe,EsmTokenizer:qe,Wav2Vec2CTCTokenizer:oA,BlenderbotTokenizer:lA,BlenderbotSmallTokenizer:cA,SpeechT5Tokenizer:gA,NougatTokenizer:uA,VitsTokenizer:dA,Qwen2Tokenizer:Je,GemmaTokenizer:_e,Grok1Tokenizer:$e,CohereTokenizer:fA,MgpstrTokenizer:pA,PreTrainedTokenizer:ke};static async from_pretrained(e,{progress_callback:A=null,config:t=null,cache_dir:r=null,local_files_only:n=!1,revision:a="main",legacy:s=null}={}){const[i,o]=await g(e,{progress_callback:A,config:t,cache_dir:r,local_files_only:n,revision:a,legacy:s}),l=o.tokenizer_class?.replace(/Fast$/,"")??"PreTrainedTokenizer";let c=this.TOKENIZER_CLASS_MAPPING[l];return c||(console.warn(`Unknown tokenizer class "${l}", attempting to construct from base class.`),c=ke),new c(i,o)}}},"./src/utils/audio.js":(e,A,t)=>{t.r(A),t.d(A,{RawAudio:()=>k,hamming:()=>u,hanning:()=>g,mel_filter_bank:()=>m,read_audio:()=>l,spectrogram:()=>b,window_function:()=>I});var r=t("./src/utils/hub.js"),n=t("./src/utils/maths.js"),a=t("./src/utils/core.js"),s=t("./src/env.js"),i=t("?7a2c"),o=t("./src/utils/tensor.js");async function l(e,A){if("undefined"==typeof AudioContext)throw Error("Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing.");const t=await(await(0,r.getFile)(e)).arrayBuffer(),n=new AudioContext({sampleRate:A});void 0===A&&console.warn(`No sampling rate provided, using default of ${n.sampleRate}Hz.`);const a=await n.decodeAudioData(t);let s;if(2===a.numberOfChannels){const e=Math.sqrt(2),A=a.getChannelData(0),t=a.getChannelData(1);s=new Float32Array(A.length);for(let r=0;r<a.length;++r)s[r]=e*(A[r]+t[r])/2}else s=a.getChannelData(0);return s}function c(e,A){if(e<1)return new Float64Array;if(1===e)return new Float64Array([1]);const t=1-A,r=2*Math.PI/(e-1),n=new Float64Array(e);for(let a=0;a<e;++a)n[a]=A-t*Math.cos(a*r);return n}function g(e){return c(e,.5)}function u(e){return c(e,.54)}const d={htk:e=>2595*Math.log10(1+e/700),kaldi:e=>1127*Math.log(1+e/700),slaney:(e,A=1e3,t=15,r=27/Math.log(6.4))=>e>=A?t+Math.log(e/A)*r:3*e/200};function f(e,A="htk"){const t=d[A];if(!t)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return"number"==typeof e?t(e):e.map((e=>t(e)))}const p={htk:e=>700*(10**(e/2595)-1),kaldi:e=>700*(Math.exp(e/1127)-1),slaney:(e,A=1e3,t=15,r=Math.log(6.4)/27)=>e>=t?A*Math.exp(r*(e-t)):200*e/3};function h(e,A,t){const r=(A-e)/(t-1);return Float64Array.from({length:t},((A,t)=>e+r*t))}function m(e,A,t,r,n,a=null,s="htk",i=!1){if(null!==a&&"slaney"!==a)throw new Error('norm must be one of null or "slaney"');if(e<2)throw new Error(`Require num_frequency_bins: ${e} >= 2`);if(t>r)throw new Error(`Require min_frequency: ${t} <= max_frequency: ${r}`);const o=h(f(t,s),f(r,s),A+2);let l,c=function(e,A="htk"){const t=p[A];if(!t)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return"number"==typeof e?t(e):e.map((e=>t(e)))}(o,s);if(i){const A=n/(2*(e-1));l=f(Float64Array.from({length:e},((e,t)=>t*A)),s),c=o}else l=h(0,Math.floor(n/2),e);const g=function(e,A){const t=Float64Array.from({length:A.length-1},((e,t)=>A[t+1]-A[t])),r=Array.from({length:e.length},(()=>new Array(A.length)));for(let t=0;t<e.length;++t){const n=r[t];for(let r=0;r<A.length;++r)n[r]=A[r]-e[t]}const n=A.length-2,a=Array.from({length:n},(()=>new Array(e.length)));for(let A=0;A<e.length;++A){const e=r[A];for(let r=0;r<n;++r){const n=-e[r]/t[r],s=e[r+2]/t[r+1];a[r][A]=Math.max(0,Math.min(n,s))}}return a}(l,c);if(null!==a&&"slaney"===a)for(let t=0;t<A;++t){const A=g[t],r=2/(c[t+2]-c[t]);for(let t=0;t<e;++t)A[t]*=r}return g}function C(e,A,t,r,a){if(t<=0)throw new Error("reference must be greater than zero");if(r<=0)throw new Error("min_value must be greater than zero");t=Math.max(r,t);const s=Math.log10(t);for(let t=0;t<e.length;++t)e[t]=A*Math.log10(Math.max(r,e[t])-s);if(null!==a){if(a<=0)throw new Error("db_range must be greater than zero");const A=(0,n.max)(e)[0]-a;for(let t=0;t<e.length;++t)e[t]=Math.max(e[t],A)}return e}async function b(e,A,t,r,{fft_length:s=null,power:i=1,center:l=!0,pad_mode:c="reflect",onesided:g=!0,preemphasis:u=null,mel_filters:d=null,mel_floor:f=1e-10,log_mel:p=null,reference:h=1,min_value:m=1e-10,db_range:b=null,remove_dc_offset:I=null,min_num_frames:w=null,max_num_frames:k=null,do_pad:x=!0,transpose:v=!1}={}){const B=A.length;if(null===s&&(s=t),t>s)throw Error(`frame_length (${t}) may not be larger than fft_length (${s})`);if(B!==t)throw new Error(`Length of the window (${B}) must equal frame_length (${t})`);if(r<=0)throw new Error("hop_length must be greater than zero");if(null===i&&null!==d)throw new Error("You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue.");if(l){if("reflect"!==c)throw new Error(`pad_mode="${c}" not implemented yet.`);const A=Math.floor((s-1)/2)+1;e=function(e,A,t){const r=new e.constructor(e.length+A+t),n=e.length-1;for(let t=0;t<e.length;++t)r[A+t]=e[t];for(let t=1;t<=A;++t)r[A-t]=e[(0,a.calculateReflectOffset)(t,n)];for(let s=1;s<=t;++s)r[n+A+s]=e[(0,a.calculateReflectOffset)(n-s,n)];return r}(e,A,A)}let y=Math.floor(1+Math.floor((e.length-t)/r));null!==w&&y<w&&(y=w);const E=g?Math.floor(s/2)+1:s;let M=y,G=y;null!==k&&(k>y?x&&(G=k):G=M=k);const D=new n.FFT(s),Q=new Float64Array(s),T=new Float64Array(D.outputBufferSize),P=new Float32Array(E*G);for(let n=0;n<M;++n){const a=n*r,s=Math.min(e.length-a,t);s!==t&&Q.fill(0,0,t);for(let A=0;A<s;++A)Q[A]=e[a+A];if(I){let e=0;for(let A=0;A<s;++A)e+=Q[A];const A=e/s;for(let e=0;e<s;++e)Q[e]-=A}if(null!==u){for(let e=s-1;e>=1;--e)Q[e]-=u*Q[e-1];Q[0]*=1-u}for(let e=0;e<A.length;++e)Q[e]*=A[e];D.realTransform(T,Q);for(let e=0;e<E;++e){const A=e<<1;P[e*G+n]=T[A]**2+T[A+1]**2}}if(null!==i&&2!==i){const e=2/i;for(let A=0;A<P.length;++A)P[A]**=e}const z=d.length;let F=await(0,o.matmul)(new o.Tensor("float32",d.flat(),[z,E]),new o.Tensor("float32",P,[E,G]));v&&(F=F.transpose(1,0));const S=F.data;for(let e=0;e<S.length;++e)S[e]=Math.max(f,S[e]);if(null!==i&&null!==p){const e=Math.min(S.length,M*z);switch(p){case"log":for(let A=0;A<e;++A)S[A]=Math.log(S[A]);break;case"log10":for(let A=0;A<e;++A)S[A]=Math.log10(S[A]);break;case"dB":if(1===i)!function(e,A=1,t=1e-5,r=null){C(e,20,A,t,r)}(S,h,m,b);else{if(2!==i)throw new Error(`Cannot use log_mel option '${p}' with power ${i}`);!function(e,A=1,t=1e-10,r=null){C(e,10,A,t,r)}(S,h,m,b)}break;default:throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${p}'`)}}return F}function I(e,A,{periodic:t=!0,frame_length:r=null,center:n=!0}={}){const a=t?e+1:e;let s;switch(A){case"boxcar":s=new Float64Array(a).fill(1);break;case"hann":case"hann_window":s=g(a);break;case"hamming":s=u(a);break;case"povey":s=g(a).map((e=>Math.pow(e,.85)));break;default:throw new Error(`Unknown window type ${A}.`)}if(t&&(s=s.subarray(0,e)),null===r)return s;if(e>r)throw new Error(`Length of the window (${e}) may not be larger than frame_length (${r})`);return s}function w(e,A,t){for(let r=0;r<t.length;++r)e.setUint8(A+r,t.charCodeAt(r))}class k{constructor(e,A){this.audio=e,this.sampling_rate=A}toWav(){return function(e,A){let t=44;const r=new ArrayBuffer(t+4*e.length),n=new DataView(r);w(n,0,"RIFF"),n.setUint32(4,36+4*e.length,!0),w(n,8,"WAVE"),w(n,12,"fmt "),n.setUint32(16,16,!0),n.setUint16(20,3,!0),n.setUint16(22,1,!0),n.setUint32(24,A,!0),n.setUint32(28,4*A,!0),n.setUint16(32,4,!0),n.setUint16(34,32,!0),w(n,36,"data"),n.setUint32(40,4*e.length,!0);for(let A=0;A<e.length;++A,t+=4)n.setFloat32(t,e[A],!0);return r}(this.audio,this.sampling_rate)}toBlob(){const e=this.toWav();return new Blob([e],{type:"audio/wav"})}async save(e){let A;if(s.apis.IS_BROWSER_ENV){if(s.apis.IS_WEBWORKER_ENV)throw new Error("Unable to save a file from a Web Worker.");A=a.saveBlob}else{if(!s.apis.IS_FS_AVAILABLE)throw new Error("Unable to save because filesystem is disabled in this environment.");A=async(e,A)=>{let t=await A.arrayBuffer();i.writeFileSync(e,Buffer.from(t))}}await A(e,this.toBlob())}}},"./src/utils/constants.js":(e,A,t)=>{t.r(A),t.d(A,{CHAT_TEMPLATE_NAME:()=>o,CONFIG_NAME:()=>n,FEATURE_EXTRACTOR_NAME:()=>a,GENERATION_CONFIG_NAME:()=>l,GITHUB_ISSUE_URL:()=>r,IMAGE_PROCESSOR_NAME:()=>s,PROCESSOR_NAME:()=>i});const r="https://github.com/huggingface/transformers.js/issues/new/choose",n="config.json",a="preprocessor_config.json",s=a,i="processor_config.json",o="chat_template.json",l="generation_config.json"},"./src/utils/core.js":(e,A,t)=>{function r(e,A){e&&e(A)}function n(e){return Object.fromEntries(Object.entries(e).map((([e,A])=>[A,e])))}function a(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function s(e){return"TypedArray"===e?.prototype?.__proto__?.constructor?.name}function i(e){return Number.isInteger(e)||"bigint"==typeof e}function o(e){return null==e||-1===e}function l(e){const A=[];let t=e;for(;Array.isArray(t);)A.push(t.length),t=t[0];return A}function c(e,A,t=void 0){const r=e[A];if(void 0!==r)return delete e[A],r;if(void 0===t)throw Error(`Key ${A} does not exist in object.`);return t}function g(...e){return Array.prototype.concat.apply([],e)}function u(...e){return e.reduce(((e,A)=>e.flatMap((e=>A.map((A=>[e,A]))))))}function d(e,A){return Math.abs((e+A)%(2*A)-A)}function f(e,A){const t=URL.createObjectURL(A),r=document.createElement("a");r.href=t,r.download=e,r.click(),r.remove(),URL.revokeObjectURL(t)}function p(e,A){return Object.assign({},...A.map((A=>{if(void 0!==e[A])return{[A]:e[A]}})))}function h(e){let A=0;for(const t of e)++A;return A}function m(e,A){let t=0;for(const r of e)r===A&&++t;return t}t.r(A),t.d(A,{calculateDimensions:()=>l,calculateReflectOffset:()=>d,count:()=>m,dispatchCallback:()=>r,escapeRegExp:()=>a,isIntegralNumber:()=>i,isNullishDimension:()=>o,isTypedArray:()=>s,len:()=>h,mergeArrays:()=>g,pick:()=>p,pop:()=>c,product:()=>u,reverseDictionary:()=>n,saveBlob:()=>f})},"./src/utils/data-structures.js":(e,A,t)=>{t.r(A),t.d(A,{CharTrie:()=>n,DictionarySplitter:()=>o,LRUCache:()=>l,PriorityQueue:()=>r,TokenLattice:()=>s});class r{constructor(e=(e,A)=>e>A,A=1/0){this._heap=[],this._comparator=e,this._maxSize=A}get size(){return this._heap.length}isEmpty(){return 0===this.size}peek(){return this._heap[0]}push(...e){return this.extend(e)}extend(e){for(const A of e)if(this.size<this._maxSize)this._heap.push(A),this._siftUp();else{const e=this._smallest();this._comparator(A,this._heap[e])&&(this._heap[e]=A,this._siftUpFrom(e))}return this.size}pop(){const e=this.peek(),A=this.size-1;return A>0&&this._swap(0,A),this._heap.pop(),this._siftDown(),e}replace(e){const A=this.peek();return this._heap[0]=e,this._siftDown(),A}_parent(e){return(e+1>>>1)-1}_left(e){return 1+(e<<1)}_right(e){return e+1<<1}_greater(e,A){return this._comparator(this._heap[e],this._heap[A])}_swap(e,A){const t=this._heap[e];this._heap[e]=this._heap[A],this._heap[A]=t}_siftUp(){this._siftUpFrom(this.size-1)}_siftUpFrom(e){for(;e>0&&this._greater(e,this._parent(e));)this._swap(e,this._parent(e)),e=this._parent(e)}_siftDown(){let e=0;for(;this._left(e)<this.size&&this._greater(this._left(e),e)||this._right(e)<this.size&&this._greater(this._right(e),e);){const A=this._right(e)<this.size&&this._greater(this._right(e),this._left(e))?this._right(e):this._left(e);this._swap(e,A),e=A}}_smallest(){return 2**Math.floor(Math.log2(this.size))-1}}class n{constructor(){this.root=a.default()}extend(e){for(const A of e)this.push(A)}push(e){let A=this.root;for(const t of e){let e=A.children.get(t);void 0===e&&(e=a.default(),A.children.set(t,e)),A=e}A.isLeaf=!0}*commonPrefixSearch(e){let A=this.root;if(void 0===A)return;let t="";for(const r of e){if(t+=r,A=A.children.get(r),void 0===A)return;A.isLeaf&&(yield t)}}}class a{constructor(e,A){this.isLeaf=e,this.children=A}static default(){return new a(!1,new Map)}}class s{constructor(e,A,t){this.chars=Array.from(e),this.len=this.chars.length,this.bosTokenId=A,this.eosTokenId=t,this.nodes=[],this.beginNodes=Array.from({length:this.len+1},(()=>[])),this.endNodes=Array.from({length:this.len+1},(()=>[]));const r=new i(this.bosTokenId,0,0,0,0),n=new i(this.eosTokenId,1,this.len,0,0);this.nodes.push(r.clone()),this.nodes.push(n.clone()),this.beginNodes[this.len].push(n),this.endNodes[0].push(r)}insert(e,A,t,r){const n=this.nodes.length,a=new i(r,n,e,A,t);this.beginNodes[e].push(a),this.endNodes[e+A].push(a),this.nodes.push(a)}viterbi(){const e=this.len;let A=0;for(;A<=e;){if(0==this.beginNodes[A].length)return[];for(let e of this.beginNodes[A]){e.prev=null;let t=0,r=null;for(let n of this.endNodes[A]){const A=n.backtraceScore+e.score;(null===r||A>t)&&(r=n.clone(),t=A)}if(null===r)return[];e.prev=r,e.backtraceScore=t}++A}const t=[],r=this.beginNodes[e][0].prev;if(null===r)return[];let n=r.clone();for(;null!==n.prev;){t.push(n.clone());const e=n.clone();n=e.prev.clone()}return t.reverse(),t}piece(e){return this.chars.slice(e.pos,e.pos+e.length).join("")}tokens(){return this.viterbi().map((e=>this.piece(e)))}tokenIds(){return this.viterbi().map((e=>e.tokenId))}}class i{constructor(e,A,t,r,n){this.tokenId=e,this.nodeId=A,this.pos=t,this.length=r,this.score=n,this.prev=null,this.backtraceScore=0}clone(){const e=new i(this.tokenId,this.nodeId,this.pos,this.length,this.score);return e.prev=this.prev,e.backtraceScore=this.backtraceScore,e}}class o{constructor(e){this.trie=this._buildTrie(e)}_buildTrie(e){const A=Object.create(null);for(const t of e){let e=A;for(let A=0;A<t.length;++A)e=e[t[A]]??=Object.create(null);e.end=t}return A}split(e){const A=[],t=e.length;let r=0,n=0;for(;n<t;){let a=this.trie,s=null,i=n;for(;i<t&&(a=a[e[i]]);)a.end&&(s=a.end),++i;s?(n>r&&A.push(e.slice(r,n)),A.push(s),n+=s.length,r=n):++n}return r<t&&A.push(e.slice(r)),A}}class l{constructor(e){this.capacity=e,this.cache=new Map}get(e){if(!this.cache.has(e))return;const A=this.cache.get(e);return this.cache.delete(e),this.cache.set(e,A),A}put(e,A){this.cache.has(e)&&this.cache.delete(e),this.cache.set(e,A),this.cache.size>this.capacity&&this.cache.delete(this.cache.keys().next().value)}clear(){this.cache.clear()}}},"./src/utils/devices.js":(e,A,t)=>{t.r(A),t.d(A,{DEVICE_TYPES:()=>r});const r=Object.freeze({auto:"auto",gpu:"gpu",cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:"webnn","webnn-npu":"webnn-npu","webnn-gpu":"webnn-gpu","webnn-cpu":"webnn-cpu"})},"./src/utils/dtypes.js":(e,A,t)=>{t.r(A),t.d(A,{DATA_TYPES:()=>s,DEFAULT_DEVICE_DTYPE_MAPPING:()=>i,DEFAULT_DTYPE_SUFFIX_MAPPING:()=>o,isWebGpuFp16Supported:()=>a});var r=t("./src/env.js"),n=t("./src/utils/devices.js");const a=function(){let e;return async function(){if(void 0===e)if(r.apis.IS_WEBGPU_AVAILABLE)try{const A=await navigator.gpu.requestAdapter();e=A.features.has("shader-f16")}catch(A){e=!1}else e=!1;return e}}(),s=Object.freeze({auto:"auto",fp32:"fp32",fp16:"fp16",q8:"q8",int8:"int8",uint8:"uint8",q4:"q4",bnb4:"bnb4",q4f16:"q4f16"}),i=Object.freeze({[n.DEVICE_TYPES.wasm]:s.q8}),o=Object.freeze({[s.fp32]:"",[s.fp16]:"_fp16",[s.int8]:"_int8",[s.uint8]:"_uint8",[s.q8]:"_quantized",[s.q4]:"_q4",[s.q4f16]:"_q4f16",[s.bnb4]:"_bnb4"})},"./src/utils/generic.js":(e,A,t)=>{t.r(A),t.d(A,{Callable:()=>r});const r=class{constructor(){let e=function(...A){return e._call(...A)};return Object.setPrototypeOf(e,new.target.prototype)}_call(...e){throw Error("Must implement _call method in subclass")}}},"./src/utils/hub.js":(e,A,t)=>{t.r(A),t.d(A,{MAX_EXTERNAL_DATA_CHUNKS:()=>i,getFile:()=>u,getModelFile:()=>p,getModelJSON:()=>h});var r=t("?7a2c"),n=t("?a42a"),a=t("./src/env.js"),s=t("./src/utils/core.js");const i=100,o={txt:"text/plain",html:"text/html",css:"text/css",js:"text/javascript",json:"application/json",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif"};class l{constructor(e){if(this.filePath=e,this.headers=new Headers,this.exists=r.existsSync(e),this.exists){this.status=200,this.statusText="OK";let A=r.statSync(e);this.headers.set("content-length",A.size.toString()),this.updateContentType();const t=r.createReadStream(e);this.body=new ReadableStream({start(e){t.on("data",(A=>e.enqueue(A))),t.on("end",(()=>e.close())),t.on("error",(A=>e.error(A)))},cancel(){t.destroy()}})}else this.status=404,this.statusText="Not Found",this.body=null}updateContentType(){const e=this.filePath.toString().split(".").pop().toLowerCase();this.headers.set("content-type",o[e]??"application/octet-stream")}clone(){let e=new l(this.filePath);return e.exists=this.exists,e.status=this.status,e.statusText=this.statusText,e.headers=new Headers(this.headers),e}async arrayBuffer(){return(await r.promises.readFile(this.filePath)).buffer}async blob(){const e=await r.promises.readFile(this.filePath);return new Blob([e],{type:this.headers.get("content-type")})}async text(){return await r.promises.readFile(this.filePath,"utf8")}async json(){return JSON.parse(await this.text())}}function c(e,A=null,t=null){let r;try{r=new URL(e)}catch(e){return!1}return!(A&&!A.includes(r.protocol))&&!(t&&!t.includes(r.hostname))}const g=/^(\b[\w\-.]+\b\/)?\b[\w\-.]{1,96}\b$/;async function u(e){if(a.env.useFS&&!c(e,["http:","https:","blob:"]))return new l(e instanceof URL?"file:"===e.protocol?e.pathname:e.toString():e);if("undefined"!=typeof process&&"node"===process?.release?.name){const A=!!process.env?.TESTING_REMOTELY,t=a.env.version,r=new Headers;r.set("User-Agent",`transformers.js/${t}; is_ci/${A};`);if(c(e,["http:","https:"],["huggingface.co","hf.co"])){const e=process.env?.HF_TOKEN??process.env?.HF_ACCESS_TOKEN;e&&r.set("Authorization",`Bearer ${e}`)}return fetch(e,{headers:r})}return fetch(e)}const d={400:"Bad request error occurred while trying to load file",401:"Unauthorized access to file",403:"Forbidden access to file",404:"Could not locate file",408:"Request timeout error occurred while trying to load file",500:"Internal server error error occurred while trying to load file",502:"Bad gateway error occurred while trying to load file",503:"Service unavailable error occurred while trying to load file",504:"Gateway timeout error occurred while trying to load file"};class f{constructor(e){this.path=e}async match(e){let A=n.join(this.path,e),t=new l(A);return t.exists?t:void 0}async put(e,A,t=void 0){let a=n.join(this.path,e);try{const e=A.headers.get("Content-Length"),s=parseInt(e??"0");let i=0;await r.promises.mkdir(n.dirname(a),{recursive:!0});const o=r.createWriteStream(a),l=A.body.getReader();for(;;){const{done:e,value:A}=await l.read();if(e)break;await new Promise(((e,t)=>{o.write(A,(A=>{A?t(A):e()}))})),i+=A.length;const r=s?i/s*100:0;t?.({progress:r,loaded:i,total:s})}o.close()}catch(e){try{await r.promises.unlink(a)}catch{}throw e}}}async function p(e,A,t=!0,r={},n=!1){if(!a.env.allowLocalModels){if(r.local_files_only)throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");if(!a.env.allowRemoteModels)throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.")}let i;if((0,s.dispatchCallback)(r.progress_callback,{status:"initiate",name:e,file:A}),!i&&a.env.useCustomCache){if(!a.env.customCache)throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");if(!a.env.customCache.match||!a.env.customCache.put)throw new Error("`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache");i=a.env.customCache}if(!i&&a.env.useBrowserCache){if("undefined"==typeof caches)throw Error("Browser cache is not available in this environment.");try{i=await caches.open("transformers-cache")}catch(e){console.warn("An error occurred while opening the browser cache:",e)}}if(!i&&a.env.useFSCache){if(!a.apis.IS_FS_AVAILABLE)throw Error("File System Cache is not available in this environment.");i=new f(r.cache_dir??a.env.cacheDir)}const o=r.revision??"main",p=m(e,A),h=(C=e,!(!g.test(C)||C.includes("..")||C.includes("--")||C.endsWith(".git")||C.endsWith(".ipynb")));var C;const b=h?m(a.env.localModelPath,p):p,I=m(a.env.remoteHost,a.env.remotePathTemplate.replaceAll("{model}",e).replaceAll("{revision}",encodeURIComponent(o)),A);let w;const k=i instanceof f?"main"===o?p:m(e,o,A):I;let x,v=!1;i&&(x=await async function(e,...A){for(let t of A)try{let A=await e.match(t);if(A)return A}catch(e){continue}}(i,b,k));const B=void 0!==x;if(void 0===x){if(a.env.allowLocalModels){if(c(p,["http:","https:"])){if(r.local_files_only)throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${p}.`);if(!a.env.allowRemoteModels)throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${p}.`)}else try{x=await u(b),w=b}catch(e){console.warn(`Unable to load from local path "${b}": "${e}"`)}}if(void 0===x||404===x.status){if(r.local_files_only||!a.env.allowRemoteModels){if(t)throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${b}".`);return null}if(!h)throw Error(`Local file missing at "${b}" and download aborted due to invalid model ID "${e}".`);if(x=await u(I),200!==x.status)return function(e,A,t){if(!t)return null;const r=d[e]??`Error (${e}) occurred while trying to load file`;throw Error(`${r}: "${A}".`)}(x.status,I,t);w=k}v=i&&"undefined"!=typeof Response&&x instanceof Response&&200===x.status}let y;if((0,s.dispatchCallback)(r.progress_callback,{status:"download",name:e,file:A}),!a.apis.IS_NODE_ENV||!n){let t;r.progress_callback?B&&"undefined"!=typeof navigator&&/firefox/i.test(navigator.userAgent)?(t=new Uint8Array(await x.arrayBuffer()),(0,s.dispatchCallback)(r.progress_callback,{status:"progress",name:e,file:A,progress:100,loaded:t.length,total:t.length})):t=await async function(e,A){const t=e.headers.get("Content-Length");null===t&&console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");let r=parseInt(t??"0"),n=new Uint8Array(r),a=0;const s=e.body.getReader();async function i(){const{done:e,value:t}=await s.read();if(e)return;const o=a+t.length;if(o>r){r=o;const e=new Uint8Array(r);e.set(n),n=e}n.set(t,a),a=o;return A({progress:a/r*100,loaded:a,total:r}),i()}return await i(),n}(x,(t=>{(0,s.dispatchCallback)(r.progress_callback,{status:"progress",name:e,file:A,...t})})):t=new Uint8Array(await x.arrayBuffer()),y=t}if(v&&w&&void 0===await i.match(w)&&(y?await i.put(w,new Response(y,{headers:x.headers})).catch((e=>{console.warn(`Unable to add response to browser cache: ${e}.`)})):await i.put(w,x,r.progress_callback)),(0,s.dispatchCallback)(r.progress_callback,{status:"done",name:e,file:A}),y){if(!a.apis.IS_NODE_ENV&&n)throw new Error("Cannot return path in a browser environment.");return y}if(x instanceof l)return x.filePath;const E=await(i?.match(w));if(E instanceof l)return E.filePath;if(E instanceof Response)return new Uint8Array(await E.arrayBuffer());if("string"==typeof E)return E;throw new Error("Unable to get model file path or buffer.")}async function h(e,A,t=!0,r={}){const n=await p(e,A,t,r,!1);if(null===n)return{};const a=new TextDecoder("utf-8").decode(n);return JSON.parse(a)}function m(...e){return(e=e.map(((A,t)=>(t&&(A=A.replace(new RegExp("^/"),"")),t!==e.length-1&&(A=A.replace(new RegExp("/$"),"")),A)))).join("/")}},"./src/utils/image.js":(e,A,t)=>{t.r(A),t.d(A,{RawImage:()=>f,load_image:()=>p});var r=t("./src/utils/core.js"),n=t("./src/utils/hub.js"),a=t("./src/env.js"),s=t("./src/utils/tensor.js"),i=t("?2b25");let o,l,c;const g=a.apis.IS_BROWSER_ENV||a.apis.IS_WEBWORKER_ENV;if(g)o=(e,A)=>{if(!self.OffscreenCanvas)throw new Error("OffscreenCanvas not supported by this browser.");return new self.OffscreenCanvas(e,A)},c=self.createImageBitmap,l=self.ImageData;else{if(!i)throw new Error("Unable to load image processing library.");c=async e=>{const A=(await e.metadata()).channels,{data:t,info:r}=await e.rotate().raw().toBuffer({resolveWithObject:!0}),n=new f(new Uint8ClampedArray(t),r.width,r.height,r.channels);return void 0!==A&&A!==r.channels&&n.convert(A),n}}const u={0:"nearest",1:"lanczos",2:"bilinear",3:"bicubic",4:"box",5:"hamming"},d=new Map([["png","image/png"],["jpg","image/jpeg"],["jpeg","image/jpeg"],["gif","image/gif"]]);class f{constructor(e,A,t,r){this.data=e,this.width=A,this.height=t,this.channels=r}get size(){return[this.width,this.height]}static async read(e){if(e instanceof f)return e;if("string"==typeof e||e instanceof URL)return await this.fromURL(e);if(e instanceof Blob)return await this.fromBlob(e);if("undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof OffscreenCanvas&&e instanceof OffscreenCanvas)return this.fromCanvas(e);throw new Error("Unsupported input type: "+typeof e)}static fromCanvas(e){if(!g)throw new Error("fromCanvas() is only supported in browser environments.");const A=e.getContext("2d").getImageData(0,0,e.width,e.height).data;return new f(A,e.width,e.height,4)}static async fromURL(e){const A=await(0,n.getFile)(e);if(200!==A.status)throw new Error(`Unable to read image from "${e}" (${A.status} ${A.statusText})`);const t=await A.blob();return this.fromBlob(t)}static async fromBlob(e){if(g){const A=await c(e),t=o(A.width,A.height).getContext("2d");return t.drawImage(A,0,0),new this(t.getImageData(0,0,A.width,A.height).data,A.width,A.height,4)}{const A=i(await e.arrayBuffer());return await c(A)}}static fromTensor(e,A="CHW"){if(3!==e.dims.length)throw new Error(`Tensor should have 3 dimensions, but has ${e.dims.length} dimensions.`);if("CHW"===A)e=e.transpose(1,2,0);else if("HWC"!==A)throw new Error(`Unsupported channel format: ${A}`);if(!(e.data instanceof Uint8ClampedArray||e.data instanceof Uint8Array))throw new Error(`Unsupported tensor type: ${e.type}`);switch(e.dims[2]){case 1:case 2:case 3:case 4:return new f(e.data,e.dims[1],e.dims[0],e.dims[2]);default:throw new Error(`Unsupported number of channels: ${e.dims[2]}`)}}grayscale(){if(1===this.channels)return this;const e=new Uint8ClampedArray(this.width*this.height*1);switch(this.channels){case 3:case 4:for(let A=0,t=0;A<this.data.length;A+=this.channels){const r=this.data[A],n=this.data[A+1],a=this.data[A+2];e[t++]=Math.round(.2989*r+.587*n+.114*a)}break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(e,this.width,this.height,1)}rgb(){if(3===this.channels)return this;const e=new Uint8ClampedArray(this.width*this.height*3);switch(this.channels){case 1:for(let A=0,t=0;A<this.data.length;++A)e[t++]=this.data[A],e[t++]=this.data[A],e[t++]=this.data[A];break;case 4:for(let A=0,t=0;A<this.data.length;A+=4)e[t++]=this.data[A],e[t++]=this.data[A+1],e[t++]=this.data[A+2];break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(e,this.width,this.height,3)}rgba(){if(4===this.channels)return this;const e=new Uint8ClampedArray(this.width*this.height*4);switch(this.channels){case 1:for(let A=0,t=0;A<this.data.length;++A)e[t++]=this.data[A],e[t++]=this.data[A],e[t++]=this.data[A],e[t++]=255;break;case 3:for(let A=0,t=0;A<this.data.length;A+=3)e[t++]=this.data[A],e[t++]=this.data[A+1],e[t++]=this.data[A+2],e[t++]=255;break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(e,this.width,this.height,4)}putAlpha(e){if(e.width!==this.width||e.height!==this.height)throw new Error(`Expected mask size to be ${this.width}x${this.height}, but got ${e.width}x${e.height}`);if(1!==e.channels)throw new Error(`Expected mask to have 1 channel, but got ${e.channels}`);const A=this.data,t=e.data,r=this.width*this.height;if(3===this.channels){const e=new Uint8ClampedArray(4*r);for(let n=0,a=0,s=0;n<r;++n)e[s++]=A[a++],e[s++]=A[a++],e[s++]=A[a++],e[s++]=t[n];return this._update(e,this.width,this.height,4)}if(4===this.channels){for(let e=0;e<r;++e)A[4*e+3]=t[e];return this}throw new Error(`Expected image to have 3 or 4 channels, but got ${this.channels}`)}async resize(e,A,{resample:t=2}={}){if(this.width===e&&this.height===A)return this;let n=u[t]??t;const a=(0,r.isNullishDimension)(e),s=(0,r.isNullishDimension)(A);if(a&&s)return this;if(a?e=A/this.height*this.width:s&&(A=e/this.width*this.height),g){const t=this.channels,r=this.toCanvas(),n=o(e,A).getContext("2d");n.drawImage(r,0,0,e,A);return new f(n.getImageData(0,0,e,A).data,e,A,4).convert(t)}{let t=this.toSharp();switch(n){case"box":case"hamming":"box"!==n&&"hamming"!==n||(console.warn(`Resampling method ${n} is not yet supported. Using bilinear instead.`),n="bilinear");case"nearest":case"bilinear":case"bicubic":t=t.affine([e/this.width,0,0,A/this.height],{interpolator:n});break;case"lanczos":t=t.resize({width:e,height:A,fit:"fill",kernel:"lanczos3"});break;default:throw new Error(`Resampling method ${n} is not supported.`)}return await c(t)}}async pad([e,A,t,r]){if(e=Math.max(e,0),A=Math.max(A,0),t=Math.max(t,0),r=Math.max(r,0),0===e&&0===A&&0===t&&0===r)return this;if(g){const n=this.channels,a=this.toCanvas(),s=this.width+e+A,i=this.height+t+r,l=o(s,i).getContext("2d");l.drawImage(a,0,0,this.width,this.height,e,t,this.width,this.height);return new f(l.getImageData(0,0,s,i).data,s,i,4).convert(n)}{const n=this.toSharp().extend({left:e,right:A,top:t,bottom:r});return await c(n)}}async crop([e,A,t,r]){if(e=Math.max(e,0),A=Math.max(A,0),t=Math.min(t,this.width-1),r=Math.min(r,this.height-1),0===e&&0===A&&t===this.width-1&&r===this.height-1)return this;const n=t-e+1,a=r-A+1;if(g){const t=this.channels,r=this.toCanvas(),s=o(n,a).getContext("2d");s.drawImage(r,e,A,n,a,0,0,n,a);return new f(s.getImageData(0,0,n,a).data,n,a,4).convert(t)}{const t=this.toSharp().extract({left:e,top:A,width:n,height:a});return await c(t)}}async center_crop(e,A){if(this.width===e&&this.height===A)return this;const t=(this.width-e)/2,r=(this.height-A)/2;if(g){const n=this.channels,a=this.toCanvas(),s=o(e,A).getContext("2d");let i=0,l=0,c=0,g=0;t>=0?i=t:c=-t,r>=0?l=r:g=-r,s.drawImage(a,i,l,e,A,c,g,e,A);return new f(s.getImageData(0,0,e,A).data,e,A,4).convert(n)}{let n=this.toSharp();if(t>=0&&r>=0)n=n.extract({left:Math.floor(t),top:Math.floor(r),width:e,height:A});else if(t<=0&&r<=0){const a=Math.floor(-r),s=Math.floor(-t);n=n.extend({top:a,left:s,right:e-this.width-s,bottom:A-this.height-a})}else{let a=[0,0],s=0;r<0?(a[0]=Math.floor(-r),a[1]=A-this.height-a[0]):s=Math.floor(r);let i=[0,0],o=0;t<0?(i[0]=Math.floor(-t),i[1]=e-this.width-i[0]):o=Math.floor(t),n=n.extend({top:a[0],bottom:a[1],left:i[0],right:i[1]}).extract({left:o,top:s,width:e,height:A})}return await c(n)}}async toBlob(e="image/png",A=1){if(!g)throw new Error("toBlob() is only supported in browser environments.");const t=this.toCanvas();return await t.convertToBlob({type:e,quality:A})}toTensor(e="CHW"){let A=new s.Tensor("uint8",new Uint8Array(this.data),[this.height,this.width,this.channels]);if("HWC"===e);else{if("CHW"!==e)throw new Error(`Unsupported channel format: ${e}`);A=A.permute(2,0,1)}return A}toCanvas(){if(!g)throw new Error("toCanvas() is only supported in browser environments.");const e=this.clone().rgba(),A=o(e.width,e.height),t=new l(e.data,e.width,e.height);return A.getContext("2d").putImageData(t,0,0),A}split(){const{data:e,width:A,height:t,channels:r}=this,n=e.constructor,a=e.length/r,s=Array.from({length:r},(()=>new n(a)));for(let A=0;A<a;++A){const t=r*A;for(let n=0;n<r;++n)s[n][A]=e[t+n]}return s.map((e=>new f(e,A,t,1)))}_update(e,A,t,r=null){return this.data=e,this.width=A,this.height=t,null!==r&&(this.channels=r),this}clone(){return new f(this.data.slice(),this.width,this.height,this.channels)}convert(e){if(this.channels===e)return this;switch(e){case 1:this.grayscale();break;case 3:this.rgb();break;case 4:this.rgba();break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this}async save(e){if(!g){if(a.apis.IS_FS_AVAILABLE){const A=this.toSharp();return await A.toFile(e)}throw new Error("Unable to save the image because filesystem is disabled in this environment.")}{if(a.apis.IS_WEBWORKER_ENV)throw new Error("Unable to save an image from a Web Worker.");const A=e.split(".").pop().toLowerCase(),t=d.get(A)??"image/png",n=await this.toBlob(t);(0,r.saveBlob)(e,n)}}toSharp(){if(g)throw new Error("toSharp() is only supported in server-side environments.");return i(this.data,{raw:{width:this.width,height:this.height,channels:this.channels}})}}const p=f.read.bind(f)},"./src/utils/maths.js":(e,A,t)=>{function r(e,[A,t,r],[n,a],s="bilinear",i=!1){const o=a/r,l=n/t,c=new e.constructor(n*a*A),g=t*r,u=n*a;for(let s=0;s<n;++s)for(let n=0;n<a;++n){const i=s*a+n,d=(n+.5)/o-.5,f=(s+.5)/l-.5;let p=Math.floor(d),h=Math.floor(f);const m=Math.min(p+1,r-1),C=Math.min(h+1,t-1);p=Math.max(p,0),h=Math.max(h,0);const b=d-p,I=f-h,w=(1-b)*(1-I),k=b*(1-I),x=(1-b)*I,v=b*I,B=h*r,y=C*r,E=B+p,M=B+m,G=y+p,D=y+m;for(let t=0;t<A;++t){const A=t*g;c[t*u+i]=w*e[A+E]+k*e[A+M]+x*e[A+G]+v*e[A+D]}}return c}function n(e,A,t){const r=new Array(t.length),n=new Array(t.length);for(let e=t.length-1,a=1;e>=0;--e)n[e]=a,r[e]=A[t[e]],a*=r[e];const a=t.map(((e,A)=>n[t.indexOf(A)])),s=new e.constructor(e.length);for(let t=0;t<e.length;++t){let r=0;for(let e=A.length-1,n=t;e>=0;--e)r+=n%A[e]*a[e],n=Math.floor(n/A[e]);s[r]=e[t]}return[s,r]}function a(e){const A=g(e)[0],t=e.map((e=>Math.exp(e-A))),r=t.reduce(((e,A)=>e+A),0),n=t.map((e=>e/r));return n}function s(e){const A=g(e)[0];let t=0;for(let r=0;r<e.length;++r)t+=Math.exp(e[r]-A);const r=Math.log(t),n=e.map((e=>e-A-r));return n}function i(e,A){let t=0;for(let r=0;r<e.length;++r)t+=e[r]*A[r];return t}function o(e,A){return i(e,A)/(l(e)*l(A))}function l(e){return Math.sqrt(e.reduce(((e,A)=>e+A*A),0))}function c(e){if(0===e.length)throw Error("Array must not be empty");let A=e[0],t=0;for(let r=1;r<e.length;++r)e[r]<A&&(A=e[r],t=r);return[A,t]}function g(e){if(0===e.length)throw Error("Array must not be empty");let A=e[0],t=0;for(let r=1;r<e.length;++r)e[r]>A&&(A=e[r],t=r);return[A,t]}function u(e){return e>0&&!(e&e-1)}t.r(A),t.d(A,{FFT:()=>p,bankers_round:()=>C,cos_sim:()=>o,dot:()=>i,dynamic_time_warping:()=>b,interpolate_data:()=>r,log_softmax:()=>s,magnitude:()=>l,max:()=>g,medianFilter:()=>h,min:()=>c,permute_data:()=>n,round:()=>m,softmax:()=>a});class d{constructor(e){if(this.size=0|e,this.size<=1||!u(this.size))throw new Error("FFT size must be a power of two larger than 1");this._csize=e<<1,this.table=new Float64Array(2*this.size);for(let e=0;e<this.table.length;e+=2){const A=Math.PI*e/this.size;this.table[e]=Math.cos(A),this.table[e+1]=-Math.sin(A)}let A=0;for(let e=1;this.size>e;e<<=1)++A;this._width=A%2==0?A-1:A,this._bitrev=new Int32Array(1<<this._width);for(let e=0;e<this._bitrev.length;++e){this._bitrev[e]=0;for(let A=0;A<this._width;A+=2){const t=this._width-A-2;this._bitrev[e]|=(e>>>A&3)<<t}}}createComplexArray(){return new Float64Array(this._csize)}fromComplexArray(e,A){const t=A||new Array(e.length>>>1);for(let A=0;A<e.length;A+=2)t[A>>>1]=e[A];return t}toComplexArray(e,A){const t=A||this.createComplexArray();for(let A=0;A<t.length;A+=2)t[A]=e[A>>>1],t[A+1]=0;return t}transform(e,A){if(e===A)throw new Error("Input and output buffers must be different");this._transform4(e,A,1)}realTransform(e,A){if(e===A)throw new Error("Input and output buffers must be different");this._realTransform4(e,A,1)}inverseTransform(e,A){if(e===A)throw new Error("Input and output buffers must be different");this._transform4(e,A,-1);for(let A=0;A<e.length;++A)e[A]/=this.size}_transform4(e,A,t){const r=this._csize;let n,a,s=1<<this._width,i=r/s<<1;const o=this._bitrev;if(4===i)for(n=0,a=0;n<r;n+=i,++a){const t=o[a];this._singleTransform2(A,e,n,t,s)}else for(n=0,a=0;n<r;n+=i,++a){const r=o[a];this._singleTransform4(A,e,n,r,s,t)}const l=this.table;for(s>>=2;s>=2;s>>=2){i=r/s<<1;const A=i>>>2;for(n=0;n<r;n+=i){const r=n+A-1;for(let a=n,i=0;a<r;a+=2,i+=s){const r=a,n=r+A,s=n+A,o=s+A,c=e[r],g=e[r+1],u=e[n],d=e[n+1],f=e[s],p=e[s+1],h=e[o],m=e[o+1],C=l[i],b=t*l[i+1],I=u*C-d*b,w=u*b+d*C,k=l[2*i],x=t*l[2*i+1],v=f*k-p*x,B=f*x+p*k,y=l[3*i],E=t*l[3*i+1],M=h*y-m*E,G=h*E+m*y,D=c+v,Q=g+B,T=c-v,P=g-B,z=I+M,F=w+G,S=t*(I-M),N=t*(w-G);e[r]=D+z,e[r+1]=Q+F,e[n]=T+N,e[n+1]=P-S,e[s]=D-z,e[s+1]=Q-F,e[o]=T-N,e[o+1]=P+S}}}}_singleTransform2(e,A,t,r,n){const a=e[r],s=e[r+1],i=e[r+n],o=e[r+n+1];A[t]=a+i,A[t+1]=s+o,A[t+2]=a-i,A[t+3]=s-o}_singleTransform4(e,A,t,r,n,a){const s=2*n,i=3*n,o=e[r],l=e[r+1],c=e[r+n],g=e[r+n+1],u=e[r+s],d=e[r+s+1],f=e[r+i],p=e[r+i+1],h=o+u,m=l+d,C=o-u,b=l-d,I=c+f,w=g+p,k=a*(c-f),x=a*(g-p);A[t]=h+I,A[t+1]=m+w,A[t+2]=C+x,A[t+3]=b-k,A[t+4]=h-I,A[t+5]=m-w,A[t+6]=C-x,A[t+7]=b+k}_realTransform4(e,A,t){const r=this._csize;let n,a,s=1<<this._width,i=r/s<<1;const o=this._bitrev;if(4===i)for(n=0,a=0;n<r;n+=i,++a){const t=o[a];this._singleRealTransform2(A,e,n,t>>>1,s>>>1)}else for(n=0,a=0;n<r;n+=i,++a){const r=o[a];this._singleRealTransform4(A,e,n,r>>>1,s>>>1,t)}const l=this.table;for(s>>=2;s>=2;s>>=2){i=r/s<<1;const A=i>>>1,a=A>>>1,o=a>>>1;for(n=0;n<r;n+=i)for(let r=0,i=0;r<=o;r+=2,i+=s){const s=n+r,c=s+a,g=c+a,u=g+a,d=e[s],f=e[s+1],p=e[c],h=e[c+1],m=e[g],C=e[g+1],b=e[u],I=e[u+1],w=d,k=f,x=l[i],v=t*l[i+1],B=p*x-h*v,y=p*v+h*x,E=l[2*i],M=t*l[2*i+1],G=m*E-C*M,D=m*M+C*E,Q=l[3*i],T=t*l[3*i+1],P=b*Q-I*T,z=b*T+I*Q,F=w+G,S=k+D,N=w-G,O=k-D,L=B+P,Y=y+z,H=t*(B-P),R=t*(y-z);if(e[s]=F+L,e[s+1]=S+Y,e[c]=N+R,e[c+1]=O-H,0===r){e[g]=F-L,e[g+1]=S-Y;continue}if(r===o)continue;const j=n+a-r,V=n+A-r;e[j]=N-t*R,e[j+1]=-O-t*H,e[V]=F-t*L,e[V+1]=t*Y-S}}const c=r>>>1;for(let A=2;A<c;A+=2)e[r-A]=e[A],e[r-A+1]=-e[A+1]}_singleRealTransform2(e,A,t,r,n){const a=e[r],s=e[r+n];A[t]=a+s,A[t+1]=0,A[t+2]=a-s,A[t+3]=0}_singleRealTransform4(e,A,t,r,n,a){const s=2*n,i=3*n,o=e[r],l=e[r+n],c=e[r+s],g=e[r+i],u=o+c,d=o-c,f=l+g,p=a*(l-g);A[t]=u+f,A[t+1]=0,A[t+2]=d,A[t+3]=-p,A[t+4]=u-f,A[t+5]=0,A[t+6]=d,A[t+7]=p}}class f{constructor(e){const A=2*(e-1),t=2*(2*e-1),r=2**Math.ceil(Math.log2(t));this.bufferSize=r,this._a=A;const n=new Float64Array(t),a=new Float64Array(r);this._chirpBuffer=new Float64Array(r),this._buffer1=new Float64Array(r),this._buffer2=new Float64Array(r),this._outBuffer1=new Float64Array(r),this._outBuffer2=new Float64Array(r);const s=-2*Math.PI/e,i=Math.cos(s),o=Math.sin(s);for(let A=0;A<t>>1;++A){const t=(A+1-e)**2/2,r=Math.sqrt(i**2+o**2)**t,s=t*Math.atan2(o,i),l=2*A;n[l]=r*Math.cos(s),n[l+1]=r*Math.sin(s),a[l]=n[l],a[l+1]=-n[l+1]}this._slicedChirpBuffer=n.subarray(A,t),this._f=new d(r>>1),this._f.transform(this._chirpBuffer,a)}_transform(e,A,t){const r=this._buffer1,n=this._buffer2,a=this._outBuffer1,s=this._outBuffer2,i=this._chirpBuffer,o=this._slicedChirpBuffer,l=this._a;if(t)for(let e=0;e<o.length;e+=2){const t=e+1,n=A[e>>1];r[e]=n*o[e],r[t]=n*o[t]}else for(let e=0;e<o.length;e+=2){const t=e+1;r[e]=A[e]*o[e]-A[t]*o[t],r[t]=A[e]*o[t]+A[t]*o[e]}this._f.transform(a,r);for(let e=0;e<i.length;e+=2){const A=e+1;n[e]=a[e]*i[e]-a[A]*i[A],n[A]=a[e]*i[A]+a[A]*i[e]}this._f.inverseTransform(s,n);for(let A=0;A<s.length;A+=2){const t=s[A+l],r=s[A+l+1],n=o[A],a=o[A+1];e[A]=t*n-r*a,e[A+1]=t*a+r*n}}transform(e,A){this._transform(e,A,!1)}realTransform(e,A){this._transform(e,A,!0)}}class p{constructor(e){this.fft_length=e,this.isPowerOfTwo=u(e),this.isPowerOfTwo?(this.fft=new d(e),this.outputBufferSize=2*e):(this.fft=new f(e),this.outputBufferSize=this.fft.bufferSize)}realTransform(e,A){this.fft.realTransform(e,A)}transform(e,A){this.fft.transform(e,A)}}function h(e,A){if(A%2==0||A<=0)throw new Error("Window size must be a positive odd number");const t=new e.constructor(e.length),r=new e.constructor(A),n=Math.floor(A/2);for(let A=0;A<e.length;++A){let a=0;for(let t=-n;t<=n;++t){let n=A+t;n<0?n=Math.abs(n):n>=e.length&&(n=2*(e.length-1)-n),r[a++]=e[n]}r.sort(),t[A]=r[n]}return t}function m(e,A){const t=Math.pow(10,A);return Math.round(e*t)/t}function C(e){const A=Math.round(e);return Math.abs(e)%1==.5?A%2==0?A:A-1:A}function b(e){const A=e.length,t=e[0].length,r=[A+1,t+1],n=Array.from({length:r[0]},(()=>Array(r[1]).fill(1/0)));n[0][0]=0;const a=Array.from({length:r[0]},(()=>Array(r[1]).fill(-1)));for(let A=1;A<r[1];++A)for(let t=1;t<r[0];++t){const r=n[t-1][A-1],s=n[t-1][A],i=n[t][A-1];let o,l;r<s&&r<i?(o=r,l=0):s<r&&s<i?(o=s,l=1):(o=i,l=2),n[t][A]=e[t-1][A-1]+o,a[t][A]=l}for(let e=0;e<r[1];++e)a[0][e]=2;for(let e=0;e<r[0];++e)a[e][0]=1;let s=A,i=t,o=[],l=[];for(;s>0||i>0;)switch(o.push(s-1),l.push(i-1),a[s][i]){case 0:--s,--i;break;case 1:--s;break;case 2:--i;break;default:throw new Error(`Internal error in dynamic time warping. Unexpected trace[${s}, ${i}]. Please file a bug report.`)}return o.reverse(),l.reverse(),[o,l]}},"./src/utils/tensor.js":(e,A,t)=>{t.r(A),t.d(A,{DataTypeMap:()=>s,Tensor:()=>i,cat:()=>w,full:()=>E,full_like:()=>M,interpolate:()=>l,interpolate_4d:()=>c,layer_norm:()=>m,matmul:()=>g,mean:()=>B,mean_pooling:()=>h,ones:()=>G,ones_like:()=>D,permute:()=>o,quantize_embeddings:()=>z,rand:()=>P,rfft:()=>u,slice:()=>p,stack:()=>k,std_mean:()=>v,topk:()=>d,zeros:()=>Q,zeros_like:()=>T});var r=t("./src/utils/maths.js"),n=t("./src/backends/onnx.js"),a=t("./src/ops/registry.js");const s=Object.freeze({float32:Float32Array,float16:"undefined"!=typeof Float16Array?Float16Array:Uint16Array,float64:Float64Array,string:Array,int8:Int8Array,uint8:Uint8Array,int16:Int16Array,uint16:Uint16Array,int32:Int32Array,uint32:Uint32Array,int64:BigInt64Array,uint64:BigUint64Array,bool:Uint8Array,uint4:Uint8Array,int4:Int8Array});class i{get dims(){return this.ort_tensor.dims}set dims(e){this.ort_tensor.dims=e}get type(){return this.ort_tensor.type}get data(){return this.ort_tensor.data}get size(){return this.ort_tensor.size}get location(){return this.ort_tensor.location}ort_tensor;constructor(...e){return(0,n.isONNXTensor)(e[0])?this.ort_tensor=e[0]:this.ort_tensor=new n.Tensor(e[0],e[1],e[2]),new Proxy(this,{get:(e,A)=>{if("string"==typeof A){let t=Number(A);if(Number.isInteger(t))return e._getitem(t)}return e[A]},set:(e,A,t)=>e[A]=t})}dispose(){this.ort_tensor.dispose()}*[Symbol.iterator](){const[e,...A]=this.dims;if(A.length>0){const t=A.reduce(((e,A)=>e*A));for(let r=0;r<e;++r)yield this._subarray(r,t,A)}else yield*this.data}_getitem(e){const[A,...t]=this.dims;if(e=I(e,A),t.length>0){const A=t.reduce(((e,A)=>e*A));return this._subarray(e,A,t)}return new i(this.type,[this.data[e]],t)}indexOf(e){const A=this.data;for(let t=0;t<A.length;++t)if(A[t]==e)return t;return-1}_subarray(e,A,t){const r=e*A,n=(e+1)*A,a="subarray"in this.data?this.data.subarray(r,n):this.data.slice(r,n);return new i(this.type,a,t)}item(){const e=this.data;if(1!==e.length)throw new Error(`a Tensor with ${e.length} elements cannot be converted to Scalar`);return e[0]}tolist(){return function(e,A){const t=e.length,r=A.reduce(((e,A)=>e*A));if(t!==r)throw Error(`cannot reshape array of size ${t} into shape (${A})`);let n=e;for(let e=A.length-1;e>=0;e--)n=n.reduce(((t,r)=>{let n=t[t.length-1];return n.length<A[e]?n.push(r):t.push([r]),t}),[[]]);return n[0]}(this.data,this.dims)}sigmoid(){return this.clone().sigmoid_()}sigmoid_(){const e=this.data;for(let A=0;A<e.length;++A)e[A]=1/(1+Math.exp(-e[A]));return this}map(e){return this.clone().map_(e)}map_(e){const A=this.data;for(let t=0;t<A.length;++t)A[t]=e(A[t],t,A);return this}mul(e){return this.clone().mul_(e)}mul_(e){const A=this.data;for(let t=0;t<A.length;++t)A[t]*=e;return this}div(e){return this.clone().div_(e)}div_(e){const A=this.data;for(let t=0;t<A.length;++t)A[t]/=e;return this}add(e){return this.clone().add_(e)}add_(e){const A=this.data;for(let t=0;t<A.length;++t)A[t]+=e;return this}sub(e){return this.clone().sub_(e)}sub_(e){const A=this.data;for(let t=0;t<A.length;++t)A[t]-=e;return this}clone(){return new i(this.type,this.data.slice(),this.dims.slice())}slice(...e){const A=[],t=[];for(let r=0;r<this.dims.length;++r){let n=e[r];if(null==n)t.push([0,this.dims[r]]),A.push(this.dims[r]);else if("number"==typeof n)n=I(n,this.dims[r],r),t.push([n,n+1]);else{if(!Array.isArray(n)||2!==n.length)throw new Error(`Invalid slice: ${n}`);{let[e,a]=n;if(e=null===e?0:I(e,this.dims[r],r,!1),a=null===a?this.dims[r]:I(a,this.dims[r],r,!1),e>a)throw new Error(`Invalid slice: ${n}`);const s=[Math.max(e,0),Math.min(a,this.dims[r])];t.push(s),A.push(s[1]-s[0])}}}const r=t.map((([e,A])=>A-e)),n=r.reduce(((e,A)=>e*A)),a=this.data,s=new a.constructor(n),o=this.stride();for(let e=0;e<n;++e){let A=0;for(let n=r.length-1,a=e;n>=0;--n){const e=r[n];A+=(a%e+t[n][0])*o[n],a=Math.floor(a/e)}s[e]=a[A]}return new i(this.type,s,A)}permute(...e){return o(this,e)}transpose(...e){return this.permute(...e)}sum(e=null,A=!1){return this.norm(1,e,A)}norm(e="fro",A=null,t=!1){if("fro"===e)e=2;else if("string"==typeof e)throw Error(`Unsupported norm: ${e}`);const r=this.data,n=(A,t)=>A+t**e;if(null===A){const A=r.reduce(n,0)**(1/e);return new i(this.type,[A],[])}const[a,s,o]=x(n,this,A,t);if(1!==e)for(let A=0;A<s.length;++A)s[A]=s[A]**(1/e);return new i(a,s,o)}normalize_(e=2,A=1){A=I(A,this.dims.length);const t=this.norm(e,A,!0),r=this.data,n=t.data;for(let e=0;e<r.length;++e){let t=0;for(let r=this.dims.length-1,n=e,a=1;r>=0;--r){const e=this.dims[r];if(r!==A){t+=n%e*a,a*=this.dims[r]}n=Math.floor(n/e)}r[e]/=n[t]}return this}normalize(e=2,A=1){return this.clone().normalize_(e,A)}stride(){return function(e){const A=new Array(e.length);for(let t=e.length-1,r=1;t>=0;--t)A[t]=r,r*=e[t];return A}(this.dims)}squeeze(e=null){return new i(this.type,this.data,C(this.dims,e))}squeeze_(e=null){return this.dims=C(this.dims,e),this}unsqueeze(e=null){return new i(this.type,this.data,b(this.dims,e))}unsqueeze_(e=null){return this.dims=b(this.dims,e),this}flatten_(e=0,A=-1){A=(A+this.dims.length)%this.dims.length;let t=this.dims.slice(0,e),r=this.dims.slice(e,A+1),n=this.dims.slice(A+1);return this.dims=[...t,r.reduce(((e,A)=>e*A),1),...n],this}flatten(e=0,A=-1){return this.clone().flatten_(e,A)}view(...e){let A=-1;for(let t=0;t<e.length;++t)if(-1===e[t]){if(-1!==A)throw new Error("Only one dimension can be inferred");A=t}const t=this.data;if(-1!==A){const r=e.reduce(((e,t,r)=>r!==A?e*t:e),1);e[A]=t.length/r}return new i(this.type,t,e)}neg_(){const e=this.data;for(let A=0;A<e.length;++A)e[A]=-e[A];return this}neg(){return this.clone().neg_()}gt(e){const A=new Uint8Array(this.data.length),t=this.data;for(let r=0;r<t.length;++r)A[r]=t[r]>e?1:0;return new i("bool",A,this.dims)}lt(e){const A=new Uint8Array(this.data.length),t=this.data;for(let r=0;r<t.length;++r)A[r]=t[r]<e?1:0;return new i("bool",A,this.dims)}clamp_(e,A){const t=this.data;for(let r=0;r<t.length;++r)t[r]=Math.min(Math.max(t[r],e),A);return this}clamp(e,A){return this.clone().clamp_(e,A)}round_(){const e=this.data;for(let A=0;A<e.length;++A)e[A]=Math.round(e[A]);return this}round(){return this.clone().round_()}mean(e=null,A=!1){return B(this,e,A)}min(e=null,A=!1){if(null===e){const e=(0,r.min)(this.data)[0];return new i(this.type,[e],[])}const[t,n,a]=x(((e,A)=>Math.min(e,A)),this,e,A,1/0);return new i(t,n,a)}max(e=null,A=!1){if(null===e){const e=(0,r.max)(this.data)[0];return new i(this.type,[e],[])}const[t,n,a]=x(((e,A)=>Math.max(e,A)),this,e,A,-1/0);return new i(t,n,a)}argmin(e=null,A=!1){if(null!==e)throw new Error("`dim !== null` not yet implemented.");const t=(0,r.min)(this.data)[1];return new i("int64",[BigInt(t)],[])}argmax(e=null,A=!1){if(null!==e)throw new Error("`dim !== null` not yet implemented.");const t=(0,r.max)(this.data)[1];return new i("int64",[BigInt(t)],[])}to(e){if(this.type===e)return this;if(!s.hasOwnProperty(e))throw new Error(`Unsupported type: ${e}`);let A;const t=["int64","uint64"].includes(this.type),r=["int64","uint64"].includes(e);return t&&!r?A=Number:!t&&r&&(A=BigInt),new i(e,s[e].from(this.data,A),this.dims)}}function o(e,A){const[t,n]=(0,r.permute_data)(e.data,e.dims,A);return new i(e.type,t,n)}function l(e,[A,t],n="bilinear",a=!1){const s=e.dims.at(-3)??1,o=e.dims.at(-2),l=e.dims.at(-1);let c=(0,r.interpolate_data)(e.data,[s,o,l],[A,t],n,a);return new i(e.type,c,[s,A,t])}async function c(e,{size:A=null,mode:t="bilinear"}={}){if(4!==e.dims.length)throw new Error("`interpolate_4d` currently only supports 4D input.");if(!A)throw new Error("`interpolate_4d` requires a `size` argument.");let r,n;if(2===A.length)r=[...e.dims.slice(0,2),...A];else if(3===A.length)r=[e.dims[0],...A];else{if(4!==A.length)throw new Error("`size` must be of length 2, 3, or 4.");r=A}if("nearest"===t)n=await a.TensorOpRegistry.nearest_interpolate_4d;else if("bilinear"===t)n=await a.TensorOpRegistry.bilinear_interpolate_4d;else{if("bicubic"!==t)throw new Error(`Unsupported mode: ${t}`);n=await a.TensorOpRegistry.bicubic_interpolate_4d}const s=new i("int64",new BigInt64Array(r.map(BigInt)),[r.length]);return await n({x:e,s:s})}async function g(e,A){const t=await a.TensorOpRegistry.matmul;return await t({a:e,b:A})}async function u(e,A){const t=await a.TensorOpRegistry.rfft;return await t({x:e,a:A})}async function d(e,A){const t=await a.TensorOpRegistry.top_k;return A=null==A?e.dims.at(-1):Math.min(A,e.dims.at(-1)),await t({x:e,k:new i("int64",[BigInt(A)],[1])})}const f=e=>new i("int64",e,[e.length]);async function p(e,A,t,r,n){const s=await a.TensorOpRegistry.slice;return await s({x:e,s:f(A),e:f(t),a:f(r),t:f(n??new Array(r.length).fill(1))})}function h(e,A){const t=e.data,r=A.data,n=[e.dims[0],e.dims[2]],a=new t.constructor(n[0]*n[1]),[s,o,l]=e.dims;let c=0;for(let e=0;e<s;++e){const A=e*l*o;for(let n=0;n<l;++n){let s=0,i=0;const g=e*o,u=A+n;for(let e=0;e<o;++e){const A=Number(r[g+e]);i+=A,s+=t[u+e*l]*A}const d=s/i;a[c++]=d}}return new i(e.type,a,n)}function m(e,A,{eps:t=1e-5}={}){if(2!==e.dims.length)throw new Error("`layer_norm` currently only supports 2D input.");const[r,n]=e.dims;if(1!==A.length&&A[0]!==n)throw new Error("`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.");const[a,s]=v(e,1,0,!0),o=a.data,l=s.data,c=e.data,g=new c.constructor(c.length);for(let e=0;e<r;++e){const A=e*n;for(let r=0;r<n;++r){const n=A+r;g[n]=(c[n]-l[e])/(o[e]+t)}}return new i(e.type,g,e.dims)}function C(e,A){return e=e.slice(),null===A?e=e.filter((e=>1!==e)):"number"==typeof A?1===e[A]&&e.splice(A,1):Array.isArray(A)&&(e=e.filter(((e,t)=>1!==e||!A.includes(t)))),e}function b(e,A){return A=I(A,e.length+1),(e=e.slice()).splice(A,0,1),e}function I(e,A,t=null,r=!0){if(e<-A||e>=A){if(r)throw new Error(`IndexError: index ${e} is out of bounds for dimension${null===t?"":" "+t} with size ${A}`);return e<-A?0:A}return e<0&&(e=(e%A+A)%A),e}function w(e,A=0){A=I(A,e[0].dims.length);const t=e[0].dims.slice();t[A]=e.reduce(((e,t)=>e+t.dims[A]),0);const r=t.reduce(((e,A)=>e*A),1),n=new e[0].data.constructor(r),a=e[0].type;if(0===A){let A=0;for(const t of e){const e=t.data;n.set(e,A),A+=e.length}}else{let r=0;for(let a=0;a<e.length;++a){const{data:s,dims:i}=e[a];for(let e=0;e<s.length;++e){let a=0;for(let n=i.length-1,s=e,o=1;n>=0;--n){const e=i[n];let l=s%e;n===A&&(l+=r),a+=l*o,o*=t[n],s=Math.floor(s/e)}n[a]=s[e]}r+=i[A]}}return new i(a,n,t)}function k(e,A=0){return w(e.map((e=>e.unsqueeze(A))),A)}function x(e,A,t=null,r=!1,n=null){const a=A.data,s=A.dims;t=I(t,s.length);const i=s.slice();i[t]=1;const o=new a.constructor(a.length/s[t]);null!==n&&o.fill(n);for(let A=0;A<a.length;++A){let r=0;for(let e=s.length-1,n=A,a=1;e>=0;--e){const A=s[e];if(e!==t){r+=n%A*a,a*=i[e]}n=Math.floor(n/A)}o[r]=e(o[r],a[A],A,r)}return r||i.splice(t,1),[A.type,o,i]}function v(e,A=null,t=1,r=!1){const n=e.data,a=e.dims;if(null===A){const A=n.reduce(((e,A)=>e+A),0),r=A/n.length,a=Math.sqrt(n.reduce(((e,A)=>e+(A-r)**2),0)/(n.length-t)),s=new i(e.type,[r],[]);return[new i(e.type,[a],[]),s]}const s=B(e,A=I(A,a.length),r),o=s.data,[l,c,g]=x(((e,A,t,r)=>e+(A-o[r])**2),e,A,r);for(let e=0;e<c.length;++e)c[e]=Math.sqrt(c[e]/(a[A]-t));return[new i(l,c,g),s]}function B(e,A=null,t=!1){const r=e.dims,n=e.data;if(null===A){const A=n.reduce(((e,A)=>e+A),0);return new i(e.type,[A/n.length],[])}A=I(A,r.length);const[a,s,o]=x(((e,A)=>e+A),e,A,t);if(1!==r[A])for(let e=0;e<s.length;++e)s[e]/=r[A];return new i(a,s,o)}function y(e,A,t,r){const n=e.reduce(((e,A)=>e*A),1);return new i(t,new r(n).fill(A),e)}function E(e,A){let t,r;if("number"==typeof A)t="float32",r=Float32Array;else if("bigint"==typeof A)t="int64",r=BigInt64Array;else{if("boolean"!=typeof A)throw new Error("Unsupported data type: "+typeof A);t="bool",r=Uint8Array}return y(e,A,t,r)}function M(e,A){return E(e.dims,A)}function G(e){return y(e,1n,"int64",BigInt64Array)}function D(e){return G(e.dims)}function Q(e){return y(e,0n,"int64",BigInt64Array)}function T(e){return Q(e.dims)}function P(e){const A=e.reduce(((e,A)=>e*A),1);return new i("float32",Float32Array.from({length:A},(()=>Math.random())),e)}function z(e,A){if(2!==e.dims.length)throw new Error("The tensor must have 2 dimensions");if(e.dims.at(-1)%8!=0)throw new Error("The last dimension of the tensor must be a multiple of 8");if(!["binary","ubinary"].includes(A))throw new Error("The precision must be either 'binary' or 'ubinary'");const t="binary"===A,r=t?"int8":"uint8",n=t?Int8Array:Uint8Array,a=e.data,s=new n(a.length/8);for(let e=0;e<a.length;++e){const A=a[e]>0?1:0,r=Math.floor(e/8),n=e%8;s[r]|=A<<7-n,t&&0===n&&(s[r]-=128)}return new i(r,s,[e.dims[0],e.dims[1]/8])}},"./src/utils/video.js":(e,A,t)=>{t.r(A),t.d(A,{RawVideo:()=>s,RawVideoFrame:()=>a,load_video:()=>i});var r=t("./src/utils/image.js"),n=t("./src/env.js");class a{constructor(e,A){this.image=e,this.timestamp=A}}class s{constructor(e,A){e.length>0&&e[0]instanceof r.RawImage&&(e=e.map(((t,r)=>new a(t,(r+1)/(e.length+1)*A)))),this.frames=e,this.duration=A}get width(){return this.frames[0].image.width}get height(){return this.frames[0].image.height}get fps(){return this.frames.length/this.duration}}async function i(e,{num_frames:A=null,fps:t=null}={}){if(!n.apis.IS_BROWSER_ENV)throw new Error("`load_video` is currently only supported in browser environments.");if(null==A&&null==t)throw new Error("Either num_frames or fps must be provided.");const i=[],o=document.createElement("video");if(o.crossOrigin="anonymous",o.muted=!0,"string"==typeof e)o.src=e;else if(e instanceof Blob)o.src=URL.createObjectURL(e);else{if(!(e instanceof HTMLVideoElement))throw new Error("Invalid URL or video element provided.");o.src=e.src}if(await new Promise((e=>o.onloadedmetadata=e)),o.seekable.start(0)===o.seekable.end(0)){const e=await fetch(o.src),A=await e.blob();o.src=URL.createObjectURL(A),await new Promise((e=>o.onloadedmetadata=e))}const l=o.duration;let c,g;null!=A?(c=A,g=1===A?0:l/(A-1)):(g=1/t,c=Math.floor(l/g));let u=[];for(let e=0;e<c;++e)u.push(1===A?l/2:e*g);const d=document.createElement("canvas");d.width=o.videoWidth,d.height=o.videoHeight;const f=d.getContext("2d",{willReadFrequently:!0});for(const e of u){o.currentTime=e,await new Promise((e=>{o.onseeked=e})),f.drawImage(o,0,0,d.width,d.height);const A=f.getImageData(0,0,d.width,d.height),t=new r.RawImage(A.data,d.width,d.height,4),n=new a(t,e);i.push(n)}return o.remove(),new s(i,l)}}},Og={};function Lg(e){var A=Og[e];if(void 0!==A)return A.exports;var t=Og[e]={exports:{}};return Ng[e](t,t.exports,Lg),t.exports}Fg=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,Lg.t=function(e,A){if(1&A&&(e=this(e)),8&A)return e;if("object"==typeof e&&e){if(4&A&&e.__esModule)return e;if(16&A&&"function"==typeof e.then)return e}var t=Object.create(null);Lg.r(t);var r={};zg=zg||[null,Fg({}),Fg([]),Fg(Fg)];for(var n=2&A&&e;"object"==typeof n&&!~zg.indexOf(n);n=Fg(n))Object.getOwnPropertyNames(n).forEach((A=>r[A]=()=>e[A]));return r.default=()=>e,Lg.d(t,r),t},Lg.d=(e,A)=>{for(var t in A)Lg.o(A,t)&&!Lg.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:A[t]})},Lg.o=(e,A)=>Object.prototype.hasOwnProperty.call(e,A),Lg.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var Yg={};(()=>{Lg.r(Yg),Lg.d(Yg,{ASTFeatureExtractor:()=>g.ASTFeatureExtractor,ASTForAudioClassification:()=>t.ASTForAudioClassification,ASTModel:()=>t.ASTModel,ASTPreTrainedModel:()=>t.ASTPreTrainedModel,AlbertForMaskedLM:()=>t.AlbertForMaskedLM,AlbertForQuestionAnswering:()=>t.AlbertForQuestionAnswering,AlbertForSequenceClassification:()=>t.AlbertForSequenceClassification,AlbertModel:()=>t.AlbertModel,AlbertPreTrainedModel:()=>t.AlbertPreTrainedModel,AlbertTokenizer:()=>r.AlbertTokenizer,AudioClassificationPipeline:()=>A.AudioClassificationPipeline,AutoConfig:()=>n.AutoConfig,AutoFeatureExtractor:()=>u.AutoFeatureExtractor,AutoImageProcessor:()=>p.AutoImageProcessor,AutoModel:()=>t.AutoModel,AutoModelForAudioClassification:()=>t.AutoModelForAudioClassification,AutoModelForAudioFrameClassification:()=>t.AutoModelForAudioFrameClassification,AutoModelForAudioTextToText:()=>t.AutoModelForAudioTextToText,AutoModelForCTC:()=>t.AutoModelForCTC,AutoModelForCausalLM:()=>t.AutoModelForCausalLM,AutoModelForDepthEstimation:()=>t.AutoModelForDepthEstimation,AutoModelForDocumentQuestionAnswering:()=>t.AutoModelForDocumentQuestionAnswering,AutoModelForImageClassification:()=>t.AutoModelForImageClassification,AutoModelForImageFeatureExtraction:()=>t.AutoModelForImageFeatureExtraction,AutoModelForImageMatting:()=>t.AutoModelForImageMatting,AutoModelForImageSegmentation:()=>t.AutoModelForImageSegmentation,AutoModelForImageTextToText:()=>t.AutoModelForImageTextToText,AutoModelForImageToImage:()=>t.AutoModelForImageToImage,AutoModelForMaskGeneration:()=>t.AutoModelForMaskGeneration,AutoModelForMaskedLM:()=>t.AutoModelForMaskedLM,AutoModelForNormalEstimation:()=>t.AutoModelForNormalEstimation,AutoModelForObjectDetection:()=>t.AutoModelForObjectDetection,AutoModelForPoseEstimation:()=>t.AutoModelForPoseEstimation,AutoModelForQuestionAnswering:()=>t.AutoModelForQuestionAnswering,AutoModelForSemanticSegmentation:()=>t.AutoModelForSemanticSegmentation,AutoModelForSeq2SeqLM:()=>t.AutoModelForSeq2SeqLM,AutoModelForSequenceClassification:()=>t.AutoModelForSequenceClassification,AutoModelForSpeechSeq2Seq:()=>t.AutoModelForSpeechSeq2Seq,AutoModelForTextToSpectrogram:()=>t.AutoModelForTextToSpectrogram,AutoModelForTextToWaveform:()=>t.AutoModelForTextToWaveform,AutoModelForTokenClassification:()=>t.AutoModelForTokenClassification,AutoModelForUniversalSegmentation:()=>t.AutoModelForUniversalSegmentation,AutoModelForVision2Seq:()=>t.AutoModelForVision2Seq,AutoModelForXVector:()=>t.AutoModelForXVector,AutoModelForZeroShotObjectDetection:()=>t.AutoModelForZeroShotObjectDetection,AutoProcessor:()=>C.AutoProcessor,AutoTokenizer:()=>r.AutoTokenizer,AutomaticSpeechRecognitionPipeline:()=>A.AutomaticSpeechRecognitionPipeline,BackgroundRemovalPipeline:()=>A.BackgroundRemovalPipeline,BartForConditionalGeneration:()=>t.BartForConditionalGeneration,BartForSequenceClassification:()=>t.BartForSequenceClassification,BartModel:()=>t.BartModel,BartPretrainedModel:()=>t.BartPretrainedModel,BartTokenizer:()=>r.BartTokenizer,BaseModelOutput:()=>t.BaseModelOutput,BaseStreamer:()=>b.BaseStreamer,BeitFeatureExtractor:()=>f.BeitFeatureExtractor,BeitForImageClassification:()=>t.BeitForImageClassification,BeitModel:()=>t.BeitModel,BeitPreTrainedModel:()=>t.BeitPreTrainedModel,BertForMaskedLM:()=>t.BertForMaskedLM,BertForQuestionAnswering:()=>t.BertForQuestionAnswering,BertForSequenceClassification:()=>t.BertForSequenceClassification,BertForTokenClassification:()=>t.BertForTokenClassification,BertModel:()=>t.BertModel,BertPreTrainedModel:()=>t.BertPreTrainedModel,BertTokenizer:()=>r.BertTokenizer,BitImageProcessor:()=>f.BitImageProcessor,BlenderbotForConditionalGeneration:()=>t.BlenderbotForConditionalGeneration,BlenderbotModel:()=>t.BlenderbotModel,BlenderbotPreTrainedModel:()=>t.BlenderbotPreTrainedModel,BlenderbotSmallForConditionalGeneration:()=>t.BlenderbotSmallForConditionalGeneration,BlenderbotSmallModel:()=>t.BlenderbotSmallModel,BlenderbotSmallPreTrainedModel:()=>t.BlenderbotSmallPreTrainedModel,BlenderbotSmallTokenizer:()=>r.BlenderbotSmallTokenizer,BlenderbotTokenizer:()=>r.BlenderbotTokenizer,BloomForCausalLM:()=>t.BloomForCausalLM,BloomModel:()=>t.BloomModel,BloomPreTrainedModel:()=>t.BloomPreTrainedModel,BloomTokenizer:()=>r.BloomTokenizer,CLIPFeatureExtractor:()=>f.CLIPFeatureExtractor,CLIPImageProcessor:()=>f.CLIPImageProcessor,CLIPModel:()=>t.CLIPModel,CLIPPreTrainedModel:()=>t.CLIPPreTrainedModel,CLIPSegForImageSegmentation:()=>t.CLIPSegForImageSegmentation,CLIPSegModel:()=>t.CLIPSegModel,CLIPSegPreTrainedModel:()=>t.CLIPSegPreTrainedModel,CLIPTextModel:()=>t.CLIPTextModel,CLIPTextModelWithProjection:()=>t.CLIPTextModelWithProjection,CLIPTokenizer:()=>r.CLIPTokenizer,CLIPVisionModel:()=>t.CLIPVisionModel,CLIPVisionModelWithProjection:()=>t.CLIPVisionModelWithProjection,CamembertForMaskedLM:()=>t.CamembertForMaskedLM,CamembertForQuestionAnswering:()=>t.CamembertForQuestionAnswering,CamembertForSequenceClassification:()=>t.CamembertForSequenceClassification,CamembertForTokenClassification:()=>t.CamembertForTokenClassification,CamembertModel:()=>t.CamembertModel,CamembertPreTrainedModel:()=>t.CamembertPreTrainedModel,CamembertTokenizer:()=>r.CamembertTokenizer,CausalLMOutput:()=>t.CausalLMOutput,CausalLMOutputWithPast:()=>t.CausalLMOutputWithPast,ChineseCLIPFeatureExtractor:()=>f.ChineseCLIPFeatureExtractor,ChineseCLIPModel:()=>t.ChineseCLIPModel,ChineseCLIPPreTrainedModel:()=>t.ChineseCLIPPreTrainedModel,ClapAudioModelWithProjection:()=>t.ClapAudioModelWithProjection,ClapFeatureExtractor:()=>g.ClapFeatureExtractor,ClapModel:()=>t.ClapModel,ClapPreTrainedModel:()=>t.ClapPreTrainedModel,ClapTextModelWithProjection:()=>t.ClapTextModelWithProjection,ClassifierFreeGuidanceLogitsProcessor:()=>w.ClassifierFreeGuidanceLogitsProcessor,CodeGenForCausalLM:()=>t.CodeGenForCausalLM,CodeGenModel:()=>t.CodeGenModel,CodeGenPreTrainedModel:()=>t.CodeGenPreTrainedModel,CodeGenTokenizer:()=>r.CodeGenTokenizer,CodeLlamaTokenizer:()=>r.CodeLlamaTokenizer,CohereForCausalLM:()=>t.CohereForCausalLM,CohereModel:()=>t.CohereModel,CoherePreTrainedModel:()=>t.CoherePreTrainedModel,CohereTokenizer:()=>r.CohereTokenizer,ConvBertForMaskedLM:()=>t.ConvBertForMaskedLM,ConvBertForQuestionAnswering:()=>t.ConvBertForQuestionAnswering,ConvBertForSequenceClassification:()=>t.ConvBertForSequenceClassification,ConvBertForTokenClassification:()=>t.ConvBertForTokenClassification,ConvBertModel:()=>t.ConvBertModel,ConvBertPreTrainedModel:()=>t.ConvBertPreTrainedModel,ConvBertTokenizer:()=>r.ConvBertTokenizer,ConvNextFeatureExtractor:()=>f.ConvNextFeatureExtractor,ConvNextForImageClassification:()=>t.ConvNextForImageClassification,ConvNextImageProcessor:()=>f.ConvNextImageProcessor,ConvNextModel:()=>t.ConvNextModel,ConvNextPreTrainedModel:()=>t.ConvNextPreTrainedModel,ConvNextV2ForImageClassification:()=>t.ConvNextV2ForImageClassification,ConvNextV2Model:()=>t.ConvNextV2Model,ConvNextV2PreTrainedModel:()=>t.ConvNextV2PreTrainedModel,DFineForObjectDetection:()=>t.DFineForObjectDetection,DFineModel:()=>t.DFineModel,DFinePreTrainedModel:()=>t.DFinePreTrainedModel,DPTFeatureExtractor:()=>f.DPTFeatureExtractor,DPTForDepthEstimation:()=>t.DPTForDepthEstimation,DPTImageProcessor:()=>f.DPTImageProcessor,DPTModel:()=>t.DPTModel,DPTPreTrainedModel:()=>t.DPTPreTrainedModel,DacDecoderModel:()=>t.DacDecoderModel,DacDecoderOutput:()=>t.DacDecoderOutput,DacEncoderModel:()=>t.DacEncoderModel,DacEncoderOutput:()=>t.DacEncoderOutput,DacFeatureExtractor:()=>g.DacFeatureExtractor,DacModel:()=>t.DacModel,DacPreTrainedModel:()=>t.DacPreTrainedModel,DataTypeMap:()=>o.DataTypeMap,DebertaForMaskedLM:()=>t.DebertaForMaskedLM,DebertaForQuestionAnswering:()=>t.DebertaForQuestionAnswering,DebertaForSequenceClassification:()=>t.DebertaForSequenceClassification,DebertaForTokenClassification:()=>t.DebertaForTokenClassification,DebertaModel:()=>t.DebertaModel,DebertaPreTrainedModel:()=>t.DebertaPreTrainedModel,DebertaTokenizer:()=>r.DebertaTokenizer,DebertaV2ForMaskedLM:()=>t.DebertaV2ForMaskedLM,DebertaV2ForQuestionAnswering:()=>t.DebertaV2ForQuestionAnswering,DebertaV2ForSequenceClassification:()=>t.DebertaV2ForSequenceClassification,DebertaV2ForTokenClassification:()=>t.DebertaV2ForTokenClassification,DebertaV2Model:()=>t.DebertaV2Model,DebertaV2PreTrainedModel:()=>t.DebertaV2PreTrainedModel,DebertaV2Tokenizer:()=>r.DebertaV2Tokenizer,DecisionTransformerModel:()=>t.DecisionTransformerModel,DecisionTransformerPreTrainedModel:()=>t.DecisionTransformerPreTrainedModel,DeiTFeatureExtractor:()=>f.DeiTFeatureExtractor,DeiTForImageClassification:()=>t.DeiTForImageClassification,DeiTImageProcessor:()=>f.DeiTImageProcessor,DeiTModel:()=>t.DeiTModel,DeiTPreTrainedModel:()=>t.DeiTPreTrainedModel,DepthAnythingForDepthEstimation:()=>t.DepthAnythingForDepthEstimation,DepthAnythingPreTrainedModel:()=>t.DepthAnythingPreTrainedModel,DepthEstimationPipeline:()=>A.DepthEstimationPipeline,DepthProForDepthEstimation:()=>t.DepthProForDepthEstimation,DepthProPreTrainedModel:()=>t.DepthProPreTrainedModel,DetrFeatureExtractor:()=>f.DetrFeatureExtractor,DetrForObjectDetection:()=>t.DetrForObjectDetection,DetrForSegmentation:()=>t.DetrForSegmentation,DetrImageProcessor:()=>f.DetrImageProcessor,DetrModel:()=>t.DetrModel,DetrObjectDetectionOutput:()=>t.DetrObjectDetectionOutput,DetrPreTrainedModel:()=>t.DetrPreTrainedModel,DetrSegmentationOutput:()=>t.DetrSegmentationOutput,Dinov2ForImageClassification:()=>t.Dinov2ForImageClassification,Dinov2Model:()=>t.Dinov2Model,Dinov2PreTrainedModel:()=>t.Dinov2PreTrainedModel,Dinov2WithRegistersForImageClassification:()=>t.Dinov2WithRegistersForImageClassification,Dinov2WithRegistersModel:()=>t.Dinov2WithRegistersModel,Dinov2WithRegistersPreTrainedModel:()=>t.Dinov2WithRegistersPreTrainedModel,DistilBertForMaskedLM:()=>t.DistilBertForMaskedLM,DistilBertForQuestionAnswering:()=>t.DistilBertForQuestionAnswering,DistilBertForSequenceClassification:()=>t.DistilBertForSequenceClassification,DistilBertForTokenClassification:()=>t.DistilBertForTokenClassification,DistilBertModel:()=>t.DistilBertModel,DistilBertPreTrainedModel:()=>t.DistilBertPreTrainedModel,DistilBertTokenizer:()=>r.DistilBertTokenizer,DocumentQuestionAnsweringPipeline:()=>A.DocumentQuestionAnsweringPipeline,DonutFeatureExtractor:()=>f.DonutFeatureExtractor,DonutImageProcessor:()=>f.DonutImageProcessor,DonutSwinModel:()=>t.DonutSwinModel,DonutSwinPreTrainedModel:()=>t.DonutSwinPreTrainedModel,EfficientNetForImageClassification:()=>t.EfficientNetForImageClassification,EfficientNetImageProcessor:()=>f.EfficientNetImageProcessor,EfficientNetModel:()=>t.EfficientNetModel,EfficientNetPreTrainedModel:()=>t.EfficientNetPreTrainedModel,ElectraForMaskedLM:()=>t.ElectraForMaskedLM,ElectraForQuestionAnswering:()=>t.ElectraForQuestionAnswering,ElectraForSequenceClassification:()=>t.ElectraForSequenceClassification,ElectraForTokenClassification:()=>t.ElectraForTokenClassification,ElectraModel:()=>t.ElectraModel,ElectraPreTrainedModel:()=>t.ElectraPreTrainedModel,ElectraTokenizer:()=>r.ElectraTokenizer,EncodecFeatureExtractor:()=>g.EncodecFeatureExtractor,EosTokenCriteria:()=>I.EosTokenCriteria,EsmForMaskedLM:()=>t.EsmForMaskedLM,EsmForSequenceClassification:()=>t.EsmForSequenceClassification,EsmForTokenClassification:()=>t.EsmForTokenClassification,EsmModel:()=>t.EsmModel,EsmPreTrainedModel:()=>t.EsmPreTrainedModel,EsmTokenizer:()=>r.EsmTokenizer,ExaoneForCausalLM:()=>t.ExaoneForCausalLM,ExaoneModel:()=>t.ExaoneModel,ExaonePreTrainedModel:()=>t.ExaonePreTrainedModel,FFT:()=>l.FFT,FalconForCausalLM:()=>t.FalconForCausalLM,FalconModel:()=>t.FalconModel,FalconPreTrainedModel:()=>t.FalconPreTrainedModel,FalconTokenizer:()=>r.FalconTokenizer,FastViTForImageClassification:()=>t.FastViTForImageClassification,FastViTModel:()=>t.FastViTModel,FastViTPreTrainedModel:()=>t.FastViTPreTrainedModel,FeatureExtractionPipeline:()=>A.FeatureExtractionPipeline,FeatureExtractor:()=>c.FeatureExtractor,FillMaskPipeline:()=>A.FillMaskPipeline,Florence2ForConditionalGeneration:()=>t.Florence2ForConditionalGeneration,Florence2PreTrainedModel:()=>t.Florence2PreTrainedModel,Florence2Processor:()=>m.Florence2Processor,ForcedBOSTokenLogitsProcessor:()=>w.ForcedBOSTokenLogitsProcessor,ForcedEOSTokenLogitsProcessor:()=>w.ForcedEOSTokenLogitsProcessor,GLPNFeatureExtractor:()=>f.GLPNFeatureExtractor,GLPNForDepthEstimation:()=>t.GLPNForDepthEstimation,GLPNModel:()=>t.GLPNModel,GLPNPreTrainedModel:()=>t.GLPNPreTrainedModel,GPT2LMHeadModel:()=>t.GPT2LMHeadModel,GPT2Model:()=>t.GPT2Model,GPT2PreTrainedModel:()=>t.GPT2PreTrainedModel,GPT2Tokenizer:()=>r.GPT2Tokenizer,GPTBigCodeForCausalLM:()=>t.GPTBigCodeForCausalLM,GPTBigCodeModel:()=>t.GPTBigCodeModel,GPTBigCodePreTrainedModel:()=>t.GPTBigCodePreTrainedModel,GPTJForCausalLM:()=>t.GPTJForCausalLM,GPTJModel:()=>t.GPTJModel,GPTJPreTrainedModel:()=>t.GPTJPreTrainedModel,GPTNeoForCausalLM:()=>t.GPTNeoForCausalLM,GPTNeoModel:()=>t.GPTNeoModel,GPTNeoPreTrainedModel:()=>t.GPTNeoPreTrainedModel,GPTNeoXForCausalLM:()=>t.GPTNeoXForCausalLM,GPTNeoXModel:()=>t.GPTNeoXModel,GPTNeoXPreTrainedModel:()=>t.GPTNeoXPreTrainedModel,GPTNeoXTokenizer:()=>r.GPTNeoXTokenizer,Gemma2ForCausalLM:()=>t.Gemma2ForCausalLM,Gemma2Model:()=>t.Gemma2Model,Gemma2PreTrainedModel:()=>t.Gemma2PreTrainedModel,Gemma3ForCausalLM:()=>t.Gemma3ForCausalLM,Gemma3Model:()=>t.Gemma3Model,Gemma3PreTrainedModel:()=>t.Gemma3PreTrainedModel,GemmaForCausalLM:()=>t.GemmaForCausalLM,GemmaModel:()=>t.GemmaModel,GemmaPreTrainedModel:()=>t.GemmaPreTrainedModel,GemmaTokenizer:()=>r.GemmaTokenizer,GlmForCausalLM:()=>t.GlmForCausalLM,GlmModel:()=>t.GlmModel,GlmPreTrainedModel:()=>t.GlmPreTrainedModel,GraniteForCausalLM:()=>t.GraniteForCausalLM,GraniteModel:()=>t.GraniteModel,GranitePreTrainedModel:()=>t.GranitePreTrainedModel,Grok1Tokenizer:()=>r.Grok1Tokenizer,GroundingDinoForObjectDetection:()=>t.GroundingDinoForObjectDetection,GroundingDinoImageProcessor:()=>f.GroundingDinoImageProcessor,GroundingDinoPreTrainedModel:()=>t.GroundingDinoPreTrainedModel,GroundingDinoProcessor:()=>m.GroundingDinoProcessor,GroupViTModel:()=>t.GroupViTModel,GroupViTPreTrainedModel:()=>t.GroupViTPreTrainedModel,HeliumForCausalLM:()=>t.HeliumForCausalLM,HeliumModel:()=>t.HeliumModel,HeliumPreTrainedModel:()=>t.HeliumPreTrainedModel,HerbertTokenizer:()=>r.HerbertTokenizer,HieraForImageClassification:()=>t.HieraForImageClassification,HieraModel:()=>t.HieraModel,HieraPreTrainedModel:()=>t.HieraPreTrainedModel,HubertForCTC:()=>t.HubertForCTC,HubertForSequenceClassification:()=>t.HubertForSequenceClassification,HubertModel:()=>t.HubertModel,HubertPreTrainedModel:()=>t.HubertPreTrainedModel,IJepaForImageClassification:()=>t.IJepaForImageClassification,IJepaModel:()=>t.IJepaModel,IJepaPreTrainedModel:()=>t.IJepaPreTrainedModel,Idefics3ForConditionalGeneration:()=>t.Idefics3ForConditionalGeneration,Idefics3ImageProcessor:()=>f.Idefics3ImageProcessor,Idefics3PreTrainedModel:()=>t.Idefics3PreTrainedModel,Idefics3Processor:()=>m.Idefics3Processor,ImageClassificationPipeline:()=>A.ImageClassificationPipeline,ImageFeatureExtractionPipeline:()=>A.ImageFeatureExtractionPipeline,ImageFeatureExtractor:()=>g.ImageFeatureExtractor,ImageMattingOutput:()=>t.ImageMattingOutput,ImageProcessor:()=>d.ImageProcessor,ImageSegmentationPipeline:()=>A.ImageSegmentationPipeline,ImageToImagePipeline:()=>A.ImageToImagePipeline,ImageToTextPipeline:()=>A.ImageToTextPipeline,InterruptableStoppingCriteria:()=>I.InterruptableStoppingCriteria,JAISLMHeadModel:()=>t.JAISLMHeadModel,JAISModel:()=>t.JAISModel,JAISPreTrainedModel:()=>t.JAISPreTrainedModel,JinaCLIPImageProcessor:()=>f.JinaCLIPImageProcessor,JinaCLIPModel:()=>t.JinaCLIPModel,JinaCLIPPreTrainedModel:()=>t.JinaCLIPPreTrainedModel,JinaCLIPProcessor:()=>m.JinaCLIPProcessor,JinaCLIPTextModel:()=>t.JinaCLIPTextModel,JinaCLIPVisionModel:()=>t.JinaCLIPVisionModel,LiteWhisperForConditionalGeneration:()=>t.LiteWhisperForConditionalGeneration,LlamaForCausalLM:()=>t.LlamaForCausalLM,LlamaModel:()=>t.LlamaModel,LlamaPreTrainedModel:()=>t.LlamaPreTrainedModel,LlamaTokenizer:()=>r.LlamaTokenizer,LlavaForConditionalGeneration:()=>t.LlavaForConditionalGeneration,LlavaOnevisionForConditionalGeneration:()=>t.LlavaOnevisionForConditionalGeneration,LlavaOnevisionImageProcessor:()=>f.LlavaOnevisionImageProcessor,LlavaPreTrainedModel:()=>t.LlavaPreTrainedModel,LogitsProcessor:()=>w.LogitsProcessor,LogitsProcessorList:()=>w.LogitsProcessorList,LogitsWarper:()=>w.LogitsWarper,LongT5ForConditionalGeneration:()=>t.LongT5ForConditionalGeneration,LongT5Model:()=>t.LongT5Model,LongT5PreTrainedModel:()=>t.LongT5PreTrainedModel,M2M100ForConditionalGeneration:()=>t.M2M100ForConditionalGeneration,M2M100Model:()=>t.M2M100Model,M2M100PreTrainedModel:()=>t.M2M100PreTrainedModel,M2M100Tokenizer:()=>r.M2M100Tokenizer,MBart50Tokenizer:()=>r.MBart50Tokenizer,MBartForCausalLM:()=>t.MBartForCausalLM,MBartForConditionalGeneration:()=>t.MBartForConditionalGeneration,MBartForSequenceClassification:()=>t.MBartForSequenceClassification,MBartModel:()=>t.MBartModel,MBartPreTrainedModel:()=>t.MBartPreTrainedModel,MBartTokenizer:()=>r.MBartTokenizer,MPNetForMaskedLM:()=>t.MPNetForMaskedLM,MPNetForQuestionAnswering:()=>t.MPNetForQuestionAnswering,MPNetForSequenceClassification:()=>t.MPNetForSequenceClassification,MPNetForTokenClassification:()=>t.MPNetForTokenClassification,MPNetModel:()=>t.MPNetModel,MPNetPreTrainedModel:()=>t.MPNetPreTrainedModel,MPNetTokenizer:()=>r.MPNetTokenizer,MT5ForConditionalGeneration:()=>t.MT5ForConditionalGeneration,MT5Model:()=>t.MT5Model,MT5PreTrainedModel:()=>t.MT5PreTrainedModel,MarianMTModel:()=>t.MarianMTModel,MarianModel:()=>t.MarianModel,MarianPreTrainedModel:()=>t.MarianPreTrainedModel,MarianTokenizer:()=>r.MarianTokenizer,Mask2FormerImageProcessor:()=>f.Mask2FormerImageProcessor,MaskFormerFeatureExtractor:()=>f.MaskFormerFeatureExtractor,MaskFormerForInstanceSegmentation:()=>t.MaskFormerForInstanceSegmentation,MaskFormerImageProcessor:()=>f.MaskFormerImageProcessor,MaskFormerModel:()=>t.MaskFormerModel,MaskFormerPreTrainedModel:()=>t.MaskFormerPreTrainedModel,MaskedLMOutput:()=>t.MaskedLMOutput,MaxLengthCriteria:()=>I.MaxLengthCriteria,Metric3DForDepthEstimation:()=>t.Metric3DForDepthEstimation,Metric3DPreTrainedModel:()=>t.Metric3DPreTrainedModel,Metric3Dv2ForDepthEstimation:()=>t.Metric3Dv2ForDepthEstimation,Metric3Dv2PreTrainedModel:()=>t.Metric3Dv2PreTrainedModel,MgpstrForSceneTextRecognition:()=>t.MgpstrForSceneTextRecognition,MgpstrModelOutput:()=>t.MgpstrModelOutput,MgpstrPreTrainedModel:()=>t.MgpstrPreTrainedModel,MgpstrProcessor:()=>m.MgpstrProcessor,MgpstrTokenizer:()=>r.MgpstrTokenizer,MimiDecoderModel:()=>t.MimiDecoderModel,MimiDecoderOutput:()=>t.MimiDecoderOutput,MimiEncoderModel:()=>t.MimiEncoderModel,MimiEncoderOutput:()=>t.MimiEncoderOutput,MimiModel:()=>t.MimiModel,MimiPreTrainedModel:()=>t.MimiPreTrainedModel,MinLengthLogitsProcessor:()=>w.MinLengthLogitsProcessor,MinNewTokensLengthLogitsProcessor:()=>w.MinNewTokensLengthLogitsProcessor,MistralForCausalLM:()=>t.MistralForCausalLM,MistralModel:()=>t.MistralModel,MistralPreTrainedModel:()=>t.MistralPreTrainedModel,MobileBertForMaskedLM:()=>t.MobileBertForMaskedLM,MobileBertForQuestionAnswering:()=>t.MobileBertForQuestionAnswering,MobileBertForSequenceClassification:()=>t.MobileBertForSequenceClassification,MobileBertModel:()=>t.MobileBertModel,MobileBertPreTrainedModel:()=>t.MobileBertPreTrainedModel,MobileBertTokenizer:()=>r.MobileBertTokenizer,MobileLLMForCausalLM:()=>t.MobileLLMForCausalLM,MobileLLMModel:()=>t.MobileLLMModel,MobileLLMPreTrainedModel:()=>t.MobileLLMPreTrainedModel,MobileNetV1FeatureExtractor:()=>f.MobileNetV1FeatureExtractor,MobileNetV1ForImageClassification:()=>t.MobileNetV1ForImageClassification,MobileNetV1ForSemanticSegmentation:()=>t.MobileNetV1ForSemanticSegmentation,MobileNetV1ImageProcessor:()=>f.MobileNetV1ImageProcessor,MobileNetV1Model:()=>t.MobileNetV1Model,MobileNetV1PreTrainedModel:()=>t.MobileNetV1PreTrainedModel,MobileNetV2FeatureExtractor:()=>f.MobileNetV2FeatureExtractor,MobileNetV2ForImageClassification:()=>t.MobileNetV2ForImageClassification,MobileNetV2ForSemanticSegmentation:()=>t.MobileNetV2ForSemanticSegmentation,MobileNetV2ImageProcessor:()=>f.MobileNetV2ImageProcessor,MobileNetV2Model:()=>t.MobileNetV2Model,MobileNetV2PreTrainedModel:()=>t.MobileNetV2PreTrainedModel,MobileNetV3FeatureExtractor:()=>f.MobileNetV3FeatureExtractor,MobileNetV3ForImageClassification:()=>t.MobileNetV3ForImageClassification,MobileNetV3ForSemanticSegmentation:()=>t.MobileNetV3ForSemanticSegmentation,MobileNetV3ImageProcessor:()=>f.MobileNetV3ImageProcessor,MobileNetV3Model:()=>t.MobileNetV3Model,MobileNetV3PreTrainedModel:()=>t.MobileNetV3PreTrainedModel,MobileNetV4FeatureExtractor:()=>f.MobileNetV4FeatureExtractor,MobileNetV4ForImageClassification:()=>t.MobileNetV4ForImageClassification,MobileNetV4ForSemanticSegmentation:()=>t.MobileNetV4ForSemanticSegmentation,MobileNetV4ImageProcessor:()=>f.MobileNetV4ImageProcessor,MobileNetV4Model:()=>t.MobileNetV4Model,MobileNetV4PreTrainedModel:()=>t.MobileNetV4PreTrainedModel,MobileViTFeatureExtractor:()=>f.MobileViTFeatureExtractor,MobileViTForImageClassification:()=>t.MobileViTForImageClassification,MobileViTImageProcessor:()=>f.MobileViTImageProcessor,MobileViTModel:()=>t.MobileViTModel,MobileViTPreTrainedModel:()=>t.MobileViTPreTrainedModel,MobileViTV2ForImageClassification:()=>t.MobileViTV2ForImageClassification,MobileViTV2Model:()=>t.MobileViTV2Model,MobileViTV2PreTrainedModel:()=>t.MobileViTV2PreTrainedModel,ModelOutput:()=>t.ModelOutput,ModernBertForMaskedLM:()=>t.ModernBertForMaskedLM,ModernBertForSequenceClassification:()=>t.ModernBertForSequenceClassification,ModernBertForTokenClassification:()=>t.ModernBertForTokenClassification,ModernBertModel:()=>t.ModernBertModel,ModernBertPreTrainedModel:()=>t.ModernBertPreTrainedModel,Moondream1ForConditionalGeneration:()=>t.Moondream1ForConditionalGeneration,MoonshineFeatureExtractor:()=>g.MoonshineFeatureExtractor,MoonshineForConditionalGeneration:()=>t.MoonshineForConditionalGeneration,MoonshineModel:()=>t.MoonshineModel,MoonshinePreTrainedModel:()=>t.MoonshinePreTrainedModel,MoonshineProcessor:()=>m.MoonshineProcessor,MptForCausalLM:()=>t.MptForCausalLM,MptModel:()=>t.MptModel,MptPreTrainedModel:()=>t.MptPreTrainedModel,MultiModalityCausalLM:()=>t.MultiModalityCausalLM,MultiModalityPreTrainedModel:()=>t.MultiModalityPreTrainedModel,MusicgenForCausalLM:()=>t.MusicgenForCausalLM,MusicgenForConditionalGeneration:()=>t.MusicgenForConditionalGeneration,MusicgenModel:()=>t.MusicgenModel,MusicgenPreTrainedModel:()=>t.MusicgenPreTrainedModel,NllbTokenizer:()=>r.NllbTokenizer,NoBadWordsLogitsProcessor:()=>w.NoBadWordsLogitsProcessor,NoRepeatNGramLogitsProcessor:()=>w.NoRepeatNGramLogitsProcessor,NomicBertModel:()=>t.NomicBertModel,NomicBertPreTrainedModel:()=>t.NomicBertPreTrainedModel,NougatImageProcessor:()=>f.NougatImageProcessor,NougatTokenizer:()=>r.NougatTokenizer,OPTForCausalLM:()=>t.OPTForCausalLM,OPTModel:()=>t.OPTModel,OPTPreTrainedModel:()=>t.OPTPreTrainedModel,ObjectDetectionPipeline:()=>A.ObjectDetectionPipeline,Olmo2ForCausalLM:()=>t.Olmo2ForCausalLM,Olmo2Model:()=>t.Olmo2Model,Olmo2PreTrainedModel:()=>t.Olmo2PreTrainedModel,OlmoForCausalLM:()=>t.OlmoForCausalLM,OlmoModel:()=>t.OlmoModel,OlmoPreTrainedModel:()=>t.OlmoPreTrainedModel,OpenELMForCausalLM:()=>t.OpenELMForCausalLM,OpenELMModel:()=>t.OpenELMModel,OpenELMPreTrainedModel:()=>t.OpenELMPreTrainedModel,OwlViTFeatureExtractor:()=>f.OwlViTFeatureExtractor,OwlViTForObjectDetection:()=>t.OwlViTForObjectDetection,OwlViTImageProcessor:()=>f.OwlViTImageProcessor,OwlViTModel:()=>t.OwlViTModel,OwlViTPreTrainedModel:()=>t.OwlViTPreTrainedModel,OwlViTProcessor:()=>m.OwlViTProcessor,Owlv2ForObjectDetection:()=>t.Owlv2ForObjectDetection,Owlv2ImageProcessor:()=>f.Owlv2ImageProcessor,Owlv2Model:()=>t.Owlv2Model,Owlv2PreTrainedModel:()=>t.Owlv2PreTrainedModel,PaliGemmaForConditionalGeneration:()=>t.PaliGemmaForConditionalGeneration,PaliGemmaPreTrainedModel:()=>t.PaliGemmaPreTrainedModel,PaliGemmaProcessor:()=>m.PaliGemmaProcessor,PatchTSMixerForPrediction:()=>t.PatchTSMixerForPrediction,PatchTSMixerModel:()=>t.PatchTSMixerModel,PatchTSMixerPreTrainedModel:()=>t.PatchTSMixerPreTrainedModel,PatchTSTForPrediction:()=>t.PatchTSTForPrediction,PatchTSTModel:()=>t.PatchTSTModel,PatchTSTPreTrainedModel:()=>t.PatchTSTPreTrainedModel,Phi3ForCausalLM:()=>t.Phi3ForCausalLM,Phi3Model:()=>t.Phi3Model,Phi3PreTrainedModel:()=>t.Phi3PreTrainedModel,Phi3VForCausalLM:()=>t.Phi3VForCausalLM,Phi3VImageProcessor:()=>f.Phi3VImageProcessor,Phi3VPreTrainedModel:()=>t.Phi3VPreTrainedModel,Phi3VProcessor:()=>m.Phi3VProcessor,PhiForCausalLM:()=>t.PhiForCausalLM,PhiModel:()=>t.PhiModel,PhiPreTrainedModel:()=>t.PhiPreTrainedModel,Pipeline:()=>A.Pipeline,PreTrainedModel:()=>t.PreTrainedModel,PreTrainedTokenizer:()=>r.PreTrainedTokenizer,PretrainedConfig:()=>n.PretrainedConfig,PretrainedMixin:()=>t.PretrainedMixin,Processor:()=>h.Processor,PvtForImageClassification:()=>t.PvtForImageClassification,PvtImageProcessor:()=>f.PvtImageProcessor,PvtModel:()=>t.PvtModel,PvtPreTrainedModel:()=>t.PvtPreTrainedModel,PyAnnoteFeatureExtractor:()=>g.PyAnnoteFeatureExtractor,PyAnnoteForAudioFrameClassification:()=>t.PyAnnoteForAudioFrameClassification,PyAnnoteModel:()=>t.PyAnnoteModel,PyAnnotePreTrainedModel:()=>t.PyAnnotePreTrainedModel,PyAnnoteProcessor:()=>m.PyAnnoteProcessor,QuestionAnsweringModelOutput:()=>t.QuestionAnsweringModelOutput,QuestionAnsweringPipeline:()=>A.QuestionAnsweringPipeline,Qwen2ForCausalLM:()=>t.Qwen2ForCausalLM,Qwen2Model:()=>t.Qwen2Model,Qwen2PreTrainedModel:()=>t.Qwen2PreTrainedModel,Qwen2Tokenizer:()=>r.Qwen2Tokenizer,Qwen2VLForConditionalGeneration:()=>t.Qwen2VLForConditionalGeneration,Qwen2VLImageProcessor:()=>f.Qwen2VLImageProcessor,Qwen2VLPreTrainedModel:()=>t.Qwen2VLPreTrainedModel,Qwen2VLProcessor:()=>m.Qwen2VLProcessor,Qwen3ForCausalLM:()=>t.Qwen3ForCausalLM,Qwen3Model:()=>t.Qwen3Model,Qwen3PreTrainedModel:()=>t.Qwen3PreTrainedModel,RFDetrForObjectDetection:()=>t.RFDetrForObjectDetection,RFDetrModel:()=>t.RFDetrModel,RFDetrObjectDetectionOutput:()=>t.RFDetrObjectDetectionOutput,RFDetrPreTrainedModel:()=>t.RFDetrPreTrainedModel,RTDetrForObjectDetection:()=>t.RTDetrForObjectDetection,RTDetrImageProcessor:()=>f.RTDetrImageProcessor,RTDetrModel:()=>t.RTDetrModel,RTDetrObjectDetectionOutput:()=>t.RTDetrObjectDetectionOutput,RTDetrPreTrainedModel:()=>t.RTDetrPreTrainedModel,RTDetrV2ForObjectDetection:()=>t.RTDetrV2ForObjectDetection,RTDetrV2Model:()=>t.RTDetrV2Model,RTDetrV2ObjectDetectionOutput:()=>t.RTDetrV2ObjectDetectionOutput,RTDetrV2PreTrainedModel:()=>t.RTDetrV2PreTrainedModel,RawAudio:()=>a.RawAudio,RawImage:()=>s.RawImage,RawVideo:()=>i.RawVideo,RawVideoFrame:()=>i.RawVideoFrame,RepetitionPenaltyLogitsProcessor:()=>w.RepetitionPenaltyLogitsProcessor,ResNetForImageClassification:()=>t.ResNetForImageClassification,ResNetModel:()=>t.ResNetModel,ResNetPreTrainedModel:()=>t.ResNetPreTrainedModel,RoFormerForMaskedLM:()=>t.RoFormerForMaskedLM,RoFormerForQuestionAnswering:()=>t.RoFormerForQuestionAnswering,RoFormerForSequenceClassification:()=>t.RoFormerForSequenceClassification,RoFormerForTokenClassification:()=>t.RoFormerForTokenClassification,RoFormerModel:()=>t.RoFormerModel,RoFormerPreTrainedModel:()=>t.RoFormerPreTrainedModel,RoFormerTokenizer:()=>r.RoFormerTokenizer,RobertaForMaskedLM:()=>t.RobertaForMaskedLM,RobertaForQuestionAnswering:()=>t.RobertaForQuestionAnswering,RobertaForSequenceClassification:()=>t.RobertaForSequenceClassification,RobertaForTokenClassification:()=>t.RobertaForTokenClassification,RobertaModel:()=>t.RobertaModel,RobertaPreTrainedModel:()=>t.RobertaPreTrainedModel,RobertaTokenizer:()=>r.RobertaTokenizer,SamImageProcessor:()=>f.SamImageProcessor,SamImageSegmentationOutput:()=>t.SamImageSegmentationOutput,SamModel:()=>t.SamModel,SamPreTrainedModel:()=>t.SamPreTrainedModel,SamProcessor:()=>m.SamProcessor,SapiensForDepthEstimation:()=>t.SapiensForDepthEstimation,SapiensForNormalEstimation:()=>t.SapiensForNormalEstimation,SapiensForSemanticSegmentation:()=>t.SapiensForSemanticSegmentation,SapiensPreTrainedModel:()=>t.SapiensPreTrainedModel,SeamlessM4TFeatureExtractor:()=>g.SeamlessM4TFeatureExtractor,SegformerFeatureExtractor:()=>f.SegformerFeatureExtractor,SegformerForImageClassification:()=>t.SegformerForImageClassification,SegformerForSemanticSegmentation:()=>t.SegformerForSemanticSegmentation,SegformerImageProcessor:()=>f.SegformerImageProcessor,SegformerModel:()=>t.SegformerModel,SegformerPreTrainedModel:()=>t.SegformerPreTrainedModel,Seq2SeqLMOutput:()=>t.Seq2SeqLMOutput,SequenceClassifierOutput:()=>t.SequenceClassifierOutput,SiglipImageProcessor:()=>f.SiglipImageProcessor,SiglipModel:()=>t.SiglipModel,SiglipPreTrainedModel:()=>t.SiglipPreTrainedModel,SiglipTextModel:()=>t.SiglipTextModel,SiglipTokenizer:()=>r.SiglipTokenizer,SiglipVisionModel:()=>t.SiglipVisionModel,SmolVLMForConditionalGeneration:()=>t.SmolVLMForConditionalGeneration,SmolVLMImageProcessor:()=>f.SmolVLMImageProcessor,SmolVLMProcessor:()=>m.SmolVLMProcessor,SnacDecoderModel:()=>t.SnacDecoderModel,SnacEncoderModel:()=>t.SnacEncoderModel,SnacFeatureExtractor:()=>g.SnacFeatureExtractor,SnacModel:()=>t.SnacModel,SnacPreTrainedModel:()=>t.SnacPreTrainedModel,SpeechT5FeatureExtractor:()=>g.SpeechT5FeatureExtractor,SpeechT5ForSpeechToText:()=>t.SpeechT5ForSpeechToText,SpeechT5ForTextToSpeech:()=>t.SpeechT5ForTextToSpeech,SpeechT5HifiGan:()=>t.SpeechT5HifiGan,SpeechT5Model:()=>t.SpeechT5Model,SpeechT5PreTrainedModel:()=>t.SpeechT5PreTrainedModel,SpeechT5Processor:()=>m.SpeechT5Processor,SpeechT5Tokenizer:()=>r.SpeechT5Tokenizer,SqueezeBertForMaskedLM:()=>t.SqueezeBertForMaskedLM,SqueezeBertForQuestionAnswering:()=>t.SqueezeBertForQuestionAnswering,SqueezeBertForSequenceClassification:()=>t.SqueezeBertForSequenceClassification,SqueezeBertModel:()=>t.SqueezeBertModel,SqueezeBertPreTrainedModel:()=>t.SqueezeBertPreTrainedModel,SqueezeBertTokenizer:()=>r.SqueezeBertTokenizer,StableLmForCausalLM:()=>t.StableLmForCausalLM,StableLmModel:()=>t.StableLmModel,StableLmPreTrainedModel:()=>t.StableLmPreTrainedModel,Starcoder2ForCausalLM:()=>t.Starcoder2ForCausalLM,Starcoder2Model:()=>t.Starcoder2Model,Starcoder2PreTrainedModel:()=>t.Starcoder2PreTrainedModel,StoppingCriteria:()=>I.StoppingCriteria,StoppingCriteriaList:()=>I.StoppingCriteriaList,StyleTextToSpeech2Model:()=>t.StyleTextToSpeech2Model,StyleTextToSpeech2PreTrainedModel:()=>t.StyleTextToSpeech2PreTrainedModel,SummarizationPipeline:()=>A.SummarizationPipeline,SuppressTokensAtBeginLogitsProcessor:()=>w.SuppressTokensAtBeginLogitsProcessor,Swin2SRForImageSuperResolution:()=>t.Swin2SRForImageSuperResolution,Swin2SRImageProcessor:()=>f.Swin2SRImageProcessor,Swin2SRModel:()=>t.Swin2SRModel,Swin2SRPreTrainedModel:()=>t.Swin2SRPreTrainedModel,SwinForImageClassification:()=>t.SwinForImageClassification,SwinForSemanticSegmentation:()=>t.SwinForSemanticSegmentation,SwinModel:()=>t.SwinModel,SwinPreTrainedModel:()=>t.SwinPreTrainedModel,T5ForConditionalGeneration:()=>t.T5ForConditionalGeneration,T5Model:()=>t.T5Model,T5PreTrainedModel:()=>t.T5PreTrainedModel,T5Tokenizer:()=>r.T5Tokenizer,TableTransformerForObjectDetection:()=>t.TableTransformerForObjectDetection,TableTransformerModel:()=>t.TableTransformerModel,TableTransformerObjectDetectionOutput:()=>t.TableTransformerObjectDetectionOutput,TableTransformerPreTrainedModel:()=>t.TableTransformerPreTrainedModel,TemperatureLogitsWarper:()=>w.TemperatureLogitsWarper,Tensor:()=>o.Tensor,Text2TextGenerationPipeline:()=>A.Text2TextGenerationPipeline,TextClassificationPipeline:()=>A.TextClassificationPipeline,TextGenerationPipeline:()=>A.TextGenerationPipeline,TextStreamer:()=>b.TextStreamer,TextToAudioPipeline:()=>A.TextToAudioPipeline,TokenClassificationPipeline:()=>A.TokenClassificationPipeline,TokenClassifierOutput:()=>t.TokenClassifierOutput,TokenizerModel:()=>r.TokenizerModel,TopKLogitsWarper:()=>w.TopKLogitsWarper,TopPLogitsWarper:()=>w.TopPLogitsWarper,TrOCRForCausalLM:()=>t.TrOCRForCausalLM,TrOCRPreTrainedModel:()=>t.TrOCRPreTrainedModel,TranslationPipeline:()=>A.TranslationPipeline,UltravoxModel:()=>t.UltravoxModel,UltravoxPreTrainedModel:()=>t.UltravoxPreTrainedModel,UltravoxProcessor:()=>m.UltravoxProcessor,UniSpeechForCTC:()=>t.UniSpeechForCTC,UniSpeechForSequenceClassification:()=>t.UniSpeechForSequenceClassification,UniSpeechModel:()=>t.UniSpeechModel,UniSpeechPreTrainedModel:()=>t.UniSpeechPreTrainedModel,UniSpeechSatForAudioFrameClassification:()=>t.UniSpeechSatForAudioFrameClassification,UniSpeechSatForCTC:()=>t.UniSpeechSatForCTC,UniSpeechSatForSequenceClassification:()=>t.UniSpeechSatForSequenceClassification,UniSpeechSatModel:()=>t.UniSpeechSatModel,UniSpeechSatPreTrainedModel:()=>t.UniSpeechSatPreTrainedModel,VLChatProcessor:()=>m.VLChatProcessor,VLMImageProcessor:()=>f.VLMImageProcessor,ViTFeatureExtractor:()=>f.ViTFeatureExtractor,ViTForImageClassification:()=>t.ViTForImageClassification,ViTImageProcessor:()=>f.ViTImageProcessor,ViTMAEModel:()=>t.ViTMAEModel,ViTMAEPreTrainedModel:()=>t.ViTMAEPreTrainedModel,ViTMSNForImageClassification:()=>t.ViTMSNForImageClassification,ViTMSNModel:()=>t.ViTMSNModel,ViTMSNPreTrainedModel:()=>t.ViTMSNPreTrainedModel,ViTModel:()=>t.ViTModel,ViTPreTrainedModel:()=>t.ViTPreTrainedModel,VisionEncoderDecoderModel:()=>t.VisionEncoderDecoderModel,VitMatteForImageMatting:()=>t.VitMatteForImageMatting,VitMatteImageProcessor:()=>f.VitMatteImageProcessor,VitMattePreTrainedModel:()=>t.VitMattePreTrainedModel,VitPoseForPoseEstimation:()=>t.VitPoseForPoseEstimation,VitPoseImageProcessor:()=>f.VitPoseImageProcessor,VitPosePreTrainedModel:()=>t.VitPosePreTrainedModel,VitsModel:()=>t.VitsModel,VitsModelOutput:()=>t.VitsModelOutput,VitsPreTrainedModel:()=>t.VitsPreTrainedModel,VitsTokenizer:()=>r.VitsTokenizer,Wav2Vec2BertForCTC:()=>t.Wav2Vec2BertForCTC,Wav2Vec2BertForSequenceClassification:()=>t.Wav2Vec2BertForSequenceClassification,Wav2Vec2BertModel:()=>t.Wav2Vec2BertModel,Wav2Vec2BertPreTrainedModel:()=>t.Wav2Vec2BertPreTrainedModel,Wav2Vec2CTCTokenizer:()=>r.Wav2Vec2CTCTokenizer,Wav2Vec2FeatureExtractor:()=>g.Wav2Vec2FeatureExtractor,Wav2Vec2ForAudioFrameClassification:()=>t.Wav2Vec2ForAudioFrameClassification,Wav2Vec2ForCTC:()=>t.Wav2Vec2ForCTC,Wav2Vec2ForSequenceClassification:()=>t.Wav2Vec2ForSequenceClassification,Wav2Vec2Model:()=>t.Wav2Vec2Model,Wav2Vec2PreTrainedModel:()=>t.Wav2Vec2PreTrainedModel,Wav2Vec2Processor:()=>m.Wav2Vec2Processor,Wav2Vec2ProcessorWithLM:()=>m.Wav2Vec2ProcessorWithLM,WavLMForAudioFrameClassification:()=>t.WavLMForAudioFrameClassification,WavLMForCTC:()=>t.WavLMForCTC,WavLMForSequenceClassification:()=>t.WavLMForSequenceClassification,WavLMForXVector:()=>t.WavLMForXVector,WavLMModel:()=>t.WavLMModel,WavLMPreTrainedModel:()=>t.WavLMPreTrainedModel,WeSpeakerFeatureExtractor:()=>g.WeSpeakerFeatureExtractor,WeSpeakerResNetModel:()=>t.WeSpeakerResNetModel,WeSpeakerResNetPreTrainedModel:()=>t.WeSpeakerResNetPreTrainedModel,WhisperFeatureExtractor:()=>g.WhisperFeatureExtractor,WhisperForConditionalGeneration:()=>t.WhisperForConditionalGeneration,WhisperModel:()=>t.WhisperModel,WhisperPreTrainedModel:()=>t.WhisperPreTrainedModel,WhisperProcessor:()=>m.WhisperProcessor,WhisperTextStreamer:()=>b.WhisperTextStreamer,WhisperTimeStampLogitsProcessor:()=>w.WhisperTimeStampLogitsProcessor,WhisperTokenizer:()=>r.WhisperTokenizer,XLMForQuestionAnswering:()=>t.XLMForQuestionAnswering,XLMForSequenceClassification:()=>t.XLMForSequenceClassification,XLMForTokenClassification:()=>t.XLMForTokenClassification,XLMModel:()=>t.XLMModel,XLMPreTrainedModel:()=>t.XLMPreTrainedModel,XLMRobertaForMaskedLM:()=>t.XLMRobertaForMaskedLM,XLMRobertaForQuestionAnswering:()=>t.XLMRobertaForQuestionAnswering,XLMRobertaForSequenceClassification:()=>t.XLMRobertaForSequenceClassification,XLMRobertaForTokenClassification:()=>t.XLMRobertaForTokenClassification,XLMRobertaModel:()=>t.XLMRobertaModel,XLMRobertaPreTrainedModel:()=>t.XLMRobertaPreTrainedModel,XLMRobertaTokenizer:()=>r.XLMRobertaTokenizer,XLMTokenizer:()=>r.XLMTokenizer,XLMWithLMHeadModel:()=>t.XLMWithLMHeadModel,XVectorOutput:()=>t.XVectorOutput,YolosFeatureExtractor:()=>f.YolosFeatureExtractor,YolosForObjectDetection:()=>t.YolosForObjectDetection,YolosImageProcessor:()=>f.YolosImageProcessor,YolosModel:()=>t.YolosModel,YolosObjectDetectionOutput:()=>t.YolosObjectDetectionOutput,YolosPreTrainedModel:()=>t.YolosPreTrainedModel,ZeroShotAudioClassificationPipeline:()=>A.ZeroShotAudioClassificationPipeline,ZeroShotClassificationPipeline:()=>A.ZeroShotClassificationPipeline,ZeroShotImageClassificationPipeline:()=>A.ZeroShotImageClassificationPipeline,ZeroShotObjectDetectionPipeline:()=>A.ZeroShotObjectDetectionPipeline,bankers_round:()=>l.bankers_round,cat:()=>o.cat,cos_sim:()=>l.cos_sim,dot:()=>l.dot,dynamic_time_warping:()=>l.dynamic_time_warping,env:()=>e.env,full:()=>o.full,full_like:()=>o.full_like,getKeyValueShapes:()=>n.getKeyValueShapes,hamming:()=>a.hamming,hanning:()=>a.hanning,interpolate:()=>o.interpolate,interpolate_4d:()=>o.interpolate_4d,interpolate_data:()=>l.interpolate_data,is_chinese_char:()=>r.is_chinese_char,layer_norm:()=>o.layer_norm,load_image:()=>s.load_image,load_video:()=>i.load_video,log_softmax:()=>l.log_softmax,magnitude:()=>l.magnitude,matmul:()=>o.matmul,max:()=>l.max,mean:()=>o.mean,mean_pooling:()=>o.mean_pooling,medianFilter:()=>l.medianFilter,mel_filter_bank:()=>a.mel_filter_bank,min:()=>l.min,ones:()=>o.ones,ones_like:()=>o.ones_like,permute:()=>o.permute,permute_data:()=>l.permute_data,pipeline:()=>A.pipeline,quantize_embeddings:()=>o.quantize_embeddings,rand:()=>o.rand,read_audio:()=>a.read_audio,rfft:()=>o.rfft,round:()=>l.round,slice:()=>o.slice,softmax:()=>l.softmax,spectrogram:()=>a.spectrogram,stack:()=>o.stack,std_mean:()=>o.std_mean,topk:()=>o.topk,window_function:()=>a.window_function,zeros:()=>o.zeros,zeros_like:()=>o.zeros_like});var e=Lg("./src/env.js"),A=Lg("./src/pipelines.js"),t=Lg("./src/models.js"),r=Lg("./src/tokenizers.js"),n=Lg("./src/configs.js"),a=Lg("./src/utils/audio.js"),s=Lg("./src/utils/image.js"),i=Lg("./src/utils/video.js"),o=Lg("./src/utils/tensor.js"),l=Lg("./src/utils/maths.js"),c=Lg("./src/base/feature_extraction_utils.js"),g=Lg("./src/models/feature_extractors.js"),u=Lg("./src/models/auto/feature_extraction_auto.js"),d=Lg("./src/base/image_processors_utils.js"),f=Lg("./src/models/image_processors.js"),p=Lg("./src/models/auto/image_processing_auto.js"),h=Lg("./src/base/processing_utils.js"),m=Lg("./src/models/processors.js"),C=Lg("./src/models/auto/processing_auto.js"),b=Lg("./src/generation/streamers.js"),I=Lg("./src/generation/stopping_criteria.js"),w=Lg("./src/generation/logits_process.js")})();var Hg=Yg.AutoTokenizer,Rg=Yg.RawAudio,jg=Yg.StyleTextToSpeech2Model,Vg=Yg.Tensor,Wg=Yg.env,Ug=void 0!==Ug?Ug:{};Ug.expectedDataFileDownloads||(Ug.expectedDataFileDownloads=0);var Kg="function"==typeof importScripts,Zg="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,Xg="function"==typeof atob?atob:function(e){var A,t,r,n,a,s,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",o="",l=0;e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{A=i.indexOf(e.charAt(l++))<<2|(n=i.indexOf(e.charAt(l++)))>>4,t=(15&n)<<4|(a=i.indexOf(e.charAt(l++)))>>2,r=(3&a)<<6|(s=i.indexOf(e.charAt(l++))),o+=String.fromCharCode(A),64!==a&&(o+=String.fromCharCode(t)),64!==s&&(o+=String.fromCharCode(r))}while(l<e.length);return o};Zg&&(process.argv.length>1&&(Jg=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),process.on("uncaughtException",(function(e){if(!(e instanceof Du))throw e})),process.on("unhandledRejection",(function(e){throw e})),Ug.inspect=function(){return"[Emscripten Module object]"}),Ug.expectedDataFileDownloads++,function(){if(Ug.ENVIRONMENT_IS_PTHREAD)return;const e="/usr/share/espeak-ng-data",A=e+"/lang",t=e+"/voices";!function(r){var n=null,a=null;function s(){function s(e,A){if(!e)throw A+(new Error).stack}function i(e,A,t){this.start=e,this.end=A,this.audio=t}Ug.FS_createPath("/","usr",!0,!0),Ug.FS_createPath("/usr","share",!0,!0),Ug.FS_createPath("/usr/share","espeak-ng-data",!0,!0),Ug.FS_createPath(e,"lang",!0,!0),Ug.FS_createPath(A,"aav",!0,!0),Ug.FS_createPath(A,"art",!0,!0),Ug.FS_createPath(A,"azc",!0,!0),Ug.FS_createPath(A,"bat",!0,!0),Ug.FS_createPath(A,"bnt",!0,!0),Ug.FS_createPath(A,"ccs",!0,!0),Ug.FS_createPath(A,"cel",!0,!0),Ug.FS_createPath(A,"cus",!0,!0),Ug.FS_createPath(A,"dra",!0,!0),Ug.FS_createPath(A,"esx",!0,!0),Ug.FS_createPath(A,"gmq",!0,!0),Ug.FS_createPath(A,"gmw",!0,!0),Ug.FS_createPath(A,"grk",!0,!0),Ug.FS_createPath(A,"inc",!0,!0),Ug.FS_createPath(A,"ine",!0,!0),Ug.FS_createPath(A,"ira",!0,!0),Ug.FS_createPath(A,"iro",!0,!0),Ug.FS_createPath(A,"itc",!0,!0),Ug.FS_createPath(A,"jpx",!0,!0),Ug.FS_createPath(A,"map",!0,!0),Ug.FS_createPath(A,"miz",!0,!0),Ug.FS_createPath(A,"myn",!0,!0),Ug.FS_createPath(A,"poz",!0,!0),Ug.FS_createPath(A,"roa",!0,!0),Ug.FS_createPath(A,"sai",!0,!0),Ug.FS_createPath(A,"sem",!0,!0),Ug.FS_createPath(A,"sit",!0,!0),Ug.FS_createPath(A,"tai",!0,!0),Ug.FS_createPath(A,"trk",!0,!0),Ug.FS_createPath(A,"urj",!0,!0),Ug.FS_createPath(A,"zle",!0,!0),Ug.FS_createPath(A,"zls",!0,!0),Ug.FS_createPath(A,"zlw",!0,!0),Ug.FS_createPath(e,"voices",!0,!0),Ug.FS_createPath(t,"!v",!0,!0),Ug.FS_createPath(t,"mb",!0,!0),i.prototype={requests:{},open:function(e,A){this.name=A,this.requests[A]=this,Ug.addRunDependency("fp "+this.name)},send:function(){},onload:function(){var e=this.byteArray.subarray(this.start,this.end);this.finish(e)},finish:function(e){Ug.FS_createDataFile(this.name,null,e,!0,!0,!0),Ug.removeRunDependency("fp "+this.name),this.requests[this.name]=null}};for(var o=r.files,l=0;l<o.length;++l)new i(o[l].start,o[l].end,o[l].audio||0).open("GET",o[l].filename);function c(e){s(e,"Loading data file failed."),s(e.constructor.name===ArrayBuffer.name,"bad input to processPackageData");var A=new Uint8Array(e);i.prototype.byteArray=A;for(var t=r.files,n=0;n<t.length;++n)i.prototype.requests[t[n].filename].onload();Ug.removeRunDependency("datafile_js/espeakng.worker.data")}Ug.addRunDependency("datafile_js/espeakng.worker.data"),a?(c(a),a=null):n=c}(async()=>{const e=function(e){if("boolean"==typeof Zg&&Zg){var A=Buffer.from(e,"base64");return new Uint8Array(A.buffer,A.byteOffset,A.byteLength)}try{for(var t=Xg(e),r=new Uint8Array(t.length),n=0;n<t.length;++n)r[n]=t.charCodeAt(n);return r}catch(e){throw console.error(Xg),console.error(e),new Error("Converting base64 string to bytes failed.")}}(""),A=new Blob([e]).stream().pipeThrough(new DecompressionStream("gzip")),t=[];for await(const e of A)t.push(e);const r=await new Blob(t).arrayBuffer();n?(n(r),n=null):a=r})(),Ug.calledRun?s():(Ug.preRun||(Ug.preRun=[]),Ug.preRun.push(s))}({files:[{filename:e+"/en_dict",start:0,end:167064},{filename:e+"/intonations",start:167064,end:169104},{filename:A+"/aav/vi",start:169104,end:169215},{filename:A+"/aav/vi-VN-x-central",start:169215,end:169358},{filename:A+"/aav/vi-VN-x-south",start:169358,end:169500},{filename:A+"/art/eo",start:169500,end:169541},{filename:A+"/art/ia",start:169541,end:169570},{filename:A+"/art/io",start:169570,end:169620},{filename:A+"/art/jbo",start:169620,end:169689},{filename:A+"/art/lfn",start:169689,end:169824},{filename:A+"/art/piqd",start:169824,end:169880},{filename:A+"/art/py",start:169880,end:170020},{filename:A+"/art/qdb",start:170020,end:170077},{filename:A+"/art/qya",start:170077,end:170250},{filename:A+"/art/sjn",start:170250,end:170425},{filename:A+"/azc/nci",start:170425,end:170539},{filename:A+"/bat/lt",start:170539,end:170567},{filename:A+"/bat/ltg",start:170567,end:170879},{filename:A+"/bat/lv",start:170879,end:171108},{filename:A+"/bnt/sw",start:171108,end:171149},{filename:A+"/bnt/tn",start:171149,end:171191},{filename:A+"/ccs/ka",start:171191,end:171315},{filename:A+"/cel/cy",start:171315,end:171352},{filename:A+"/cel/ga",start:171352,end:171418},{filename:A+"/cel/gd",start:171418,end:171469},{filename:A+"/cus/om",start:171469,end:171508},{filename:A+"/dra/kn",start:171508,end:171563},{filename:A+"/dra/ml",start:171563,end:171620},{filename:A+"/dra/ta",start:171620,end:171671},{filename:A+"/dra/te",start:171671,end:171741},{filename:A+"/esx/kl",start:171741,end:171771},{filename:A+"/eu",start:171771,end:171825},{filename:A+"/gmq/da",start:171825,end:171868},{filename:A+"/gmq/is",start:171868,end:171895},{filename:A+"/gmq/nb",start:171895,end:171982},{filename:A+"/gmq/sv",start:171982,end:172007},{filename:A+"/gmw/af",start:172007,end:172130},{filename:A+"/gmw/de",start:172130,end:172172},{filename:A+"/gmw/en",start:172172,end:172312},{filename:A+"/gmw/en-029",start:172312,end:172647},{filename:A+"/gmw/en-GB-scotland",start:172647,end:172942},{filename:A+"/gmw/en-GB-x-gbclan",start:172942,end:173180},{filename:A+"/gmw/en-GB-x-gbcwmd",start:173180,end:173368},{filename:A+"/gmw/en-GB-x-rp",start:173368,end:173617},{filename:A+"/gmw/en-US",start:173617,end:173874},{filename:A+"/gmw/en-US-nyc",start:173874,end:174145},{filename:A+"/gmw/lb",start:174145,end:174176},{filename:A+"/gmw/nl",start:174176,end:174199},{filename:A+"/grk/el",start:174199,end:174222},{filename:A+"/grk/grc",start:174222,end:174321},{filename:A+"/inc/as",start:174321,end:174363},{filename:A+"/inc/bn",start:174363,end:174388},{filename:A+"/inc/bpy",start:174388,end:174427},{filename:A+"/inc/gu",start:174427,end:174469},{filename:A+"/inc/hi",start:174469,end:174492},{filename:A+"/inc/kok",start:174492,end:174518},{filename:A+"/inc/mr",start:174518,end:174559},{filename:A+"/inc/ne",start:174559,end:174596},{filename:A+"/inc/or",start:174596,end:174635},{filename:A+"/inc/pa",start:174635,end:174660},{filename:A+"/inc/sd",start:174660,end:174726},{filename:A+"/inc/si",start:174726,end:174781},{filename:A+"/inc/ur",start:174781,end:174875},{filename:A+"/ine/hy",start:174875,end:174936},{filename:A+"/ine/hyw",start:174936,end:175301},{filename:A+"/ine/sq",start:175301,end:175404},{filename:A+"/ira/fa",start:175404,end:175494},{filename:A+"/ira/fa-Latn",start:175494,end:175763},{filename:A+"/ira/ku",start:175763,end:175803},{filename:A+"/iro/chr",start:175803,end:176372},{filename:A+"/itc/la",start:176372,end:176669},{filename:A+"/jpx/ja",start:176669,end:176721},{filename:A+"/ko",start:176721,end:176772},{filename:A+"/map/haw",start:176772,end:176814},{filename:A+"/miz/mto",start:176814,end:176997},{filename:A+"/myn/quc",start:176997,end:177207},{filename:A+"/poz/id",start:177207,end:177341},{filename:A+"/poz/mi",start:177341,end:177708},{filename:A+"/poz/ms",start:177708,end:178138},{filename:A+"/qu",start:178138,end:178226},{filename:A+"/roa/an",start:178226,end:178253},{filename:A+"/roa/ca",start:178253,end:178278},{filename:A+"/roa/es",start:178278,end:178341},{filename:A+"/roa/es-419",start:178341,end:178508},{filename:A+"/roa/fr",start:178508,end:178587},{filename:A+"/roa/fr-BE",start:178587,end:178671},{filename:A+"/roa/fr-CH",start:178671,end:178757},{filename:A+"/roa/ht",start:178757,end:178897},{filename:A+"/roa/it",start:178897,end:179006},{filename:A+"/roa/pap",start:179006,end:179068},{filename:A+"/roa/pt",start:179068,end:179163},{filename:A+"/roa/pt-BR",start:179163,end:179272},{filename:A+"/roa/ro",start:179272,end:179298},{filename:A+"/sai/gn",start:179298,end:179345},{filename:A+"/sem/am",start:179345,end:179386},{filename:A+"/sem/ar",start:179386,end:179436},{filename:A+"/sem/he",start:179436,end:179476},{filename:A+"/sem/mt",start:179476,end:179517},{filename:A+"/sem/ti",start:179517,end:179610},{filename:A+"/sit/cmn",start:179610,end:180296},{filename:A+"/sit/cmn-Latn-pinyin",start:180296,end:180457},{filename:A+"/sit/hak",start:180457,end:180585},{filename:A+"/sit/my",start:180585,end:180641},{filename:A+"/sit/yue",start:180641,end:180835},{filename:A+"/sit/yue-Latn-jyutping",start:180835,end:181048},{filename:A+"/tai/shn",start:181048,end:181140},{filename:A+"/tai/th",start:181140,end:181177},{filename:A+"/trk/az",start:181177,end:181222},{filename:A+"/trk/ba",start:181222,end:181247},{filename:A+"/trk/cv",start:181247,end:181287},{filename:A+"/trk/kk",start:181287,end:181327},{filename:A+"/trk/ky",start:181327,end:181370},{filename:A+"/trk/nog",start:181370,end:181409},{filename:A+"/trk/tk",start:181409,end:181434},{filename:A+"/trk/tr",start:181434,end:181459},{filename:A+"/trk/tt",start:181459,end:181482},{filename:A+"/trk/ug",start:181482,end:181506},{filename:A+"/trk/uz",start:181506,end:181545},{filename:A+"/urj/et",start:181545,end:181782},{filename:A+"/urj/fi",start:181782,end:182019},{filename:A+"/urj/hu",start:182019,end:182092},{filename:A+"/urj/smj",start:182092,end:182137},{filename:A+"/zle/be",start:182137,end:182189},{filename:A+"/zle/ru",start:182189,end:182246},{filename:A+"/zle/ru-LV",start:182246,end:182526},{filename:A+"/zle/ru-cl",start:182526,end:182617},{filename:A+"/zle/uk",start:182617,end:182714},{filename:A+"/zls/bg",start:182714,end:182825},{filename:A+"/zls/bs",start:182825,end:183055},{filename:A+"/zls/hr",start:183055,end:183317},{filename:A+"/zls/mk",start:183317,end:183345},{filename:A+"/zls/sl",start:183345,end:183388},{filename:A+"/zls/sr",start:183388,end:183638},{filename:A+"/zlw/cs",start:183638,end:183661},{filename:A+"/zlw/pl",start:183661,end:183699},{filename:A+"/zlw/sk",start:183699,end:183723},{filename:e+"/phondata",start:183723,end:734147},{filename:e+"/phonindex",start:734147,end:773403},{filename:e+"/phontab",start:773403,end:829491},{filename:t+"/!v/Alex",start:829491,end:829619},{filename:t+"/!v/Alicia",start:829619,end:830093},{filename:t+"/!v/Andrea",start:830093,end:830450},{filename:t+"/!v/Andy",start:830450,end:830770},{filename:t+"/!v/Annie",start:830770,end:831085},{filename:t+"/!v/AnxiousAndy",start:831085,end:831446},{filename:t+"/!v/Demonic",start:831446,end:835304},{filename:t+"/!v/Denis",start:835304,end:835609},{filename:t+"/!v/Diogo",start:835609,end:835988},{filename:t+"/!v/Gene",start:835988,end:836269},{filename:t+"/!v/Gene2",start:836269,end:836552},{filename:t+"/!v/Henrique",start:836552,end:836933},{filename:t+"/!v/Hugo",start:836933,end:837311},{filename:t+"/!v/Jacky",start:837311,end:837578},{filename:t+"/!v/Lee",start:837578,end:837916},{filename:t+"/!v/Marco",start:837916,end:838383},{filename:t+"/!v/Mario",start:838383,end:838653},{filename:t+"/!v/Michael",start:838653,end:838923},{filename:t+"/!v/Mike",start:838923,end:839035},{filename:t+"/!v/Mr serious",start:839035,end:842228},{filename:t+"/!v/Nguyen",start:842228,end:842508},{filename:t+"/!v/Reed",start:842508,end:842710},{filename:t+"/!v/RicishayMax",start:842710,end:842943},{filename:t+"/!v/RicishayMax2",start:842943,end:843378},{filename:t+"/!v/RicishayMax3",start:843378,end:843813},{filename:t+"/!v/Storm",start:843813,end:844233},{filename:t+"/!v/Tweaky",start:844233,end:847422},{filename:t+"/!v/UniRobot",start:847422,end:847839},{filename:t+"/!v/adam",start:847839,end:847914},{filename:t+"/!v/anika",start:847914,end:848407},{filename:t+"/!v/anikaRobot",start:848407,end:848919},{filename:t+"/!v/announcer",start:848919,end:849219},{filename:t+"/!v/antonio",start:849219,end:849600},{filename:t+"/!v/aunty",start:849600,end:849958},{filename:t+"/!v/belinda",start:849958,end:850298},{filename:t+"/!v/benjamin",start:850298,end:850499},{filename:t+"/!v/boris",start:850499,end:850723},{filename:t+"/!v/caleb",start:850723,end:850780},{filename:t+"/!v/croak",start:850780,end:850873},{filename:t+"/!v/david",start:850873,end:850985},{filename:t+"/!v/ed",start:850985,end:851272},{filename:t+"/!v/edward",start:851272,end:851423},{filename:t+"/!v/edward2",start:851423,end:851575},{filename:t+"/!v/f1",start:851575,end:851899},{filename:t+"/!v/f2",start:851899,end:852256},{filename:t+"/!v/f3",start:852256,end:852631},{filename:t+"/!v/f4",start:852631,end:852981},{filename:t+"/!v/f5",start:852981,end:853413},{filename:t+"/!v/fast",start:853413,end:853562},{filename:t+"/!v/grandma",start:853562,end:853825},{filename:t+"/!v/grandpa",start:853825,end:854081},{filename:t+"/!v/gustave",start:854081,end:854334},{filename:t+"/!v/ian",start:854334,end:857502},{filename:t+"/!v/iven",start:857502,end:857763},{filename:t+"/!v/iven2",start:857763,end:858042},{filename:t+"/!v/iven3",start:858042,end:858304},{filename:t+"/!v/iven4",start:858304,end:858565},{filename:t+"/!v/john",start:858565,end:861751},{filename:t+"/!v/kaukovalta",start:861751,end:862112},{filename:t+"/!v/klatt",start:862112,end:862150},{filename:t+"/!v/klatt2",start:862150,end:862188},{filename:t+"/!v/klatt3",start:862188,end:862227},{filename:t+"/!v/klatt4",start:862227,end:862266},{filename:t+"/!v/klatt5",start:862266,end:862305},{filename:t+"/!v/klatt6",start:862305,end:862344},{filename:t+"/!v/linda",start:862344,end:862694},{filename:t+"/!v/m1",start:862694,end:863029},{filename:t+"/!v/m2",start:863029,end:863293},{filename:t+"/!v/m3",start:863293,end:863593},{filename:t+"/!v/m4",start:863593,end:863883},{filename:t+"/!v/m5",start:863883,end:864145},{filename:t+"/!v/m6",start:864145,end:864333},{filename:t+"/!v/m7",start:864333,end:864587},{filename:t+"/!v/m8",start:864587,end:864871},{filename:t+"/!v/marcelo",start:864871,end:865122},{filename:t+"/!v/max",start:865122,end:865347},{filename:t+"/!v/michel",start:865347,end:865751},{filename:t+"/!v/miguel",start:865751,end:866133},{filename:t+"/!v/mike2",start:866133,end:866321},{filename:t+"/!v/norbert",start:866321,end:869510},{filename:t+"/!v/pablo",start:869510,end:872652},{filename:t+"/!v/paul",start:872652,end:872936},{filename:t+"/!v/pedro",start:872936,end:873288},{filename:t+"/!v/quincy",start:873288,end:873642},{filename:t+"/!v/rob",start:873642,end:873907},{filename:t+"/!v/robert",start:873907,end:874181},{filename:t+"/!v/robosoft",start:874181,end:874632},{filename:t+"/!v/robosoft2",start:874632,end:875086},{filename:t+"/!v/robosoft3",start:875086,end:875541},{filename:t+"/!v/robosoft4",start:875541,end:875988},{filename:t+"/!v/robosoft5",start:875988,end:876433},{filename:t+"/!v/robosoft6",start:876433,end:876720},{filename:t+"/!v/robosoft7",start:876720,end:877130},{filename:t+"/!v/robosoft8",start:877130,end:877373},{filename:t+"/!v/sandro",start:877373,end:877903},{filename:t+"/!v/shelby",start:877903,end:878183},{filename:t+"/!v/steph",start:878183,end:878547},{filename:t+"/!v/steph2",start:878547,end:878914},{filename:t+"/!v/steph3",start:878914,end:879291},{filename:t+"/!v/travis",start:879291,end:879674},{filename:t+"/!v/victor",start:879674,end:879927},{filename:t+"/!v/whisper",start:879927,end:880113},{filename:t+"/!v/whisperf",start:880113,end:880505},{filename:t+"/!v/zac",start:880505,end:880780},{filename:t+"/mb/mb-af1",start:880780,end:880868},{filename:t+"/mb/mb-af1-en",start:880868,end:880951},{filename:t+"/mb/mb-ar1",start:880951,end:881035},{filename:t+"/mb/mb-ar2",start:881035,end:881119},{filename:t+"/mb/mb-br1",start:881119,end:881251},{filename:t+"/mb/mb-br2",start:881251,end:881387},{filename:t+"/mb/mb-br3",start:881387,end:881519},{filename:t+"/mb/mb-br4",start:881519,end:881655},{filename:t+"/mb/mb-ca1",start:881655,end:881760},{filename:t+"/mb/mb-ca2",start:881760,end:881865},{filename:t+"/mb/mb-cn1",start:881865,end:881957},{filename:t+"/mb/mb-cr1",start:881957,end:882068},{filename:t+"/mb/mb-cz1",start:882068,end:882138},{filename:t+"/mb/mb-cz2",start:882138,end:882220},{filename:t+"/mb/mb-de1",start:882220,end:882364},{filename:t+"/mb/mb-de1-en",start:882364,end:882460},{filename:t+"/mb/mb-de2",start:882460,end:882588},{filename:t+"/mb/mb-de2-en",start:882588,end:882668},{filename:t+"/mb/mb-de3",start:882668,end:882767},{filename:t+"/mb/mb-de3-en",start:882767,end:882863},{filename:t+"/mb/mb-de4",start:882863,end:882992},{filename:t+"/mb/mb-de4-en",start:882992,end:883073},{filename:t+"/mb/mb-de5",start:883073,end:883309},{filename:t+"/mb/mb-de5-en",start:883309,end:883399},{filename:t+"/mb/mb-de6",start:883399,end:883521},{filename:t+"/mb/mb-de6-en",start:883521,end:883595},{filename:t+"/mb/mb-de6-grc",start:883595,end:883678},{filename:t+"/mb/mb-de7",start:883678,end:883828},{filename:t+"/mb/mb-de8",start:883828,end:883899},{filename:t+"/mb/mb-ee1",start:883899,end:883996},{filename:t+"/mb/mb-en1",start:883996,end:884127},{filename:t+"/mb/mb-es1",start:884127,end:884241},{filename:t+"/mb/mb-es2",start:884241,end:884349},{filename:t+"/mb/mb-es3",start:884349,end:884453},{filename:t+"/mb/mb-es4",start:884453,end:884541},{filename:t+"/mb/mb-fr1",start:884541,end:884707},{filename:t+"/mb/mb-fr1-en",start:884707,end:884811},{filename:t+"/mb/mb-fr2",start:884811,end:884914},{filename:t+"/mb/mb-fr3",start:884914,end:885014},{filename:t+"/mb/mb-fr4",start:885014,end:885141},{filename:t+"/mb/mb-fr4-en",start:885141,end:885248},{filename:t+"/mb/mb-fr5",start:885248,end:885348},{filename:t+"/mb/mb-fr6",start:885348,end:885448},{filename:t+"/mb/mb-fr7",start:885448,end:885531},{filename:t+"/mb/mb-gr1",start:885531,end:885625},{filename:t+"/mb/mb-gr2",start:885625,end:885719},{filename:t+"/mb/mb-gr2-en",start:885719,end:885807},{filename:t+"/mb/mb-hb1",start:885807,end:885875},{filename:t+"/mb/mb-hb2",start:885875,end:885958},{filename:t+"/mb/mb-hu1",start:885958,end:886060},{filename:t+"/mb/mb-hu1-en",start:886060,end:886157},{filename:t+"/mb/mb-ic1",start:886157,end:886245},{filename:t+"/mb/mb-id1",start:886245,end:886346},{filename:t+"/mb/mb-in1",start:886346,end:886415},{filename:t+"/mb/mb-in2",start:886415,end:886500},{filename:t+"/mb/mb-ir1",start:886500,end:887253},{filename:t+"/mb/mb-it1",start:887253,end:887337},{filename:t+"/mb/mb-it2",start:887337,end:887424},{filename:t+"/mb/mb-it3",start:887424,end:887566},{filename:t+"/mb/mb-it4",start:887566,end:887711},{filename:t+"/mb/mb-jp1",start:887711,end:887782},{filename:t+"/mb/mb-jp2",start:887782,end:887883},{filename:t+"/mb/mb-jp3",start:887883,end:887970},{filename:t+"/mb/mb-la1",start:887970,end:888053},{filename:t+"/mb/mb-lt1",start:888053,end:888140},{filename:t+"/mb/mb-lt2",start:888140,end:888227},{filename:t+"/mb/mb-ma1",start:888227,end:888325},{filename:t+"/mb/mb-mx1",start:888325,end:888445},{filename:t+"/mb/mb-mx2",start:888445,end:888565},{filename:t+"/mb/mb-nl1",start:888565,end:888634},{filename:t+"/mb/mb-nl2",start:888634,end:888730},{filename:t+"/mb/mb-nl2-en",start:888730,end:888821},{filename:t+"/mb/mb-nl3",start:888821,end:888906},{filename:t+"/mb/mb-nz1",start:888906,end:888974},{filename:t+"/mb/mb-pl1",start:888974,end:889073},{filename:t+"/mb/mb-pl1-en",start:889073,end:889155},{filename:t+"/mb/mb-pt1",start:889155,end:889286},{filename:t+"/mb/mb-ro1",start:889286,end:889373},{filename:t+"/mb/mb-ro1-en",start:889373,end:889454},{filename:t+"/mb/mb-sw1",start:889454,end:889552},{filename:t+"/mb/mb-sw1-en",start:889552,end:889645},{filename:t+"/mb/mb-sw2",start:889645,end:889747},{filename:t+"/mb/mb-sw2-en",start:889747,end:889846},{filename:t+"/mb/mb-tl1",start:889846,end:889931},{filename:t+"/mb/mb-tr1",start:889931,end:890016},{filename:t+"/mb/mb-tr2",start:890016,end:890130},{filename:t+"/mb/mb-us1",start:890130,end:890300},{filename:t+"/mb/mb-us2",start:890300,end:890478},{filename:t+"/mb/mb-us3",start:890478,end:890658},{filename:t+"/mb/mb-vz1",start:890658,end:890802}]})}();var qg=Object.assign({},Ug),Jg="./this.program",_g=Ug.print||console.log.bind(console),$g=Ug.printErr||console.warn.bind(console);Object.assign(Ug,qg),qg=null,Ug.arguments&&Ug.arguments,Ug.thisProgram&&(Jg=Ug.thisProgram),Ug.quit&&Ug.quit,Ug.wasmBinary&&Ug.wasmBinary,Ug.noExitRuntime;var eu,Au={Memory:function(e){this.buffer=new ArrayBuffer(65536*e.initial)},Module:function(e){},Instance:function(e,A){this.exports=function(e){for(var A,t=new Uint8Array(123),r=25;r>=0;--r)t[48+r]=52+r,t[65+r]=r,t[97+r]=26+r;function n(e,A,r){for(var n,a,s=0,i=A,o=r.length,l=A+(3*o>>2)-("="==r[o-2])-("="==r[o-1]);s<o;s+=4)n=t[r.charCodeAt(s+1)],a=t[r.charCodeAt(s+2)],e[i++]=t[r.charCodeAt(s)]<<2|n>>4,i<l&&(e[i++]=n<<4|a>>2),i<l&&(e[i++]=a<<6|t[r.charCodeAt(s+3)])}t[43]=62,t[47]=63;var a=new ArrayBuffer(16),s=new Int32Array(a),i=new Float32Array(a),o=new Float64Array(a);function l(e){return s[e]}function c(e,A){s[e]=A}function g(){return o[0]}function u(e){o[0]=e}function d(){throw new Error("abort")}function f(e){i[2]=e}return function(e){var t=e.a,r=t.a.buffer,a=new Int8Array(r),s=new Int16Array(r),i=new Int32Array(r),o=new Uint8Array(r),p=new Uint16Array(r),h=new Uint32Array(r),m=new Float64Array(r),C=Math.imul,b=Math.fround,I=Math.abs,w=Math.clz32,k=Math.min,x=Math.floor,v=Math.ceil,B=t.b,y=t.c,E=t.d,M=t.e,G=t.f,D=t.g,Q=t.h,T=t.i,P=t.j,z=t.k,F=t.l,S=t.m,N=t.n,O=t.o,L=t.p,Y=t.q,H=t.r,R=t.s,j=t.t,V=t.u,W=294656,U=0,K=0,Z=0;function X(e){var A,t=0,r=0,n=0,d=0,f=0,b=0,w=0,k=0,x=0,v=0,B=0,y=0,E=0,M=0,G=0,D=0,Q=0,T=0,P=0,z=0,F=0,S=0,N=0,O=0,L=0,Y=0,H=0,R=0,j=0,V=0,U=0,K=0,Z=0,X=0,J=0,_=0,Ae=0,te=0,re=0,oe=0,ce=0,de=0,fe=0,pe=0,he=0,me=0,Ce=0,be=0,Ie=0,we=0,ke=0,xe=0,ve=0;if(W=A=W-16|0,2!=(0|e))if(e=i[33283],i[e>>2]!=i[e+4>>2]){if(qr(i[i[32972]+60>>2]),M=i[47192],oe=A+12|0,he=A+8|0,W=w=W-6832|0,i[w+6816>>2]=0,i[w+6808>>2]=32,i[w+6800>>2]=0,M){i[47351]=0,i[47350]=0,i[47352]=0,a[189076]=0,e=i[33284],i[47353]=(0|e)>0?e:0,i[47355]=i[47354]+1,kA(O=w+5184|0,0,1600),Ae=w+6800|0,W=f=W-2608|0,i[f+2156>>2]=32,i[f+2148>>2]=0,o[134760]&&(a[190280]=0,a[134760]=0),i[M+8216>>2]=0,i[M+8220>>2]=0,i[M+288>>2]=0,i[w+780>>2]=0,a[189360]=0;e:if(e=i[33691])i[f+2152>>2]=e;else{A:{t:{if(!(t=i[33285])){if(e=i[33283],i[e>>2]==i[e+4>>2]){i[f+2152>>2]=0;break e}if(!(t=i[33285]))break t}i[33285]=0;break A}i[33284]=i[33284]+1,e=i[33283],t=0|Tn[i[e+8>>2]](e)}i[f+2152>>2]=t}Ie=O+2|0,F=32;e:{for(;;){z=F;A:{t:{r:{if(t=i[33691],(n=i[33285])?e=0:(n=i[33285],e=i[33283],e=i[e>>2]==i[e+4>>2]),t|!e|n||!(i[32524]<0)){if(!Br(i[f+2156>>2])){if((n=(0|(e=i[49828]))>0)&(0|(t=e))<(0|(e=i[33284])))break r;if(!((0|(t=i[49845]))<=0|(0|e)<(0|t))){i[49845]=0,a[134760]=1,i[33285]=i[f+2152>>2],r=16384;break e}}F=i[f+2156>>2],i[f+2156>>2]=i[f+2152>>2];n:{a:{s:{i:{o:{if((0|(t=i[32524]))>=0){if(o[t+134736|0])break o;i[32524]=-1}if(t=i[33285])break s;if(e=i[33283],i[e>>2]!=i[e+4>>2])break i;t=32;break n}i[33691]|t||(i[f+2156>>2]=a[134736],t=1),i[32524]=t+1,t=a[t+134736|0];break n}if(!(t=i[33285]))break a}i[33285]=0;break n}i[33284]=i[33284]+1,e=i[33283],t=0|Tn[i[e+8>>2]](e)}i[f+2152>>2]=t,i[33691]=0;n:if(!(k|!i[47203])){a:{if(60!=(0|(e=i[f+2156>>2]))){if(35!=(0|t)&t-97>>>0>25|38!=(0|e))break n;for(n=i[33285],d=0;;){s:{if(i[f+2156>>2]=t,!n){if(e=i[33283],i[e>>2]==i[e+4>>2])break s;t=i[f+2156>>2]}if(!(!((t=!!(0|Br(t)))|35==(0|(e=i[f+2156>>2])))|d>>>0>19)){a[(f+112|0)+d|0]=e,d=d+1|0,(t=i[33285])?(i[33285]=0,n=0):(i[33284]=i[33284]+1,e=i[33283],t=0|Tn[i[e+8>>2]](e),n=i[33285]);continue}}break}a[(f+112|0)+d|0]=0;s:{i:{if(!(t=i[33285])){if(t=0,e=i[33283],i[e>>2]==i[e+4>>2])break s;if(!(t=i[33285]))break i}i[33285]=0;break s}i[33284]=i[33284]+1,e=i[33283],t=0|Tn[i[e+8>>2]](e)}i[f+2152>>2]=t,i[f+100>>2]=i[f+2156>>2],i[f+104>>2]=t,i[f+96>>2]=f+112,Bt(134736,84252,f+96|0);s:{if(59==i[f+2156>>2]){d=f+2156|0,E=f+2152|0,W=n=W-32|0;i:if(35!=o[0|(t=f+112|0)])e=-1,-1!=(0|(t=Qr(130752,t)))&&(i[d>>2]=t,i[E>>2]||(i[E>>2]=32),e=t);else{if(120==o[0|(e=t+1|0)]){i[n>>2]=d,e=ae(t+2|0,90005,n);break i}i[n+16>>2]=d,e=ae(e,90070,n+16|0)}if(W=n+32|0,(0|e)>0)break s}i[32524]=0,i[f+2156>>2]=38,i[f+2152>>2]=32;break n}if((0|(e=i[f+2156>>2]))>32)break n;if(!(t=i[33692]-20|0)|16==(0|t))break a;break n}if(47!=(0|t)&&!yr(t)&&63!=(0|(e=i[f+2152>>2]))&&33!=(0|e))break n;if((0|(e=i[f+2148>>2]))>780){i[33691]=i[f+2156>>2],a[0|(e=e+189424|0)]=32,a[e+1|0]=0,i[33285]=i[f+2152>>2],r=16384;break e}for(E=i[33285],d=0,t=i[f+2152>>2];i[f+2156>>2]=t,n=0,E||(e=i[33283],n=i[e>>2]==i[e+4>>2],t=i[f+2156>>2]),!(62==(0|t)|n|d>>>0>499);)i[(f+144|0)+(d<<2)>>2]=t,d=d+1|0,(t=i[33285])?(E=0,i[33285]=0):(i[33284]=i[33284]+1,e=i[33283],t=0|Tn[i[e+8>>2]](e),E=i[33285]);i[(n=f+144|0)+(d<<2)>>2]=0,i[f+2152>>2]=32,S=f+2148|0,z=i[32525],t=0,W=P=W-560|0;s:if(Cr(n,84333,3)&&Cr(n,84477,4)){for(e=(n+(Ur(n)<<2)|0)-4|0,47==(0|(L=i[e>>2]))&&(i[e>>2]=32);;){if(e=i[n+(t<<2)>>2]){if(er(e))e=t;else if(a[(P+512|0)+t|0]=nr(e<<24>>24),e=39,39!=(0|(t=t+1|0)))continue}else e=t;break}if(a[(P+512|0)+e|0]=0,47!=o[P+512|0]){if(16!=(0|(E=Qr(130480,P+512|0)))&&(t=i[S>>2],i[S>>2]=t+1,a[t+189424|0]=32),47==(0|L)&&(t=0,!(502241>>>E&1)))break s}else 16!=(0|(t=Qr(130480,P+512|1)))&&(d=i[S>>2],i[S>>2]=d+1,a[d+189424|0]=32),E=t+32|0;d=n+(e<<2)|0,e=i[33708],k=C(e,76)+133076|0,t=262174;i:{o:{l:{c:switch(E-1|0){case 33:g:if(!((0|e)<=1)){for(;;){if(2==i[C(t=e-1|0,76)+133152>>2])break g;if(i[33708]=t,n=e>>>0>2,e=t,!n)break}e=1}t=Ee(d,34,e);break s;case 32:g:if(!((0|e)<=1)){for(;;){if(1==i[C(t=e-1|0,76)+133152>>2])break g;if(i[33708]=t,n=e>>>0>2,e=t,!n)break}e=1}t=Ee(d,33,e)+524328|0;break s;case 9:(0|(t=i[33709]))<=18&&(i[33709]=t+1),i[(e=134912+(k=t<<6)|0)>>2]=10,i[e+4>>2]=-1,i[e+8>>2]=-1,i[e+52>>2]=-1,i[e+56>>2]=-1,i[e+44>>2]=-1,i[e+48>>2]=-1,i[e+36>>2]=-1,i[e+40>>2]=-1,i[e+28>>2]=-1,i[e+32>>2]=-1,i[e+20>>2]=-1,i[e+24>>2]=-1,i[e+12>>2]=-1,i[e+16>>2]=-1,i[e+60>>2]=-1,e=NA(d,88301),n=NA(d,88390),Zt(e,88479)?Zt(e,88528)||(i[28+(134912+(t<<6)|0)>>2]=ht(n,130224)):i[24+(k+134912|0)>>2]=ht(n,130192),Re(S,i[33709]);break l;case 2:for((0|(e=i[33709]))<=18&&(i[33709]=e+1),i[(e=134912+(me=e<<6)|0)>>2]=3,i[e+4>>2]=-1,i[e+8>>2]=-1,i[e+52>>2]=-1,i[e+56>>2]=-1,i[e+44>>2]=-1,i[e+48>>2]=-1,i[e+36>>2]=-1,i[e+40>>2]=-1,i[e+28>>2]=-1,i[e+32>>2]=-1,i[e+20>>2]=-1,i[e+24>>2]=-1,i[e+12>>2]=-1,i[e+16>>2]=-1,i[e+60>>2]=-1,U=1;;){if(n=NA(d,i[130448+(K=U<<2)>>2])){L=0,e=i[K+131072>>2];g:if(E=i[e>>2])for(;;){for(t=0;k=a[t+E|0],(z=i[(t<<2)+n>>2])&&(t=t+1|0,(0|k)==(0|z)););u:switch(z-34|0){case 0:case 5:if(!k)break g}if(!(E=i[e+((L=L+1|0)<<3)>>2]))break}we=K+(me+134912|0)|0;g:if((0|(e=i[4+(e+(L<<3)|0)>>2]))>=0)e=(0|C(e,i[4+(K+134912|0)>>2]))/100|0;else{for(;n=(e=n)+4|0,er(i[e>>2]););for(Ce=43==i[e>>2],n=((be=45==i[(e=e+(Ce<<2)|0)>>2])<<2)+e|0,L=P+96|0,W=E=(W=k=W-16|0)-224|0,kA(E+16|0,0,144),e=E+160|4,i[E+24>>2]=e,i[E+60>>2]=e,i[E+92>>2]=-1,i[E+64>>2]=60,i[E+20>>2]=e,i[E+48>>2]=19,t=n;t=(e=t)+4|0,z=(z=i[e>>2])?Pr(124960,z):0;);i[E+100>>2]=e,Vt(t=E+16|0,0,0),ee(E,t,1,1),t=i[E+8>>2],ke=i[E+12>>2],z=i[E>>2],xe=i[E+4>>2],L&&(ve=L,L=i[E+136>>2]+(i[E+20>>2]-i[E+60>>2]|0)|0,i[ve>>2]=L?e+(L<<2)|0:n),i[(e=k)+8>>2]=t,i[e+12>>2]=ke,i[e>>2]=z,i[e+4>>2]=xe,W=E+224|0,T=tA(i[e>>2],i[e+4>>2],i[e+8>>2],i[e+12>>2]),W=e+16|0;u:{t=100;d:if((0|(e=n))!=(0|(n=i[P+96>>2]))){t=be?-1:Ce;f:{if(115!=(0|(e=i[n>>2]))){if(37!=(0|e))break f;if(I(T=t?+(0|t)*T+100:T)<2147483648){t=~~T;break d}t=-2147483648;break d}if(116==i[n+4>>2]){u(+(j=T*+(0|t)/12)),e=0|l(1),l(0);p:{if((t=(e=e>>>20&2047)-969|0)>>>0>=63){if(T=j+1,(0|t)<0)break p;if(u(+j),t=0|l(1),n=0|l(0),!(e>>>0<1033)){if(T=0,!n&-1048576==(0|t))break p;if(T=j+1,e>>>0>=2047)break p;if((0|t)>0|(0|t)>=0){m[8+(e=W-16|0)>>3]=3105036184601418e216,T=3105036184601418e216*m[e+8>>3];break p}if(!(t>>>0<3230714880)){m[8+(e=W-16|0)>>3]=12882297539194267e-247,T=12882297539194267e-247*m[e+8>>3];break p}}k=e,e=!(n<<1)&-2129002496==(0|(e=t<<1|n>>>31))|e>>>0<2165964800?k:0}ce=(j=(T=j-((te=(T=m[14416])+j)-T))*T)*j*(T*m[14421]+m[14420]),j*=T*m[14419]+m[14418],T*=m[14417],u(+te),l(1),k=0|l(0),T=ce+(j+(T+m[115376+(n=k<<4&2032)>>3])),z=i[(n=n+115384|0)>>2],E=i[n+4>>2],n=(t=z)+(z=0)|0,t=(k<<13)+E|0,t=n>>>0<z>>>0?t+1|0:t,e?(c(0,0|n),c(1,0|t),T=(j=+g())*T+j):-2147483648&k?(c(0,0|n),c(1,t+1071644672|0),(T=(te=(j=+g())*T)+j)<1&&(i[8+(e=W-16|0)>>2]=0,i[e+12>>2]=1048576,m[e+8>>3]=22250738585072014e-324*m[e+8>>3],T=0==(T=(ce=T+1)+(te+(j-T)+(T+(1-ce)))+-1)?0:T),T*=22250738585072014e-324):(c(0,0|n),c(1,t+-1048576|0),T=(j=+g())*T+j,T+=T)}if(I(T*=100)<2147483648){t=~~T;break d}t=-2147483648;break d}}if(1!=(0|U))break u;if(t)t=100+(e=I(T=T*+(0|t)*100)<2147483648?~~T:-2147483648)|0;else{if(I(T*=100)<2147483648){t=~~T;break d}t=-2147483648}}e=(0|C(t,i[K+134848>>2]))/100|0;break g}e=I(T)<2147483648?~~T:-2147483648,t&&(e=i[K+134848>>2]+C(e,t)|0)}i[we+4>>2]=e}if(5==(0|(U=U+1|0)))break}Re(S,i[33709]);break l;case 11:(0|(t=i[33709]))<=18&&(i[33709]=t+1),i[(e=134912+(t<<6)|0)>>2]=12,i[e+4>>2]=-1,i[e+8>>2]=-1,i[e+52>>2]=-1,i[e+56>>2]=-1,i[e+44>>2]=-1,i[e+48>>2]=-1,i[e+36>>2]=-1,i[e+40>>2]=-1,i[e+28>>2]=-1,i[e+32>>2]=-1,i[e+20>>2]=-1,i[e+24>>2]=-1,i[e+12>>2]=-1,i[e+16>>2]=-1,i[e+60>>2]=-1,e=(e=NA(d,88658))?ht(e,130400):3,n=134912+(t<<6)|0,1!=i[i[47192]+148>>2]?(i[52+(134912+(t<<6)|0)>>2]=e,e=o[e+102776|0]):(i[20+(134912+(t<<6)|0)>>2]=o[e+102764|0],e=o[e+102770|0]),i[n+12>>2]=e,Re(S,i[33709]);break l;case 34:case 41:case 43:if(!((0|(e=i[33709]))<=0)){if(d=E-32|0,E=0,n=0,t=0,e>>>0>=4)for(k=-4&e,L=0;U=2|t,K=1|t,n=(0|d)==i[134912+((z=3|t)<<6)>>2]?z:(0|d)==i[134912+(U<<6)>>2]?U:(0|d)==i[134912+(K<<6)>>2]?K:(0|d)==i[134912+(t<<6)>>2]?t:n,t=t+4|0,(0|k)!=(0|(L=L+4|0)););if(k=3&e)for(;n=(0|d)==i[134912+(t<<6)>>2]?t:n,t=t+1|0,(0|k)!=(0|(E=E+1|0)););(0|n)<=0||(i[33709]=n,e=n)}Re(S,e);break l;case 7:if(e=NA(d,88741),t=NA(d,88860),1!=(0|ht(e,130176)))break l;e=i[S>>2],i[S>>2]=e+1,a[e+189424|0]=91,e=i[S>>2],i[S>>2]=e+1,a[e+189424|0]=91,e=ut((e=i[S>>2])+189424|0,t,800-e|0)+i[S>>2]|0,i[S>>2]=e+1,a[e+189424|0]=93,e=i[S>>2],i[S>>2]=e+1,a[e+189424|0]=93;break l;case 35:36==i[33692]&&(a[i[S>>2]+189424|0]=0,(n=Qr(131104,t=(e=i[33707])+189424|0))&&(i[S>>2]=Ft(n,t)+e)),e=i[S>>2],i[S>>2]=e+1,a[e+189424|0]=1,e=i[S>>2],i[S>>2]=e+1,a[e+189424|0]=89,i[33692]=0;break l;case 8:if(!(e=NA(d,89299)))break l;a[134824]=1,t=i[S>>2],i[S>>2]=ut(t+189424|0,e,800-t|0)+i[S>>2];break l;case 13:a[134824]=1;break l;case 40:case 45:a[134824]=0;break l;case 4:if(!(e=NA(d,89360)))break l;if(ut(P+352|0,e,160),o[P+352|0]&&!hr(199328,P+352|0)){a[134760]=1,a[199328]=0,t=16384;break s}if((0|(e=ur(P+352|0)))<0)break l;i[P+20>>2]=e,i[P+16>>2]=1,Bt(e=P+352|0,89460,P+16|0),rt(i[S>>2]+189424|0,e),i[S>>2]=i[S>>2]+jt(e);break l;case 10:(0|(t=i[33709]))<=18&&(i[33709]=t+1),i[(e=134912+(t<<6)|0)>>2]=11,i[e+4>>2]=-1,i[e+8>>2]=-1,i[e+52>>2]=-1,i[e+56>>2]=-1,i[e+44>>2]=-1,i[e+48>>2]=-1,i[e+36>>2]=-1,i[e+40>>2]=-1,i[e+28>>2]=-1,i[e+32>>2]=-1,i[e+20>>2]=-1,i[e+24>>2]=-1,i[e+12>>2]=-1,i[e+16>>2]=-1,i[e+60>>2]=-1;g:if(e=NA(d,89514)){if(ut(P+352|0,e,160),i[34441]){if((0|(e=ur(P+352|0)))<0)break g;if(0|Tn[i[34441]](1,e+i[33282]|0,z))break g;i[P+68>>2]=e,i[P+64>>2]=1,Bt(P+352|0,89658,P- -64|0)}else{if(!z|47==o[P+352|0]?e=lt(P+352|0):(i[P+48>>2]=z,i[P+52>>2]=P+352,Bt(e=P+96|0,89564,P+48|0),e=lt(e)),(0|e)<0)break g;i[P+36>>2]=e,i[P+32>>2]=1,Bt(P+352|0,89623,P+32|0)}e=P+352|0,rt(i[S>>2]+189424|0,e),i[S>>2]=i[S>>2]+jt(e),i[4+(134912+(t<<6)|0)>>2]=1}if(Re(S,i[33709]),47==(0|L)){KA(11,S),t=16384;break s}a[134772]=1,t=16384;break s;case 42:KA(43,S),a[134772]=0,t=16384;break s;case 12:g:{if(e=NA(d,89714)){if(t=16384,(k=(0|(e=ht(e,130336)))<0?2:e)>>>0<=2&&(e=i[S>>2],i[P+84>>2]=k,i[P+80>>2]=1,Bt(e+189424|0,89770,P+80|0),i[S>>2]=i[S>>2]+3,t=0),e=i[102784+(k<<2)>>2],!(n=NA(d,89907)))break g;break o}if(t=16384,n=NA(d,89907))break o;e=21;break i}if(k>>>0<3)break l;break i;case 0:(e=NA(d,89965))&&(ut(t=P+352|0,e,160),ur(t)),t=Ee(d,1,i[33708])?147456:0;break s;case 1:t=Ee(d,2,e)?147456:0;break s;case 5:t=0,6==i[k>>2]&&(t=Ee(d,38,e),e=i[33708]),t=524358+(Ee(d,6,e)|t)|0;break s;case 6:t=0,6==(0|(n=i[k>>2]))&&(t=Ee(d,38,e),n=i[k>>2]),7==(0|n)&&(t=Ee(d,39,i[33708])|t),t=524358+(t|Ee(d,7,i[33708]))|0;break s;case 37:if(t=524328,6!=i[k>>2])break s;t=Ee(d,38,e)+524328|0;break s;case 38:if(t=524358,6!=(-2&i[k>>2]))break s;t=Ee(d,39,e)+524358|0;break s;case 14:case 46:break s;case 3:break c;default:break l}e=NA(d,88893),t=NA(d,88992),n=NA(d,89153),d=ht(e,130272),t=ht(t,130320),e=$t(n,0),i[P>>2]=1,n=(0|e)<2?193:e- -64|0,t=64==(0|(e=1==(0|t)?19:d))?n:e,i[P+4>>2]=t,Bt(e=P+352|0,89230,P),rt(i[S>>2]+189424|0,e),e=i[S>>2]+jt(e)|0,i[S>>2]=e,i[33707]=e,i[33692]=t}t=0;break s}e=$t(n,1),n=i[33722],xr(1,i[33713]),(0|(e=(0|(n=(0|C(e,n))/100<<8))/(0|C(i[36429],10))|0))<=199&&(e=(0|n)/(0|C(i[36428],10))|0),t=t||16384}n=e>>>5|0,d=e,t=((e=(0|e)>4095)?n>>>0>=4095?4095:n:d)+(e?8388608|t:t)|0}if(W=P+560|0,t){if(e=i[f+2148>>2]+189424|0,a[0|e]=32,a[e+1|0]=0,!(131072&t)){r=t;break e}rt(189360,134784),r=t;break e}i[f+2156>>2]=32;s:{i:{if(!(t=i[33285])){if(k=0,e=i[33283],i[e>>2]==i[e+4>>2])continue;if(!(t=i[33285]))break i}i[33285]=0;break s}i[33284]=i[33284]+1,e=i[33283],t=0|Tn[i[e+8>>2]](e)}i[f+2152>>2]=t,k=0;continue}i[f+2156>>2]=e+57344}if(o[134824])continue;if(n=i[f+2156>>2],!(10!=(0|(e=i[f+2152>>2]))|-1!=i[47268])){16384==(0|(r=qe(n)))?(e=i[f+2148>>2],s[O+(e<<1)>>1]=i[33284]-i[47353],i[Ae>>2]=e,r=524328,e=Ft(i[f+2156>>2],e+189424|0)+i[f+2148>>2]|0):e=i[f+2148>>2],a[0|(e=e+189424|0)]=32,a[e+1|0]=0;break e}n:if(1==(0|n)){if(66!=(0|e)){if(86!=(0|e))break n;for(e=i[f+2148>>2],i[f+2148>>2]=e+1,a[e+189424|0]=0;;){a:{s:{i:{if(!(t=i[33285])){if(e=i[33283],i[e>>2]==i[e+4>>2])break a;if(!(t=i[33285]))break i}i[33285]=0;break s}i[33284]=i[33284]+1,e=i[33283],t=0|Tn[i[e+8>>2]](e)}if(i[f+2156>>2]=t,!(er(t)||(0|(e=i[f+2148>>2]))>=799)){i[f+2148>>2]=e+1,a[e+189424|0]=i[f+2156>>2];continue}}break}a[i[f+2148>>2]+189424|0]=0,r=147456;break e}t=i[f+2148>>2],a[0|(e=t+189424|0)]=32,a[e+1|0]=32,a[e+2|0]=32,a[e+3|0]=0,i[f+2148>>2]=t+3;a:{s:{i:{o:{l:{c:{if(!(t=i[33285])){if(e=i[33283],i[e>>2]==i[e+4>>2])break o;if(!(t=i[33285]))break c}i[33285]=0;break l}i[33284]=i[33284]+1,e=i[33283],t=0|Tn[i[e+8>>2]](e)}if(i[f+2152>>2]=t,n=0,48!=(0|t))break i;break s}t=i[f+2152>>2]}if(i[47208]=0,i[47201]=1,49==(0|t))break a;for(n=i[33285],d=0;;){i:{if(!n){if(e=i[33283],i[e>>2]==i[e+4>>2])break i;t=i[f+2152>>2]}if(!(er(t)|d>>>0>58)){i[188832+(d<<2)>>2]=i[f+2152>>2],(t=i[33285])?(i[33285]=0,n=0):(i[33284]=i[33284]+1,e=i[33283],t=0|Tn[i[e+8>>2]](e),n=i[33285]),d=d+1|0,i[f+2152>>2]=t,e=i[f+2148>>2],i[f+2148>>2]=e+1,a[e+189424|0]=32;continue}}break}n=2,i[188832+(d<<2)>>2]=0}i[47201]=n}a:{if(!(t=i[33285])){if(e=i[33283],i[e>>2]==i[e+4>>2])continue;if(!(t=i[33285]))break a}i[33285]=0,i[f+2152>>2]=t;continue}i[33284]=i[33284]+1,e=i[33283],i[f+2152>>2]=Tn[i[e+8>>2]](e);continue}X=X+1|0,t=0,e=i[M+340>>2];n:if(d=p[e>>1]){for(;;){if((65535&d)!=(0|n)){if(d=p[e+((t=t+2|0)<<1)>>1])continue;break n}break}a:switch(0|(e=p[e+(t<<1|2)>>1])){case 1:continue;case 0:break n}i[f+2156>>2]=e,n=e}Br(n)?(D=1,t=i[f+2156>>2]):H?(i[33285]=i[f+2152>>2],t=1328,i[f+2156>>2]=1328,i[f+2152>>2]=32,H=0):3851!=(0|(t=i[f+2156>>2]))?(H=0,3405!=(0|t)|8205!=i[f+2152>>2]||(t=3406,i[f+2156>>2]=3406)):(t=32,i[f+2156>>2]=32,H=0);n:if(gr(t)){if(i[M+8216>>2]=i[M+8216>>2]+1,i[33692]|2!=i[47200])break n;if(gr(F))break n;if(i[f+2544>>2]=0,i[f+2548>>2]=0,i[f+2304>>2]=84731,!Ve(M,f+2304|0,f+2160|0,f+2544|0,0,0))break n;if(ie(M,e=f+2160|0,f+2544|0,-1,0),QA(t=e,e=f+2336|0),i[f+80>>2]=e,Bt(t=f+2240|0,85451,f+80|0),e=i[f+2148>>2],(0|(t=jt(t)+e|0))>=800)break n;rt(e+189424|0,f+2240|0),i[f+2148>>2]=t}else yr(i[f+2156>>2])&&(i[M+8220>>2]=i[M+8220>>2]+1);if(t=i[f+2152>>2],e=i[f+2156>>2],i[47204])if((0|k)>0)k=k-1|0;else{if(!(91!=(0|e)|91!=(0|t))){n=0,k=-1;break A}k=93==(0|e)&&93==(0|t)?2:k}if(10==(0|e)){for(n=i[33285],d=0;;){n:{if(!n){if(e=i[33283],i[e>>2]==i[e+4>>2])break n;t=i[f+2152>>2]}if(er(t)){d=(10==i[f+2152>>2])+d|0,(t=i[33285])?(i[33285]=0,n=0):(i[33284]=i[33284]+1,e=i[33283],t=0|Tn[i[e+8>>2]](e),n=i[33285]),i[f+2152>>2]=t;continue}}break}if((0|d)>0){r&&kA(e=J+189424|0,32,VA(f+2336|0,e)),e=i[f+2148>>2]+189424|0,a[0|e]=32,a[e+1|0]=0,i[33285]=i[f+2152>>2],r=i[47203]?524358:C((0|d)>=3?3:d,30)+524328|0;break e}if(e=i[47268]<(0|X),X=0,!e){e=i[f+2148>>2]+189424|0,a[0|e]=32,a[e+1|0]=0,i[33285]=i[f+2152>>2],r=262174;break e}}if(n=0,i[33692]|k)break A;if(e=0,!r)break t;if(er(i[f+2156>>2])){e=r;break t}if(dt(i[f+2156>>2])&&wr(i[f+2156>>2]))break t;i[33691]=i[f+2156>>2],a[0|(e=J+189424|0)]=32,a[e+1|0]=0,i[33285]=i[f+2152>>2];break e}H&&(i[f+2148>>2]=Ft(1328,i[f+2148>>2]+189424|0)+i[f+2148>>2]),r&&kA(e=J+189424|0,32,VA(f+2336|0,e)),e=i[f+2148>>2]+189424|0,a[0|e]=32,a[e+1|0]=0}r=589864;break e}if(!(46!=(0|(t=i[f+2156>>2]))|46!=i[f+2152>>2])){t:{r:{n:{if(!(t=i[33285])){if(t=i[33283],i[t>>2]==i[t+4>>2])break t;if(!(t=i[33285]))break n}i[33285]=0;break r}i[33284]=i[33284]+1,t=i[33283],t=0|Tn[i[t+8>>2]](t)}if(b=t,46==(0|t))for(i[f+2152>>2]=32,i[f+2156>>2]=8230,b=i[33285];;){r:{n:{if(!b){if(t=i[33283],i[t>>2]==i[t+4>>2]){b=46;break t}if(!(b=i[33285]))break n}i[33285]=0,t=0;break r}i[33284]=i[33284]+1,t=i[33283],b=0|Tn[i[t+8>>2]](t),t=i[33285]}if(46!=(0|b))break t;i[f+2152>>2]=32,i[f+2156>>2]=8230,b=t}}8230!=(0|(t=i[f+2156>>2]))?i[33285]=b:(i[f+2152>>2]=b,t=8230)}if(L=0,16384!=(0|(E=qe(t)))){t:if(536621&E)for(t=i[33285];;){if(!t&&(t=i[33283],i[t>>2]==i[t+4>>2]))break t;if(!(536621&qe(i[f+2152>>2])))break t;(b=i[33285])?(i[33285]=0,t=0):(i[33284]=i[33284]+1,t=i[33283],b=0|Tn[i[t+8>>2]](t),t=i[33285]),i[f+2152>>2]=b}if(1048576&E){i[w+780>>2]=E>>>12&15,H=1,k=0,r=e;continue}(er(i[f+2152>>2])|32768&E||rn(i[f+2152>>2])||63==(0|(t=i[f+2152>>2]))||(d=0,i[33285]||(t=i[33283],d=i[t>>2]==i[t+4>>2],t=i[f+2152>>2]),d||1==(0|t)))&&(L=1)}if(57404==(0|(t=i[f+2156>>2]))&&(i[f+2156>>2]=60,t=60),i[47201]){r=0;t:if(!(1<<(d=UA(t))&1879048255&&d>>>0<=30)){if(!((d=UA(t))>>>0>27)){if(116672&(k=1<<d))break t;if(134227968&k){r=!(1024&q(t,d));break t}}r=1}if(!(o[134772]|!r)&&(1==i[47201]||Pr(188832,i[f+2156>>2]))){i[M+288>>2]=0,n=i[f+2156>>2],a[f+2336|0]=0,k=i[f+2152>>2],t=0;t:{r:if(!((0|(r=i[34064]))<=0))for(;;){if((0|n)==i[136272+(t<<4)>>2]){if(i[136276+(t<<4)>>2])break t;if(Se(0,t))break r;break t}if((0|r)==(0|(t=t+1|0)))break}t=-1}t:if((0|t)>=0)i[f>>2]=t,Bt(f+2336|0,86007,f),i[33285]=k;else if((d=!L)|46!=(0|n)|46==(0|k)||(i[f+2600>>2]=0,i[f+2604>>2]=0,i[f+2540>>2]=86036,!Ve(M,f+2540|0,f+2544|0,f+2600|0,0,0))?t=He(f+2240|0,M,n,0):(ie(M,t=f+2544|0,f+2600|0,-1,0),QA(r=t,t=f+2160|0),i[f+64>>2]=t,Bt(t=f+2304|0,85451,f- -64|0)),r=t,d|!i[f+2148>>2]|2&o[M+76|0]){for(t=i[33285],d=1;;){r:{n:{if(!t){if(t=i[33283],i[t>>2]==i[t+4>>2]|60==(0|n)|(0|n)!=(0|k))break r;if(d=d+1|0,k=i[33285])break n;i[33284]=i[33284]+1,t=i[33283],k=0|Tn[i[t+8>>2]](t),t=i[33285];continue}if(60==(0|n)|(0|n)!=(0|k))break r;k=t,d=d+1|0}t=0,i[33285]=0;continue}break}if(i[f+2152>>2]=k,L&&(i[33285]=k),1==(0|d)){i[f+16>>2]=r,Bt(f+2336|0,86219,f+16|0);break t}if((0|d)<=3){if(a[f+2336|0]=0,(0|(t=i[50786]))<=299&&(i[f+2336>>2]=o[86728]|o[86729]<<8|o[86730]<<16|o[86731]<<24,s[f+2340>>1]=o[86732]|o[86733]<<8),(0|d)>0){for(;i[f+32>>2]=r,Bt(t=f+2160|0,86219,f+32|0),k=d>>>0>1,yn(f+2336|0,t),d=d-1|0,k;);t=i[50786]}if((0|t)>299)break t;i[f+2160>>2]=o[86857]|o[86858]<<8|o[86859]<<16|o[86860]<<24,t=o[86860]|o[86861]<<8|o[86862]<<16|o[86863]<<24,a[f+2163|0]=t,a[f+2164|0]=t>>>8,a[f+2165|0]=t>>>16,a[f+2166|0]=t>>>24,yn(f+2336|0,f+2160|0);break t}i[f+56>>2]=r,i[f+52>>2]=d,i[f+48>>2]=r,Bt(f+2336|0,86932,f+48|0)}else i[33691]=n,i[33285]=k,s[f+2336>>1]=32;if(d=jt(r=f+2336|0),rt((t=i[f+2148>>2])+189424|0,r),i[f+2148>>2]=t+d,L){if(45==(0|n)){r=16384;break e}if(r=qe(n),!(2&o[M+76|0]|(0|t)<=0)){r=266270==(-32769&r)?262148:4096==(28672&r)?266244:262148;break e}if(!(524288&r)){r=4096==(28672&r)?266244:262148;break e}if((0|r)>=0)break e}n=i[f+2156>>2]}}if(n|!(2097152&E)||(t=rt(i[f+2148>>2]+189424|0,He(f+2336|0,M,i[f+2156>>2],1)),o[0|t]?(i[f+2148>>2]=i[f+2148>>2]+jt(t),E&=-28673,n=i[f+2156>>2]):n=0),k=0,L){t:if(er(b=i[f+2152>>2]))for(d=i[33285],t=0;;){if(!d&&(r=i[33283],i[r>>2]==i[r+4>>2]))break t;if(!er(b))break t;t=(10==(0|b))+t|0,(b=i[33285])?(i[33285]=0,d=0):(i[33284]=i[33284]+1,r=i[33283],b=0|Tn[i[r+8>>2]](r),d=i[33285])}else t=0;r=46==(0|(k=i[f+2156>>2]))&&(0|t)<2?4194304|E:E;t:{if(!t){d=1,44!=(0|k)|46!=(0|F)|26741!=i[M+212>>2]|z-48>>>0>=10||b-48>>>0>=10&&!wr(b)||(i[f+2156>>2]=1367,d=0),46!=(0|(E=i[f+2156>>2]))|39!=(0|b)||(k=d,E=i[33283],(0|(P=i[E>>2]))==i[E+4>>2]?d=0:(d=0|Tn[i[E+8>>2]](E),i[E>>2]=P),E=i[f+2156>>2],d=115!=(0|d)&k);r:if(46!=(0|E))d&=D;else{n:if(1&a[M+106|0]){if(!(F-48>>>0<10)){if((k=F-73|0)>>>0>15|!(1<<k&40969))break n;if(!(1<<(k=z-73|0)&40969&&k>>>0<=15||er(z)))break n}d=F-48>>>0>=10?0:!wr(b)&45!=(0|b)&d}if(wr(b)&&(d=0!=o[M+208|0]&d),D){E=i[f+2156>>2];break r}E=32,i[f+2156>>2]=32,d=0}if(!(!d|46!=(0|E)|!i[47203]|60!=(0|b))){J=i[f+2148>>2],e=r;break t}if(!d)break t}if(e=i[f+2148>>2]+189424|0,a[0|e]=32,a[e+1|0]=0,i[33285]=b,F-48>>>0<10&&(r=dt(b)?r:-4194305&r),(0|t)<2)break e;r=536621==(0|r)?536656:532520==(0|r)?532555:524358;break e}(i[33285]||(k=0,t=i[33283],i[t>>2]!=i[t+4>>2]))&&(k=0,er(i[f+2152>>2])&&(i[33285]=b))}r=e}if(1!=i[33712]){if((0|n)!=(0|(t=i[f+2156>>2])))d=i[f+2148>>2],57404==(0|t)&&(t=60,i[f+2156>>2]=60);else{A:{if(rn(n))t=57384;else{if(t=45,45==i[f+2156>>2])break A;t=32}i[f+2156>>2]=t}d=i[f+2148>>2]}i[f+2148>>2]=Ft(t,d+189424|0)+i[f+2148>>2],er(i[f+2156>>2])||rn(i[f+2156>>2])||(e=i[f+2148>>2],s[O+(e<<1)>>1]=i[33284]-i[47353],(0|e)<=(d+1|0)||kA(Ie+(d<<1)|0,255,e+~d<<1)),t=i[f+2148>>2],i[Ae>>2]=t;A:{t:{if((0|t)>725){if(!dt(i[f+2156>>2]))break t;t=i[f+2148>>2]}if((0|t)<796)continue;break A}if(t=i[f+2148>>2],!(i[f+2156>>2]-48>>>0>=10)&&(0|t)<796)continue}break}}a[0|(e=t+189424|0)]=32,a[e+1|0]=0,i[33285]=i[f+2152>>2],r=16384}W=f+2608|0,H=r,oe&&(e=i[w+780>>2],i[oe>>2]=e||H>>>12&7),e=(w+5184|0)+(i[w+6800>>2]<<1)|0,s[e+6>>1]=0,s[e+2>>1]=0,s[e+4>>1]=32767,E=C(4095&H,8388608&H?320:10),r=189424;e:{A:{t:if(e=o[189424]){for(;;){if(!!(255&(e=e<<24>>24))&e>>>0<33){if(e=o[0|(r=r+1|0)])continue;break t}break}if(o[0|r])break A}E=(0|(t=E-(e=i[47566])|0))>0?t:0,i[47566]=E+e,H=o[190268]?524288|H:H,i[M+8240>>2]=H;break e}i[47566]=E,e=o[190268],i[M+8240>>2]=H,e&&(R=1,i[47568]=i[47568]+1,(0|(e=i[47569]))<=0||(e=e-1|0,i[47569]=e,e||(a[190280]=0)))}i[49572]=1,i[47572]=655360,i[47573]=0,i[M+8184>>2]=0,i[M+8188>>2]=0,e=0,i[M+288>>2]=0,i[(t=M- -8192|0)>>2]=0,i[t+4>>2]=0,i[M+8200>>2]=0,i[M+8224>>2]=0,i[M+8228>>2]=0,i[(t=M+8232|0)>>2]=0,i[t+4>>2]=0,a[w+786|0]=32,s[w+784>>1]=8192,i[w+6812>>2]=32,s[w+1588>>1]=3,i[w+1584>>2]=0,r=0;e:if(!((0|(t=i[w+6800>>2]))<=0)){for(;;){if(s[(w+5184|0)+(r<<1)>>1]>0)break e;if((0|t)==(0|(r=r+1|0)))break}r=t}if(t=p[(w+5184|0)+(r<<1)>>1],s[w+1592>>1]=t,t)for(;e=!!(65535&~t)+e|0,t=p[(w+5184|0)+((r=r+1|0)<<1)>>1];);for(a[w+1594|0]=e,d=3,O=1,r=0;;){z=i[w+6808>>2],RA(w+6808|0,(S=(w+784|0)+d|0)-1|0),!o[M+170|0]|i[w+6808>>2]-48>>>0>=10||dt(z)&&(i[w+6808>>2]=97),Q?i[w+6812>>2]=Q:v&&RA(w+6812|0,v+189423|0),t=v;e:{A:if(r||(t=VA(w+6816|0,v+189424|0)+v|0,r=i[w+6816>>2])){if(D=VA(w+6804|0,e=t+189424|0),1==(0|r)){if(n=t-1|0,Q=32,F=0,32!=i[w+6812>>2]){t=n,e=32;break A}v=0,r=t;t:{r:switch(o[0|e]-43|0){case 0:r=t+1|0,v=64;break t;case 2:break r;default:break t}r=t+1|0,v=96}if(a[0|(e=r+189424|0)]-48>>>0>=10)b=r+1|0,D=-1;else{for(D=wt(e);r=(e=r)+1|0,a[e+189424|0]-48>>>0<10;);b=r,r=e}if((0|(Q=i[47350]))>247)e=0;else if(e=0,!((0|(r=a[r+189424|0]))<0)&&(r=JA(84868,255&r,14))){t=1+(e=r-84868|0)|0,-1==(0|D)&&(D=i[105536+(t<<2)>>2],v=0);t:{r:switch(e-8|0){case 0:i[49574]=0,i[49573]=D;break t;case 4:break r;default:break t}a[199304]=(0|D)>=3?1:0}e=1,i[47350]=Q+1,i[198304+(Q<<2)>>2]=(t+v|0)+(D<<8),t=b}Q=i[w+6812>>2],kA(n+189424|0,32,t-n|0),re=e+re|0,r=0;break e}Q=0,32==(0|r)|36!=i[49573]?(F=0,e=r):(32!=i[w+6812>>2]|32!=i[w+6804>>2]||(i[49573]=20),F=0,e=Xr(r,M))}else i[w+6804>>2]=32,F=1,Q=0,D=0,e=32;A:if(Z){if(Z=1,O=8,r=0,93!=(0|e)|93!=i[w+6804>>2])break A;t=t+1|0,e=32,Z=0}else if(64!=(240&(r=i[49573])))if(Z=0,16&r)r=0;else{t:{r:{n:{a:{if(!(8216!=(0|(b=8242==(0|e)||8217==(0|e)||146==(0|e)||180==(0|e)?39:e))&63!=(0|b)))if(dt(i[w+6808>>2])){if(b=e,dt(i[w+6804>>2])){b=39;break a}}else b=e;s:{if(1367!=(0|b)){if(1328==(0|b)){y|=1024,b=32;break a}if((e=b-44032|0)>>>0>11183)break a;if(n=((r=((k=65535&e)>>>0)/28|0)>>>0)%21|0,e=e-C(r,28)&65535,b-50500>>>0>587)break s;r=e?e+4519|0:0,n=n+4449|0;break r}y|=131072,J=i[w+6804>>2],e=i[w+6812>>2],b=32;break n}r=50500+(e+C(n,28)|0)|0,n=(k>>>0)/588|4352;break r}if(J=i[w+6804>>2],e=i[w+6812>>2],!((r=b-12592|0)>>>0>51)){n=4352|o[r+103296|0],r=0;break r}}f=t+189424|0;n:if(!(28268!=(0|(r=i[M+212>>2]))&24934!=(0|r)|39!=(0|b))&&!yr(e)&&(VA(w+6820|0,f+1|0),Vr(i[w+6820>>2]))){n=601,r=0;a:switch(J-110|0){case 6:break r;case 0:break a;default:break n}if(24934!=i[M+212>>2])break r;a[0|f]=32;break r}if(i[w+6824>>2]=32,(0|(e=i[49897]))>0)i[49897]=e-1,r=0;else{if(!b){r=0,n=0;break t}n:{a:{s:{i:if((L=i[M+180>>2])&&(k=b,(P=gr(b))&&(k=Xr(b,M)),!sn(L)))for(;;){i[w+16>>2]=0,i[w+624>>2]=k,e=VA(w+16|0,L)+L|0;o:if(i[w+624>>2]==i[w+16>>2]){if(o[0|e]){for(n=1,U=0,r=f;K=VA(w+16|0,e),X=VA(w+624|0,r),Ae=Xr(i[w+624>>2],M),i[w+624>>2]=Ae,r=r+X|0,U=(X=(0|Ae)==i[w+16>>2])+U|0,n&=X,o[0|(e=e+K|0)];);if(!n)break o;i[49897]=U}if(!(e=e+1|0))break i;if(8&o[188788]&&(i[w>>2]=L,i[w+4>>2]=e,en(i[47195],85187,w)),e=VA(w+6828|0,e)+e|0,o[0|e])break s;r=0;break a}for(;r=e,e=e+1|0,o[0|r];);for(;o[0|(r=(e=r)+1|0)];);if(sn(L=e+2|0))break}r=0,n=b;break n}VA(w+6824|0,e),P&&gr(J)&&(i[w+6824>>2]=ar(i[w+6824>>2])),r=i[w+6824>>2]}n=i[w+6828>>2],y|=2097152,P&&(n=ar(n))}if(8!=(0|n))break r}n=t;break e}r?i[w+6804>>2]=r:r=0}dt(n)||Vr(n)||Pr(i[M+336>>2],n)||!dt(i[w+6808>>2])|!(!o[M+170|0]|n-48>>>0>=10)&i[w+6804>>2]-48>>>0>=10||(n=32,N=1);t:{r:{n:{a:{s:{if(i[w+6808>>2]-48>>>0<10){if(n-48>>>0<10){e=B;break s}if(1<<(e=n-32|0)&20481&&e>>>0<=14)break a;N=1}else{if(e=0,44!=i[w+6812>>2])break s;if(e=B,44!=(0|n))break s}n=32;break a}if(91==(0|n)){if(2==(0|(b=i[w+6804>>2])))break n;if(n=91,91==(0|b)&&i[47204])break n}B=e}if(dt(n)){a:{s:{i:{if(dt(i[w+6808>>2])){if(!o[M+171|0])break i;if(e=i[w+6808>>2],!((0|n)>12352)&&(0|e)<12353)break i}else e=i[w+6808>>2];if(_=Pr(i[M+336>>2],e)?_:0,32!=(0|(e=i[w+6808>>2]))&&!Pr(i[M+336>>2],e)){e=32,G=rn(i[w+6808>>2])?G:256|G;break s}y=gr(n)?2|y:y,32!=i[w+6808>>2]|a[S-2|0]-48>>>0>=10|i[w+6812>>2]-48>>>0<10||(a[(w+784|0)+d|0]=32,e=1588+(C(Y,12)+w|0)|0,s[e>>1]=p[e>>1]+1,d=d+1|0)}if(e=32,32==(0|n))break a;if(_=_+1|0,(0|(b=i[M+600>>2]))<=0){e=n;break a}if(!((0|n)<=591&(0|(k=i[w+6808>>2]))>=(0|b))){if((0|n)<(0|b)){e=n;break a}if((0|_)<2){e=n;break a}if(!((0|k)<=591)){e=n;break a}}if(!dt(k)){e=n;break a}y|=16384,G|=128}N=1}if(de=de+1|0,gr(e)){if(b=Xr(e,M),i[M- -64>>2]){e=fe?b:712,r=fe?r:b,fe=1;break A}if(wr(i[w+6812>>2])){if(32==i[w+6808>>2]){e=b;break A}if(e=32,26465!=i[M+212>>2])break t;for(n=85240,k=(w+784|0)+d|0,D=0;;){if(f=jt(n),32==o[0|(z=k-f|0)]&&!Dt(z+1|0,n,f=f-1|0)){if((0|(n=a[n+f|0]))==(0|b)){e=b;break A}if(65==(0|n)&&Nt(M,b)){e=b;break A}}if(n=i[131184+((D=D+1|0)<<2)>>2],11==(0|D))break}break t}if(e=32,32==(0|b))break A;if(!gr(i[w+6812>>2])){e=b;break A}if(!wr(i[w+6804>>2])){e=b;break A}if(VA(w+16|0,189424+(t+D|0)|0),!(28268!=i[M+212>>2]|2!=(0|_)|106!=(0|b)|73!=i[w+6812>>2])){e=b;break A}if(32==i[w+6808>>2]){e=b;break A}if(!dt(i[w+16>>2])){e=b;break A}G|=256,Q=32,N=1;break A}if(!O){O=0;break A}if((0|_)<3){O=0;break A}if(115!=(0|e)){O=0;break A}if(25966!=i[M+212>>2]){O=0;break A}if(32!=i[w+6804>>2]){O=0;break A}if(O|=4,e=32,39!=o[783+(n=d+w|0)|0])break A;a[n+783|0]=32;break A}e=32;a:{s:{i:{o:{l:switch(n-39|0){default:if(95==(0|n))break A;case 1:case 2:case 3:case 4:case 5:if(n-48>>>0>=10)break a;if(o[M+170|0]&&dt(i[w+6808>>2])&&!((b=i[w+6804>>2])-48>>>0<10|b-2406>>>0<10))break a;if(32==(0|(k=i[w+6808>>2])))break s;if(b=i[w+6808>>2],k-48>>>0<10)break i;if((0|(k=b))==(0|(b=i[M+128>>2])))break o;N=1;break A;case 6:if(!Vr(i[w+6812>>2])&&dt(i[w+6804>>2])){if(32!=i[w+6808>>2]){N=1;break A}if(y|=128,(0|Y)<=0)break A;n=1572+(C(Y,12)+w|0)|0,i[n>>2]=16384|i[n>>2];break A}if(n=i[w+6804>>2],!(32!=i[w+6812>>2]|32!=(0|n))){V=4;break A}if(45==(0|n)){t=t+1|0,V=4;break A}if(e=45,32!=i[w+6808>>2])break A;if(!dt(z))break A;if(dt(i[w+6812>>2]))break A;a[(w+784|0)+d|0]=32,n=1588+(C(Y,12)+w|0)|0,s[n>>1]=p[n>>1]+1,d=d+1|0;break A;case 7:if(46==i[w+6808>>2]){N=1;break A}if(e=46,(0|Y)<=0)break A;if(n=1572+(C(Y,12)+w|0)|0,1&a[n+1|0])break A;if(!dt(i[w+6812>>2]))break A;i[n>>2]=65536|i[n>>2],e=(e=Vr(i[w+6804>>2]))||45==i[w+6804>>2]?32:46;break A;case 0:}l:{if(46!=(0|(b=i[w+6812>>2]))||(n=115,115!=i[w+6804>>2])){if(!Br(b))break l;n=i[w+6804>>2]}if(dt(n))break r}if(1&(n=i[M+88>>2])){if(dt(i[w+6804>>2]))break r;n=i[M+88>>2]}if(2&n&&dt(i[w+6812>>2]))break r;if(!(!Pr(i[M+332>>2],i[w+6812>>2])|32!=(0|z))){t=(32==i[w+6804>>2])+t|0;break r}if(b=115!=(0|(n=i[w+6808>>2]))|pe,pe=0,!(1&b))break A;pe=!!(0|Vr(n)),V=4;break A}if(44==(0|b)&B){N=1;break A}B=1;break a}if(32!=(0|b))break a}dt(z)&&(dt(i[w+6812>>2])||(a[(w+784|0)+d|0]=32,e=1588+(C(Y,12)+w|0)|0,s[e>>1]=p[e>>1]+1,d=d+1|0))}e=n;break A}Z=1,n=t+1|0,B=e;break e}e=39,pe=0;break A}N=1,Q=32}else{if(e-48>>>0<10){r=0,n=(0|(b=i[49574]+1|0))>(15&i[49573]),i[49574]=n?0:b,e=n?32:e,N|=n,Z=0;break A}r=0,i[49574]=0,e=(n=i[w+6808>>2]-48>>>0<10)?32:e,N|=n,Z=0}if(Vr(e)){if(32==i[w+6808>>2]){y|=262144,n=t;break e}if(n=i[w+6816>>2]-9>>>0<2,k=1&N){D=0;A:if(!((0|x)>(0|(e=t-1|0))))for(;;){if(!(b=s[(w+5184|0)+(e<<1)>>1]))break A;if(D=((0|b)>0)+D|0,!((0|x)<=(0|(e=e-1|0))))break}a[1594+(C(Y,12)+w|0)|0]=D}if(G=n?262144|G:G,a[(w+784|0)+d|0]=32,e=d+1|0,!((0|Y)>298||(n=(w+1584|0)+C(Y,12)|0,(0|(b=p[n+4>>1]))>=(0|e)))){if((0|re)<=0?x=i[n>>2]:(x=198300+(i[47350]<<2)|0,i[x>>2]=128|i[x>>2],re=0,x=64|i[n>>2]),f=i[47352],a[n+6|0]=f,i[n>>2]=x|(de?O:-2&O)|(o[199304]?2048:0)|y,(0|f)>0){for(;y=(x=w+784|0)+e|0,x=x+(e=e-1|0)|0,a[0|y]=o[0|x],(0|e)>(0|b););a[0|x]=32,s[n+4>>1]=b+1,e=d+2|0}b=(w+1584|0)+C(Y=Y+1|0,12)|0,i[b>>2]=0,s[b+4>>1]=e,d=t;A:if(!((0|(n=i[w+6800>>2]))<=(0|t))){for(;;){if(s[(w+5184|0)+(d<<1)>>1]>0)break A;if((0|n)==(0|(d=d+1|0)))break}d=n}if(D=p[(w+5184|0)+(d<<1)>>1],s[b+8>>1]=D,de=0,n=0,D)for(;n=!!(65535&~D)+n|0,D=p[(w+5184|0)+((d=d+1|0)<<1)>>1];);a[b+10|0]=n,i[47352]=0,O=1,y=G,G=0,fe=0}N=0,r=k?0:r,n=k?v:t}else(0|d)>795?(n=t,t=x,e=d):(e=Ft(e,(w+784|0)+d|0)+d|0,n=t,t=x);i[47352]<(0|V)&&(i[47352]=V),V=0,x=t,d=e}if(F||(v=n,!((0|d)<799)))break}(0|re)<=0|Y||(e=198300+(i[47350]<<2)|0,i[e>>2]=128|i[e>>2],i[w+1584>>2]=64|i[w+1584>>2],Y=1),e=(w+784|0)+d|0,i[M+8204>>2]=e-1,t=0,a[0|e]=0,a[w+1590|0]=0,a[1590+(C(Y,12)+w|0)|0]=8;e:if((0|Y)<=0)i[w+1584>>2]=512|i[w+1584>>2],d=i[49572];else{e=Y-1|0;A:if(1!=(0|Y))for(r=e;;){if(!rn(a[p[1588+(C(r,12)+w|0)>>1]+(w+784|0)|0])){t=r;break A}if(b=(0|r)>1,r=r-1|0,!b)break}if(t=(w+1584|0)+C(t,12)|0,i[t>>2]=16|i[t>>2],4194304&H&&(e=(w+1584|0)+C(e,12)|0,256&(t=i[e>>2])||(i[e>>2]=65536|t)),i[w+1584>>2]=512|i[w+1584>>2],!((0|Y)<=0|(0|(d=i[49572]))>990))for(b=3|(e=w+624|0),k=2|e,Q=w+754|0,F=!(4194304&H),v=0,x=0;;){i[47354]=i[47354]+1;A:{if((0|(e=i[49827]))<=0||(e=e-1|0,i[49827]=e,e)){if(o[190280])break A}else a[190280]=0;e=p[1588+(C(v,12)+w|0)>>1]+(w+784|0)|0;t:if(!(a[0|e]-48>>>0>=10)&&(t=w+624|0,r=e,1227133512!=i[M+112>>2])){for(;;){r:{if(a[0|r]-48>>>0<10)a[0|t]=o[0|r],t=t+1|0,r=r+1|0;else{if(i[M+124>>2]!=a[0|r]|32!=o[r+1|0])break r;if(d=r+2|0,32==o[r+3|0]|a[0|d]-48>>>0>=10|32==o[r+4|0])break r;v=v+1|0,r=d}if(t>>>0<Q>>>0)continue;break t}break}kA(e+(t=t-(B=w+624|0)|0)|0,32,(r=(d=r-e|0)-t|0)>>>0<=d>>>0?r:0),_e(e,B,t)}for(t=0;r=t,t=t+1|0,a[e+r|0]-48>>>0<10;);t:if(r-5>>>0<=27){for(a[w+626|0]=32,s[w+624>>1]=8224,48!=o[0|e]&i[M+132>>2]>=(0|r)||(t=(w+1584|0)+C(v,12)|0,i[t>>2]=524288|i[t>>2]),G=(w+1584|0)+C(v,12)|0,D=0,d=b;t=e,!((e=a[0|e])-48>>>0>=10&(0|e)!=i[M+128>>2])&&(a[0|d]=e,e=d+1|0,B=r,(0|(r=r-1|0))<=0?d=e:i[M+112>>2]>>>r&1?(f=i[G+4>>2],y=(w+16|0)+C(D,12)|0,i[y>>2]=i[G>>2],i[y+4>>2]=f,i[y+8>>2]=i[G+8>>2],D=D+1|0,32!=(0|(y=i[M+124>>2]))&&(a[d+1|0]=y,e=d+2|0),a[0|e]=32,d=e+1|0,8&o[G+2|0]||((V=i[M+112>>2])>>>B-2&1&&(a[e+1|0]=48,a[e+2|0]=48,V=i[M+112>>2],d=e+3|0),V>>>B-3&1&&(a[0|d]=48,d=d+1|0))):d=e,e=t+1|0,d>>>0<Q>>>0););if(r=i[G+4>>2],e=(w+16|0)+C(D,12)|0,i[e>>2]=i[G>>2],i[e+4>>2]=r,r=i[G+20>>2],i[e+16>>2]=i[G+16>>2],i[e+20>>2]=r,r=i[G+12>>2],i[e+8>>2]=i[G+8>>2],i[e+12>>2]=r,r=1,(0|D)>0)for(;e=(w+16|0)+C(r,12)|0,i[e>>2]=-262209&i[e>>2],(0|D)>=(0|(r=r+1|0)););if(e=o[t+4|0]|o[t+5|0]<<8|o[t+6|0]<<16|o[t+7|0]<<24,r=o[0|t]|o[t+1|0]<<8|o[t+2|0]<<16|o[t+3|0]<<24,a[0|d]=r,a[d+1|0]=r>>>8,a[d+2|0]=r>>>16,a[d+3|0]=r>>>24,a[d+4|0]=e,a[d+5|0]=e>>>8,a[d+6|0]=e>>>16,a[d+7|0]=e>>>24,e=o[t+12|0]|o[t+13|0]<<8|o[t+14|0]<<16|o[t+15|0]<<24,t=o[t+8|0]|o[t+9|0]<<8|o[t+10|0]<<16|o[t+11|0]<<24,a[d+8|0]=t,a[d+9|0]=t>>>8,a[d+10|0]=t>>>16,a[d+11|0]=t>>>24,a[d+12|0]=e,a[d+13|0]=e>>>8,a[d+14|0]=e>>>16,a[d+15|0]=e>>>24,a[d+16|0]=0,d>>>0<=b>>>0)break t;for(e=o[G+6|0],D=0,r=b;;){for(x=ge(M,r,(w+16|0)+C(D,12)|0,255&e);e=o[0|r],r=r+1|0,32!=(0|e););if(e=0,a[G+6|0]=0,D=D+1|0,!(r>>>0<d>>>0))break}}else{if(i[47352]=0,x=ge(M,e,t=(w+1584|0)+C(v,12)|0,o[t+6|0]),(0|(r=i[47352]))>o[t+18|0]&&(a[t+18|0]=r,i[47352]=0),!(!(4096&x)|32==o[0|e]))for(;kA(w+624|0,0,150),i[w+624>>2]=538976288,i[w+628>>2]=538976288,a[w+632|0]=32,ge(M,_e(k,e,r=VA(w+16|0,e)),t,0),32!=o[0|(e=e+r|0)];);50331648&x&&(E=(e=F|(~i[33264]+Y|0)!=(0|v))?E:10,e|!oe||(i[oe>>2]=4,E=10))}if(128&x&&!((0|(t=i[33264]))<=0)){if(e=0,r=t,d=3&t)for(;B=(w+1584|0)+C(r+v|0,12)|0,i[B>>2]=1048576|i[B>>2],r=r-1|0,(0|d)!=(0|(e=e+1|0)););if(t>>>0>=4)for(;e=(w+1584|0)+C(r+v|0,12)|0,i[e>>2]=1048576|i[e>>2],i[(t=e-12|0)>>2]=1048576|i[t>>2],i[(t=e-24|0)>>2]=1048576|i[t>>2],i[(e=e-36|0)>>2]=1048576|i[e>>2],r=r-4|0;);i[33264]=r}}if(d=i[49572],(0|Y)<=(0|(v=v+1|0)))break e;if(!((0|d)<991))break}}if((0|(r=i[47351]))<(0|(b=i[47350]))){for(Q=i[47202],F=i[49846],D=i[47352];;){e=(t=i[198304+(r<<2)>>2])>>8;e:{A:switch((31&t)-9|0){case 0:Q=e;break e;case 4:F=e;break e;case 3:break A;default:break e}D=t>>>0>=256?e+D|0:0}if(!(!(128&t)&(0|b)>(0|(r=r+1|0))))break}i[47352]=D,i[47351]=r,i[49846]=F,i[47202]=Q}i[49572]=d+2,i[(e=190288+(d<<3)|0)>>2]=589824,s[e+4>>1]=n,i[e+8>>2]=589824,s[e+12>>1]=n,t=Y&&i[47199]?E:10,i[33285]?e=0:(e=i[33283],e=i[e>>2]==i[e+4>>2]),E=e?t:E,v=R,b=0,Y=0,W=k=W-32192|0,i[k+24>>2]=0,i[k+28>>2]=0,i[k+16>>2]=0,i[k+20>>2]=0,i[k+8>>2]=0,i[k+12>>2]=0,i[k>>2]=0,i[k+4>>2]=0,n=i[49572],f=p[190284+(n<<3)>>1];e:{if((0|(r=n-3|0))<0)e=r;else{for(;;){if(b=(0|(t=127&o[3+(e=190288+(r<<3)|0)|0]))<(0|b)?b:t,p[e+4>>1])e=r;else if(e=-1,t=(0|r)>0,r=r-1|0,t)continue;break}if(b>>>0>3)break e}for(;;){if((0|(e=e-1|0))<0)break e;if(64&o[0|(t=190288+(e<<3)|0)]){a[t+3|0]=4;break e}if(!(o[t+3|0]<4))break}}if(e=i[M+292>>2],r=0,(0|n)<=0)b=0;else for(B=-1,b=0;;){t=e,i[M+292>>2]!=(0|e)&&(s[(e=190288+(r<<3)|0)>>1]=32|p[e>>1]),(0|b)>0&&(G=i[4+(x=190288+(r<<3)|0)>>2],i[(d=190288+(e=r-b<<3)|0)>>2]=i[x>>2],i[d+4>>2]=G,-1!=(0|B)&&(s[4+(e+190288|0)>>1]=B),B=-1);e:{if(21==o[2+(190288+(d=r<<3)|0)|0]){if(e=o[7+(x=d+190288|0)|0],2&o[0|x])break e;A:if((0|e)!=(0|t)){if(x=o[10+(d+190288|0)|0]-9|0){if(12==(0|x))break A;break e}if(21!=o[18+(d+190288|0)|0])break e}-1==(0|B)&&(B=(e=p[4+(d+190288|0)>>1])||-1),b=b+1|0}e=t}if((0|n)==(0|(r=r+1|0)))break}if(i[49572]=n-b,qr(e),(t=i[M+36>>2])&&!((0|(e=(b=i[49572])-1|0))<0))for(Q=256&t,y=4&t,F=8&t,G=15&t,N=16&t,R=2&t,t=t>>>8&1,r=0;;){if(d=b,n=r,b=e,21==(0|(e=o[2+(x=190288+(O=e<<3)|0)|0]))){e:{A:{if((0|(r=d-2|0))>=0)for(;;){if(21==o[2+(190288+(e=r<<3)|0)|0])break A;if(e=(0|r)>0,r=r-1|0,!e)break}e=i[M+292>>2];break e}e=o[7+(e+190288|0)|0]}qr(e),e=o[x+2|0]}if(r=n,(e=i[144464+((255&e)<<2)>>2])&&(r=t,!(32&o[0|x]))){r=o[e+11|0],B=0,R&&(118!=(0|(d=o[0|e]))&82!=(0|d)||(n=N?0:n,B=1));e:{A:{t:{r:switch((d=253&r)-4|0){case 1:break t;case 0:break r;default:break A}if(G&&(r=1,!n))break e;if(2!=(0|(r=n)))break e;if(r=2,!(e=o[e+13|0]))break e;a[x+2|0]=e;break e}if(G&&(r=2,!n))break e;if(1!=(0|(r=n)))break e;if(r=1,!(e=o[e+13|0]))break e;a[x+2|0]=e;break e}r=0,F&&(r=d?n:0)}r=e=B?0:r,p[4+(O+190288|0)>>1]&&(r=e=y?0:e,Q&&(r=e||1))}if(!((0|(e=b-1|0))>=0))break}if(qr(i[M+292>>2]),i[49572]<=0)N=-2,r=0;else{for(r=-1,n=0,x=0,F=0;;){e=x<<3,-1!=(0|r)&&(s[4+(e+190288|0)>>1]=r),21==o[2+(B=e+190288|0)|0]&&qr(o[7+(e+190288|0)|0]),G=i[49572];e:{if(!(32&o[0|(d=e+190288|0)])){n=(0|(t=G-1|0))>(0|x)?i[144464+(o[10+(e+190288|0)|0]<<2)>>2]:n,!(p[d+12>>1]|(0|t)==(0|x))&&(D=0,o[n+11|0]|!n)||(D=1),b=o[B+2|0];A:if(!((0|(N=i[49848]))<=0))for(t=e+190288|0,r=0;;){if(Q=C(r,3),o[Q+199408|0]==(255&b)&&!((y=o[2+(Q+199408|0)|0])&(1^D)|(4&o[t+3|0]?2&y:0)|(p[t+4>>1]?0:4&y))){if(b=o[1+(Q+199408|0)|0],a[B+2|0]=b,!(2&o[i[144464+(b<<2)>>2]+4|0])|o[t+3|0]<2)break A;a[t+3|0]=0;break A}if((0|N)==(0|(r=r+1|0)))break}if(!(255&b)){r=p[4+(e+190288|0)>>1];break e}}r=i[d+4>>2],e=(k+32|0)+(F<<5)|0,t=i[d>>2],i[e>>2]=t,i[e+4>>2]=r,t=i[144464+(t>>>14&1020)>>2],i[e+8>>2]=t,a[e+17|0]=o[t+11|0],F=F+1|0,r=-1}if(!((0|F)<1e3&(0|G)>(0|(x=x+1|0))))break}if(b=0,r=0,!((0|(N=F-2|0))<=0))for(;;){e:if(p[4+((k+32|0)+(b<<5)|0)>>1]){for(t=(0|b)>(0|N)?b:N,r=0,e=b;;){if((0|e)!=(0|t)){if(r=(0|r)>(0|(d=o[3+((n=k+32|0)+(e<<5)|0)|0]))?r:d,!p[4+(n+((e=e+1|0)<<5)|0)>>1])continue}else e=t;break}if((0|e)<=(0|b))break e;if(t=~b+e|0,n=0,d=e-b&7)for(;a[6+((k+32|0)+(b<<5)|0)|0]=r,b=b+1|0,(0|d)!=(0|(n=n+1|0)););if(t>>>0<7)break e;for(;a[6+(t=(k+32|0)+(b<<5)|0)|0]=r,a[t+38|0]=r,a[t+70|0]=r,a[t+102|0]=r,a[t+134|0]=r,a[t+166|0]=r,a[t+198|0]=r,a[t+230|0]=r,(0|(b=b+8|0))!=(0|e););}else e=b+1|0;if(b=e,!((0|N)>(0|e)))break}}for(i[k+40>>2]=i[36125],qr(i[M+292>>2]),z=(0|r)<4,x=1,Q=1,G=0,t=0,r=0,R=0;;){e:{A:{t:{r:{if(t){if(n=(e=k+32|0)+((B=r-1|0)<<5)|0,G=o[2+(e+(r<<5)|0)|0],(0|B)>0){if(e=x-(r=(0|x)>0)|0,B>>>0>=(b=r?x:2)>>>0)for(;d=(r=(k+32|0)+(b<<5)|0)-32|0,x=i[r+12>>2],i[d+8>>2]=i[r+8>>2],i[d+12>>2]=x,x=i[r+4>>2],i[d>>2]=i[r>>2],i[d+4>>2]=x,x=i[r+28>>2],i[d+24>>2]=i[r+24>>2],i[d+28>>2]=x,x=i[r+20>>2],i[d+16>>2]=i[r+16>>2],i[d+20>>2]=x,(0|B)>=(0|(b=b+1|0)););x=e}D=i[144464+(G<<2)>>2],i[n>>2]=0,i[n+4>>2]=0,i[n+24>>2]=0,i[n+28>>2]=0,i[n+16>>2]=0,i[n+20>>2]=0,i[n+8>>2]=0,i[n+12>>2]=0,a[n+2|0]=t,e=i[144464+(t<<2)>>2],i[n+8>>2]=e,G=n}else{if((0|r)>=(0|N)|(0|R)>=997)break r;d=o[2+(n=(b=r<<5)+(k+32|0)|0)|0],e=i[144464+(d<<2)>>2],i[n+8>>2]=e,B=p[n+4>>1],21==(0|d)&&qr(o[7+(b+(k+32|0)|0)|0]),x=B?r:x,D=i[144464+(o[n+34|0]<<2)>>2],i[n+40>>2]=D,B=r}if(!e){t=0,r=B+1|0;continue}if(le(M,256,n,k+32040|0,k),(0|(r=i[k+32052>>2]))>0&&(b=(k+32|0)+(B<<5)|0,D=i[144464+(r<<2)>>2],i[b+40>>2]=D,a[b+34|0]=r,a[b+49|0]=o[D+11|0]),r=0,t)t=e;else if((0|(b=i[k+32056>>2]))<=0)t=e;else{t=i[144464+(b<<2)>>2],i[n+8>>2]=t,r=o[n+2|0],a[n+2|0]=b,b=p[n>>1];n:if(2!=o[t+11|0])s[n>>1]=65531&b;else{if(s[n>>1]=4|b,2==o[e+11|0])break n;a[n+3|0]=0}le(M,256,n,k+32040|0,k)}if((0|(d=i[k+32048>>2]))<=0)b=t;else{if(b=i[144464+(d<<2)>>2],a[n+2|0]=d,i[n+8>>2]=b,e=o[b+11|0],F=1,1==(0|d)){O=2==(0|e);break A}d=p[n>>1];n:if(2!=(0|e))s[n>>1]=65531&d;else{if(s[n>>1]=4|d,2==o[t+11|0])break n;a[n+3|0]=0}le(M,256,n,k+32040|0,k)}if(O=0,2!=(0|(e=o[b+11|0]))){F=0;break A}if(O=1,F=0,e=2,o[n+3|0]>1){Y=0;break A}d=n+3|0,Y=Y+1|0,t=n;n:{if(8&(y=i[M+12>>2])){for(;;){a:switch(y=t,t=t+32|0,o[y+49|0]){case 0:break A;case 2:break a;default:continue}break}if(o[0|(t=y+35|0)]>1)break A;if(o[n+6|0]<=3&&(a[0|d]=0),o[y+38|0]<4)break n;break A}if(1&Y|(0|Y)<2)break A;if(2&y)break t;if(z)t=d;else if(t=d,p[n+36>>1])break t}a[0|t]=0;break A}i[36423]=R+2,s[(e=145840+(R<<5)|0)>>1]=0,a[e+2|0]=9,a[e+20|0]=2,i[e+12>>2]=E,s[e+4>>1]=f,a[e+17|0]=0,a[e+18|0]=0,i[e+8>>2]=i[36125],s[e+32>>1]=0,a[e+34|0]=9,a[e+52|0]=0,i[e+44>>2]=0,s[e+36>>1]=0,a[e+49|0]=0,a[e+50|0]=0,i[e+40>>2]=i[36126],qr(i[M+292>>2]),W=k+32192|0;break e}Y=1}if(!(8&(t=p[n+32>>1]))|(0|B)<=0||(d=o[D+11|0])>>>0>15|!(1<<d&457)||(r=o[D+10|0],s[n+32>>1]=8^t),P=p[n+36>>1]){A:if(t=i[M+4>>2]){t:switch(0|e){default:r=512&t?11:r;break;case 0:break A;case 2:}if(2==o[D+11|0]){(d=12&t)&&(r=12!=(0|d)?23:11);t:if(O){r:switch(3&t){case 2:r=10;break t;case 0:break t}r=23}o[n+35|0]<4||(r=256&t?10:r)}}if(!((0|n)==(0|G)|(0|R)<=0)){A:{t:{r:switch(0|(t=7&i[M>>2])){case 0:break A;case 1:break r;default:break t}if(r-12>>>0>4294967293)break A}r=o[t+101916|0]}r=i[47205]>0?24:r}}if(i[n+72>>2]=i[144464+(o[n+66|0]<<2)>>2],t=i[k+32060>>2],t=r||t||r,!F){a[17+(d=145840+(y=R<<5)|0)|0]=e,i[d+8>>2]=b,a[d+16|0]=0,s[d>>1]=p[n>>1],a[d+3|0]=15&o[n+3|0],a[d+6|0]=o[n+6|0],r=o[n+7|0],s[d+4>>1]=0,a[d+7|0]=r,F=o[b+10|0],a[d+2|0]=F;A:if(r=p[n+4>>1]){if(s[d+4>>1]=r,v=1&v?5:1,a[20+(n=y+145840|0)|0]=v,r=Q,Q=0,!r){v=0;break A}a[n+20|0]=8|v,v=0}else a[20+(y+145840|0)|0]=0;i[12+(r=y+145840|0)>>2]=i[k+32084>>2]<<1,!P|24!=(0|F)||(0|(n=i[47205]))<=0||(i[d+8>>2]=i[36126],i[r+12>>2]=C(n,14)),(1<<e&428?e>>>0<=8:0)|2&o[b+7|0]&&(i[r+12>>2]=128,a[d+16|0]=0),a[21+(e=y+145840|0)|0]=255,a[e+22|0]=255,s[e+18>>1]=5120,R=R+1|0}r=B+1|0;continue}break}s[88922]=1,i[44462]=0,re&&(s[145776+(i[36423]<<5)>>1]=2,e=198304+(i[47350]<<2)|0,i[e>>2]=128,i[(e=e-4|0)>>2]=128|i[e>>2]),a[190268]=H>>>19&1,he&&(i[he>>2]=H<<14>>31&189360)}W=w+6832|0,N=i[47192],O=i[A+12>>2],t=0,d=0,x=0,y=0,G=0,V=0,E=0,W=f=W-6e3|0;e:if(!((0|(n=(R=i[36423])-1|0))<=0)){for(;a[2+(f+C(t,6)|0)|0]=0,4&o[145840+(e=t<<5)|0]?(r=f+C(y,6)|0,a[r+1|0]=0,e=e+145840|0,a[r+3|0]=o[e+49|0],e=o[e+3|0],a[0|r]=e,y=y+1|0,V=(e>>>0>3)+V|0):27!=o[i[8+(e+145840|0)>>2]+10|0]|(0|y)<=0||(e=(f+C(y,6)|0)-4|0,a[0|e]=4|o[0|e]),(0|n)!=(0|(t=t+1|0)););if(a[f+C(y,6)|0]=0,y)if(1==i[N+148>>2]){if(!((0|R)<=0)){for(e=-2&R,r=1&R,t=145840;x=2==o[t+17|0]&&o[t+3|0]>3?d:x,x=2==o[t+49|0]&&o[t+35|0]>3?1|d:x,t=t- -64|0,d=d+2|0,(0|e)!=(0|(G=G+2|0)););!r|2!=o[t+17|0]||(x=o[t+3|0]>3?d:x)}if(a[3+(b=145840+(e=x<<5)|0)|0]=7,30313==i[N+212>>2]&&(o[7+(e=e+145840|0)|0]||(a[e+7|0]=br(55),R=i[36423])),!((0|R)<=0)){for(G=0,t=145840,e=145840,d=B=i[36125],n=0,Q=1;;){if(o[t+17|0]?v=i[36125]:(v=i[36125],B=(r=o[i[t+8>>2]+14|0]>50)?v:B,Q|=r),r=o[t+20|0]?v:d,4&o[0|t]){v=o[t+7|0],d=i[144464+(v<<2)>>2];A:{if(6840683==(0|(y=i[N+212>>2]))){if(49!=i[r>>2])break A;if((y=i[d>>2]-49|0)>>>0>5|!(1<<y&41))break A;a[e+7|0]=br(50),y=i[N+212>>2]}if(!(6516078!=(0|y)&31336!=(0|y))){y=0,v||(n=br(1&(y=n|Q)?13621:12593),a[t+7|0]=n,d=i[144464+(n<<2)>>2]),(0|x)!=(0|G)|13621!=(1024|i[d>>2])||(a[b+3|0]=6),3420466==i[B>>2]&&(a[e+7|0]=br(3420466==i[d>>2]?13619:12594));t:{if(12597==i[r>>2]){if(12597!=(0|(v=i[d>>2])))break t;a[e+7|0]=br(13109)}v=i[d>>2]}n=y,12593==(0|v)&&(13621==(0|(v=i[B>>2]))&&(a[t+7|0]=br(12850),v=i[B>>2]),13619==(0|v)&&(a[t+7|0]=br(13107),v=i[B>>2]),3420466==(0|v)&&(a[t+7|0]=br(13364)),a[t+3|0]=0)}}Q=0,B=d,e=t}else d=r;if(t=t+32|0,!((0|(G=G+1|0))<(0|(r=i[36423]))))break}if(d=0,t=145840,!((0|r)<=0))for(;4&o[0|t]&&((e=o[t+7|0])||(a[t+7|0]=17,e=17),e=i[144464+(e<<2)>>2],a[t+21|0]=o[e+12|0],a[t+22|0]=o[e+13|0]),t=t+32|0,(0|r)!=(0|(d=d+1|0)););}}else{if(e=i[N+152>>2],e=N+C(z=(0|e)>7?1:e,6)|0,M=o[0|(z?e+637:N+157)],H=o[0|(z?636+(e+O|0):156+(N+O|0))],a[133068]=4==(0|O),!((0|y)<=0)){for(F=y-1|0,D=O-1>>>0>1,r=0,n=0;;){w=f+C(n,6)|0,E=((e=o[0|w])<<24>>24>3)+E|0;A:if(6==(0|e)){e=n-3|0,t=n;t:{for(;;){if((0|t)<=(0|r)|(0|e)>=(0|t))break t;r:switch(b=f+C(t=t-1|0,6)|0,o[0|b]-4|0){case 2:break t;case 0:break r;default:continue}break}a[0|b]=3}t=n;t:{for(;;){if((0|y)<=(0|(t=t+1|0)))break t;r:switch(o[f+C(t,6)|0]-4|0){case 0:break t;case 2:break r;default:continue}break}a[w+2|0]=2,a[0|w]=5,e=r;break A}if(6==o[0|w]){a[w+2|0]=2,k=0;t:if((0|y)<=(0|(e=n+1|0)))b=n,Z=0;else if(Z=1,(0|(d=a[f+C(e,6)|0]))>4)b=n;else{for(x=(V-E|0)>1,b=n;;){if(t=e,4==(255&d)&&(e=x+1|0,x=1,!((0|e)<=1))){e=t;break t}if(Z=(0|y)>(0|(e=t+1|0)),(0|e)==(0|y))break;if(b=t,(0|(d=a[f+C(e,6)|0]))>4)break t}b=F,e=y}d=-1,v=0,x=0,Q=-1,G=0,B=-1;t:{if((0|(t=r))<(0|e)){for(;d=(P=(0|(B=a[f+C(t,6)|0]))>3)&&(0|d)<0?t-r|0:d,k=(G=(0|x)>(0|B))?k:(0|x)<(0|B)?t:v,Q=P?t:Q,v=G?v:t,P=(0|t)!=(0|b),x=G?x:B,t=t+1|0,P;);if(G=v,B=Q,(0|d)>=0)break t}d=e,v=G,Q=B}i[33269]=b-v,i[33268]=d,i[33270]=v,i[33271]=k;t:if(o[133068])i[33270]=e,i[33271]=e;else if((0|Q)>=0){if((0|e)!=(0|y))break t;a[f+C(Q,6)|0]=7}else a[f+C(v,6)|0]=7;ue(f,z,r,e,H),!Z&!!(0|O)||(H=D?o[N+156|0]:o[N+157|0])}else e=r}else e=r;if((0|e)>=(0|n))r=e;else if(4&o[w+2|0]){for(r=n+1|0,d=-1,Q=0,v=0,x=0,t=e,k=-1;d=(G=(0|(b=a[f+C(t,6)|0]))>3)&&(0|d)<0?t-e|0:d,Q=(B=(0|b)<(0|x))?Q:(0|b)>(0|x)?t:v,k=G?t:k,v=B?v:t,G=(0|t)!=(0|n),x=B?x:b,t=t+1|0,G;);i[33269]=n-v,i[33270]=v,i[33271]=Q,i[33268]=(0|d)<0?r:d,o[133068]?(i[33270]=r,i[33271]=r):(0|k)>=0?a[f+C(k,6)|0]=7:a[f+C(v,6)|0]=7,ue(f,z,e,r,M)}else r=e;if((0|y)==(0|(n=n+1|0)))break}if(!((0|r)>=(0|y))){for(d=-1,Q=0,v=0,x=0,t=r,k=-1;d=(b=(0|(e=a[f+C(t,6)|0]))>3)&&(0|d)<0?t-r|0:d,Q=(n=(0|e)<(0|x))?Q:(0|e)>(0|x)?t:v,k=b?t:k,v=n?v:t,x=n?x:e,(0|y)!=(0|(t=t+1|0)););i[33270]=v,i[33271]=Q,i[33269]=~v+y,i[33268]=(0|d)<0?y:d,o[133068]?(i[33270]=y,i[33271]=y):(0|k)>=0?a[f+C(k,6)|0]=7:a[f+C(v,6)|0]=7,ue(f,z,r,y,H)}}if((0|R)<=0)break e;for(t=0,G=0;;){if(B=r=145840+(b=t<<5)|0,e=f+C(G,6)|0,d=o[0|e],a[r+3|0]=d,4&o[0|r]){n=b+145840|0,r=o[e+4|0],a[n+21|0]=r,x=o[e+5|0],a[n+16|0]=0,a[n+22|0]=x;A:{if(1&(v=o[e+2|0]))e=2;else{if(d>>>0<6)break A;e=o[e+1|0]}a[n+16|0]=e}r>>>0<=(255&x)>>>0?(e=x,x=r):(a[n+21|0]=x,a[n+22|0]=r,e=r),(r=o[7+(b+145840|0)|0])&&(e=(255&e)+(255&x)>>>1|0,r=i[144464+(r<<2)>>2],a[n+22|0]=e+o[r+13|0],a[n+21|0]=e+o[r+12|0]),2&v&&(a[B+3|0]=8|d),G=G+1|0}if((0|R)==(0|(t=t+1|0)))break}}}if(W=f+6e3|0,G=i[47192],t=0,D=0,k=0,E=0,W=f=W-160|0,i[36423]>=2)for(O=i[30450],d=1;;){if(d=(e=d)+1|0,y=o[3+(n=145840+(x=e<<5)|0)|0],2&(v=p[n>>1])){for(;2==(31&(b=i[198304+(E<<2)>>2]))&&(We(127&b,b>>>8|0),i[36432]=110,i[36433]=100,i[36434]=450,i[36430]=5,v=i[50786],B=i[32972],(0|(r=i[B+84>>2]))>0&&(v=(0|C(r,v))/100|0),Q=o[((0|(r=(0|v)>=359?359:v))<=80?80:r)+101856|0],r=(0|(r=(0|v)>=450?450:v))>399?6:(0|r)>379?7:Q,i[32526]=(0|C(r,i[B+72>>2]))/256,i[32527]=(0|C(r,i[B+76>>2]))/256,i[32528]=(0|C(r,i[B+80>>2]))/256,r>>>0>7||(B=r-1|0,i[32528]=B,i[32526]=r,i[32527]=B)),E=E+1|0,!(128&b););v=p[n>>1]}B=d<<5,Q=e-1|0,r=7&y;e:{A:{t:{r:{n:{a:{s:{i:{o:{l:switch(H=o[17+(x+145840|0)|0],0|(b=4&v?2:H)){case 2:break n;case 3:case 8:break a;case 5:break s;case 6:case 7:break i;case 4:break o;case 0:break l;default:break e}t=0;break e}if(6!=(0|(e=o[17+(145840+(Q<<5)|0)|0]))?(r=4==(0|e)?60:i[34063]>0||r>>>0<4?48:60,a[18+(x+145840|0)|0]=r):(r=25,a[18+(x+145840|0)|0]=25),!(16&o[0|G])|!o[20+(x+145840|0)|0]||(a[18+(x+145840|0)|0]=60,r=60),64&o[i[8+(x+145840|0)>>2]+6|0]&&(r=r+30|0,a[18+(x+145840|0)|0]=r),t=0,!(8&v))break e;a[18+(x+145840|0)|0]=o[G+164|0]+r;break e}!(n=o[20+(e=x+145840|0)|0])|1&a[i[e+8>>2]+7|0]&2==o[17+(145840+(Q<<5)|0)|0]||(a[18+(x+145840|0)|0]=15),r=o[17+(B+145840|0)|0],8&o[i[8+(x+145840|0)>>2]+4|0]|r|8!=o[17+(145840+(Q<<5)|0)|0]||(a[18+(x+145840|0)|0]=25),64&o[i[8+(145840+(e=Q<<5)|0)>>2]+5|0]&&(a[18+(x+145840|0)|0]=30),!n|!(16&i[G>>2])||(a[18+(x+145840|0)|0]=30);i:if(o[20+(B+145840|0)|0]|!(32&o[i[8+(x+145840|0)>>2]+4|0])|4!=(0|r))i[12+(x+145840|0)>>2]=256;else{if(n=x+145840|0,2==o[17+(e+145840|0)|0]){i[n+12>>2]=200;break i}i[n+12>>2]=150}if(7!=(0|b))break e;if(D|=2==(0|r),2!=(254&o[17+(e+145840|0)|0]))break e;i[12+(x+145840|0)>>2]=i[12+(e+145840|0)>>2]+255>>>1;break e}6==(254&(r=o[17+(145840+(e=Q<<5)|0)|0]))|3==(0|r)|32&i[i[8+(e+145840|0)>>2]+4>>2]&&(a[18+(x+145840|0)|0]=30);s:if(2==(254&(n=o[17+(B+145840|0)|0]))){D=o[20+(B+145840|0)|0]&&2!=(0|n)?D:1,a[18+(n=x+145840|0)|0]=40,y=0;i:{o:switch(0|r){case 0:if((e=i[12+(e+145840|0)>>2])>>>0>39)break i;y=40-e|0;break i;case 2:break i}if(o[20+(x+145840|0)|0])break s;y=20;o:switch(r-3|0){case 1:if(y=0,!(8&o[i[8+(e+145840|0)>>2]+4|0]))break i;break s;case 0:break i;case 5:break o;default:break s}y=12}a[n+18|0]=y}if(!(16&o[0|G])|!o[20+(x+145840|0)|0])break e;if(o[18+(e=x+145840|0)|0]>19)break e;a[e+18|0]=20;break e}n=o[G+296|0],b=r=x+145840|0,i[r+12>>2]=256,a[r+19|0]=n;a:if(o[r+20|0]){v=25;s:switch(o[17+(145840+(Q<<5)|0)|0]-2|0){case 0:if(v=12,1&a[i[8+(x+145840|0)>>2]+7|0])break a;break;case 1:break s;default:break a}a[18+(x+145840|0)|0]=v}if(2==(0|(B=o[17+(B+145840|0)|0]))){k=1;break e}if(a[22+(n=x+145840|0)|0]=t,2==(254&o[17+(145840+(r=Q<<5)|0)|0]))break r;if(r=t,(0|(b=i[36423]))<=(0|e))break A;for(;;){if(2==o[17+(145840+(r=e<<5)|0)|0]){r=o[22+(r+145840|0)|0],a[n+22|0]=r;break A}if((0|b)==(0|(e=e+1|0)))break}break t}if(N=x+145840|0,F=r^r>>>0<2,r=(R=8&y)?25:o[296+(F+G|0)|0]-k|0,a[N+19|0]=r,(i[36423]-3|0)>(0|e)||(0|(b=255&r))<=(0|(r=i[G+52>>2]))||(a[N+19|0]=r),r=0,y=0,!(v=o[n+52|0]))for(;b=i[n+40>>2],y=2==o[n+49|0]?(~i[b+4>>2]>>>20&1)+y|0:y,r=27==o[b+10|0]?2:r,b=n,n=n+32|0,!(v=o[b+84|0]););b=N+96|0,e=145840+(z=e+2<<5)|0,i[34063]=y,w=o[i[n+40>>2]+10|0],B=B+145840|0,o[17+(z+145840|0)|0]|23!=o[i[B+8>>2]+10|0]?(n=b,b=e,e=B):n=x+145968|0,B=o[i[b+8>>2]+15|0];n:if(y)B=o[i[G+96>>2]+(o[i[e+8>>2]+15|0]+C(B,10)|0)|0],8!=o[e+17|0]|4!=(254&o[b+17|0])||(B=8&o[i[n+8>>2]+4|0]?B-15|0:B);else{if(M=i[G+100>>2],z=o[i[e+8>>2]+15|0],n=o[e+20|0],B=o[M+(z+C(n|o[b+20|0]?1==(0|B):B,10)|0)|0],!n|!(32&o[0|G]))break n;B=o[1+(M+C(z,10)|0)|0]+B>>>1|0}n=v>>>1|0,z=!y,v=(0|(B=(0|C(i[130104+(y?1==(0|y)?4:8:0)>>2],B))/128|0))<=8?8:B;n:if(7!=(0|F))R&&(v=i[G+200>>2]+v|0);else{if(v=(B=i[G+200>>2])+v|0,!R)break n;v=((0|B)/2|0)+v|0}B=n&z|27==(0|w),(n=p[304+(G+(F<<1)|0)>>1])||(n=p[G+316>>1]),v=C(n<<16>>16,v),(y=o[7+(n=x+145840|0)|0])&&(F=o[i[144464+(y<<2)>>2]+14|0])&&(v=(0|C(v,F))/100|0),1==(B|2==(0|r))&&(2097152&(r=i[G+12>>2])||(v=(0|C(262144&r?282:256+((280-(o[i[8+(x+145840|0)>>2]+14|0]<<1)|0)/3|0)&65535,v))/256|0)),F=x+145840|0,r=C(i[32526],i[G+196>>2]),R=2!=(0|H)?256:(0|((0|r)>(0|v)?v:r))/128|0,i[F+12>>2]=R,(r=o[F+16|0])>>>0>=19&&(An(84371,28,O),a[F+16|0]=0,y=o[n+7|0],r=0),v=r+1|0,(r=255&y)?(Jt(r,f+8|0),r=Jr(i[f+132>>2])):r=i[129280+((255&v)<<2)>>2],B=x+145840|0,1&(k|D)&&(n=145840+(x=Q<<5)|0,k=o[0|r],r=o[B+21|0],r=((0|C(k,o[B+22|0]-r|0))/256|0)+r|0,a[n+22|0]=r,t=(r-(t=255==(0|r)?255:t)|0)>16?r-16|0:t,a[n+21|0]=t,n=0,(0|t)<(0|r)&&(a[F+16|0]=v,n=2),i[12+(t=x+145840|0)>>2]=R,a[t+16|0]=n,r=o[N+19|0],a[t+19|0]=3!=o[t+17|0]&&r>>>0>18?18:r),t=2!=(0|H),n=-2&(r=p[e>>1]),s[e>>1]=n;n:{a:{s:switch(o[e+17|0]-3|0){case 5:if(2==o[b+17|0])break n;n=1|r;break a;case 0:break s;default:break n}if(s[e>>1]=1|r,2!=o[b+17|0]&&12146!=i[i[e+8>>2]>>2])break n}s[e>>1]=n}t?(0|(e=t<<4))<=((r=o[B+22|0])-(n=o[B+21|0])|0)||(n=(0|(e=r-e|0))>0?e:0,a[B+21|0]=n):(r=o[B+22|0],n=o[B+21|0]),e=255&n,t=((0|C(o[i[129280+(o[F+16|0]<<2)>>2]+127|0],r-e|0))/256|0)+e|0,k=0,D=0;break e}n=i[12+(r+145840|0)>>2],i[b+12>>2]=n,3==(0|H)&&(n=i[32526],i[b+12>>2]=n),r=t;r:switch(B-5|0){case 0:i[b+12>>2]=(C(n,160)>>>0)/100;break t;case 2:break r;default:break A}i[b+12>>2]=(C(n,120)>>>0)/100}r=t}D=0,a[16+(e=x+145840|0)|0]=0,n=e,r=(e=255&r)-16|0,a[n+21|0]=e>>>0>=r>>>0?r:0}if(!(i[36423]>(0|d)))break}if(W=f+160|0,15&(n=i[47197])|i[36456]){e=0,b=0,W=r=W-80|0;e:if((t=i[33222])||(i[33223]=500,t=se(500),i[33222]=t,t)){if(!((i[36423]-2|0)<2)){for(e=n>>8,G=128&n?0:e,y=e&n<<24>>31,B=2&n,n=r+32|1,x=1;;){if(nA(r,i[8+(d=145840+(Q=x<<5)|0)>>2],d,B,r+72|0),e=r+32|0,1==(13&(t=o[d+20|0]))&&(a[r+32|0]=32,e=n),!G|32!=(0|G)&!!(0|t)|x>>>0<2||(VA(r+76|0,r),i[r+76>>2]-880>>>0>4294967103||(e=Ft(G,e)+e|0)),4&o[0|d]&&((t=o[3+(Q+145840|0)|0])>>>0<2||(t=t>>>0>=5?5:t,t=B?t>>>0>3?712:716:a[t+94144|0],i[r+76>>2]=t,e=Ft(t,e)+e|0)),v=0,i[r+72>>2]=0,o[0|(t=r)])for(;t=VA(r+76|0,t)+t|0,i[r+72>>2]>>>v-1&1|!y|(0|v)<=0||(k=i[r+76>>2])-880>>>0>4294967103||Or(k)&&(e=Ft(y,e)+e|0),v=v+1|0,e=Ft(i[r+76>>2],e)+e|0,o[0|t];);if(21!=o[i[d+8>>2]+10|0]&&(8&(t=p[d>>1])&&(e=nA(e,i[36128],d,B,0),t=p[d>>1]),!(4&t)|2==o[17+(Q+145840|0)|0]||(e=nA(e,i[36136],d,B,0)),(t=o[7+(Q+145840|0)|0])&&(e=nA(e,i[144464+(t<<2)>>2],d,B,0))),(e=(d=e-(r+32|0)|0)+b|0)>>>0<h[33223])t=i[33222];else{if(t=e+500|0,i[33223]=t,!(t=Oe(i[33222],t))){i[33223]=0,t=86135;break e}i[33222]=t}if(a[(v=d)+(d=r+32|0)|0]=0,rt(t+b|0,d),b=e,!((0|(x=x+1|0))<(i[36423]-2|0)))break}if(!t){t=86135;break e}}a[e+t|0]=0}else i[33223]=0,t=86135;W=r+80|0,15&o[188788]&&(i[A>>2]=t,en(i[47195],84367,A)),(e=i[36456])&&Tn[0|e](t)}o[190280]?(i[36423]=0,e=1):($(0),(e=i[A+8>>2])?(W=t=W+-64|0,fn(t,e,60),et(t,1),r=0,(e=ne(t,0))&&(r=e,o[202976]&&(r=ne(202976,2))),W=t- -64|0,i[44468]=r):r=i[44468],e=1,r&&(t=i[32972],(r=se(1344))&&(t=_e(r,t,1344),r=216192+(i[50758]<<4)|0,i[r>>2]=11,i[r+8>>2]=t,t=i[50758]+1|0,i[50758]=(0|t)<=169?t:0),i[44468]=0))}else e=0,a[190280]=0;else e=0,i[36423]=0,i[50758]=0,i[50757]=0;return W=A+16|0,e}function q(e,A){var t=0,r=0,n=0,a=0;t=1073741825;e:{A:{t:{r:{n:{a:{s:{i:{o:{l:{c:{g:{u:{d:{f:{p:{h:{m:{C:{b:{I:{w:{k:{x:{v:{B:{y:{E:{M:{G:{D:{Q:{T:{P:{z:{F:{S:{N:{O:{L:{Y:{H:{R:{j:{V:{W:{U:{K:{Z:{X:{q:{J:{_:{$:{ee:{Ae:{te:{re:{ne:{ae:{se:{ie:{oe:{le:{ce:{ge:{ue:{de:{fe:{pe:{he:{me:{Ce:{be:{Ie:{we:{ke:{xe:{ve:{Be:{ye:{Ee:{Me:{Ge:{De:{Qe:{Te:{Pe:{ze:{Fe:{Se:{Ne:{Oe:{Le:{Ye:{He:{Re:{je:{Ve:{We:{Ue:{Ke:{Ze:switch(0|A){case 0:A=e-9>>>0<5?1073741825:0,A=(e=133==(0|e))?1073741825:A;break v;case 1:Xe:{qe:{Je:{_e:{$e:{eA:{AA:{tA:{rA:{nA:{aA:{sA:{iA:{oA:{if((0|(A=-256&e))<=2047){if(!A)break oA;if(1536==(0|A))break iA;if(1792!=(0|A))break Xe;if(t=0,r=1,1807!=(0|e))break Xe;break R}if((0|A)<=69631){if(2048==(0|A))break sA;if(8192!=(0|A))break Xe;switch(t=131076,e-8204|0){case 1:break aA;case 0:break R;default:break nA}}if(69632==(0|A))break rA;if(917504!=(0|A))break Xe;switch(t=8388608,e-917505|0){case 62:break Je;case 58:break _e;case 57:break $e;case 45:break eA;case 43:break AA;case 32:break tA;case 0:break R;default:break qe}}if(t=16,173!=(0|e))break Xe;break R}if(t=0,r=1,e-1536>>>0<6)break R;r=1757==(0|e),A=(e=1564==(0|e))?2:0;break x}if(t=0,r=1,2274!=(0|e))break Xe;break R}return Z=64,4}if(t=1073741826,8206==(-2&e))break R;if(e-8234>>>0<5)return Z=0,2;if(t=128,e-8289>>>0<4)break R;if(t=2,e-8294>>>0<4)break R;if(t=8388608,e-8298>>>0>=6)break Xe;break R}A=!(e-69821&-17),e=0;break k}Z=536870976;break w}Z=268435520;break w}Z=-2147483584;break w}Z=134217792;break w}Z=67108928;break w}Z=1073741888;break w}if(t=131072,r=64,e-917536>>>0<96)break R}break L;case 2:Xe:{qe:{Je:{_e:{$e:{eA:{AA:{if((0|(A=-256&e))<=130303){if((0|A)<=127743){if((0|A)<=64767){if((0|A)<=11007){if(8192==(0|A))break AA;if(9216!=(0|A))break Xe;if(e-9255>>>0>=25)break eA;break O}if(11008==(0|A))break $e;if(11776!=(0|A))break Xe;if(t=-2147483648,e-11845>>>0>=59)break Xe;break R}if((0|A)<=126975){if(64768==(0|A))break _e;if(65280!=(0|A))break Xe;if(t=4194304,e-65520>>>0>=9)break Xe;break R}if(126976==(0|A)|127232==(0|A)|127488==(0|A))break H;break Xe}if((0|A)<=129023){if((0|A)<=128255){if(127744==(0|A)|128e3==(0|A))break H;break Xe}if(128256==(0|A)|128512==(0|A)|128768==(0|A))break H;break Xe}if((0|A)<=129535){if(129024==(0|A)|129280==(0|A))break H;break Xe}if(129536==(0|A)|129792==(0|A)|130048==(0|A))break H;break Xe}if((0|A)<=919039){if((0|A)<=917759){if((0|A)<=130815){if(130304==(0|A))break H;if(130560!=(0|A))break Xe;break H}if(130816==(0|A))break H;if(917504!=(0|A))break Xe;if(917632!=(-128&e))break Je;break N}if((0|A)<=918271){if(917760==(0|A))break qe;if(t=4194304,918016!=(0|A))break Xe;break R}if(918272==(0|A)|918528==(0|A))break N;if(t=4194304,918784!=(0|A))break Xe;break R}if((0|A)<=920319){if((0|A)<=919551){if(919040==(0|A))break N;if(t=4194304,919296!=(0|A))break Xe;break R}if(919552==(0|A)|919808==(0|A))break N;if(t=4194304,920064!=(0|A))break Xe;break R}if((0|A)<=920831){if(920320==(0|A))break N;if(t=4194304,920576!=(0|A))break Xe;break R}if(920832==(0|A)|921088==(0|A))break N;if(t=4194304,921344!=(0|A))break Xe;break R}if(t=4194304,8293!=(0|e))break Xe;break R}if(t=-2147483648,e-9291>>>0>=21)break Xe;break R}if(11248==(-16&e)|e-11219>>>0<25|11209==(0|e)|e-11194>>>0<3)break O;if(11124==(0|(A=-2&e)))break O;if(t=-2147483648,11158!=(0|A))break Xe;break R}if(t=65536,e-64976>>>0>=32)break Xe;break R}if(917504==(0|e))break N;if(t=4194304,e-917506>>>0>=30)break Xe;break R}if(t=4194304,e>>>0>917999)break R}A=(e=!(65534&~e))>>>16|0,e<<=16;break k;case 6:Xe:{qe:{Je:{_e:{$e:{eA:{AA:{tA:{rA:{nA:{aA:{sA:{if((0|(A=-256&e))<=7679){if((0|A)<=767){if(!A)break sA;if(256==(0|A))break aA;if(512!=(0|A))break L;if(585!=(0|e))break nA;break I}if(768==(0|A))break rA;if(1024==(0|A))break tA;if(7424!=(0|A))break L;if(t=16777216,7574!=(0|e))break L;break R}if((0|A)<=119807){if(7680==(0|A))break AA;if(8448==(0|A))break eA;if(65280!=(0|A))break L;if(t=256,e-65345>>>0>=6)break L;break R}if((0|A)<=120319){if(119808==(0|A))break $e;if(120064!=(0|A))break L;if(e>>>0>=120070)break _e;break S}if(120320==(0|A))break Je;if(120576!=(0|A))break L;if(e>>>0>=120597)break qe;break S}if(t=768,e-97>>>0<6)break R;if(t=16777216,e-105>>>0>=2)break L;break R}t=(A=329==(0|e))>>>9|0,A=(e=303==(0|e))?16777216:A<<23;break b}if(616==(0|e))break I;if(t=16777216,669!=(0|e))break L;break R}t=128;rA:switch(e-976|0){case 35:break Xe;case 0:case 1:case 2:case 5:case 32:case 33:break R}if(1012!=(-2&e))break L;break R}r=(e=!(e-1110&-3))>>>8|0,e<<=24;break C}r=(A=7883==(0|e))>>>8|0,A=(e=7725==(0|e))?16777216:A<<24;break x}if(e-8458>>>0<10)break S;if((A=e-8495|0)>>>0<11)break Ke;break j}if(119842==(0|(A=-2&e)))break F;if(e-119808>>>0<85)break S;if(e-119894>>>0<2|e-119946>>>0<2)break F;if(119995==(0|e)|e-119896>>>0<69|e-119982>>>0<12)break S;if(119998==(0|A))break F;if(e-119997>>>0<7)break S;if(t=16777344,120050==(0|A))break R;if(t=128,e>>>0<=120004)break L;break R}if(120102==(-2&e))break F;if(e-120094>>>0<28)break S;_e:{if((0|e)<=120257){if(e-120154>>>0<2)break F;if(t=16777344,e-120206>>>0>=2)break _e;break R}if(e-120258>>>0<2)break F;if(t=16777344,e-120310>>>0<2)break R}if(t=128,e>>>0<=120145)break L;break R}if(e-120362>>>0<2|e-120414>>>0<2)break F;if(t=16777344,e-120466>>>0<2)break R;if(e-120540>>>0<31|e>>>0>120571|e>>>0<120486)break S;if(t=128,e-120514>>>0>=25)break L;break R}if(e-120772>>>0<8|e-120746>>>0<25|e-120714>>>0<31|e-120688>>>0<25)break S;if(120597!=(0|e)&e>>>0<120629|e-120656>>>0<31)break S;if(t=128,e-120630>>>0<25)break R;break L}break I;case 7:Xe:{qe:{Je:{_e:{$e:{eA:{AA:{tA:{rA:{nA:{aA:{sA:{iA:{oA:{lA:{cA:{gA:{uA:{dA:{fA:{pA:{hA:{if((0|(A=-256&e))<=11263){if((0|A)<=3583){if((0|A)<=1535){if(512==(0|A))break hA;if(768==(0|A))break pA;if(1280!=(0|A))break L;if(t=4096,1369!=(0|e))break L;break R}if(1536==(0|A))break fA;if(1792==(0|A))break dA;if(2304!=(0|A))break L;if(t=4096,2417!=(0|e))break L;break R}if((0|A)<=7167){if(3584==(0|A))break uA;if(6144==(0|A))break gA;if(6656!=(0|A))break L;if(t=8192,6823!=(0|e))break L;break R}if(7168==(0|A))break cA;if(7424==(0|A))break lA;if(8192!=(0|A))break L;if(t=16793600,!(A=e-8305|0))break R;if(14==(0|A))break oA;break iA}if((0|A)<=43263){if((0|A)<=40959){if(11264==(0|A))break sA;if(11776==(0|A))break aA;if(12288!=(0|A))break L;switch(t=8192,e-12293|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:case 32:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:break rA;case 0:case 44:case 45:case 46:case 47:case 48:break R;default:break nA}}if(40960==(0|A))break tA;if(42496==(0|A))break AA;if(42752!=(0|A))break L;if(e-42775>>>0>=9)break eA;break z}if((0|A)<=65279){if(43264==(0|A))break $e;if(43520==(0|A))break _e;if(43776!=(0|A))break L;if(t=20480,43868!=(-4&e))break L;break R}if(65280==(0|A))break Je;if(92928==(0|A))break qe;if(93952!=(0|A))break L;if(t=4096,e-94099>>>0<13)break R;if(t=8192,94176!=(-2&e))break L;break R}if(t=16797696,690==(0|e))break R;if(e-688>>>0<9)return Z=0,20480;if(e-697>>>0<7)break z;if(704==(0|(A=-2&e)))return Z=0,20480;if(t=4096,e-710>>>0<10)break R;if(t=12288,720==(0|A))break R;if(t=20480,e-736>>>0<5)break R;t=(e=748==(-3&e))>>>20|0,e<<=12;break m}A=890==(0|e)?20480:0,A=(e=884==(0|e))?4096:A;break v}if(t=8192,1600==(0|e))break R;if(t=4096,e-1765>>>0>=2)break L;break R}if(t=4096,2036==(-2&e))break R;if(t=8192,2042!=(0|e))break L;break R}A=(e=!(e-3654&-129))>>>19|0,e<<=13;break k}if(t=8192,6211!=(0|e))break L;break R}if(t=12288,7291==(0|e))break R;if(t=4096,e-7288>>>0>=6)break L;break R}if(t=16797696,7522==(0|e))break R;if(t=20480,e-7468>>>0<63)break R;t=16384;lA:switch(e-7588|0){default:if(7544==(0|e))break R;case 1:case 2:case 3:if(e-7579>>>0>=37)break L;break R;case 0:case 4:}return Z=0,16793600}return Z=0,16384}if(t=16384,e-8336>>>0>=13)break L;break R}A=(t=11389==(0|e))>>>18|0,t=(e=11388==(0|e))?16793600:t<<14;break h}if(t=-2147479552,11823!=(0|e))break L;break R}if(e-12445>>>0<2)break R;if(12540==(0|e))break Xe}if(e-12541>>>0>=2)break L;break R}if(t=8192,40981!=(0|e))break L;break R}if(42508==(0|e))break p;if(42623==(0|e))break z;if(t=20480,42652!=(-2&e))break L;break R}if(42864==(0|e))return Z=0,16384;if(42888==(0|e))break z;if(t=20480,43e3!=(-2&e))break L;break R}t=(A=43494==(0|e))>>>19|0,A=(e=43471==(0|e))?8192:A<<13;break b}if(43632==(0|e))break p;if(43741==(0|e))break p;if(t=8192,e-43763>>>0>=2)break L;break R}if(t=12288,65392==(0|e))break R;if(t=135168,65438!=(-2&e))break L;break R}if(t=8192,92994==(-2&e))break R;break L}return Z=0,12288;case 8:t=128;Xe:{qe:{Je:{_e:{$e:{eA:{AA:{tA:{rA:{if((0|(A=-256&e))<=12543){if((0|A)<=5887){if((0|A)<=3583){if(!A)break rA;if(1536!=(0|A))break J;if(A=8388608,1651!=(0|e))break J;break Z}if(3584==(0|A))break tA;if(4352!=(0|A))break J;if(t=4194304,e-4447>>>0>=2)break J;break X}if((0|A)<=8447){if(5888==(0|A))break AA;if(6400!=(0|A))break J;if((A=e-6581|0)>>>0>=6)break J;t=i[(A=81432+(A<<3)|0)>>2],r=i[A+4>>2];break X}if(8448==(0|A))break eA;if(12288!=(0|A))break J;if(A=2048,12294!=(0|e))break J;break Z}if((0|A)<=68863){if((0|A)<=63999){if(12544==(0|A))break $e;if(43520!=(0|A))break J;if((A=e-43701|0)>>>0<8)break qe;break q}if(64e3==(0|A))break Xe;if(65280!=(0|A))break J;if(A=4194304,65440!=(0|e))break J;break Z}if((0|A)<=100095){if(68864==(0|A))break _e;if(70400!=(0|A))break J;if(t=8192,70493!=(0|e))break J;break U}if(100096==(0|A))break Je;if(126464!=(0|A))break J;break X}r=(A=!(e-170&-17))>>>18|0,t=A<<14;break X}if(t=33554432,e-3648>>>0<5)break X;if(A=0,a=33554432,3759==(0|e))break Z;if(e-3776>>>0>=5)break J;break X}if(t=8388608,e-6051>>>0>=2)break J;break X}if(e-8501>>>0>=4)break J;break X}if(A=4194304,12644!=(0|e))break J;break Z}if(t=4096,68898!=(-2&e))break J;break X}if(t=2048,e-100333>>>0<5)break X;break J}if(t=33554432,!(211>>>A&1))break q;break X}if((A=e-64014|0)>>>0>=28)break J;t=i[(A=81480+(A<<3)|0)>>2],r=i[A+4>>2];break X;case 10:Xe:{qe:{Je:{_e:{$e:{eA:{if((0|(A=-256&e))<=119807){if((0|A)<=8447){if(!A)break eA;if(768!=(0|A))break L;switch(t=128,e-976|0){case 0:case 1:case 2:case 36:case 37:break R;default:break L}}if(8448==(0|A))break $e;if(65280!=(0|A))break L;if(t=256,e-65313>>>0>=6)break L;break R}if((0|A)<=120319){if(119808==(0|A))break _e;if(120064!=(0|A))break L;if(e>>>0>=120070)break Je;break S}if(120320==(0|A))break qe;if(120576!=(0|A))break L;if(e-120772>>>0>=8)break Xe;break S}if(t=768,e-65>>>0>=6)break L;break R}t=128;$e:switch(e-8450|0){case 0:case 5:break R}if(e-8458>>>0<10)break S;if((A=e-8469|0)>>>0<20)break Ue;if(8508==(-4&e))break R;break _}if(e-119982>>>0<12|e>>>0>120004|e-119977>>>0<4|e-119973>>>0<2)break S;if(119970==(0|e)|119966==(-2&e)|e-119808>>>0<85)break S;if(t=128,e-119894>>>0>=71)break L;break R}if(e-120138>>>0<7|e>>>0>120145|120134==(0|e)|e-120128>>>0<5)break S;if(e-120123>>>0<4|e-120094>>>0<28|120070!=(0|e)&e>>>0<120075|e-120086>>>0<7)break S;if(t=128,e-120077>>>0>=8)break L;break R}if(e-120540>>>0<31|e>>>0<120486)break S;if(t=128,e-120488>>>0>=25)break L;break R}if(e-120714>>>0<31|e-120598>>>0<31)break S;if(t=128,e-120656>>>0<31)break R;break L;case 11:Xe:{qe:{Je:{_e:{$e:{eA:{AA:{tA:{rA:{nA:{aA:{sA:{iA:{oA:{lA:{cA:{gA:{if((0|(A=-256&e))<=43263){if((0|A)<=3839){if((0|A)<=3071){if(2304==(0|A))break gA;if(2816!=(0|A))break P;if((0|e)>3005)break lA;if(2878!=(0|e))break cA;return Z=0,132096}if(3072==(0|A))break oA;if(3328!=(0|A))break P;switch(t=132096,e-3535|0){case 0:case 16:break R;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:break P;default:break iA}}if((0|A)<=6911){if(3840==(0|A))break sA;if(4096!=(0|A))break P;if(t=1024,e-4139>>>0<2)break R;switch(e-4145|0){case 0:case 7:case 10:case 11:case 37:case 38:case 49:case 54:case 55:case 82:case 83:break R;case 86:case 87:case 88:case 89:case 90:case 91:case 94:case 105:case 106:break Xe;default:break aA}}if(6912==(0|A))break nA;if(7168==(0|A))break rA;if(12288!=(0|A))break P;if(t=135168,12334!=(-2&e))break P;break R}if((0|A)<=70399){if((0|A)<=43775){if(43264==(0|A))break tA;if(43520!=(0|A))break P;return Z=0,e-43643&-3?1024:4096}if(43776==(0|A))break AA;if(69888==(0|A))break eA;if(70144!=(0|A))break P;if(t=4096,70197!=(0|e))break P;break R}if((0|A)<=70911){if(70400==(0|A))break $e;if(70656!=(0|A))break P;A=70845==(0|e)?132096:1024,A=(e=70832==(0|e))?132096:A;break v}if(70912==(0|A))break _e;if(71168==(0|A))break Je;if(119040!=(0|A))break P;switch(t=131072,e-119141|0){case 8:break z;case 1:break L;case 0:break R;default:break qe}}A=2519==(0|e)?132096:1024,A=(e=2494==(0|e))?132096:A;break v}if(t=132096,2903!=(0|e))break P;break R}if(3006==(0|e))return Z=0,132096;if(t=132096,3031!=(0|e))break P;break R}if((e=e-3266|0)>>>0>20)break P;if(t=132096,!(1<<e&1572865))break P;break R}if(3390==(0|e))break R;if(3415!=(0|e))break P;break R}if(t=4096,3902!=(-2&e))break P;break R}t=(e=4252==(0|e))>>>22|0,e<<=10;break m}t=1024;nA:switch(e-6965|0){default:if(6916==(0|e))break R;break;case 0:case 6:break R;case 1:case 2:case 3:case 4:case 5:}if(e-6973>>>0<5)break R;nA:switch(e-6979|0){case 1:break z;case 0:break R}if(7042==(0|e)|7073==(0|e)|7078==(-2&e))break R;if(7082==(0|e))break z;if(7143==(0|e)|e-7146>>>0<3)break R;t=(e=7150==(0|e))>>>22|0,e<<=10;break m}A=7415==(0|e)?4096:1024,A=(e=7393==(0|e))?4096:A;break v}A=43456==(0|e)?4096:1024,A=(e=43347==(0|e))?4096:A;break v}if(t=4096,44012!=(0|e))break P;break R}if(t=4096,70080!=(0|e))break P;break R}t=132096;$e:switch(e-70462|0){case 0:case 25:break R;case 15:break $e;default:break P}break z}if(t=132096,71087!=(0|e))break P;break R}if(t=4096,71350!=(0|e))break P;break R}if(t=135168,e-119150>>>0<5)break R;break P}break z;case 12:A=(8419==(0|e))<<6,e=0;break k;case 13:Xe:{qe:{Je:{_e:{$e:{eA:{AA:{tA:{rA:{nA:{aA:{sA:{iA:{oA:{lA:{cA:{gA:{uA:{dA:{fA:{pA:{hA:{mA:{CA:{bA:{IA:{wA:{kA:{xA:{vA:{BA:{yA:{EA:{MA:{GA:{DA:{QA:{TA:{PA:{zA:{FA:{SA:{NA:{OA:{LA:{YA:{HA:{RA:{jA:{VA:{WA:{if((0|(A=-256&e))<=43775){if((0|A)<=5887){if((0|A)<=2559){if((0|A)<=1535){if(768==(0|A))break WA;if(1024==(0|A))break VA;if(1280!=(0|A))break L;if(e-1425>>>0>=17)break jA;break z}if((0|A)<=2047){if(1536==(0|A))break RA;if(1792!=(0|A))break L;if(t=1024,1809==(0|e))break R;if(1840!=(-16&e))break HA;return Z=0,5120}if(2048==(0|A))break YA;if(2304!=(0|A))break L;if(e>>>0>=2307)break LA;break P}if((0|A)<=3583){if((0|A)<=3071){if(2560==(0|A))break OA;if(2816!=(0|A))break L;switch(t=1024,e-2876|0){case 0:break z;case 3:break R;case 1:case 2:break SA;default:break NA}}if(3072==(0|A))break FA;if(3328!=(0|A))break L;if(3328!=(0|(A=-2&e)))break zA;break P}if((0|A)<=4095){if(3584==(0|A))break PA;if(3840!=(0|A))break L;if(3864!=(0|(A=-2&e)))break TA;break z}if(4096==(0|A))break QA;if(4864!=(0|A))break L;if(t=1024,4959!=(0|e))break L;break R}if((0|A)<=8191){if((0|A)<=6655){if(5888==(0|A))break DA;if(6144==(0|A))break GA;if(6400!=(0|A))break L;if((A=e-6432|0)>>>0<=18&&(t=1024,1<<A&262535))break R;if(t=4096,e-6457>>>0>=3)break L;break R}if((0|A)<=7167){if(6656==(0|A))break MA;if(6912!=(0|A))break L;if(t=1024,6912==(-4&e))break R;if(6964!=(0|e))break EA;break z}if(7168==(0|A))break yA;if(7424!=(0|A))break L;if(t=4096,e-7620>>>0<12)break R;if(t=1024,e-7655>>>0<14)break R;if((e=e-7669|0)>>>0>=11)break L;A=i[(e=82104+(e<<3)|0)>>2];break f}if((0|A)<=42495){if((0|A)<=11519){if(8192==(0|A))break BA;if(11264!=(0|A))break L;if(t=4096,e-11503>>>0>=3)break L;break R}if(11520==(0|A))break vA;if(12288!=(0|A))break L;if(e-12330>>>0>=4)break xA;break z}if((0|A)<=43263){if(42496==(0|A))break kA;if(43008!=(0|A))break L;if(e-43045>>>0>=2)break wA;break P}if(43264==(0|A))break IA;if(43520!=(0|A))break L;switch(t=1024,e-43561|0){case 83:case 150:case 152:break z;case 0:case 1:case 2:case 3:case 4:case 5:case 8:case 9:case 12:case 13:case 26:case 35:case 135:case 137:case 138:case 139:case 142:case 143:case 149:break R;default:break bA}}if((0|A)<=71423){if((0|A)<=69375){if((0|A)<=66047){if(43776==(0|A))break CA;if(64256==(0|A))break mA;if(65024!=(0|A))break L;if(t=536870912,e-65024>>>0<15)break R;if(r=64,65039==(0|e))break R;if(t=4096,r=0,65056!=(-16&e))break L;break R}if((0|A)<=68095){if(66048==(0|A))break hA;if(66304!=(0|A))break L;if(t=1024,e-66422>>>0>=5)break L;break R}if(68096==(0|A))break pA;if(68864!=(0|A))break L;if(t=5120,68900!=(-4&e))break L;break R}if((0|A)<=70399){if((0|A)<=69887){if(69376==(0|A))break fA;if(69632!=(0|A))break L;if(e-69688>>>0>=14)break dA;break P}if(69888==(0|A))break uA;if(70144!=(0|A))break L;if(t=1024,e-70191>>>0<3)break R;switch(e-70196|0){case 2:break z;case 0:case 3:case 10:break R;case 1:case 4:case 5:case 6:case 7:case 8:case 9:break cA;default:break gA}}if((0|A)<=70911){if(70400==(0|A))break lA;if(70656!=(0|A))break L;if(70712!=(-8&e))break oA;break P}if(70912==(0|A))break iA;if(71168!=(0|A))break L;if(t=1024,e-71219>>>0<8)break R;switch(e-71229|0){case 2:break z;case 0:case 3:break R;case 1:break aA;default:break sA}}if((0|A)<=92927){if((0|A)<=72703){if(71424==(0|A))break Ye;if(71680==(0|A))break nA;if(72192!=(0|A))break L;if(e-72193>>>0>=10)break rA;break P}if((0|A)<=73215){if(72704==(0|A))break tA;if(72960!=(0|A))break L;if((A=e-73009|0)>>>0<19)break Oe;break $}if(73216==(0|A))break AA;if(92672!=(0|A))break L;if(t=4096,e-92912>>>0>=5)break L;break R}if((0|A)<=122879){if((0|A)<=113663){if(92928==(0|A))break eA;if(93952!=(0|A))break L;if(t=4096,e-94095>>>0>=4)break L;break R}if(113664==(0|A))break $e;if(119040!=(0|A))break L;switch(t=4096,e-119143|0){case 0:case 1:case 2:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 30:case 31:case 32:case 33:case 34:case 35:case 36:case 67:case 68:case 69:case 70:break R;default:break L}}if((0|A)<=125183){if(122880==(0|A))break _e;if(124928!=(0|A))break L;if(t=4096,e-125136>>>0>=7)break L;break R}if(125184==(0|A))break Je;if(917760!=(0|A))break L;if(t=536870912,e-917760>>>0>=240)break L;break R}if(e-768>>>0<69)break z;if(t=21504,837==(0|e))break R;if(e-838>>>0<9)break z;if(t=4194304,847==(0|e))break R;if(848==(-8&e))break z;if(t=4096,e-861>>>0>=6)break L;break R}if(t=4096,e-1155>>>0>=5)break L;break R}if(t=4096,e-1443>>>0<13)break R;if(t=5120,e-1456>>>0<14)break R;if((e=e-1471|0)>>>0>=9)break L;A=i[(e=81944+(e<<3)|0)>>2];break f}if(e-1552>>>0<11)break P;if(t=5120,e-1611>>>0<8)break R;if(e-1619>>>0<4)break P;RA:switch(e-1623|0){case 1:break z;case 0:break R;case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 25:case 127:case 128:case 129:case 130:case 131:case 132:case 133:break P}if(t=4096,e-1759>>>0<2)break R;if((A=e-1761|0)>>>0<8)break We;break ee}if(e-1856>>>0<11)break z;if(t=5120,e-1958>>>0<11)break R;if(t=4096,e-2027>>>0>=9)break L;break R}t=1024;YA:switch((-2&e)-2070|0){case 2:break z;case 0:break R}if(e-2260>>>0<12|e-2089>>>0<4|e-2075>>>0<9|e-2085>>>0<3)break P;if(e-2275>>>0<7)return Z=0,5120;if(t=4096,e-2282>>>0<6)break R;if(t=5120,e-2288>>>0<15)break R;if(t=1024,2303!=(0|e))break L;break R}t=1024;LA:switch(e-2362|0){case 2:break z;case 0:break R}if(e-2369>>>0<8)break P;t=4096;LA:switch(e-2381|0){case 0:case 4:case 5:case 6:case 7:case 111:break R;case 8:case 9:case 10:case 21:case 22:case 52:break P}if(e-2497>>>0<4)break P;if(2509==(0|e))break R;if(t=1024,2530!=(-2&e))break L;break R}if(e-2561>>>0<2)break P;t=4096;OA:switch(e-2620|0){case 0:case 17:case 128:case 145:break R;case 5:case 6:case 11:case 12:case 15:case 16:case 21:case 52:case 53:case 57:case 69:case 70:case 133:case 134:case 135:case 136:case 137:case 139:case 140:case 166:case 167:case 190:case 191:case 192:break P}if(e-2813>>>0>=3)break L;break R}if(2817==(0|e))break P}if(e-2881>>>0<4)break P;t=4096;SA:switch(e-2893|0){case 0:break R;case 9:break P}if(2914==(-2&e))break P;t=1024;SA:switch(e-3008|0){default:if(2946!=(0|e))break L;break R;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:break L;case 0:break R;case 13:}break z}t=1024;FA:switch(e-3072|0){case 77:case 188:case 205:break z;case 0:case 62:case 63:case 64:case 70:case 71:case 72:case 74:case 75:case 76:case 85:case 86:case 98:case 99:case 129:case 191:case 198:case 204:break R}if(3298!=(-2&e))break L;break R}if(t=4096,e-3387>>>0<2)break R;if(e-3393>>>0<4)break P;if(3405==(0|e))break R;if(3426==(0|A))break P;switch(e-3530|0){case 0:break R;case 8:case 9:case 10:case 12:break P;default:break L}}if((A=e-3633|0)>>>0<10)break Ve;break Ae}if((t=e-3893|0)>>>0>4|!(1<<t&21))break te;break z}t=1024;QA:switch(e-4141|0){case 10:case 12:case 13:break z;case 0:case 1:case 2:case 3:case 5:case 6:case 7:case 8:case 9:case 16:case 17:case 43:case 44:case 49:case 50:case 51:case 68:case 69:case 70:case 71:case 85:case 88:case 89:break R}A=(t=4253==(0|e))>>>22|0,t=(e=4237==(0|e))?4096:t<<10;break h}t=1024;DA:{QA:switch(e-5906|0){case 0:case 1:case 32:case 33:break R;case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:break DA}switch(e-5970|0){case 0:case 1:case 32:case 33:break R;default:break DA}}if(t=4194304,6068==(-2&e))break R;if((A=e-6071|0)>>>0<16)break je;break re}if(t=536870912,e-6155>>>0<3)break R;if(t=67109888,e-6277>>>0<2)break R;if(t=1024,6313!=(0|e))break L;break R}if(e-6679>>>0<2)break P;t=1024;MA:switch(e-6683|0){case 0:case 59:case 61:case 62:case 63:case 64:case 65:case 66:case 67:case 71:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 88:case 89:break R}if(t=4096,e-6832>>>0<14)break R;if((e=e-6773|0)>>>0>=11)break L;A=i[(e=82016+(e<<3)|0)>>2];break f}if(e-6966>>>0<5)break R;EA:switch(e-6972|0){case 0:case 6:break R}if(e-7019>>>0<9)break z;switch(e-7040|0){case 43:break z;case 0:case 1:case 34:case 35:case 36:case 37:case 40:case 41:case 44:case 45:case 104:case 105:case 109:case 111:case 112:case 113:break R;default:break L}}if(t=1024,e-7212>>>0<8)break R;t=12288;yA:switch(e-7222|0){case 1:break z;case 0:break R}if(e-7380>>>0<13)break z;t=4096;yA:switch(e-7376|0){case 0:case 1:case 2:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 29:case 36:break R}if(7416!=(-2&e))break L;break R}if(t=128,e-8400>>>0<13)break R;if((e=e-8417|0)>>>0>=15)break L;A=i[(e=82192+(e<<3)|0)>>2];break f}if(t=1024,11744!=(-32&e))break L;break R}if(t=4096,e-12441>>>0>=2)break L;break R}if(42607==(0|e))break z;if(e-42612>>>0<8)break P;if(42620==(0|(e&=-2)))break z;if(42654==(0|e))break Xe;if(t=4096,42736!=(0|e))break L;break R}t=4096;wA:switch(e-43204|0){case 0:break R;case 1:break P}if(e-43232>>>0>=18)break L;break R}if(e-43302>>>0<5)break P;if(e-43307>>>0<3)break z;if(e-43335>>>0<11|e-43392>>>0<3)break P;if(t=4096,43443==(0|e))break R;if(t=1024,e-43446>>>0<4)break R;r=(A=43493==(0|e))>>>20|0,A=(e=43452==(0|e))?1024:A<<12;break x}if(43756==(-2&e))break R;if(t=4096,43766!=(0|e))break L;break R}t=1024;CA:switch(e-44005|0){case 0:case 3:break R;case 8:break CA;default:break L}break z}if(t=5120,64286!=(0|e))break L;break R}if(t=4096,66272!=(0|e))break L;break R}if(68108==(-4&e))break P;if((A=e-68097|0)>>>0<6)break Re;break ne}if(t=4096,e-69446>>>0>=11)break L;break R}if(e-69811>>>0<4)break P;if(t=1024,69633==(0|e))break R;if(t=4096,e-69817>>>0>=2)break L;break R}t=1024;uA:switch(e-69888|0){case 51:case 52:case 115:break z;case 0:case 1:case 2:case 39:case 40:case 41:case 42:case 43:case 45:case 46:case 47:case 48:case 49:case 50:break R}if(70016==(-2&e)|e-70070>>>0<9)break R;if(t=4096,e-70090>>>0>=3)break L;break R}if(70367==(0|e))break R}if(e-70371>>>0<6)break R;if(t=4096,e-70377>>>0>=2)break L;break R}if(70400==(-2&e))break P;t=4096;lA:switch(e-70460|0){case 0:case 42:case 43:case 44:case 45:case 46:case 47:case 48:case 52:case 53:case 54:case 55:case 56:break R;case 4:break lA;default:break L}break P}if(70722==(0|e))break z;if(e-70723>>>0<2)break P;if((A=e-70835|0)>>>0<=13)break qe;break ae}if((A=e-71090|0)>>>0<12)break He;break se}switch(e-71339|0){case 0:case 2:break R;default:break aA}}if(e-71344>>>0<6)break R;if(t=4096,71351!=(0|e))break L;break R}if(t=1024,e-71727>>>0<10)break R;if(t=4096,e-71737>>>0>=2)break L;break R}if(72244==(0|e))break z;if(e-72245>>>0<10)break P;if(t=4096,72263==(0|e))break R;if(e-72273>>>0<11)break P;if(t=1024,e-72330>>>0<13)break R;t=(A=72345==(0|e))>>>20|0,A=(e=72344==(0|e))?8192:A<<12;break b}if((A=e-72752|0)>>>0<16)break Le;break ie}if(t=1024,e-73459>>>0>=2)break L;break R}if(t=1024,e-92976>>>0>=7)break L;break R}if(t=1024,113822!=(0|e))break L;break R}if(t=1024,e-122888>>>0<17)break R;if((e=e-122880|0)>>>0>=43)break L;A=i[(e=82816+(e<<3)|0)>>2];break f}if(t=12288,e-125252>>>0<3)break R;if(t=1024,125255==(0|e))break R;if(t=4096,e-125256>>>0<3)break R;break L}if(!(1<<A&12479))break ae;break P}break P;case 14:Xe:{if(120576!=(0|(A=-256&e))){if(65280!=(0|A)){if(A)break Xe;if(t=768,r=66,e-48>>>0>=10)break Xe;break R}if(t=256,e-65296>>>0>=10)break Xe;break R}if(t=128,e-120782>>>0<50)break R}break L;case 15:Xe:{if(12288!=(0|(A=-256&e))){if(8448!=(0|A))break Xe;A=(e=8560==(0|(t=-16&e)))>>>18|0,r=e<<14,t=(e=8544==(0|t))?32768:r;break h}if(e-12321>>>0<9)return Z=0,2048;if(e-12344>>>0<3)return Z=0,2048;if(t=2048,12295==(0|e))break R}break L;case 16:Xe:{qe:{Je:{if((0|(A=-256&e))<=9215){if(4864==(0|A))break Je;if(6400!=(0|A))break Xe;if(t=134217728,6618!=(0|e))break Xe;break R}if(9216==(0|A))break qe;if(127232!=(0|A))break Xe;if(t=0,r=-2147483648,127232==(0|e))break R;if(r=268435456,e-127233>>>0>=10)break Xe;break R}if(t=134217728,e-4969>>>0>=9)break Xe;break R}if(t=0,r=-2147483648,e-9352>>>0<20)break R}break L;case 17:r=(e=8256==(0|e))>>>25|0,e<<=7;break C;case 18:Xe:{qe:{Je:{_e:{if((0|(A=-256&e))<=11775){if((0|A)<=6143){if(t=-2147483624,!A)break R;if(1280!=(0|A))break Xe;if(t=24,1418!=(0|e))break Xe;break R}if(6144==(0|A))break _e;if(8192!=(0|A))break Xe;if(t=-2147483624,8208==(-2&e))break R;e=e-8211>>>0<2,A=-2147483640;break d}if((0|A)<=65023){if(11776==(0|A))break Je;if(12288!=(0|A))break Xe;A=12336==(0|e),t=(e=12316==(0|e))||A?-2147483640:8,Z=e?0:A?130:0;break u}if(65024==(0|A))break qe;if(65280!=(0|A))break Xe;if(t=24,65293!=(0|e))break Xe;break R}if(t=24,6150!=(0|e))break Xe;break R}if(t=-2147483624,11799==(0|e))break R;e=11834==(-2&e),A=-2147483640;break d}if(t=8,r=8388608,e-65073>>>0<2)break R;if(t=152,r=0,65123==(0|e))break R}return Z=0,8;case 19:Xe:{qe:{Je:{_e:{$e:{eA:{if((0|(A=-256&e))<=11775){if((0|A)<=8959){if(A)break eA;break O}if(8960==(0|A))break $e;if(9984==(0|A))break _e;if(10496!=(0|A))break L;break T}if((0|A)<=64767){if(t=-2147483648,11776==(0|A))break R;if(12288!=(0|A))break L;switch(t=-2147483616,e-12301|0){case 0:case 2:break R;default:break Je}}if(64768==(0|A))break qe;if(65024==(0|A))break Xe;if(65280!=(0|A))break L;if(t=32,65379==(0|e))break R;break L}if(8192!=(0|A))break L;eA:switch(e-8318|0){default:if(t=-2147483648,8262!=(0|e))break L;break R;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:break L;case 0:case 16:}break S}t=-2147483520;$e:switch(e-8969|0){case 1:break L;case 0:case 2:break R}if(9002!=(0|e))break L;return Z=0,-2139095040}if(t=-2147483520,10182==(0|e))break R;break Q}return Z=0,12318==(-2&e)?-2147483616:-2147483648}if(t=-2147483648,64830!=(0|e))break L;break R}r=(e=!(e-65090&-3))>>>27|0,e<<=5;break C;case 20:case 21:if(!(e&=-256))break g;if(t=-2147483616,8192==(0|e))break R;break Y;case 22:Xe:{qe:{Je:{_e:{$e:{eA:{AA:{tA:{rA:{nA:{aA:{sA:{iA:{oA:{lA:{cA:{gA:{uA:{dA:{fA:{pA:{hA:{mA:{CA:{bA:{IA:{wA:{kA:{xA:{vA:{BA:{yA:{EA:{MA:{GA:{DA:{QA:{TA:{PA:{zA:{FA:{SA:{NA:{OA:{LA:{YA:{HA:{RA:{if((0|(A=-256&e))<=43519){if((0|A)<=5887){if((0|A)<=2303){if((0|A)<=1535){if(!A)break RA;if(768==(0|A))break HA;if(1280!=(0|A))break L;if(t=0,r=538968064,e-1371>>>0<2)break R;switch(r=268435456,e-1373|0){case 0:break R;case 1:break LA;default:break YA}}if(1536==(0|A))break NA;if(1792==(0|A))break SA;if(2048!=(0|A))break L;if((A=e-2103|0)>>>0<8)break Se;break oe}if((0|A)<=3839){if(2304==(0|A))break FA;if(3328==(0|A))break zA;if(3584!=(0|A))break L;if(t=64,3674!=(-2&e))break L;break R}if((0|A)<=4863){if(3840==(0|A))break PA;if(4096!=(0|A))break L;if(t=268435520,4170==(-2&e))break R;if(t=0,r=16777216,4347!=(0|e))break L;break R}if(4864==(0|A))break TA;if(5632!=(0|A))break L;switch(t=64,e-5741|0){case 1:break n;case 0:break R;default:break QA}}if((0|A)<=11263){if((0|A)<=6655){if(5888==(0|A))break DA;if(6144==(0|A))break ze;if(6400!=(0|A))break L;A=6469==(0|e),t=(e=6468==(0|e))||A?268435520:0,Z=e?536870912:A?1073741824:0;break u}if((0|A)<=7167){if(6656==(0|A))break GA;if(6912!=(0|A))break L;if(7002!=(0|(A=-2&e)))break MA;break D}if(7168==(0|A))break EA;if(8192!=(0|A))break L;switch(t=-2147483520,e-8214|0){case 1:break O;case 0:break R;case 16:break yA;default:break BA}}if((0|A)<=41983){if(11264==(0|A))break vA;if(11776==(0|A))break xA;if(12288!=(0|A))break L;switch(t=-2147483584,r=272629760,e-12289|0){case 2:break O;case 0:break R;case 1:break wA;default:break kA}}if((0|A)<=43007){if(41984==(0|A))break IA;if(42496!=(0|A))break L;switch(t=64,r=268435456,e-42739|0){case 4:break a;case 0:break n;case 3:break t;case 2:break R;case 1:break CA;default:break bA}}if(43008==(0|A))break mA;if(43264!=(0|A))break L;switch(t=4096,e-43310|0){case 0:break R;case 1:break D;default:break hA}}if((0|A)<=70655){if((0|A)<=67839){if((0|A)<=65279){if(43520==(0|A))break pA;if(43776==(0|A))break fA;if(65024!=(0|A))break L;if(t=0,r=268435456,65040==(0|(a=-2&e)))break R;if((A=e-65042|0)>>>0<8)break Te;break le}if(65280==(0|A))break dA;if(66304==(0|A))break uA;if(67584!=(0|A))break L;if(t=64,67671!=(0|e))break L;break R}if((0|A)<=69375){if(67840==(0|A))break gA;if(68096==(0|A))break cA;if(68352!=(0|A))break L;switch(t=64,e-68410|0){case 0:case 1:case 2:case 3:case 4:case 5:case 95:case 96:case 97:case 98:break R;default:break L}}if((0|A)<=69887){if(69376==(0|A))break lA;if(69632!=(0|A))break L;if(e-69703>>>0>=2)break oA;break D}if(69888==(0|A))break iA;if(70144!=(0|A))break L;if((A=e-70200|0)>>>0<=4)break sA;if(70313!=(0|e))break L;break D}if((0|A)<=74751){if((0|A)<=71423){if(70656==(0|A))break aA;if(70912==(0|A))break nA;if(71168!=(0|A))break L;if(t=268435520,e-71233>>>0>=2)break L;break R}if((0|A)<=72703){if(71424==(0|A))break rA;if(72192!=(0|A))break L;if(e-72258>>>0>=2)break tA;break D}if(72704==(0|A))break AA;if(73216!=(0|A))break L;if(t=268435520,e-73463>>>0>=2)break L;break R}if((0|A)<=93695){if(74752==(0|A))break eA;if(92672==(0|A))break _e;if(92928!=(0|A))break L;if(t=268435520,e-92983>>>0<2)break R;A=92996==(0|e)?268435520:0,A=(e=92985==(0|e))?64:A;break v}if((0|A)<=121343){if(93696==(0|A))break $e;if(113664!=(0|A))break L;if(t=268435520,r=-2147483648,113823!=(0|e))break L;break R}if(121344==(0|A))break Qe;if(125184!=(0|A))break L;t=(125279==(0|e))<<30,A=0,Z=(e=125278==(0|e))?536870912:t;break l}t=-1879048128,r=536870912;RA:{jA:{VA:{WA:{UA:switch(e-33|0){default:switch(e-183|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:break RA;case 8:break VA;case 0:break WA;default:break jA}case 2:case 9:Z=66;break i;case 11:return Z=268435456,-2147483584;case 13:return Z=-2147483648,-1879048128;case 25:return Z=134217728,-2147483584;case 26:return Z=67108864,-2147483584;case 1:case 6:break g;case 0:break R;case 3:case 4:case 5:case 7:case 8:case 10:case 12:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 27:case 28:case 29:break RA;case 30:}return Z=1073741824,-1879048128}return Z=0,134230016}Z=1078984704;break i}if(161==(0|e))break ce}break O}A=903==(0|e),t=(e=894==(0|e))?64:A?134217792:0,Z=e?1073741824:A?67108864:0;break u}if(1417==(0|e))break OA;if(1475!=(0|e))break L;break G}Z=1075838976;break s}Z=-2143289344;break r}t=64,r=268435456;NA:switch(e-1548|0){case 15:break t;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 16:case 17:break L;case 0:break R;case 19:break NA;case 18:break D;default:break Je}break a}if((A=e-1792|0)>>>0<6)break Ne;if(t=64,r=134217728,1798==(-2&e))break R;r=67108864;SA:{NA:{OA:switch(e-1800|0){default:switch(e-2040|0){case 1:break SA;case 0:break NA;default:break L}case 3:break L;case 0:break R;case 1:break OA;case 2:case 4:break G}Z=1073741824;break A}Z=268435456;break A}Z=536870912;break r}A=2405==(0|e),t=(e=2404==(0|e))||A?268435520:0,Z=e?-2143289344:A?16777216:0;break u}if(t=0,r=-2143289344,3572!=(0|e))break L;break R}t=64;PA:switch(e-3848|0){case 5:Z=-2143289344;break A;case 6:Z=16777216;break A;case 0:break R}if(e-3854>>>0<5)break R;if(t=0,r=268435456,3860!=(0|e))break L;break R}if((A=e-4961|0)>>>0<4)break Fe;if(t=64,r=134217728,e-4965>>>0<2)break R;A=4968==(0|e),t=(e=4967==(0|e))||A?268435520:0,Z=e?1073741824:A?16777216:0;break u}if(e-5867>>>0>=3)break L;break R}if(t=268435520,e-5941>>>0<2)break R;if((e=e-6100|0)>>>0>=7)break L;A=i[(e=83240+(e<<3)|0)>>2];break f}if(t=268435520,6824!=(-4&e))break L;break R}if(t=64,7005==(0|e))break R;if(t=268435520,7006!=(0|A))break L;break R}if(e-7227>>>0<2)break D;if(t=64,e-7229>>>0<3)break R;if(t=268435520,7294==(-2&e))break R;if(t=4096,7379!=(0|e))break L;break R}Z=33554432;break i}if(8224==(-8&e))break O;if(e-8242>>>0<3)break R;if(e-8240>>>0<9)break O;if((A=e-8251|0)>>>0<21)break Pe;break ge}if(11513==(0|e)){Z=-2147483648;break s}if(t=0,r=1073741824,11514==(-2&e))break R;if(r=-2147483648,11518!=(0|e))break L;break R}t=-1879048128;xA:switch(e-11822|0){case 4:case 6:Z=268435456;break i;case 5:Z=-2147483648;break i;case 7:Z=67108864;break i;case 14:return Z=-2147483648,-1879048128;case 19:return Z=268435456,-2147483584;case 30:case 32:return Z=0,-2147483584;case 0:break R}break O}if(12349==(0|e))break M;if(12539!=(0|e))break L;return Z=0,16}return Z=-2143289344,-1879048128}A=42239==(0|e),t=(e=42238==(0|e))?64:A?268435520:0,Z=e?268435456:A?-2147483648:0;break u}bA:switch(e-42509|0){case 1:break n;case 0:break R;case 2:break bA;default:break L}break a}Z=134217728;break A}if(e-43126>>>0<2)break D;if(t=268435520,e-43214>>>0>=2)break L;break R}if(43463==(0|e))break G;if(t=268435520,43464!=(-2&e))break L;break R}if(e-43613>>>0<3)break D;if(t=64,43743==(0|e))break R;if(t=268435520,43760!=(-2&e))break L;break R}if(t=268435520,44011!=(0|e))break L;break R}t=268435520,r=541065216;dA:switch(e-65281|0){case 1:case 6:return Z=0,32;case 11:Z=272629760;break A;case 13:Z=-2143289344;break r;case 100:return Z=0,16;case 25:Z=138412032;break A;case 26:Z=71303168;break A;case 30:Z=1077936128;break r;case 96:break n;case 59:break S;case 0:break R;case 99:break dA;default:break L}Z=268435456;break A}t=(A=66512==(0|e))>>>26|0,A=(e=66463==(0|e))?64:A<<6;break b}if(t=64,67871!=(0|e))break L;break R}if(t=268435520,68182==(-2&e))break R;if(t=64,e-68336>>>0>=6)break L;break R}if(t=268435520,e-69461>>>0>=5)break L;break R}if(t=64,e-69705>>>0<5)break R;if(t=268435520,e-69822>>>0>=4)break L;break R}if(e-69953>>>0<2)break D;if((A=e-70085|0)>>>0<=26)break qe;break ue}if(2!=(0|A))break D;break G}if(t=268435520,e-70731>>>0<2)break R;r=(A=70747==(0|e))>>>26|0,A=(e=70733==(0|e))?64:A<<6,Z=e?268435456:r;break l}t=268435520;nA:switch((-2&e)-71106|0){case 0:break R;case 2:break Xe}if(t=8192,e-71110>>>0<3)break R;if(t=268435520,e-71113>>>0>=15)break L;break R}if(t=268435520,e-71484>>>0>=3)break L;break R}if(t=268435520,e-72347>>>0<2)break R;if(t=64,e-72353>>>0>=2)break L;break R}if(t=268435520,e-72769>>>0<2)break R;t=(A=72817==(0|e))>>>26|0,A=(e=72771==(0|e))?64:A<<6;break b}if(t=64,r=134217728,e-74865>>>0<2)break R;if(r=0,e-74864>>>0>=5)break L;break R}A=93848==(0|e)?268435520:0,A=(e=93847==(0|e))?64:A;break v}if(t=268435520,92782==(-2&e))break R;if(r=-2147483648,92917!=(0|e))break L;break R}if(1748==(0|e))break n;break L}if(!(1<<A&100663555))break ue;break D}break G;case 23:Xe:{qe:{Je:{_e:{$e:{eA:{if((0|(A=-256&e))<=11775){if((0|A)<=8959){if(A)break eA;break O}if(8960==(0|A))break $e;if(9984==(0|A))break _e;if(10496!=(0|A))break L;break T}if((0|A)<=64767){if(11776==(0|A))break Je;if(12288!=(0|A))break L;if((e=e-12300|0)>>>0<=17&&(t=-2147483616,1<<e&131077))break R;break O}if(64768==(0|A))break qe;if(65024==(0|A))break Xe;if(65280!=(0|A))break L;if(t=32,65378==(0|e))break R;break L}if(8192!=(0|A))break L;t=-2147483616;eA:switch(e-8218|0){case 1:case 2:case 3:break L;case 0:case 4:break R}eA:switch(e-8317|0){default:if(8261!=(0|e))break L;break O;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:break L;case 0:case 16:}break S}t=-2147483520;$e:switch(e-8968|0){case 1:break L;case 0:case 2:break R}if(9001!=(0|e))break L;return Z=0,-2139095040}if(t=-2147483520,10181==(0|e))break R;break Q}return Z=0,11842==(0|e)?-2147483616:-2147483648}if(t=-2147483648,64831!=(0|e))break L;break R}t=(e=!(e-65089&-3))>>>27|0,e<<=5;break m;case 24:t=(e=e>>>0<256)>>>1|0,e<<=31;break m;case 25:Xe:{qe:{Je:{_e:{$e:{eA:{AA:{tA:{if((0|(A=-256&e))<=12287){if((0|A)<=767){if(!A)break tA;if(512!=(0|A))break Xe;if(e-751>>>0>=17)break AA;break z}if(768==(0|A))break eA;if(7936!=(0|A))break Xe;switch(t=4096,e-8125|0){case 0:case 2:case 3:case 4:case 16:case 17:case 18:case 32:case 33:case 34:case 48:case 49:case 50:case 64:case 65:break R;default:break Xe}}if((0|A)<=43775){if(12288==(0|A))break $e;if(42752!=(0|A))break Xe;if(t=4096,42784!=(-2&e))break Xe;break R}if(43776==(0|A))break _e;if(65280==(0|A))break Je;if(t=0,r=78,127744!=(0|A))break Xe;break R}tA:switch(e-168|0){default:t=-2147479424;rA:switch(e-94|0){case 0:break R;case 2:break rA;default:break Xe}return Z=0,-2147479552;case 0:case 7:break z;case 1:case 2:case 3:case 4:case 5:case 6:case 8:case 9:case 10:case 11:case 13:case 14:case 15:break Xe;case 12:case 16:}break z}if(749==(0|e)|e-741>>>0<7)break z;if(e-706>>>0>=4)break qe;break z}if((e=e-885|0)>>>0>16)break Xe;if(t=4096,!(1<<e&98305))break Xe;break R}if(t=67112960,e-12443>>>0>=2)break Xe;break R}if(t=4096,43867!=(0|e))break Xe;break R}t=4224;Je:switch(e-65342|0){default:if(65507!=(0|e))break Xe;break;case 0:break R;case 1:break Xe;case 2:}break z}if(t=4096,e-722>>>0<14)break R}break L;case 26:Xe:{qe:{Je:{_e:{$e:{eA:{if((0|(A=-256&e))<=9471){if((0|A)<=8447){if(A)break Xe;break O}if(8448==(0|A))break eA;if(8704==(0|A))break $e;if(t=-2147483648,8960!=(0|A))break L;break R}if((0|A)<=10495){if(9472==(0|A))break _e;if(9728==(0|A))break Je;if(9984==(0|A))break O;break L}if(10496==(0|A))break qe;if(10752==(0|A))break O;if(t=-2147483648,11008!=(0|A))break L;break R}if(8472==(0|e))return Z=0,67108864;if(8596==(0|e))break E;if(t=-2147483648,e>>>0<=8591)break L;break R}if(t=-2147483640,8722==(0|e))break R;A=-2147483648,Z=(e=e-8942>>>0<4)?33554432:0;break l}if(t=-2147483648,r=130,e-9723>>>0<2)break R;A=-2147483648,Z=(e=e-9725>>>0<2)?134:0;break l}if(t=-2147483648,r=128,9839==(0|e))break R;break O}if(t=-2147483648,r=130,10548==(-2&e))break R;A=-2147483648,Z=(e=10626==(0|e))?134217728:0;break l}if(8192==(0|A))break de;break L;case 27:Xe:{qe:{Je:{_e:{$e:{eA:{AA:{tA:{rA:{nA:{aA:{sA:{iA:{oA:{lA:{cA:{gA:{uA:{dA:{fA:{pA:{hA:{mA:{CA:{if((0|(A=-256&e))<=12287){if((0|A)<=9727){if((0|A)<=8959){if(!A)break CA;if(8448!=(0|A))break L;switch(t=0,r=130,e-8482|0){case 7:break S;case 0:break R;case 1:case 2:case 3:case 4:case 5:case 6:case 8:case 9:case 10:case 11:break fA;case 12:break hA;default:break mA}}if(8960==(0|A))break dA;if(9216==(0|A))break uA;if(9472!=(0|A))break L;switch(t=-2147483520,(-2&e)-9632|0){case 0:break R;case 10:break E;default:break gA}}if((0|A)<=11007){if(9728==(0|A))break cA;if(9984==(0|A))break lA;if(t=-2147483648,10240!=(0|A))break L;break R}if(11008==(0|A))break oA;if(11776==(0|A))break iA;if(12032!=(0|A))break L;if(t=1048576,e>>>0<12246)break R;switch(t=262144,(-2&e)-12272|0){case 0:break R;case 2:break Xe;default:break sA}}if((0|A)<=127999){if((0|A)<=127231){if(12288==(0|A))break aA;if(12800==(0|A))break nA;if(126976!=(0|A))break L;A=127183==(0|e),t=0,Z=(e=126980==(0|e))||A?134:128;break u}if(127232==(0|A))break rA;if(127488==(0|A))break tA;if(127744!=(0|A))break L;if(e>>>0>=127777)break AA;break y}if((0|A)<=128767){if(128e3==(0|A))break eA;if(128256==(0|A))break $e;if(128512!=(0|A))break L;if((A=e-128581|0)>>>0<11)break we;break fe}if(128768==(0|A))break _e;if(129280==(0|A))break Je;if(129536!=(0|A))break L;Z=128;break s}A=174==(0|e),t=-2147483648,Z=(e=169==(0|e))||A?130:0;break u}switch(e-8616|0){case 0:break O;case 1:case 2:break pA;default:break fA}}return Z=0,67108864}return Z=130,-2147483520}if(t=-2147483520,e-8597>>>0<5)break R;if(e-8604>>>0<18)break T;if((A=e-8624|0)>>>0<8)break De;break pe}if(e>>>0<8968)break O;if(8986==(0|(A=-2&e)))break o;if(e-8972>>>0<20|e-8994>>>0<6)break O;if(9e3==(0|e))break E;if(e-9003>>>0<81)break O;if(t=-2147483648,r=128,9096==(0|e))break R;if(e-9085>>>0<30)break O;if(t=-2147483520,r=0,9140==(0|A))break R;dA:switch(e-9143|0){case 0:case 25:break R;case 24:break E}if(e-9140>>>0<40)break O;if(9186==(0|e))break R;if((A=e-9193|0)>>>0<4)break o;t=-2147483648,r=134;dA:switch(e-9200|0){case 0:case 3:break R}if(A>>>0<11)break E;if(r=130,e-9208>>>0<3)break R;if(r=0,e>>>0<=9186)break L;break R}if(t=-2147483648,e-9216>>>0<75)break R;if(t=33792,r=130,9410==(0|e))break R;if(r=0,e-9398>>>0<26)break R;if(t=17408,e-9424>>>0>=26)break L;break R}if(e-9646>>>0<8)break T;if(r=130,9654==(0|e))break R;if(9660==(-4&e))break T;gA:switch(e-9664|0){case 0:break R;case 6:case 7:case 10:case 11:case 15:case 16:case 17:case 18:case 19:case 34:case 36:break T}return Z=0,e-9703>>>0<6?-2147483520:-2147483648}cA:switch((-16&e)-9728>>>4|0){case 0:if(e>>>0<9733)break E;t=-2147483520,r=128;gA:switch(e-9733|0){case 0:break R;case 9:break gA;case 1:break T;default:break he}break E;case 2:if((A=e-9760|0)>>>0<11)break Me;if(t=-2147483648,r=130,e>>>0<=9773)break he;break R;case 3:if(t=-2147483648,r=130,e-9784>>>0>=3)break he;break R;case 4:t=-2147483520,r=130;gA:switch(e-9792|0){case 0:case 2:break R}if(t=-2147483648,r=134,e>>>0<=9799)break he;break R;case 5:if(t=-2147483648,r=134,e>>>0<9812)break R;if(r=130,9823!=(0|e))break he;break R;case 6:if(9734==(0|e))break T;if(9824==(0|e))return Z=130,-2147483520;if(t=-2147483520,r=128,e-9825>>>0<2)break R;if((A=e-9827|0)>>>0<6)break Ee;break me;case 8:if(t=-2147483648,e>>>0<=9861)break he;break R;case 10:t=-2147483648,r=130;gA:switch(e-9888|0){case 1:break o;case 0:break R}if(r=134,9898!=(-2&e))break he;break R;case 11:if(t=-2147483648,r=130,9904==(-2&e))break R;if(r=134,e-9917>>>0>=2)break he;break R;case 12:if(9924==(-2&e))break o;t=-2147483648,r=130;gA:switch(e-9928|0){case 0:case 7:break R;case 6:break gA;default:break he}break o;case 14:A=9962==(0|e),t=-2147483648,Z=(e=9961==(0|e))?130:A?134:128;break u;case 13:break ve;case 9:break Be;case 15:break cA;case 7:break ye;case 1:break Ge;default:break he}if(9972==(0|e)|e>>>0<9970)break E;if(t=-2147483648,r=134,e>>>0<9974)break R;if(9974!=(0|e)&&(r=130,e>>>0<9977))break R;if((e=e-9977|0)>>>0<5)break xe;break he}lA:{cA:{gA:{uA:{dA:switch((-16&e)-9984>>>4|0){case 0:if(t=0,r=130,9986==(0|e))break lA;if(r=128,e>>>0<9989)break lA;if(r=134,9989==(0|e))break lA;r=150;fA:switch((-2&e)-9994|0){case 0:break lA;case 2:break gA}if(r=130,e-9992>>>0<6)break lA;A=9999==(0|e),t=0,r=(e=9998==(0|e))?128:A?130:0;break lA;case 1:if(t=0,r=128,e>>>0<10002)break lA;if((e=e-10002|0)>>>0>11)break uA;if(r=130,!(1<<e&2069))break uA;break lA;case 2:A=10024==(0|e),t=0,r=(e=10017==(0|e))?130:A?134:0;break lA;case 4:t=0,r=130;fA:switch(e-10052|0){case 0:case 3:break lA;case 8:case 10:break fA;default:break uA}r=134;break lA;case 5:if(t=0,r=1073741958,e-10067>>>0<2)break lA;r=(e=e-10069&-3)?0:536871046;break lA;case 6:if((A=e-10082|0)>>>0<3)break cA;if(t=0,r=128,e>>>0<=10084)break uA;break lA;case 9:if(t=0,r=134,e-10133>>>0>=3)break uA;break lA;case 10:if(t=0,r=130,10145!=(0|e))break uA;break lA;case 11:A=10175==(0|e),t=0,r=(e=10160==(0|e))||A?134:0;break lA;case 3:break dA;default:break uA}if(t=0,r=130,e-10035>>>0<2)break lA}t=0,r=0;break lA}r=146;break lA}t=i[(e=83992+(A<<3)|0)>>2],r=i[e+4>>2]}return Z=r,-2147483648|t}if(t=-2147483648,r=130,e-11013>>>0<3)break R;if(r=134,e-11035>>>0<2)break R;A=11093==(0|e),t=-2147483648,Z=(e=11088==(0|e))||A?134:0;break u}if(e-11904>>>0>=26)break qe;return Z=0,1048576}if(e-12276>>>0>=8)break L;break R}if((e=e-12306|0)>>>0>14)break L;if(t=-2147483648,!(1<<e&16387))break L;break R}A=0,Z=(e=e-12951&-3)?0:130;break l}if(t=0,r=128,127279==(0|e))break R;if(e-127280>>>0<26)return Z=0,33792;if(e-127312>>>0<26)return Z=0,33792;if((A=e-127344|0)>>>0<=15&&(t=33792,r=130,1<<A&49155))break R;if(t=33792,r=0,A>>>0<26)break R;if(127374==(0|e))break y;if(t=0,r=134,e-127377>>>0<10)break R;if(r=102,e>>>0<=127461)break L;break R}t=0,r=134;tA:{rA:switch(e-127489|0){case 0:case 25:break R;case 1:break M;case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:break tA}switch(e-127535|0){case 0:break R;case 8:break M;default:break tA}}if(127568==(-2&e)|e-127538>>>0<9)break R;if(r=128,e>>>0<=127583)break L;break R}if(127777==(0|e))break M;if(e-127789>>>0<9|e-127799>>>0<70)break y;if(127877==(0|e))break B;if(e-127870>>>0<22)break y;if(e-127780>>>0<112)break M;t=0,r=130;AA:switch(e-127894|0){case 44:case 45:case 46:case 49:break B;case 0:case 1:case 3:case 4:case 5:break R}if(e-127904>>>0<42)break y;if(r=150,127946==(0|e))break R;if(r=146,e-127947>>>0<2)break R;if(e-127951>>>0<5)break y;if(r=134,e-127968>>>0<17)break R;if(r=130,e-127902>>>0<83)break R;if((A=e-127987|0)>>>0<5)break ke;break Ce}t=0,r=130;eA:switch(e-128063|0){case 0:case 2:break R}if(128124==(0|e)|(-5&e)-128129>>>0<3|128110==(0|e)|e-128112>>>0<9)break B;if(128066==(-2&e)|e-128102>>>0<4|e-128070>>>0<11)break B;eA:switch(e-128253|0){case 1:Z=128;break s;case 0:break M}if(r=150,128170==(0|e))break R;break y}if(e>>>0<128318)break y;if(t=0,e>>>0<128326)break R;if(e-128329>>>0<2)break M;if(e-128331>>>0<4|e-128336>>>0<24)break y;if(e-128367>>>0<2)break M;if(128372==(-2&e)){Z=146;break s}if(e-128371>>>0<7)break M;if(r=150,!(A=e-128378|0))break R;if(13==(0|A)|e-128394>>>0<4)break M;if(r=146,128400==(0|e))break R;if(r=150,e-128405>>>0<2)break R;r=134;$e:switch(e-128420|0){case 0:break R;case 1:case 4:case 13:case 14:case 24:case 30:case 31:case 32:case 45:case 46:case 47:case 56:case 57:case 58:case 61:case 63:case 68:case 75:case 79:case 86:break M}e=e>>>0>128506,A=0;break c}if(t=0,r=128,e-128981>>>0>=4)break L;break R}if(e>>>0<129292)break L;if(e-129328>>>0<10)break B;t=0,r=150;Je:switch(e-129304|0){case 35:break L;case 0:case 1:case 2:case 3:case 4:case 6:case 7:case 14:break R}if(e-129341>>>0<2)break B;if(r=0,129350==(0|e))break R;if(r=198,129456==(-4&e))break R;if((A=e-129461|0)>>>0<5)break Ie;break be}if(t=1048576,e-11931>>>0<89)break R;break L}return Z=0,524288;case 29:return Z=16777216,1073741825;case 28:break R;case 30:break Ze;default:break L}return Z=0,32==(0|e)?1073741825:1}if(!(1079>>>A&1))break j;A=i[(e=81344+(A<<3)|0)>>2];break f}if(557553>>>A&1)break S;if(8508!=(-4&e))break _;break R}if(!(207>>>A&1))break ee;break P}if(t=1024,!(1017>>>A&1))break Ae;break R}if(t=1024,!(32895>>>A&1))break re;break R}if(t=1024,!(55>>>A&1))break ne;break R}if(t=1024,!(3087>>>A&1))break se;break R}if((e=e-71453|0)>>>0>=15)break L;A=i[(e=82312+(e<<3)|0)>>2];break f}if(!(49023>>>A&1))break ie;A=i[(e=82432+(A<<3)|0)>>2];break f}if(!(514623>>>A&1))break $;A=i[(e=82664+(A<<3)|0)>>2];break f}A=i[(e=83160+(A<<3)|0)>>2];break f}if(t=268435520,!(197>>>A&1))break oe;break R}A=i[(e=83208+(A<<3)|0)>>2];break f}if((e=e-6145|0)>>>0>=10)break L;A=i[(e=83296+(e<<3)|0)>>2];break f}if(!(1077711>>>A&1))break ge;A=i[(e=83376+(A<<3)|0)>>2];break f}if(!(159>>>A&1))break le;A=i[(e=83544+(A<<3)|0)>>2];break f}if((e=e-121479|0)>>>0>=4)break L;A=i[(e=83608+(e<<3)|0)>>2];break f}if(!(195>>>A&1))break pe;break T}if((e=e-9745|0)>>>0>=13)break he;A=i[(e=83640+(e<<3)|0)>>2];break f}if(1101>>>A&1)break E;if(t=-2147483648,r=130,e>>>0<=9773)break he;break R}if(!(45>>>A&1))break me;A=i[(e=83744+(A<<3)|0)>>2];break f}if((e=e-9851|0)>>>0>=5)break he;A=i[(e=83792+(e<<3)|0)>>2];break f}if((e=e-9874|0)>>>0>=11)break he;A=i[(e=83832+(e<<3)|0)>>2];break f}if((e=e-9937|0)>>>0>=4)break he;A=i[(e=83920+(e<<3)|0)>>2];break f}A=i[(e=83952+(e<<3)|0)>>2];break f}if(!(23>>>A&1))break Ce;A=i[(e=84016+(A<<3)|0)>>2];break f}if(t=0,r=150,!(1991>>>A&1))break fe;break R}if(r=150,27>>>A&1)break R}A=0,Z=(e=e-129489>>>0<13)?150:134;break l}e=e-127992>>>0<3,A=0;break c}if(e-9837>>>0<2)break R}Z=128;break i}if(e-8623>>>0<13)break O;if(e-8636>>>0<18)break T;if((A=e-8656|0)>>>0<22&&(r=0,3157995>>>A&1))break R;if(t=-2147483648,r=0,e-8661>>>0<31)break R;break L}if(e>>>0<128592)break y;if(t=0,r=0,e>>>0<128640)break R;if(!((A=e-128675|0)>>>0>29|!(1<<A&537788417)))break B;if(e>>>0<128710)break y;if(r=150,128716==(0|e))break R;if(e-128715>>>0<5)break M;if(e-128720>>>0<3)break y;if(!((A=e-128736|0)>>>0>=10|!(575>>>A&1)))break M;if(r=134,e-128747>>>0<2)break R;r=130;fe:switch(e-128752|0){case 0:case 3:break R}e=e-128756>>>0<6,A=0;break c}t=-2147483648;de:switch(e-8260|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:break L;case 0:case 14:break R}if(16!=(0|(e=e-8315|0))&&e)break L;return Z=0,8}if(t=268435520,r=1073741824,69955!=(0|e))break L;break R}if(e-8266>>>0<8)break O;if(t=-2147483640,8275==(0|e))break R;if(t=-2147483648,e-8277>>>0>=10)break L;break R}Z=542113792;break i}if(t=-2147483648,r=0,e-65093>>>0<2)break R;if(t=64,r=268435456,65104==(0|a))break R;t=268435520,r=-2147483648;le:switch(e-65106|0){case 3:Z=134217728;break A;case 5:Z=536870912;break r;case 4:break a;case 2:break t;case 0:break R;case 15:case 22:break le;default:break L}break S}if(2142==(0|e))break G;if(t=64,e-2096>>>0<15)break R;break L}if(t=1024,e-72850>>>0<22)break R;if((e=e-72874|0)>>>0>=13)break L;A=i[(e=82560+(e<<3)|0)>>2];break f}if(t=4096,e-71103>>>0<2)break R;if(t=1024,71132!=(-2&e))break L;break R}if(70726==(0|e))break z;if(t=4096,70850!=(-2&e))break L;break R}if(t=4096,e-68325>>>0>=2)break L;break R}if(6109==(0|e))break z;if(t=4096,e-6089>>>0>=11)break L;break R}te:switch(e-3959|0){case 0:case 2:return Z=0,8389632}if(3968==(0|A)|e-3953>>>0<14)break P;if(!((A=e-3970|0)>>>0>=6|!(55>>>A&1)))break z;if(e-3981>>>0<11)break P;if(t=1024,e-3993>>>0<36)break R;if(t=4096,4038!=(0|e))break L;break R}if(e-3655>>>0<6)break z;if(!((A=e-3761|0)>>>0>11|!(1<<A&3577)))break P;t=1024;Ae:switch(e-3661|0){case 1:break z;case 0:break R}if(t=4096,e-3784>>>0<5)break R;if(t=1024,3789!=(0|e))break L;break R}if(e-1770>>>0<3)break R;if(t=1024,1773!=(0|e))break L;break R}if(73028==(-2&e))break z;t=1024;$:switch(e-73104|0){default:if(73031!=(0|e))break L;break R;case 2:case 3:case 4:case 6:break L;case 0:case 1:case 5:break R;case 7:}break z}if((e=e-8492|0)>>>0>=30)break L;A=i[(e=81704+(e<<3)|0)>>2];break f}t=0;break X}r=(A=43712==(-3&e))>>>20|0,t=A<<12}if(131072==(0|(n=-65536&e)))break K;if(65536==(0|n))break U;if(A=t,a=r,n)break W}if(e-13312>>>0<6582)break e;if(e-19968>>>0<20976)break e;if(n=2048,e-63744>>>0<366)return Z=a,2048|A;if(t=A,r=a,e-64112>>>0>=106)break W;break V}if(n=2099200,e-183984>>>0<7473|e-178208>>>0<5762|e-177984>>>0<222|e-131072>>>0<42711)break V;if(e-173824>>>0<4149)break V;if(n=2048,e-194560>>>0<542)break V;break W}if(n=2048,e-110960>>>0<396|e-94208>>>0<6125|e-100352>>>0<755)break V}n=0}return Z=r,t|n}if(8508==(-4&e))break S;if(t=128,!(e-8517>>>0<3)&&(t=16777344,8520!=(-2&e)))break L}Z=r;break u}A=(e=e>>>0>131069)?65536:0,Z=e?0:128;break l}if(11776==(0|e))break O}Z=0;break s}Z=0;break i}return Z=0,4194304}return Z=0,128}return Z=0,16777344}return Z=0,4096}return Z=0,1024}return Z=0,-2147483520}return Z=0,e-10214>>>0<10?-2147483520:-2147483648}Z=0;break r}Z=0;break A}Z=130;break s}Z=130;break i}Z=134;break s}return Z=150,0}Z=0;break l}Z=e?0:r;break l}return Z=A,e}return 131072}return Z=0,16777216}Z=e?0:t;break l}return Z=r,e}return Z=t,e}Z=e?0:A;break u}return Z=0,8192}Z=i[e+4>>2];break l}Z=e?8388608:0;break l}return t}return Z=0,-2147483616}Z=e?134:128}return A}Z=134}return-2147483648}return 0}Z=1073741824;break r}Z=-2147483648}return 268435520}Z=67108864}return 64}return Z=a,2099200|A}function J(e){var A,t=0,r=0,n=0,l=0,c=0;(A=se(8244))&&(i[A+328>>2]=2,a[132848]=0,i[A+684>>2]=0,i[A+688>>2]=0,i[A+320>>2]=0,i[A+324>>2]=0,a[A+268|0]=0,a[A+228|0]=0,i[A+8216>>2]=0,i[A+8220>>2]=0,i[A+224>>2]=104944,i[A+216>>2]=383,i[A+220>>2]=96,kA(A+344|0,0,292),i[A+8196>>2]=0,i[(t=A+8188|0)>>2]=0,i[t+4>>2]=0,i[A+8180>>2]=0,i[A+8184>>2]=0,a[A+460|0]=22,a[A+461|0]=129,a[A+466|0]=38,a[A+462|0]=38,a[A+463|0]=36,a[A+464|0]=22,a[A+465|0]=224,a[A+456|0]=22,a[A+457|0]=22,a[A+458|0]=44,a[A+459|0]=22,a[A+454|0]=46,a[A+455|0]=129,a[A+446|0]=22,a[A+447|0]=38,a[A+448|0]=28,a[A+449|0]=193,a[A+450|0]=38,a[A+451|0]=22,a[A+452|0]=46,a[A+453|0]=46,a[A+441|0]=129,a[A+442|0]=38,a[A+443|0]=22,a[A+444|0]=38,a[A+445|0]=193,i[A+332>>2]=104912,i[A+336>>2]=104916,i[A+340>>2]=105232,a[A+296|0]=18,a[A+297|0]=18,s[A+304>>1]=182,s[A+306>>1]=140,a[A+298|0]=20,s[A+308>>1]=220,s[A+310>>1]=220,s[A+312>>1]=220,a[A+299|0]=20,a[A+300|0]=20,s[A+314>>1]=240,a[A+301|0]=22,s[A+316>>1]=260,s[A+318>>1]=280,a[A+302|0]=22,a[A+303|0]=20,t=kA(A,0,212),i[t+200>>2]=20,i[t+192>>2]=25966,i[t+196>>2]=500,i[t+80>>2]=95,i[t+16>>2]=1,i[t+20>>2]=3,i[t+8>>2]=2,i[t+52>>2]=19,a[t+168|0]=3,i[t+92>>2]=2,i[t+72>>2]=4,i[t+40>>2]=115,i[t+44>>2]=95,i[t+140>>2]=105244,Gr(t,201),i[t+120>>2]=2,i[t+124>>2]=44,i[t+164>>2]=100,i[t+128>>2]=46,i[t+132>>2]=14,i[t+112>>2]=1227133512,i[t+116>>2]=49,i[t+104>>2]=1,r=i[26313],i[t+636>>2]=i[26312],i[t+640>>2]=r,r=i[26315],i[t+644>>2]=i[26314],i[t+648>>2]=r,r=i[26317],i[t+652>>2]=i[26316],i[t+656>>2]=r,r=i[26319],i[t+660>>2]=i[26318],i[t+664>>2]=r,r=i[26321],i[t+668>>2]=i[26320],i[t+672>>2]=r,r=i[26323],i[t+676>>2]=i[26322],i[t+680>>2]=r,r=o[104928]|o[104929]<<8,a[t+160|0]=r,a[t+161|0]=r>>>8,r=o[104924]|o[104925]<<8|o[104926]<<16|o[104927]<<24,a[t+156|0]=r,a[t+157|0]=r>>>8,a[t+158|0]=r>>>16,a[t+159|0]=r>>>24),n=rt(A+228|0,e),t=0;e:{A:if(r=o[0|e]){for(;t=(r<<24>>24)+(t<<8)|0,r=o[0|(e=e+1|0)];);t:{r:{n:{a:{s:{i:{o:{l:{c:{g:{u:{d:{f:{p:{h:{m:{C:{b:{I:{w:{k:{x:{v:{B:{y:{E:{M:{G:{D:{Q:{T:{P:{z:{F:{S:{N:{O:{L:{Y:{H:{R:{j:{V:{W:{U:{K:{Z:{X:{q:{J:{_:{$:{ee:{Ae:{te:{re:{ne:{ae:{se:{ie:{oe:{le:{ce:{ge:{ue:{de:{fe:{pe:{he:{me:{if((0|t)<=28008){if((0|t)<=26464){if((0|t)<=25696){Ce:switch(t-24934|0){case 20:break l;case 1:case 2:case 3:case 4:case 5:case 6:case 9:case 10:case 11:case 14:case 15:case 16:case 17:case 18:case 19:break A;case 8:break $;case 12:break oe;case 7:break le;case 0:break ce;case 13:break me}Ce:switch(t-25189|0){case 1:case 3:case 4:case 5:case 6:case 7:case 8:case 10:case 11:case 12:case 13:break A;case 14:break j;case 2:break se;case 0:break ie;case 9:break me}switch(t-25441|0){case 18:break m;case 0:break $;case 24:break ne;default:break A}}Ce:switch(t-25964|0){case 1:case 4:case 5:case 6:break A;case 8:break q;case 9:break _;case 7:break $;case 3:break ee;case 2:break Ae;case 0:break pe}Ce:switch(t-26209|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:break A;case 17:break Z;case 8:break X;case 0:break J}switch(t-25697|0){case 4:break te;case 0:break re;default:break A}}if((0|t)<=27488){Ce:switch(t-26729|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 10:case 13:case 14:case 15:break A;case 16:break Y;case 12:break H;case 11:break R;case 9:break j;case 0:break V}Ce:switch(t-26977|0){case 1:case 2:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 15:case 16:case 17:break A;case 19:break S;case 18:break N;case 3:break O;case 14:break L;case 0:break $}switch(t-26465|0){case 20:break V;case 13:break W;case 0:case 3:break U;default:break A}}Ce:switch(t-27489|0){case 13:break c;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 12:case 15:case 16:case 17:case 18:case 19:case 21:case 22:case 23:break A;case 24:break G;case 20:break D;case 14:break Q;case 11:break T;case 10:break P;case 0:break z}switch(t-27745|0){case 19:break E;case 0:break M;case 21:break de;default:break A}}if((0|t)<=29792){if((0|t)<=28768){Ce:switch(t-28009|0){case 3:break c;case 11:break B;case 2:break y;case 1:case 4:case 5:case 6:case 7:case 8:case 12:case 13:case 14:case 15:break A;case 10:break O;case 9:break V;case 0:case 16:break ge}Ce:switch(t-28258|0){case 0:break x;case 10:break v;case 1:case 2:case 4:case 5:case 6:case 7:case 8:case 9:break A;case 3:break V}switch(t-28525|0){case 0:break k;case 5:break V;default:break A}}if((0|t)<=29539){Ce:switch(t-28769|0){case 19:break I;case 11:break w;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 20:case 21:case 22:case 23:break A;case 0:break V;case 24:break ge}Ce:switch(t-29295|0){case 6:break C;case 0:break b;case 1:case 2:case 3:case 4:case 5:break A}if(29045==(0|t))break ge;break A}switch(t-29540|0){case 19:break g;case 18:break u;case 13:break d;case 8:break p;case 5:break h;case 7:break m;case 14:break j;case 0:break s;default:break A}}if((0|t)>6514801)break he;if((0|t)<=30058)switch(t-29793|0){case 19:break o;case 17:break l;case 0:case 4:break c;case 13:break g;case 7:break ge;default:break A}if((0|t)<=30312)switch(t-30059|0){case 0:break i;case 15:break ge;case 7:break s;default:break A}if(30313==(0|t))break a;if(31336==(0|t))break n;if(6451321!=(0|t))break A}if(i[A+296>>2]=303174162,i[A+300>>2]=370545684,i[A+600>>2]=2432,i[A+8>>2]=0,i[A+12>>2]=65540,i[A+100>>2]=i[A+96>>2],e=i[25889],i[A+304>>2]=i[25888],i[A+308>>2]=e,e=i[25891],i[A+312>>2]=i[25890],i[A+316>>2]=e,Pe(A),a[A+345|0]=2|o[A+345|0],a[A+406|0]=16|o[A+406|0],a[A+407|0]=16|o[A+407|0],a[A+408|0]=16|o[A+408|0],a[A+409|0]=16|o[A+409|0],a[A+410|0]=16|o[A+410|0],a[A+411|0]=16|o[A+411|0],a[A+412|0]=16|o[A+412|0],a[A+413|0]=16|o[A+413|0],a[A+414|0]=16|o[A+414|0],a[A+415|0]=16|o[A+415|0],a[A+416|0]=16|o[A+416|0],a[A+417|0]=16|o[A+417|0],a[A+418|0]=16|o[A+418|0],a[A+419|0]=16|o[A+419|0],a[A+420|0]=16|o[A+420|0],a[A+456|0]=4|o[A+456|0],a[A+457|0]=4|o[A+457|0],i[A+112>>2]=613567144,i[A+104>>2]=16,6451321!=(0|t))break e;i[A+104>>2]=1,i[A+108>>2]=512,t=6451321;break e}if((0|t)>7364975)break ue;if((0|t)>6840682)break fe;if(6514802==(0|t))break ae;if(6516078==(0|t))break n;if(6779491!=(0|t))break A}if(i[A+600>>2]=896,i[A+328>>2]=8,i[A+296>>2]=336858127,i[A+300>>2]=353768980,i[A+332>>2]=103632,e=i[25905],i[A+304>>2]=i[25904],i[A+308>>2]=e,e=i[25907],i[A+312>>2]=i[25906],i[A+316>>2]=e,kA(A+344|0,0,256),a[A+388|0]=129,a[A+389|0]=129,a[A+390|0]=129,a[A+391|0]=129,a[A+420|0]=129,a[A+421|0]=129,a[A+422|0]=129,a[A+423|0]=129,a[A+360|0]=129,a[A+392|0]=129,a[A+393|0]=129,a[A+417|0]=129,a[A+418|0]=129,a[A+419|0]=129,a[A+420|0]=129,a[A+408|0]=6,a[A+409|0]=4,a[A+410|0]=6,a[A+411|0]=6,a[A+412|0]=6,a[A+413|0]=193,a[A+414|0]=6,a[A+415|0]=6,a[A+406|0]=6,a[A+407|0]=129,a[A+398|0]=4,a[A+399|0]=193,a[A+400|0]=6,a[A+401|0]=193,a[A+402|0]=6,a[A+403|0]=4,a[A+404|0]=4,a[A+405|0]=4,a[A+394|0]=4,a[A+395|0]=4,a[A+396|0]=4,a[A+397|0]=193,i[A+44>>2]=130,i[A+8>>2]=2,i[A+12>>2]=6,i[A+16>>2]=0,i[A+20>>2]=2,i[A+104>>2]=264,i[A+108>>2]=6146,a[A+391|0]=193,a[A+389|0]=193,a[A+390|0]=193,a[A+421|0]=193,i[A+100>>2]=i[A+96>>2],a[A+416|0]=4|o[A+416|0],6779491!=(0|t))break e;i[A+40>>2]=1,t=6779491;break e}if(6840683==(0|t))break K;if(6972015==(0|t))break F;if(7107687!=(0|t))break A}i[A+296>>2]=134875662,i[A+300>>2]=252968960,i[A+328>>2]=5,a[A+169|0]=1,i[A+132>>2]=33,i[A+104>>2]=99336,i[A+8>>2]=0,i[A+12>>2]=262182,e=i[26069],i[A+304>>2]=i[26068],i[A+308>>2]=e,e=i[26071],i[A+312>>2]=i[26070],i[A+316>>2]=e;break e}if((0|t)<=7564649){if(7364976==(0|t))break $;if(7435619==(0|t))break ge;if(7563374!=(0|t))break A;i[A+148>>2]=1,i[A+112>>2]=24,i[A+104>>2]=1,i[A+100>>2]=i[A+96>>2],t=7563374;break e}if(7564650==(0|t))break f;if(7959909==(0|t))break n;if(1885958500!=(0|t))break A}i[A+104>>2]=0;break e}i[A+4>>2]=48,i[A+8>>2]=0,i[A+144>>2]=1,i[A+104>>2]=16779472,i[A+32>>2]=1,i[A+24>>2]=1,e=i[25881],i[A+304>>2]=i[25880],i[A+308>>2]=e,e=i[25883],i[A+312>>2]=i[25882],i[A+316>>2]=e,a[A+465|0]=64&o[A+465|0]|129,t=24934;break e}i[A+600>>2]=4608,i[A+296>>2]=303173650,i[A+300>>2]=303174162,i[A+8>>2]=0,i[A+12>>2]=36,i[A+104>>2]=1024,i[A+100>>2]=i[A+96>>2],i[A+40>>2]=1,e=i[25865],i[A+304>>2]=i[25864],i[A+308>>2]=e,e=i[25867],i[A+312>>2]=i[25866],i[A+316>>2]=e,t=24941;break e}for(i[A+600>>2]=1536,i[A+224>>2]=0,i[A+216>>2]=1631,i[A+220>>2]=1536,i[A+104>>2]=2884720,i[A+328>>2]=7,i[A+40>>2]=1,W=t=W-16|0,i[t+12>>2]=-1,e=89684;n=VA(t+12|0,e),(0|(r=i[t+12>>2]))>=33&&(a[0|(l=(A+r|0)-1192|0)]=1|o[0|l]),e=e+n|0,r;);for(i[t+12>>2]=-1,e=89743;n=VA(t+12|0,e),(0|(r=i[t+12>>2]))>=33&&(a[0|(l=(A+r|0)-1192|0)]=2|o[0|l]),e=e+n|0,r;);for(i[t+12>>2]=-1,e=89795;n=VA(t+12|0,e),(0|(r=i[t+12>>2]))>=33&&(a[0|(l=(A+r|0)-1192|0)]=4|o[0|l]),e=e+n|0,r;);for(i[t+12>>2]=-1,e=89941;n=VA(t+12|0,e),(0|(r=i[t+12>>2]))>=33&&(a[0|(l=(A+r|0)-1192|0)]=16|o[0|l]),e=e+n|0,r;);for(i[t+12>>2]=-1,e=90045;n=VA(t+12|0,e),(0|(r=i[t+12>>2]))>=33&&(a[0|(l=(A+r|0)-1192|0)]=32|o[0|l]),e=e+n|0,r;);for(i[t+12>>2]=-1,e=90045;n=VA(t+12|0,e),(0|(r=i[t+12>>2]))>=33&&(a[0|(l=(A+r|0)-1192|0)]=8|o[0|l]),e=e+n|0,r;);for(i[t+12>>2]=-1,e=90045;n=VA(t+12|0,e),(0|(r=i[t+12>>2]))>=33&&(a[0|(l=(A+r|0)-1192|0)]=64|o[0|l]),e=e+n|0,r;);W=t+16|0,t=24946;break e}i[A+600>>2]=1056,i[A+12>>2]=34,i[A+216>>2]=1118,i[A+220>>2]=1072,kA(A+344|0,0,256),a[A+406|0]=4,a[A+366|0]=4,a[A+367|0]=4,a[A+369|0]=4,a[A+370|0]=4,a[A+371|0]=4,a[A+372|0]=4,a[A+361|0]=4,a[A+362|0]=4,a[A+363|0]=4,a[A+364|0]=4,a[A+373|0]=4,a[A+380|0]=4,a[A+381|0]=4,a[A+382|0]=4,a[A+383|0]=4,a[A+375|0]=4,a[A+376|0]=4,a[A+377|0]=4,a[A+378|0]=4,a[A+384|0]=4,a[A+360|0]=129,i[A+328>>2]=6,i[A+296>>2]=134744588,i[A+300>>2]=286261248,i[A+40>>2]=1,i[A+8>>2]=0,i[A+104>>2]=1032,i[A+108>>2]=66,e=i[25885],i[A+304>>2]=i[25884],i[A+308>>2]=e,e=i[25887],i[A+312>>2]=i[25886],i[A+316>>2]=e,t=25189;break e}je(A),i[A+328>>2]=6,i[A+56>>2]=2,i[A+36>>2]=263,i[A+40>>2]=1074,i[A+124>>2]=32,i[A+104>>2]=184554728,i[A+8>>2]=2,a[A+386|0]=64&o[A+386|0]|129,t=25191;break e}i[A+12>>2]=262182,i[A+40>>2]=1,t=6514802;break e}i[A+328>>2]=14,i[A+296>>2]=303173393,i[A+300>>2]=336986112,i[A+104>>2]=1024,i[A+16>>2]=0,i[A+20>>2]=2,i[A+8>>2]=2,i[A+12>>2]=22,i[A+44>>2]=120,e=i[25893],i[A+304>>2]=i[25892],i[A+308>>2]=e,e=i[25895],i[A+312>>2]=i[25894],i[A+316>>2]=e,a[A+463|0]=64&o[A+463|0]|129,a[A+465|0]=64&o[A+465|0]|129,t=25465;break e}i[A+8>>2]=0,i[A+104>>2]=184618072,i[A+32>>2]=1,e=i[26101],i[A+304>>2]=i[26100],i[A+308>>2]=e,e=i[26103],i[A+312>>2]=i[26102],i[A+316>>2]=e,a[A+465|0]=64&o[A+465|0]|129,t=25697;break e}i[A+296>>2]=336860180,i[A+300>>2]=336991764,i[A+8>>2]=0,i[A+104>>2]=16846872,i[A>>2]=8,i[A+4>>2]=48,i[A+80>>2]=87,i[A+32>>2]=1,i[A+36>>2]=256,i[A+40>>2]=2,e=i[25897],i[A+304>>2]=i[25896],i[A+308>>2]=e,e=i[25899],i[A+312>>2]=i[25898],i[A+316>>2]=e,a[A+465|0]=64&o[A+465|0]|129,t=25701;break e}i[A+132>>2]=33,i[A+104>>2]=16779328,i[A+8>>2]=0,i[A+12>>2]=8,i[A+204>>2]=101,i[A+60>>2]=2,i[A+40>>2]=2,e=i[25901],i[A+304>>2]=i[25900],i[A+308>>2]=e,e=i[25903],i[A+312>>2]=i[25902],i[A+316>>2]=e,a[A+441|0]=64|o[A+441|0],a[A+445|0]=64|o[A+445|0],a[A+449|0]=64|o[A+449|0],a[A+455|0]=64|o[A+455|0],a[A+461|0]=64|o[A+461|0],a[A+465|0]=64|o[A+465|0],t=25966;break e}i[A+328>>2]=4,i[A+296>>2]=336858640,i[A+300>>2]=353768980,i[A+104>>2]=16782344,i[A+20>>2]=2,i[A+12>>2]=22,i[A+4>>2]=2,i[A+8>>2]=2,i[A+332>>2]=103640,e=i[25997],i[A+304>>2]=i[25996],i[A+308>>2]=e,e=i[25999],i[A+312>>2]=i[25998],i[A+316>>2]=e,t=25967;break e}i[A+296>>2]=269422096,i[A+300>>2]=370545684,i[A+104>>2]=86017320,i[A+108>>2]=6144,i[A+16>>2]=0,i[A+20>>2]=2,i[A+8>>2]=2,i[A+12>>2]=534,i[A+100>>2]=i[A+96>>2],i[A+44>>2]=120,e=i[25913],i[A+304>>2]=i[25912],i[A+308>>2]=e,e=i[25915],i[A+312>>2]=i[25914],i[A+316>>2]=e;$:{ee:{if((0|t)<=26976){if(24942==(0|t))break ee;if(25441!=(0|t))break $;i[A+12>>2]=566,i[A+336>>2]=103664,t=25441;break e}if(26977!=(0|t)){if(7364976!=(0|t))break $;i[A+8>>2]=3,i[A+12>>2]=310,t=7364976;break e}i[A+104>>2]=85984264,t=26977;break e}i[A+104>>2]=153093416,i[A+108>>2]=2048,i[A+140>>2]=103676,t=24942;break e}i[A+40>>2]=2;break e}i[A+296>>2]=303173648,i[A+300>>2]=303174162,i[A+104>>2]=3147080,i[A+12>>2]=65792,i[A+84>>2]=1,e=i[25921],i[A+304>>2]=i[25920],i[A+308>>2]=e,e=i[25923],i[A+312>>2]=i[25922],i[A+316>>2]=e,t=25973;break e}i[A+600>>2]=1536,i[A+216>>2]=1740,i[A+220>>2]=1568,i[A+104>>2]=96,i[A+224>>2]=103696,i[A+340>>2]=103872,i[A+40>>2]=1,t=26209;break e}i[A+328>>2]=5}i[A+104>>2]=86024,i[A+164>>2]=130,a[A+465|0]=64&o[A+465|0]|129;break e}i[A+296>>2]=303173650,i[A+300>>2]=303174162,i[A+8>>2]=3,i[A+12>>2]=36,i[A+144>>2]=2,i[A+104>>2]=118658312,i[A+28>>2]=1,i[A+100>>2]=i[A+96>>2],e=i[25865],i[A+304>>2]=i[25864],i[A+308>>2]=e,e=i[25867],i[A+312>>2]=i[25866],i[A+316>>2]=e,a[A+465|0]=64&o[A+465|0]|129,t=26226;break e}s[A+170>>1]=257,i[A+148>>2]=1,i[A+12>>2]=2,t=6840683;break e}i[A+144>>2]=2,i[A+104>>2]=2098176,i[A+8>>2]=0,i[A+12>>2]=32,i[A+40>>2]=3,i[A+28>>2]=1;break e}i[A+8>>2]=3,i[A+100>>2]=i[A+96>>2],t=26478;break e}i[A+328>>2]=18,i[A+296>>2]=320081425,i[A+300>>2]=353768980,i[A+600>>2]=2304,i[A+112>>2]=84648,i[A+104>>2]=16,i[A+8>>2]=6,i[A+12>>2]=65540,i[A+100>>2]=i[A+96>>2],e=i[25973],i[A+304>>2]=i[25972],i[A+308>>2]=e,e=i[25975],i[A+312>>2]=i[25974],i[A+316>>2]=e;V:{W:{U:{if((0|t)<=28529){if(26485==(0|t))break U;if(28261!=(0|t))break V;e=i[25861],i[A+304>>2]=i[25860],i[A+308>>2]=e,e=i[25863],i[A+312>>2]=i[25862],i[A+316>>2]=e,i[A+296>>2]=320017171,i[A+300>>2]=320017171,i[A+132>>2]=22,i[A+112>>2]=-1431655768,i[A+108>>2]=32768|i[A+108>>2],Pe(A);break e}if(28530==(0|t))break W;if(28769!=(0|t))break V;i[A+600>>2]=2560,Pe(A);break e}e=i[25861],i[A+304>>2]=i[25860],i[A+308>>2]=e,e=i[25863],i[A+312>>2]=i[25862],i[A+316>>2]=e,i[A+600>>2]=2688,i[A+296>>2]=320017171,i[A+300>>2]=320017171,i[A+8>>2]=2,Pe(A);break e}i[A+600>>2]=2816}Pe(A);break e}a[0|n]=104,a[n+1|0]=98,a[n+2|0]=115,a[n+3|0]=0,29554!=(0|t)?(e=i[26093],i[A+304>>2]=i[26092],i[A+308>>2]=e,e=i[26095],i[A+312>>2]=i[26094],i[A+316>>2]=e):(e=i[25977],i[A+304>>2]=i[25976],i[A+308>>2]=e,e=i[25979],i[A+312>>2]=i[25978],i[A+316>>2]=e),i[A+328>>2]=3,i[A+296>>2]=336859409,i[A+300>>2]=353768980,s[A+168>>1]=261,i[A+8>>2]=0,i[A+12>>2]=16,i[A+144>>2]=1,i[A+184>>2]=1056,i[A+104>>2]=33572172,i[A+108>>2]=330,i[A+36>>2]=3,a[A+465|0]=64&o[A+465|0]|129,a[A+458|0]=64&o[A+458|0]|129;break e}i[A+104>>2]=17990912,i[A+8>>2]=3,i[A+12>>2]=36,t=26740;break e}i[A+328>>2]=3,i[A+296>>2]=320016657,i[A+300>>2]=353768980,i[A+124>>2]=32,i[A+128>>2]=44,i[A+104>>2]=186758144,i[A+12>>2]=1081398,i[A+16>>2]=2,i[A+4>>2]=32,i[A+8>>2]=0,i[A+116>>2]=899,i[A+120>>2]=1,a[A+169|0]=1,i[A+76>>2]=2,e=i[25981],i[A+304>>2]=i[25980],i[A+308>>2]=e,e=i[25983],i[A+312>>2]=i[25982],i[A+316>>2]=e,a[A+465|0]=64&o[A+465|0]|129,Gr(A,3),t=26741;break e}for(i[A+600>>2]=1328,i[A+8>>2]=3,e=i[25985],i[A+304>>2]=i[25984],i[A+308>>2]=e,e=i[25987],i[A+312>>2]=i[25986],i[A+316>>2]=e,n=kA(A+344|0,0,256),a[A+429|0]=129,a[A+416|0]=129,a[A+403|0]=129,a[A+399|0]=129,a[A+400|0]=129,a[A+397|0]=129,a[A+393|0]=129,r=103952,l=50,c=50;a[0|(e=n+c|0)]=2|o[0|e],e=n+o[r+1|0]|0,a[0|e]=2|o[0|e],e=n+o[r+2|0]|0,a[0|e]=2|o[0|e],c=o[0|(r=r+3|0)],e=103952,103982!=(0|r););for(r=A+344|0;a[0|(n=r+l|0)]=4|o[0|n],n=r+o[e+1|0]|0,a[0|n]=4|o[0|n],n=r+o[e+2|0]|0,a[0|n]=4|o[0|n],l=o[0|(e=e+3|0)],103982!=(0|e););a[A+168|0]=6,i[A+104>>2]=5128,a[A+413|0]=4|o[A+413|0];break e}i[A+328>>2]=4,i[A+296>>2]=336858640,i[A+300>>2]=353768980,i[A+104>>2]=16782440,i[A+20>>2]=2,i[A+12>>2]=22,i[A+4>>2]=2,i[A+8>>2]=2,i[A+332>>2]=104e3,e=i[25997],i[A+304>>2]=i[25996],i[A+308>>2]=e,e=i[25999],i[A+312>>2]=i[25998],i[A+316>>2]=e,t=26991;break e}i[A+296>>2]=303174160,i[A+300>>2]=353768980,i[A+104>>2]=16781320,i[A+144>>2]=2,i[A+8>>2]=2,i[A+12>>2]=22,e=i[26005],i[A+304>>2]=i[26004],i[A+308>>2]=e,e=i[26007],i[A+312>>2]=i[26006],i[A+316>>2]=e;break e}for(i[A+8>>2]=0,i[A+12>>2]=16,i[A+56>>2]=2,i[A+28>>2]=17,e=i[26009],i[A+304>>2]=i[26008],i[A+308>>2]=e,e=i[26011],i[A+312>>2]=i[26010],i[A+316>>2]=e,e=0,r=A+344|0;a[0|(n=e+r|0)]=231&o[0|n],a[0|(n=r+(1|e)|0)]=231&o[0|n],a[0|(n=r+(2|e)|0)]=231&o[0|n],a[0|(n=r+(3|e)|0)]=231&o[0|n],256!=(0|(e=e+4|0)););i[A+104>>2]=2280,i[A+108>>2]=2,i[A+608>>2]=104048,a[A+451|0]=16|o[A+451|0],a[A+456|0]=16|o[A+456|0],a[A+459|0]=16|o[A+459|0],a[A+460|0]=16|o[A+460|0],a[A+450|0]=8|o[A+450|0],a[A+462|0]=8|o[A+462|0],a[A+458|0]=8|o[A+458|0],a[A+465|0]=64&o[A+465|0]|129;break e}i[A+296>>2]=269618961,i[A+300>>2]=370546196,i[A+12>>2]=131110,i[A+144>>2]=2,i[A+104>>2]=184559112,i[A+108>>2]=8192,i[A+16>>2]=0,i[A+20>>2]=2,i[A+4>>2]=1,i[A+8>>2]=2,i[A+100>>2]=i[A+96>>2],i[A+140>>2]=103676,i[A+68>>2]=2,i[A+56>>2]=1,i[A+44>>2]=130,i[A+28>>2]=2,e=i[26025],i[A+304>>2]=i[26024],i[A+308>>2]=e,e=i[26027],i[A+312>>2]=i[26026],i[A+316>>2]=e,a[A+465|0]=64&o[A+465|0]|129,t=26996;break e}i[A+4>>2]=524,i[A+8>>2]=2,i[A+196>>2]=368,i[A+104>>2]=0,i[A+336>>2]=104128,i[A- -64>>2]=1,e=i[26029],i[A+304>>2]=i[26028],i[A+308>>2]=e,e=i[26031],i[A+312>>2]=i[26030],i[A+316>>2]=e,a[A+465|0]=64&o[A+465|0]|129,t=6972015;break e}for(i[A+296>>2]=303174162,i[A+300>>2]=370545684,e=i[25873],i[A+304>>2]=i[25872],i[A+308>>2]=e,e=i[25875],i[A+312>>2]=i[25874],i[A+316>>2]=e,n=kA(A+344|0,0,256),a[A+431|0]=1,a[A+429|0]=1,a[A+411|0]=1,a[A+405|0]=1,a[A+400|0]=1,a[A+396|0]=1,a[A+392|0]=1,e=104160,r=49;a[0|(r=r+n|0)]=4|o[0|r],r=n+o[e+1|0]|0,a[0|r]=4|o[0|r],r=n+o[e+2|0]|0,a[0|r]=4|o[0|r],r=o[0|(e=e+3|0)],104193!=(0|e););i[A+600>>2]=4256,i[A+8>>2]=0,i[A+12>>2]=16,a[A+168|0]=7,i[A+132>>2]=32,a[A+392|0]=128|o[A+392|0],a[A+396|0]=128|o[A+396|0],a[A+400|0]=128|o[A+400|0],a[A+405|0]=128|o[A+405|0],a[A+411|0]=128|o[A+411|0],a[A+429|0]=128|o[A+429|0],a[A+431|0]=128|o[A+431|0],i[A+188>>2]=1056,i[A+192>>2]=29301,i[A+104>>2]=19964960;break e}for(i[A+600>>2]=1056,n=kA(A+344|0,0,256),a[A+393|0]=1,a[A+365|0]=1,a[A+360|0]=1,a[A+545|0]=1,a[A+529|0]=1,a[A+391|0]=1,a[A+389|0]=1,a[A+390|0]=1,a[A+387|0]=1,a[A+379|0]=1,a[A+374|0]=1,a[A+368|0]=1,a[A+489|0]=1,a[A+487|0]=1,a[A+398|0]=1,e=104224,r=17;a[0|(r=r+n|0)]=4|o[0|r],r=n+o[e+1|0]|0,a[0|r]=4|o[0|r],r=n+o[e+2|0]|0,a[0|r]=4|o[0|r],r=o[0|(e=e+3|0)],104251!=(0|e););a[A+360|0]=128|o[A+360|0],a[A+365|0]=128|o[A+365|0],a[A+393|0]=128|o[A+393|0],a[A+368|0]=128|o[A+368|0],a[A+374|0]=128|o[A+374|0],a[A+379|0]=128|o[A+379|0],a[A+387|0]=128|o[A+387|0],a[A+389|0]=128|o[A+389|0],a[A+390|0]=128|o[A+390|0],a[A+391|0]=128|o[A+391|0],a[A+529|0]=128|o[A+529|0],a[A+545|0]=128|o[A+545|0],a[A+489|0]=128|o[A+489|0],a[A+487|0]=128|o[A+487|0],a[A+398|0]=128|o[A+398|0],e=i[26055],i[A+312>>2]=i[26054],i[A+316>>2]=e,e=i[26053],i[A+304>>2]=i[26052],i[A+308>>2]=e,i[A+296>>2]=353636370,i[A+300>>2]=336925972,i[A+200>>2]=0,i[A+8>>2]=7,i[A+12>>2]=2097184,a[A+168|0]=2,i[A+104>>2]=50176,i[A+84>>2]=1,Gr(A,3);break e}i[A+296>>2]=320017171,i[A+300>>2]=320017171,i[A+104>>2]=184618072,i[A+8>>2]=12,i[A+12>>2]=32,e=i[25861],i[A+304>>2]=i[25860],i[A+308>>2]=e,e=i[25863],i[A+312>>2]=i[25862],i[A+316>>2]=e,t=27500;break e}i[A+184>>2]=42752,i[A+600>>2]=4352,kA(A+344|0,0,256),a[A+456|0]=1,a[A+457|0]=1,a[A+458|0]=1,a[A+459|0]=1,a[A+449|0]=1,a[A+450|0]=1,a[A+451|0]=1,a[A+452|0]=1,a[A+453|0]=1,a[A+454|0]=1,a[A+455|0]=1,a[A+456|0]=1,a[A+441|0]=1,a[A+442|0]=1,a[A+443|0]=1,a[A+444|0]=1,a[A+445|0]=1,a[A+446|0]=1,a[A+447|0]=1,a[A+448|0]=1,a[A+460|0]=65,a[A+461|0]=65,a[A+532|0]=32,a[A+527|0]=32,a[A+519|0]=32,a[A+515|0]=32,a[A+349|0]=32,a[A+350|0]=32,a[A+346|0]=32,i[A+132>>2]=20,i[A+112>>2]=286331152,i[A+104>>2]=1024,i[A+108>>2]=16384,i[A+40>>2]=1,i[A+8>>2]=8,a[A+458|0]=65,a[A+453|0]=65,a[A+447|0]=65,a[A+448|0]=65,a[A+443|0]=65,a[A+444|0]=65,t=27503;break e}i[A+328>>2]=10,i[A+296>>2]=336859666,i[A+300>>2]=353768980,a[A+168|0]=2,i[A+104>>2]=263264,i[A+8>>2]=7,e=i[26065],i[A+304>>2]=i[26064],i[A+308>>2]=e,e=i[26067],i[A+312>>2]=i[26066],i[A+316>>2]=e,t=27509;break e}i[A+104>>2]=1,t=27513;break e}i[A+116>>2]=5e3,i[A+104>>2]=16777216,i[A+24>>2]=1,i[A+16>>2]=0,i[A+20>>2]=2,i[A+8>>2]=2,i[A+12>>2]=32,i[A+328>>2]=5,t=27745;break e}i[A+116>>2]=5e3,i[A+104>>2]=99336,i[A+108>>2]=256,i[A+24>>2]=1,i[A+16>>2]=0,i[A+20>>2]=2,i[A+8>>2]=2,i[A+12>>2]=32,i[A+328>>2]=5,t=27764;break e}i[A+328>>2]=6,i[A+296>>2]=336859409,i[A+300>>2]=353768980,i[A+600>>2]=1056,i[A+104>>2]=2114600,i[A+108>>2]=138,i[A+8>>2]=4,i[A+632>>2]=104288,i[A+604>>2]=104288,e=i[26093],i[A+304>>2]=i[26092],i[A+308>>2]=e,e=i[26095],i[A+312>>2]=i[26094],i[A+316>>2]=e,t=28011;break e}i[A+328>>2]=4,i[A+104>>2]=1,i[A+8>>2]=2,i[A+36>>2]=256,t=28020;break e}i[A+4>>2]=48,i[A+8>>2]=0,i[A+12>>2]=128,i[A+104>>2]=2169880,i[A+32>>2]=1,i[A+36>>2]=256,i[A+24>>2]=1,i[A+136>>2]=85767,e=i[26097],i[A+304>>2]=i[26096],i[A+308>>2]=e,e=i[26099],i[A+312>>2]=i[26098],i[A+316>>2]=e,a[A+465|0]=64&o[A+465|0]|129,t=28268;break e}i[A+8>>2]=0,i[A+104>>2]=71752,e=i[26101],i[A+304>>2]=i[26100],i[A+308>>2]=e,e=i[26103],i[A+312>>2]=i[26102],i[A+316>>2]=e,a[A+465|0]=64&o[A+465|0]|129,t=28258;break e}i[A+296>>2]=336858898,i[A+300>>2]=370546196,i[A+104>>2]=1088,i[A+108>>2]=512,i[A+8>>2]=2,i[A+12>>2]=524310,e=i[26105],i[A+304>>2]=i[26104],i[A+308>>2]=e,e=i[26107],i[A+312>>2]=i[26106],i[A+316>>2]=e,t=28525;break e}i[A+328>>2]=3,i[A+296>>2]=320015633,i[A+300>>2]=353768980,a[A+168|0]=7,i[A+8>>2]=2,i[A+12>>2]=6,i[A+104>>2]=20488,i[A+108>>2]=192,i[A+36>>2]=9,i[A+60>>2]=260,e=i[26109],i[A+304>>2]=i[26108],i[A+308>>2]=e,e=i[26111],i[A+312>>2]=i[26110],i[A+316>>2]=e,a[A+465|0]=64&o[A+465|0]|129,t=28780;break e}for(i[A+296>>2]=353569552,i[A+300>>2]=353768980,i[A+116>>2]=5e3,i[A+104>>2]=33570920,i[A+108>>2]=14336,i[A+8>>2]=3,i[A+12>>2]=139286,i[A+100>>2]=i[A+96>>2],e=i[26113],i[A+304>>2]=i[26112],i[A+308>>2]=e,e=i[26115],i[A+312>>2]=i[26114],i[A+316>>2]=e,a[A+465|0]=64&o[A+465|0]|129,e=0,r=A+344|0;a[0|(n=e+r|0)]=253&o[0|n],a[0|(n=r+(1|e)|0)]=253&o[0|n],a[0|(n=r+(2|e)|0)]=253&o[0|n],a[0|(n=r+(3|e)|0)]=253&o[0|n],256!=(0|(e=e+4|0)););a[A+442|0]=2|o[A+442|0],a[A+443|0]=2|o[A+443|0],a[A+444|0]=2|o[A+444|0],a[A+446|0]=2|o[A+446|0],a[A+447|0]=2|o[A+447|0],a[A+450|0]=2|o[A+450|0],a[A+451|0]=2|o[A+451|0],a[A+453|0]=2|o[A+453|0],a[A+454|0]=2|o[A+454|0],a[A+456|0]=2|o[A+456|0],a[A+457|0]=2|o[A+457|0],a[A+459|0]=2|o[A+459|0],a[A+460|0]=2|o[A+460|0],a[A+462|0]=2|o[A+462|0],a[A+464|0]=2|o[A+464|0],a[A+466|0]=2|o[A+466|0],i[A+144>>2]=2,i[A+68>>2]=2;break e}i[A+296>>2]=303172879,i[A+300>>2]=353768980,i[A+328>>2]=3,i[A+8>>2]=3,i[A+12>>2]=262,i[A+104>>2]=16805928,i[A+108>>2]=30,e=i[26117],i[A+304>>2]=i[26116],i[A+308>>2]=e,e=i[26119],i[A+312>>2]=i[26118],i[A+316>>2]=e,t=29295;break e}it(A),t=29301;break e}for(i[A+328>>2]=3,i[A+296>>2]=336859153,i[A+300>>2]=353768980,s[A+168>>1]=261,i[A+8>>2]=0,i[A+12>>2]=22,i[A+124>>2]=0,i[A+128>>2]=44,i[A+104>>2]=16794624,i[A+108>>2]=128,i[A+36>>2]=3,i[A+60>>2]=4,e=i[25869],i[A+304>>2]=i[25868],i[A+308>>2]=e,e=i[25871],i[A+312>>2]=i[25870],i[A+316>>2]=e,25459==(0|t)&&(i[A+108>>2]=136),a[A+465|0]=64&o[A+465|0]|129,a[A+458|0]=64&o[A+458|0]|129,e=0,r=A+344|0;a[0|(n=e+r|0)]=223&o[0|n],a[0|(n=r+(1|e)|0)]=223&o[0|n],a[0|(n=r+(2|e)|0)]=223&o[0|n],a[0|(n=r+(3|e)|0)]=223&o[0|n],256!=(0|(e=e+4|0)););a[A+442|0]=32|o[A+442|0],a[A+444|0]=32|o[A+444|0],a[A+447|0]=32|o[A+447|0],a[A+450|0]=32|o[A+450|0],a[A+452|0]=32|o[A+452|0],a[A+453|0]=32|o[A+453|0],a[A+454|0]=32|o[A+454|0],a[A+458|0]=32|o[A+458|0],a[A+462|0]=32|o[A+462|0],a[A+463|0]=32|o[A+463|0],a[A+466|0]=32|o[A+466|0],a[A+441|0]=32|o[A+441|0],a[A+445|0]=32|o[A+445|0],a[A+449|0]=32|o[A+449|0],a[A+455|0]=32|o[A+455|0],a[A+461|0]=32|o[A+461|0],a[A+465|0]=32|o[A+465|0];break e}for(i[A+296>>2]=303174162,i[A+300>>2]=370545684,i[A+600>>2]=3456,a[A+169|0]=1,i[A+8>>2]=0,i[A+12>>2]=22,i[A+100>>2]=i[A+96>>2],e=i[25873],i[A+304>>2]=i[25872],i[A+308>>2]=e,e=i[25875],i[A+312>>2]=i[25874],i[A+316>>2]=e,kA(A+344|0,0,256),a[A+365|0]=1,a[A+366|0]=1,a[A+357|0]=1,a[A+358|0]=1,a[A+359|0]=1,a[A+360|0]=1,a[A+361|0]=1,a[A+362|0]=1,a[A+363|0]=1,a[A+364|0]=1,a[A+349|0]=1,a[A+350|0]=1,a[A+351|0]=1,a[A+352|0]=1,a[A+353|0]=1,a[A+354|0]=1,a[A+355|0]=1,a[A+356|0]=1,e=74,r=74;a[344+(n=A+r|0)|0]=1|o[n+344|0],a[n+345|0]=1|o[n+345|0],a[n+346|0]=1|o[n+346|0],116!=(0|(r=r+3|0)););for(;a[344+(r=e+A|0)|0]=2|o[r+344|0],a[r+345|0]=2|o[r+345|0],a[r+346|0]=2|o[r+346|0],116!=(0|(e=e+3|0)););for(r=26;a[344+(e=A+r|0)|0]=4|o[e+344|0],a[e+345|0]=4|o[e+345|0],a[e+346|0]=4|o[e+346|0],a[e+347|0]=4|o[e+347|0],a[e+348|0]=4|o[e+348|0],71!=(0|(r=r+5|0)););i[A+112>>2]=84648,i[A+104>>2]=270589952,i[A+108>>2]=65536,i[A+40>>2]=1,i[A+204>>2]=i[A+600>>2]+74;break e}i[A+8>>2]=2,i[A+12>>2]=32,i[A+328>>2]=3,i[A+124>>2]=32,i[A+104>>2]=16864280,i[A+108>>2]=256,i[A+68>>2]=2,i[A+36>>2]=259,i[A+40>>2]=118,i[A+28>>2]=1,a[A+458|0]=128|o[A+458|0],t=29548;break e}i[A+296>>2]=370544658,i[A+300>>2]=370546196,i[A+164>>2]=130,i[A+8>>2]=0,i[A+12>>2]=86,i[A+104>>2]=87064,a[A+169|0]=1,i[A+152>>2]=3,e=i[26121],i[A+304>>2]=i[26120],i[A+308>>2]=e,e=i[26123],i[A+312>>2]=i[26122],i[A+316>>2]=e,a[A+465|0]=64&o[A+465|0]|129,t=7564650;break e}i[A+296>>2]=269487120,i[A+300>>2]=320148500,i[A+8>>2]=3,i[A+12>>2]=278,i[A+144>>2]=2,i[A+104>>2]=32872,e=i[26125],i[A+304>>2]=i[26124],i[A+308>>2]=e,e=i[26127],i[A+312>>2]=i[26126],i[A+316>>2]=e,a[A+465|0]=64&o[A+465|0]|129,t=29553;break e}i[A+296>>2]=336859152,i[A+300>>2]=353768980,i[A+8>>2]=0,i[A+144>>2]=1,i[A+104>>2]=6408,e=i[26129],i[A+304>>2]=i[26128],i[A+308>>2]=e,e=i[26131],i[A+312>>2]=i[26130],i[A+316>>2]=e,a[A+465|0]=64&o[A+465|0]|129,t=29558;break e}i[A+296>>2]=320015376,i[A+300>>2]=353768980,a[A+168|0]=4,i[A+12>>2]=22,i[A+4>>2]=1,i[A+8>>2]=2,i[A+104>>2]=1248,i[A+100>>2]=i[A+96>>2],e=i[26133],i[A+304>>2]=i[26132],i[A+308>>2]=e,e=i[26135],i[A+312>>2]=i[26134],i[A+316>>2]=e;break e}i[A+296>>2]=303174162,i[A+300>>2]=370545684,a[A+169|0]=1,i[A+8>>2]=0,i[A+12>>2]=22,i[A+112>>2]=5288,i[A+100>>2]=i[A+96>>2],e=i[25877],i[A+304>>2]=i[25876],i[A+308>>2]=e,e=i[25879],i[A+312>>2]=i[25878],i[A+316>>2]=e;c:switch(t-29793|0){default:if(27502!=(0|t)){if(28012!=(0|t))break t;e=i[26137],i[A+304>>2]=i[26136],i[A+308>>2]=e,e=i[26139],i[A+312>>2]=i[26138],i[A+316>>2]=e,i[A+600>>2]=3328,i[A+296>>2]=320017171,i[A+300>>2]=320017171,i[A+104>>2]=2098176,i[A+108>>2]=131072,i[A+8>>2]=13;break t}i[A+104>>2]=1,i[A+600>>2]=3200;break t;case 4:break c;case 1:case 2:case 3:break t;case 0:break r}i[A+104>>2]=1,i[A+108>>2]=524288,i[A+600>>2]=3072;break t}i[A+328>>2]=10,i[A+296>>2]=353636370,i[A+300>>2]=336925972,a[A+173|0]=1,i[A+8>>2]=7,i[A+12>>2]=32,a[A+168|0]=2,i[A+84>>2]=1,e=i[26141],i[A+304>>2]=i[26140],i[A+308>>2]=e,i[A+104>>2]=24954==(0|t)?2118920:2114824,e=i[26143],i[A+312>>2]=i[26142],i[A+316>>2]=e;break e}je(A),i[A+296>>2]=303173650,i[A+300>>2]=303174162,i[A+104>>2]=2131208,i[A+8>>2]=3,i[A+12>>2]=32,e=i[25865],i[A+304>>2]=i[25864],i[A+308>>2]=e,e=i[25867],i[A+312>>2]=i[25866],i[A+316>>2]=e,t=29812;break e}it(A),t=30059;break e}i[A+112>>2]=21160,i[A+104>>2]=16,i[A+600>>2]=1536,i[A+40>>2]=1;break e}i[A+296>>2]=269488144,i[A+300>>2]=370546198,i[A+8>>2]=0,i[A>>2]=33,i[A+148>>2]=1,i[A+104>>2]=12615688,i[A+16>>2]=2,i[A+100>>2]=i[A+96>>2],i[A+632>>2]=104592,i[A+604>>2]=104592,e=i[26145],i[A+304>>2]=i[26144],i[A+308>>2]=e,e=i[26147],i[A+312>>2]=i[26146],i[A+316>>2]=e,t=30313;break e}if(i[A+296>>2]=370544662,i[A+300>>2]=370546198,i[A+8>>2]=3,i[A+12>>2]=2,i[A+148>>2]=1,i[A+184>>2]=12544,s[A+170>>1]=257,i[A+176>>2]=1,a[A+172|0]=1,i[A>>2]=33,i[A+4>>2]=0,i[A+100>>2]=i[A+96>>2],e=i[26225],i[A+304>>2]=i[26224],i[A+308>>2]=e,e=i[26227],i[A+312>>2]=i[26226],i[A+316>>2]=e,7959909!=(0|t))break e;i[A+112>>2]=24,i[A+104>>2]=1,i[A+108>>2]=1048576,t=7959909;break e}e=i[25873],i[A+304>>2]=i[25872],i[A+308>>2]=e,e=i[25875],i[A+312>>2]=i[25874],i[A+316>>2]=e,i[A+600>>2]=2944,i[A+104>>2]=2097152,i[A+108>>2]=262144,i[A+48>>2]=1}Pe(A),a[A+422|0]=2|o[A+422|0];break e}i[A+40>>2]=1}return i[A+212>>2]=t,8&(e=i[A+104>>2])&&(i[A+124>>2]=46,i[A+128>>2]=44),4&e&&(i[A+124>>2]=0),A}function _(e){var A=0,t=0,r=0,n=0,l=0,c=0,g=0,u=0,d=0,f=0,b=0,w=0,k=0,x=0,v=0,B=0,y=0,E=0,M=0,G=0,D=0,Q=0,T=0,P=0,z=0;e:{t=i[32538],i[47354]=0,i[47568]=0,i[49828]=0,i[47569]=0,a[199328]=0,i[49827]=0,i[49845]=0,a[190280]=0,a[190268]=1,i[47202]=0,i[49573]=0,i[49846]=0,a[199304]=0,a[199388]=0,i[33691]=0,i[33285]=0,i[33708]=1,i[33709]=1,i[33288]=0,A=i[33730],i[33712]=i[33729],i[33713]=A,A=i[33732],i[33714]=i[33731],i[33715]=A,A=i[33734],i[33716]=i[33733],i[33717]=A,A=i[33736],i[33718]=i[33735],i[33719]=A,A=i[33738],i[33720]=i[33737],i[33721]=A,A=i[33740],i[33722]=i[33739],i[33723]=A,A=i[33742],i[33724]=i[33741],i[33725]=A,i[33726]=i[33743],a[134784]=0,a[134824]=0,a[134772]=0,a[134760]=0,i[33284]=-1,i[33692]=0,i[32525]=0,i[47201]=i[33717],i[47200]=i[33718],$r(),i[34438]=0,i[34437]=0,A=i[33730],i[34048]=i[33729],i[34049]=A,A=i[33732],i[34050]=i[33731],i[34051]=A,A=i[33734],i[34052]=i[33733],i[34053]=A,A=i[33736],i[34054]=i[33735],i[34055]=A,A=i[33738],i[34056]=i[33737],i[34057]=A,A=i[33740],i[34058]=i[33739],i[34059]=A,A=i[33742],i[34060]=i[33741],i[34061]=A,i[34062]=i[33743];A:{t:{if(1&t){if(i[i[32539]>>2]=0,i[47569]|i[49845]|i[49827])break t;break A}if(i[i[32539]>>2]=0,!(i[49845]|i[49827]||i[47569]))break A}a[190280]=1}i[49828]=0,A=268436735;A:if(!(!i[34391]|!i[34388])&&(i[47204]=0,i[47203]=0,i[47199]=0,i[34439]=0,(i[47192]||!(A=ZA(86228)))&&((A=i[33283])||((A=se(16))&&(i[A>>2]=0,i[A+4>>2]=0,i[A+8>>2]=0,i[A+12>>2]=0),i[33283]=A),l=268439807,(t=i[i[47192]+328>>2])>>>0>20|!i[129104+(t<<3)>>2]?A=l:(e?(l=4,n=jt(e)+1|0):(l=2,n=0),i[A+8>>2]=l,i[A>>2]=e,i[A+12>>2]=i[129108+(t<<3)>>2],i[A+4>>2]=e?e+n|0:0,A=0),!A))){X(0);t:{for(;;){i[34436]=0,e=i[34391],i[51290]=e,i[54046]=e+i[34390],i[50767]<=102399&&(i[50767]=102400);r:if(!((c=i[51290])>>>0>=h[54046]))for(;;){if((((0|(e=(n=i[50757])-(g=i[50758])|0))<=0?e+170|0:e)-171|0)>=-1){if((0|(e=i[54731]))<=0)break r;l=0,i[50763]=0,i[50762]=0,i[50765]=2147483647,e=o[218920]?i[54732]:e;n:{for(;;){if(t=e-1|0,i[54732]=t,(0|e)<=0)break n;if(i[51290]=c+1,A=(e=i[51293])+1|0,i[51293]=(0|A)<=5499?A:0,A=(e=C(i[50755],s[205184+(e<<1)>>1]))>>8,a[0|c]=A,n=i[51290],i[51290]=n+1,a[0|n]=e>>>16,(n=i[50756])?(e=t,(t=i[n+4>>2])&&(Tn[0|t](A<<16>>16),e=i[54732])):e=t,n=(t=i[51292])+1|0,i[51292]=n,s[205184+(t<<1)>>1]=A,(0|n)>=5500&&(i[51292]=0),c=i[51290],!(h[54046]>=c+2>>>0))break}l=1}a[218920]=l;break r}e=i[4+(t=216192+(n<<4)|0)>>2];n:{a:{s:{i:{o:{l:{c:{g:{u:{d:{f:{p:{h:{m:{C:{b:switch((255&(A=i[t>>2]))-1|0){case 9:break s;case 7:break i;case 10:break o;case 11:break l;case 13:break c;case 0:break g;case 1:break u;case 2:break d;case 3:break f;case 6:break p;case 5:break h;case 4:break m;case 15:break C;case 8:break b;default:break a}if(!i[50759])break a;A=i[t+12>>2],t=i[t+8>>2],i[50768]=0,c=t||99232,i[50766]=c,i[50769]=e?2097152/(0|e)|0:0,e=i[50971],n=(0|C(e,i[50788]))/50|0,t=C(n-e|0,-18),e=((0|(e=i[50785]))>=101?101:e)-i[50790]|0,A=(l=t+((0|C(i[50970],o[((0|e)>0?e:0)+105680|0]))/128|0)|0)+((0|C(n,(0|(e=A>>16))<(0|(t=65535&A))?e:t))/2|0)|0,i[50770]=A,e=(l+((0|C(n,(0|e)>(0|t)?e:t))/2|0)|0)-A|0,i[50771]=e,t=o[0|c],i[33072]=i[50976],i[50767]=A+(C(e,t)>>8);break a}Tn[i[i[50756]>>2]](e,i[t+8>>2]),ye(e);break a}if(o[218920]||(i[54731]=i[54731]-e),i[50781]=100,i[50773]=0,iA(),i[50763]=0,i[50762]=0,i[50765]=2147483647,!e)break a;for(e=o[218920]?i[54732]:e;;){if(t=e-1|0,i[54732]=t,(0|e)<=0)break a;if(e=i[51290],i[51290]=e+1,n=(A=i[51293])+1|0,i[51293]=(0|n)<=5499?n:0,n=e,A=(e=C(i[50755],s[205184+(A<<1)>>1]))>>8,a[0|n]=A,n=i[51290],i[51290]=n+1,a[0|n]=e>>>16,(n=i[50756])?(e=t,(t=i[n+4>>2])&&(Tn[0|t](A<<16>>16),e=i[54732])):e=t,n=(t=i[51292])+1|0,i[51292]=n,s[205184+(t<<1)>>1]=A,(0|n)>=5500&&(i[51292]=0),n=1,!(h[54046]>=i[51290]+2>>>0))break}break n}for(i[50773]=0,i[54731]=i[54729],iA(),A=i[t+12>>2],n=i[t+8>>2],o[218920]?e=i[54733]:i[54734]=0,g=A>>8,l=255&A,i[50762]=0,i[50763]=0;;){if(t=e-1|0,i[54733]=t,(0|e)<=0)break a;if(A=(e=i[54734])+1|0,l?c=C(l,a[e+n|0]):(c=o[e+n|0]|a[A+n|0]<<8,A=e+2|0),i[54734]=A,u=(e=i[51293])+1|0,i[51293]=u,A=(0|(e=(0|(e=((0|C(g,C(i[33037],C(i[33038],c))>>10))/32|0)+(C(i[50755],s[205184+(e<<1)>>1])>>8)|0))<=-32768?-32768:e))>=32767?32767:e,(0|u)>=5500&&(i[51293]=0),a[i[51290]]=A,a[i[51290]+1|0]=A>>>8,(c=i[50756])?(e=t,(t=i[c+12>>2])&&(Tn[0|t](A<<16>>16),e=i[54733])):e=t,t=i[51290],i[51290]=t+2,u=(c=i[51292])+1|0,i[51292]=u,s[205184+(c<<1)>>1]=(0|C(A,3))/4,(0|u)>=5500&&(i[51292]=0),!(h[54046]>=t+4>>>0))break}n=1;break n}A=i[t+12>>2],n=e>>>16|0,i[50777]=n,e&=65535,i[50773]=e,l=255&A,i[50774]=l,i[50775]=A>>8,l||(i[50777]=n<<1,i[50773]=e<<1),i[50778]=0,i[50776]=0,i[50772]=i[t+8>>2];break a}i[50773]=0}if(i[54731]=i[54729],A=i[50759],o[218920]){if(!A)break a}else{if(!A)break a;for(l=i[t+12>>2],c=i[t+8>>2],t=e>>16,i[55912]=255&t,a[218960]=1,i[55908]=0,67108864&e&&(i[55908]=3,i[55909]=i[110496+(t>>>6&12)>>2]),134217728&e&&(i[55908]=4,i[55909]=i[110512+(t>>>6&12)>>2]),e&=65504;;){if((0|g)!=(0|(n=(0|(t=n+1|0))<=169?t:0)))if(3!=(0|(t=i[216192+(n<<4)>>2]))){if(t-5>>>0>1)continue}else a[218960]=0;break}for(i[55913]=i[50762],e=(e=e+32&131008)||64,i[50763]=e+i[50763],i[55684]=C(s[101997],7800)+(p[102024]<<8)<<8,i[55704]=C(s[101998],9e3)+(p[102025]<<8)<<8,k=i[50980],r=+(0|e),b=+(e>>>2|0),e=0;7!=(0|e)&&(n=s[218+(u=(t=e<<1)+A|0)>>1]<<8,g=C(e,80)+222176|0,u=s[u+164>>1],w=n+C(u,s[2+(t+c|0)>>1])<<8,i[g>>2]=w,f=+(0|w),m[g+16>>3]=f,m[g+48>>3]=16*(+(n+C(u,s[2+(t+l|0)>>1])<<8)-f)/b),n=(t=C(e,80))+222176|0,u=s[182+(w=A+(e<<1)|0)>>1],v=C(u,o[18+(g=e+c|0)|0])<<6,i[n+4>>2]=v,f=+(0|v),m[n+24>>3]=f,x=n,n=e+l|0,m[x+56>>3]=64*(+(C(u,o[n+18|0])<<6)-f)/r,(0|e)>(0|k)|e>>>0>5||(u=t+222176|0,v=s[w+200>>1],w=C(v,o[g+26|0])<<10,i[u+8>>2]=w,f=+(0|w),m[u+32>>3]=f,x=u- -64|0,u=v<<10,m[x>>3]=64*(+(0|C(u,o[n+26|0]))-f)/r,e>>>0<=2?(t=t+222176|0,g=C(u,o[g+32|0]),i[t+12>>2]=g,f=+(0|g),m[t+40>>3]=f,m[t+72>>3]=64*(+(0|C(u,o[n+32|0]))-f)/r):i[t+222188>>2]=w),8!=(0|(e=e+1|0)););}for(;;){if(e=i[50762],!o[218960]&(0|e)==i[50763])break a;d:{f:{if(63&e){if(7&e)break d;p:if(!((0|(t=i[54736]))<=0||(0|(A=i[54735]))<=0))for(n=i[50826],e=1;;){if(i[(c=(l=e<<2)+n|0)>>2]=i[c>>2]+i[l+203312>>2],e>>>0>28|(0|e)>=(0|t))break p;if(l=(0|e)<(0|A),e=e+1|0,!l)break}if((0|(e=i[33073]))>255)break d;i[33073]=e+1;break d}if(e)if(i[50759]){if(t=i[50768]+i[50769]|0,i[50768]=t,t=(A=i[50766])?C(o[A+((0|(t>>=8))>=127?127:t)|0],i[50771])>>8:0,i[55911]=i[55911]+i[55915],A=(0|(A=i[55914]))<=23551?A:0,i[55914]=A+i[50761],A=(t+i[50770]|0)+C(i[33072],o[110528+(A>>6)|0]-128|0)|0,i[50767]=A,!(n=i[51291])&(0|(t=n?n<<12:A))>102399||(A=(0|t)<=102400?102400:t,i[50767]=A),(0|e)!=i[55913]){if(e=0,!((0|(g=i[50980]))<0)){for(;c=C(e,80),r=m[48+(t=c+222176|0)>>3]+m[t+16>>3],m[t+16>>3]=r,b=m[t+56>>3]+m[t+24>>3],m[t+24>>3]=b,f=m[t- -64>>3]+m[t+32>>3],m[t+32>>3]=f,n=I(r)<2147483648?~~r:-2147483648,i[t>>2]=n,n=I(f)<2147483648?~~f:-2147483648,i[t+8>>2]=n,l=I(b)<2147483648?~~b:-2147483648,i[t+4>>2]=(0|l)>0?l:0,(0|e)>2||(r=m[72+(t=c+222176|0)>>3]+m[t+40>>3],m[t+40>>3]=r,n=I(r)<2147483648?~~r:-2147483648),i[c+222188>>2]=n,(0|g)>=(0|(e=e+1|0)););if((0|e)>=8)break f}for(;7!=(0|e)&&(t=C(e,80)+222176|0,r=m[t+48>>3]+m[t+16>>3],m[t+16>>3]=r,n=I(r)<2147483648?~~r:-2147483648,i[t>>2]=n),t=C(e,80)+222176|0,r=m[t+56>>3]+m[t+24>>3],m[t+24>>3]=r,n=I(r)<2147483648?~~r:-2147483648,i[t+4>>2]=(0|n)>0?n:0,8!=(0|(e=e+1|0)););}}else A=i[50767];else i[50826]=218976,i[54742]=0,i[54736]=Ye(i[50767]<<4,218976,0),A=i[50767],i[54737]=890/(A>>12),i[54739]=(0|C(i[50781],C(i[50779],A>>8)))/8e4}if(i[55906]=A>>11,i[54735]=i[54736],i[55904]=C(i[50760],A>>7),i[55905]=i[50754]/(A>>12),t=1^(e=i[54742]),i[54742]=t,i[50826]=C(e,1600)+218976,i[54736]=Ye(A<<4,C(t,1600)+218976|0,1),!(!(A=i[50759])|!i[51022]))for(b=m[25430],f=m[25429],e=1;i[272+(t=A+(e<<2)|0)>>2]&&(n=i[t+308>>2],t=C(e,40)+203456|0,d=nt(b*+s[2+(C(e,80)+222176|0)>>1]),d*=r=$e(f*+(0|n)),d+=d,m[t+8>>3]=d,r*=-r,m[t+16>>3]=r,m[t>>3]=1-d-r),9!=(0|(e=e+1|0)););}if(l=i[50762]+1|0,i[50762]=l,c=(e=i[50765])+i[55904]|0,i[50765]=c,(0|c)<0&(0|e)>0){if(u=i[55905],A=i[50800]+((0|u)/-2|0)|0,i[55907]=A,(0|(w=i[50763]))<(0|l))break a;if(k=i[54738]+1|0,i[54738]=k,g=i[50767],!((0|(e=(t=i[50980])+1|0))>8)&&(n=g<<3,1&t&&(i[203264+(e<<2)>>2]=(1+(i[C(e,80)+222176>>2]/(0|n)|0)|0)/2,e=t+2|0),7!=(0|t)))for(;t=203264+(e<<2)|0,v=C(e,80)+222176|0,i[t>>2]=(1+(i[v>>2]/(0|n)|0)|0)/2,i[t+4>>2]=(1+(i[v+80>>2]/(0|n)|0)|0)/2,9!=(0|(e=e+2|0)););e=(0|C(i[50781],C(i[50779],g>>8)))/8e4|0,i[54739]=e;d:if(!((0|(t=i[55908]))<=0)){f:switch(t-3|0){case 0:if((w-l|0)>=u<<1)break d;i[55908]=2,e=(0|C(i[55909],e))/256|0,i[54739]=e;break d;case 1:i[55908]=2,e=(0|C(i[55909],e))/256|0,i[54739]=e;break d}i[55908]=t-1}(t=i[55910])&&(n=e,e=i[55911]>>8,e=(0|C(n,o[t+((0|e)>=127?127:e)|0]))/128|0,i[54739]=e),(0|(t=i[i[32972]+92>>2]))>7||(t=15&(n=o[i[55912]+(106336+(t<<3)|0)|0]),(n=n>>>4|0)&&(15!=(0|n)?(0|k)%(0|n)|0||(i[54739]=(0|C(e,t))/16):(i[55912]=0,i[54739]=(0|C(e,t))/16)))}else A=i[55907];if(l=A+1|0,i[55907]=l,t=c>>>16|0,n=0,!((0|l)<0|(0|l)>=i[50799])){if(!((0|(e=(A=i[50980])+1|0))>8)){if(g=1&(c=8-A|0),7!=(0|A))for(u=-2&c,A=0;n=C(i[203216+(w=4+(c=e<<2)|0)>>2],s[106400+(C(t,i[w+203264>>2])>>>4&4094)>>1])+(C(i[c+203216>>2],s[106400+(C(t,i[c+203264>>2])>>>4&4094)>>1])+n|0)|0,e=e+2|0,(0|u)!=(0|(A=A+2|0)););g&&(n=C(i[203216+(e<<=2)>>2],s[106400+(C(t,i[e+203264>>2])>>>4&4094)>>1])+n|0)}n=C(o[l+132160|0],(0|n)/i[55906]|0)}if(e=1,(0|(l=i[54737]))<=0)A=t;else for(c=i[50826],A=t;n=C(i[c+(e<<2)>>2],s[106400+((65504&A)>>>4|0)>>1])+n|0,A=A+t|0,(0|l)>=(0|(e=e+1|0)););if((0|(l=i[54735]))>=(0|e))for(c=i[50826];n=n-C(i[c+(e<<2)>>2],s[106400+((65504&A)>>>4|0)>>1])|0,A=A+t|0,(0|l)>=(0|(e=e+1|0)););if(l=64==(0|(e=i[54728]))?n:C(e,n>>6),i[51022]){if(i[50759])for(t=rr(i[33209],0,1103515245,0),e=Z,e=gn(t=t+12345|0,e=t>>>0<12345?e+1|0:e),i[33209]=e,b=+((16383&e)- -8192|0),A=i[50759],c=0,e=1;(n=i[272+(A+(e<<2)|0)>>2])&&(g=i[C(e,80)+222180>>2],t=C(e,40)+203456|0,r=m[t+32>>3],f=m[t+24>>3],m[t+32>>3]=f,r=r*m[t+16>>3]+(m[t>>3]*b+f*m[t+8>>3]),m[t+24>>3]=r,t=I(r)<2147483648?~~r:-2147483648,c=C(t,C(n,g>>14))+c|0),9!=(0|(e=e+1|0)););else c=0;l=l+c|0}A=0,(0|(e=i[50776]))>=i[50773]||(t=i[50778],A=i[50772],(c=i[50774])?(n=e+1|0,i[50776]=n,e=C(c,a[A+(e+t|0)|0])):(c=o[0|(A=A+(e+t|0)|0)],A=a[A+1|0],n=e+2|0,i[50776]=n,e=c|A<<8),A=(0|C(C(e,i[50780])>>10,i[50775]))/32|0,(0|(e=i[50777]))>(t+n|0)||(i[50778]=t+((0|C(e,3))/-4|0))),t=(e=i[51293])+1|0,i[51293]=t,e=((C(i[54739],l>>8)>>13)+A|0)+(C(i[50755],s[205184+(e<<1)>>1])>>8)|0,(0|t)>=5500&&(i[51293]=0),t=i[33073];d:{f:{if((0|(A=C(t,e)))>=8388608){if((0|t)>=(0|(c=8388608/(0|e)|0)))break f;break d}if((0|A)>-8388353)break d;if((0|t)<(0|(c=-8388608/(0|e)|0)))break d}t=c-1|0,i[33073]=t,A=C(e,t)}if(e=i[51290],i[51290]=e+1,t=e,e=A>>8,a[0|t]=e,t=i[51290],i[51290]=t+1,a[0|t]=A>>>16,(t=i[50756])&&(t=i[t+8>>2])&&Tn[0|t](e<<16>>16),A=(t=i[51292])+1|0,i[51292]=A,s[205184+(t<<1)>>1]=e,(0|A)>=5500&&(i[51292]=0),!(h[54046]>=i[51290]+2>>>0))break}n=1;break n}i[50773]=0}i[54731]=i[54729],n=1,g=65535&e,A=o[218920],c=i[t+8>>2],l=i[t+12>>2],r=0,f=0,W=t=W+-64|0,u=i[50759];g:if(6!=(0|(e=i[u+132>>2]))){if(!A){for(e-1>>>0<=4&&(i[55921]=e,i[55964]=i[110896+(e<<2)>>2]),e=i[u+88>>2],i[54741]=1,i[55922]=(0|e)/32,A=i[50758],e=i[50757];;){u:if((0|A)!=(0|(e=(0|(e=e+1|0))<=169?e:0)))if(1!=(0|(w=i[216192+(e<<4)>>2]))){if(w-5>>>0>1)continue}else{if(i[54741]=0,e=i[8+(216192+(e<<4)|0)>>2],!(p[l+4>>1]!=p[e+4>>1]|p[e+6>>1]!=p[l+6>>1]|p[e+8>>1]!=p[l+8>>1]|p[e+10>>1]!=p[l+10>>1])&&p[e+12>>1]==p[l+12>>1])break u;i[54741]=2}break}for((p[c+4>>1]!=p[113564]|p[c+6>>1]!=p[113565]|p[c+8>>1]!=p[113566]|p[c+10>>1]!=p[113567]||p[c+12>>1]!=p[113568])&&(Er(),i[55974]=0,i[55975]=0,i[55972]=0,i[55973]=0,i[55988]=0,i[55989]=0,i[55990]=0,i[55991]=0,i[56004]=0,i[56005]=0,i[56006]=0,i[56007]=0,i[56020]=0,i[56021]=0,i[56022]=0,i[56023]=0,i[56036]=0,i[56037]=0,i[56038]=0,i[56039]=0,i[56052]=0,i[56053]=0,i[56054]=0,i[56055]=0,i[56068]=0,i[56069]=0,i[56070]=0,i[56071]=0,i[56086]=0,i[56087]=0,i[56084]=0,i[56085]=0,i[56102]=0,i[56103]=0,i[56100]=0,i[56101]=0,i[56118]=0,i[56119]=0,i[56116]=0,i[56117]=0,i[56134]=0,i[56135]=0,i[56132]=0,i[56133]=0,i[56150]=0,i[56151]=0,i[56148]=0,i[56149]=0,i[56166]=0,i[56167]=0,i[56164]=0,i[56165]=0,i[56182]=0,i[56183]=0,i[56180]=0,i[56181]=0,i[56198]=0,i[56199]=0,i[56196]=0,i[56197]=0,i[56214]=0,i[56215]=0,i[56212]=0,i[56213]=0,i[56230]=0,i[56231]=0,i[56228]=0,i[56229]=0),e=p[l+4>>1]|p[l+6>>1]<<16,A=p[l>>1]|p[l+2>>1]<<16,s[113562]=A,s[113563]=A>>>16,s[113564]=e,s[113565]=e>>>16,e=p[l+60>>1]|p[l+62>>1]<<16,A=p[l+56>>1]|p[l+58>>1]<<16,s[113590]=A,s[113591]=A>>>16,s[113592]=e,s[113593]=e>>>16,e=p[l+52>>1]|p[l+54>>1]<<16,A=p[l+48>>1]|p[l+50>>1]<<16,s[113586]=A,s[113587]=A>>>16,s[113588]=e,s[113589]=e>>>16,e=p[l+44>>1]|p[l+46>>1]<<16,A=p[l+40>>1]|p[l+42>>1]<<16,s[113582]=A,s[113583]=A>>>16,s[113584]=e,s[113585]=e>>>16,e=p[l+36>>1]|p[l+38>>1]<<16,A=p[l+32>>1]|p[l+34>>1]<<16,s[113578]=A,s[113579]=A>>>16,s[113580]=e,s[113581]=e>>>16,e=p[l+28>>1]|p[l+30>>1]<<16,A=p[l+24>>1]|p[l+26>>1]<<16,s[113574]=A,s[113575]=A>>>16,s[113576]=e,s[113577]=e>>>16,e=p[l+20>>1]|p[l+22>>1]<<16,A=p[l+16>>1]|p[l+18>>1]<<16,s[113570]=A,s[113571]=A>>>16,s[113572]=e,s[113573]=e>>>16,e=p[l+12>>1]|p[l+14>>1]<<16,A=p[l+8>>1]|p[l+10>>1]<<16,s[113566]=A,s[113567]=A>>>16,s[113568]=e,s[113569]=e>>>16,b=+(0|g),(x=1&s[c>>1])?(e=o[c+39|0],i[56680]=e,m[28364]=e>>>0,m[28354]=+(o[l+39|0]-e<<6)/b,e=o[c+40|0],m[28366]=e>>>0,m[28356]=+(o[l+40|0]-e<<6)/b,e=o[c+41|0],i[56682]=e,m[28368]=e>>>0,m[28358]=+(o[l+41|0]-e<<6)/b,A=o[c+42|0],i[56684]=A,m[28370]=A>>>0,e=o[c+43|0],r=+(o[l+43|0]-e<<6)/b,f=+(o[l+42|0]-A<<6)/b,d=+(e>>>0)):(i[56728]=0,i[56729]=0,e=0,i[56680]=0,i[56708]=0,i[56709]=0,i[56732]=0,i[56733]=0,i[56712]=0,i[56713]=0,i[56682]=0,i[56736]=0,i[56737]=0,i[56716]=0,i[56717]=0,i[56684]=0,i[56740]=0,i[56741]=0,d=0),i[56688]=e,m[28360]=f,m[28372]=d,m[28362]=r,i[56692]=0,i[56748]=0,i[56749]=0,i[56694]=0,i[56752]=0,i[56753]=0,i[56696]=0,i[56756]=0,i[56757]=0,i[56700]=0,i[56760]=0,i[56761]=0,i[56704]=0,i[56764]=0,i[56765]=0,i[50764]=g,e=1;k=s[164+(w=(g=e<<1)+u|0)>>1],A=(G=C(e,80))+222896|0,f=+s[w+218>>1],r=.00390625*+(0|C(k,s[2+(c+g|0)>>1]))+f,m[A+16>>3]=r,v=I(r)<2147483648?~~r:-2147483648,i[A>>2]=v,m[A+48>>3]=64*(.00390625*+(0|C(k,s[2+(l+g|0)>>1]))+f-r)/b,e>>>0<=3&&(A=G+222896|0,r=.00390625*+s[w+200>>1]*+(o[35+(e+c|0)|0]<<1),m[A+24>>3]=r,g=I(r)<2147483648?~~r:-2147483648,i[A+4>>2]=g,m[A+56>>3]=64*(+(o[35+(e+l|0)|0]<<1)-r)/b),6!=(0|(e=e+1|0)););if(r=+((e=o[c+40|0])<<1),m[27864]=r,A=i[56618],e||(r=+(0|A),m[27864]=r),e=I(r)<2147483648?~~r:-2147483648,i[55724]=e,g=o[l+40|0],i[55730]=0,i[55731]=1079394304,i[55738]=0,i[55739]=0,i[55725]=89,e=1,m[27868]=64*(+(0|(g?g<<1:A))-r)/b,x)for(;A=C(e,80)+222896|0,u=o[56+(g=e+c|0)|0]<<2,i[A+12>>2]=u,r=+(0|u),m[A+40>>3]=r,u=e+l|0,m[A+72>>3]=64*(+(o[u+56|0]<<2)-r)/b,g=o[g+49|0],i[A+8>>2]=g,r=+(g>>>0),m[A+32>>3]=r,m[A- -64>>3]=64*(+o[u+49|0]-r)/b,7!=(0|(e=e+1|0)););i[56606]=0}for(;;){if((0|(v=i[50764]))>(0|(l=i[56606]))){for(e=i[50767],i[56609]=i[55724],i[56619]=i[55725],i[56610]=i[55744],i[56611]=i[55764],i[56612]=i[55784],i[56613]=i[55804],x=C(e,10),i[56607]=(0|x)/4096,i[56620]=i[55745],i[56621]=i[55765],i[56622]=i[55785],i[56614]=i[55824],i[56630]=i[55746],i[56631]=i[55766],i[56632]=i[55786],i[56633]=i[55806],i[56634]=i[55826],i[56635]=i[55846],G=i[56680],i[56608]=G,c=i[56694],i[56656]=c,g=i[56696],i[56653]=g,u=i[56700],i[56655]=u,w=i[56684],i[56649]=w,i[56651]=i[56704],i[56654]=i[56688],i[56652]=i[56682],i[56650]=i[56692],e=0;A=C(e,80)+222896|0,r=m[A+48>>3]+m[A+16>>3],m[A+16>>3]=r,b=m[A+56>>3]+m[A+24>>3],m[A+24>>3]=b,f=m[A+72>>3]+m[A+40>>3],m[A+40>>3]=f,d=m[A- -64>>3]+m[A+32>>3],m[A+32>>3]=d,k=I(r)<2147483648?~~r:-2147483648,i[A>>2]=k,k=I(b)<2147483648?~~b:-2147483648,i[A+4>>2]=k,k=I(f)<2147483648?~~f:-2147483648,i[A+12>>2]=k,k=I(d)<2147483648?~~d:-2147483648,i[A+8>>2]=k,9!=(0|(e=e+1|0)););for(r=m[28354]+m[28364],m[28364]=r,m[28366]=m[28356]+m[28366],b=m[28358]+m[28368],m[28368]=b,f=m[28360]+m[28370],m[28370]=f,d=m[28362]+m[28372],m[28372]=d,e=I(r)<2147483648?~~r:-2147483648,i[56680]=e,e=I(b)<2147483648?~~b:-2147483648,i[56682]=e,e=I(f)<2147483648?~~f:-2147483648,i[56684]=e,e=I(d)<2147483648?~~d:-2147483648,i[56688]=e,r=m[28374]+0,m[28374]=r,e=I(r)<2147483648?~~r:-2147483648,i[56692]=e,r=m[28376]+0,m[28376]=r,e=I(r)<2147483648?~~r:-2147483648,i[56694]=e,r=m[28378]+0,m[28378]=r,e=I(r)<2147483648?~~r:-2147483648,i[56696]=e,r=m[28380]+0,m[28380]=r,e=I(r)<2147483648?~~r:-2147483648,i[56700]=e,r=m[28382]+0,m[28382]=r,e=I(r)<2147483648?~~r:-2147483648,i[56704]=e,i[56659]=i[55724],i[56669]=i[55725],i[56660]=i[55744],i[56670]=i[55745],i[56661]=i[55764],i[56671]=i[55765],i[56662]=i[55784],i[56672]=i[55785],i[56663]=i[55804],i[56664]=i[55824],i[56665]=i[55844],e=i[50768]+i[50769]|0,i[50768]=e,e>>=8,i[50767]=i[50770]+(C(i[50771],o[i[50766]+((0|e)>=127?127:e)|0])>>8),e=v-l|0,i[55923]=(0|e)>=64?64:e,i[55961]=(0|x)/40960,e=G-7|0,i[56658]=(0|e)>0?e:0,m[27974]=w>>>0<=87?.001*+s[111136+(w<<1)>>1]*.05:0,m[27975]=g>>>0<=87?.001*+s[111136+(g<<1)>>1]*.25:0,m[27973]=c>>>0<=87?.001*+s[111136+(c<<1)>>1]:0,m[27971]=u>>>0<=87?.001*+s[111136+(u<<1)>>1]*.05:0,r=(e=i[56629])>>>0<=87?.001*+s[111136+(e<<1)>>1]*.6:0,m[t>>3]=r,r=(e=i[56630])>>>0<=87?.001*+s[111136+(e<<1)>>1]*.4:0,m[t+8>>3]=r,r=(e=i[56631])>>>0<=87?.001*+s[111136+(e<<1)>>1]*.15:0,m[t+16>>3]=r,r=(e=i[56632])>>>0<=87?.001*+s[111136+(e<<1)>>1]*.06:0,m[t+24>>3]=r,r=(e=i[56633])>>>0<=87?.001*+s[111136+(e<<1)>>1]*.04:0,m[t+32>>3]=r,r=(e=i[56634])>>>0<=87?.001*+s[111136+(e<<1)>>1]*.022:0,m[t+40>>3]=r,r=(e=i[56635])>>>0<=87?.001*+s[111136+(e<<1)>>1]*.03:0,m[t+48>>3]=r,r=(e=(0|(e=i[56657]-3|0))<=0?57:e)>>>0<=87?.001*+s[111136+(e<<1)>>1]:0,m[27977]=r/+i[55964],b=m[27968],f=m[27967],e=1;A=223664+(l=e<<6)|0,d=(r=$e(f*+i[48+(g=226428+(c=e<<2)|0)>>2]))*-r,m[A+216>>3]=d,r*=nt(b*+i[g+8>>2]),r+=r,m[A+208>>3]=r,E=1-r-d,m[A+200>>3]=E,e>>>0<=5&&(g=i[208+(c=c+226428|0)>>2],A=l+223664|0,y=(B=$e(f*+i[c+248>>2]))*nt(b*+(0|g)),y+=y,m[A+1488>>3]=y,B*=-B,m[A+1496>>3]=B,M=1-y-B,m[A+1480>>3]=M,m[A+256>>3]=.015625*(B-d),m[A+248>>3]=.015625*(y-r),m[A+240>>3]=.015625*(M-E)),10!=(0|(e=e+1|0)););for(B=(r=$e(f*+i[56619]))*-r,m[27985]=B,y=(r*=nt(b*+(0-i[56609]|0)))+r,m[27984]=y,r=1-y-B,m[27983]=r,0!=r&&(r=1/r,m[27983]=r,B*=d=-r,m[27985]=B,y*=d,m[27984]=y),E=(d=$e(f*+i[56669]))*-d,m[28145]=E,M=(d*=nt(b*+(0-i[56659]|0)))+d,m[28144]=M,d=1-M-E,m[28143]=d,0!=d&&(d=1/d,m[28143]=d,E*=T=-d,m[28145]=E,M*=T,m[28144]=M),m[27990]=.015625*(E-B),m[27989]=.015625*(M-y),m[27988]=.015625*(d-r),e=0;c=i[8+(l=226428+(e<<2)|0)>>2],A=223664+(e<<6)|0,d=(r=$e(f*+i[l+128>>2]))*nt(b*+(0|c)),d+=d,m[A+848>>3]=d,r*=-r,m[A+856>>3]=r,m[A+840>>3]=m[t+(e<<3)>>3]*(1-d-r),7!=(0|(e=e+1|0)););if(f=(r=$e(f*+(i[55918]/2|0)))*-r,m[28137]=f,r*=nt(0*b),r+=r,m[28136]=r,m[28135]=1-r-f,e=1,1!=(0|pe()))continue;break g}break}e=1,i[54741]>0&&(i[54741]=0,i[55963]=64,i[56606]=l+-64,i[55923]=64,1==(0|pe()))||(e=0)}else{if(W=w=W-752|0,!A){kA(e=w+376|0,0,376),Xe(u,c,e),Xe(u,l,e=kA(w,0,376)),A=i[50768]+C(i[50769],g>>>6|0)|0,i[50768]=A,A>>=8,A=i[50770]+(C(i[50771],o[i[50766]+((0|A)>=127?127:A)|0])>>8)|0,i[50767]=A,m[e+368>>3]=(0|A)/4096|0,i[50773]&&(m[e+736>>3]=m[e+736>>3]/5,m[e+360>>3]=m[e+360>>3]/5),A=i[i[56797]+4>>2],Tn[i[i[A>>2]>>2]](A,e+376|0,110,110,-1,0),l=g-110|0,u=i[50758],A=i[50757];u:{for(;;){if((0|u)!=(0|(A=(A+1|0)%170|0))&&!((k=i[216192+(A<<4)>>2])-5>>>0<2)){if(c=1,1!=(0|k))continue;break u}break}l=g-220|0,c=0}(0|l)>0&&(A=i[i[56797]+4>>2],Tn[i[i[A>>2]>>2]](A,e,l,l||1,-1,0)),c||(i[e+352>>2]=0,i[e+356>>2]=0,m[e>>3]=m[e+368>>3],A=i[i[56797]+4>>2],Tn[i[i[A>>2]>>2]](A,e,55,55,-1,0),i[e+360>>2]=0,i[e+364>>2]=0,A=i[i[56797]+4>>2],Tn[i[i[A>>2]>>2]](A,e,55,55,-1,0))}e=i[i[56797]+8>>2],A=i[51290],g=0|Tn[i[i[e>>2]>>2]](e,i[54046]-A>>>1|0,A),u=i[51290];u:if(g&&!((0|(A=i[50776]))>=(0|(G=i[50773]))))for(D=i[50777],P=(0|C(D,3))/-4|0,r=.0009765625*+i[50780],k=i[50772],l=i[50778],z=i[50775],v=i[50774],e=0;;){if(x=o[k+(c=A+l|0)|0],v?x=C(v,x<<24>>24):(A=A+1|0,i[50776]=A,x|=a[k+(c=A+l|0)|0]<<8),x=I(b=r*+(0|x))<2147483648?~~b:-2147483648,s[(Q=u+(e<<1)|0)>>1]=p[Q>>1]+((0|C(x,z))/40|0),(0|c)>=(0|D)&&(l=l+P|0,i[50778]=l),A=A+1|0,i[50776]=A,(0|A)>=(0|G))break u;if(!(g>>>0>(e=e+1|0)>>>0))break}e=u+(g<<1)|0,i[51290]=e,W=w+752|0,e=h[54046]<=e>>>0}if(W=t- -64|0,e)break n;break a}i[50781]=e||100;break a}We(e,i[t+8>>2]);break a}e=i[t+8>>2],i[50759]=_e(203816,e,1344),i[50801]=i[e+108>>2]?105792:106064,e=(0|C(i[e+120>>2],26))/100|0,i[33038]=e,(0|(n=i[50754]))<=11e3&&(a[203300]=1,i[33038]=e<<1),i[54728]=i[50982],e=i[50979],A=i[50978],kA(205184,0,11e3),i[51293]=0,e=(A=(c=(0|(l=i[50789]))>0)?130:(0|A)>=5499?5499:A)?c?l:(0|e)>=100?100:e:0,i[50755]=e,A=(0|C(A,n))/1e3|0,i[51292]=A,i[54729]=(0|e)>20?A<<1:e?A:0,i[33037]=(0|C(500-e|0,(0|C(o[i[50797]+105596|0],(0|C(i[50787],55))/100|0))/16|0))/500,e=256,(0|(A=(0|(A=i[50785]))>=101?101:A))>=51&&(e=256+(((C(A,25)-1250&65535)>>>0)/50|0)|0),s[101990]=(0|C(s[102026],e))/256,s[101991]=(0|C(s[102027],e))/256,s[101992]=(0|C(s[102028],e))/256,s[101993]=(0|C(s[102029],e))/256,s[101994]=(0|C(s[102030],e))/256,s[101995]=(0|C(s[102031],e))/256,e=i[50790],s[101999]=(0|C(s[102035],C(e,-6)+256|0))/256,s[102e3]=(0|C(s[102036],C(e,-3)+256|0))/256,LA(8,0,i[50986],0,i[51290]),ye(i[t+8>>2]);break a}if(!i[50759])break a;A=i[t+12>>2],t=i[t+8>>2],i[55911]=0,i[55915]=e?2097152/(0|e)|0:0,i[55910]=t,e=(0|C(A,i[33037]))/16|0,i[50779]=e,i[50780]=(0|C(C(e,i[50985]),15))/100;break a}LA(A>>8,e,i[t+8>>2],i[t+12>>2],c)}n=0,e=i[50757]+1|0,i[50757]=(0|e)<=169?e:0}if(a[218920]=n,!((c=i[51290])>>>0<h[54046]))break}l=i[34391],t=(i[51290]-l|0)/2|0,i[34439]=t+i[34439],A=i[34436],e=i[34388]+C(A,36)|0,i[e+4>>2]=0,i[e>>2]=0,i[e+24>>2]=i[34438];r:if(2&(e=i[32538])){if(c=i[34388],2==(-2&e)&&(!(t=A?c:0)|8!=i[t>>2]||(0|(t=i[t+28>>2]))!=i[34389]&&(i[34389]=t)),n=1,(0|A)<2)break r;for(;;){t=A?c+C(n,36)|0:0;n:{a:switch(0|e){case 2:case 3:if(!t|8!=i[t>>2])break n;if((0|(t=i[t+28>>2]))==i[34389])break n;i[34389]=t;break n;case 0:break a;default:break n}(e=i[34440])?(Tn[0|e](l,0,t),A=i[34436],e=i[32538]):e=0}if(!((0|(n=n+1|0))<(0|A)))break}}else if((e=i[34440])&&0|Tn[0|e](l,t,i[34388]))break t;if(!$(1)&&!(170-((0|(e=i[50757]-i[50758]|0))<=0?e+170|0:e)|0||(e=i[34388],i[e>>2]=0,i[e+4>>2]=i[34437],i[e+24>>2]=i[34438],X(1))))break}if(A=0,2&o[130152])break A;if(!(e=i[34440]))break A;if(!(0|Tn[0|e](0,0,i[34388])))break A}X(2),A=268439295}if((0|A)<=268437502){if(!A|268436479==(0|A)|268437247!=(0|A))break e;return}}}function $(e){var A,t=0,r=0,n=0,l=0,c=0,g=0,u=0,d=0,f=0,h=0,m=0,C=0,b=0,I=0,w=0,k=0,x=0,v=0,B=0,y=0,E=0;W=A=W-720|0,t=i[47198],e||(i[36443]=0,i[36442]=1,i[36444]=0,i[36440]=0,i[36441]=0,e=i[50758],i[36454]=e,i[36427]=-1,i[36424]=-1,i[36446]=0,i[36447]=0,i[36439]=-1,i[36426]=0,i[36455]=e,i[36448]=0,i[36449]=0,i[36450]=0,i[36451]=0,i[36452]=0,i[36453]=0,de(),i[36427]=-1,e=216192+(i[50758]<<4)|0,i[e>>2]=5,i[e+4>>2]=0,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0,i[36426]=0,i[36438]&&(i[36438]=0,e=216192+(i[50758]<<4)|0,i[e>>2]=14,i[e+4>>2]=0,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0));e:{A:if(!((0|(e=i[36442]))>997|i[36423]<=(0|e)))for(b=t>>>1&1,I=A+48|4,w=A+348|0,k=A+652|0,x=i[32322],h=i[32320],v=A+60|0,B=A+648|0,y=A+56|0,E=A+620|0,m=A- -64|0;;){if(r=145840+(e<<5)|0,!(e=i[50756])|!i[e>>2]||(i[A+12>>2]=0,nA(e=A+16|0,i[r+8>>2],r,0,A+12|0),t=_r(e),n=o[r+17|0],e=216192+(i[50758]<<4)|0,i[e>>2]=16,i[e+8>>2]=n,i[e+4>>2]=t,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0),e=1,(0|(n=(0|(t=i[50757]-i[50758]|0))<=0?t+170|0:t))<=(0|((t=o[r+17|0])?2==(0|t)?25:15:10)))break e;if(d=i[36442],2&o[0|r])for(f=2047&p[r+4>>1];;){if(n=i[36443],g=127&(t=i[198304+(n<<2)>>2])){e=t>>>8|0,i[36443]=n+1;t:{r:{n:switch((31&t)-2|0){case 0:We(96&t|8,e),Ze(2);break t;case 5:if((0|e)>=i[34064])break t;if(!i[4+(g=136272+(n=e<<4)|0)>>2])break t;GA(10,0),e=216192+(i[50758]<<4)|0,i[e>>2]=6,g=i[g+4>>2],i[e+8>>2]=i[8+(n+136272|0)>>2]+44,i[e+12>>2]=5376,i[e+4>>2]=g;break r;case 8:if((0|((0|(n=i[50757]-i[50758]|0))<=0?n+170:n))<6)break t;g=i[47353],n=216192+(i[50758]<<4)|0,i[n>>2]=778,i[n+8>>2]=e,i[n+4>>2]=g+f&16777215;break r;case 9:if((0|((0|(n=i[50757]-i[50758]|0))<=0?n+170:n))<6)break t;g=i[33284],n=216192+(i[50758]<<4)|0,i[n>>2]=1034,i[n+8>>2]=e,i[n+4>>2]=g+1&16777215;break r}GA(10,0),n=216192+(i[50758]<<4)|0,i[n>>2]=12,i[n+8>>2]=e,i[n+4>>2]=g}e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0}if(!(128&t))continue}break}(e=o[r+20|0])&&(1&a[i[47192]+48|0]&2==o[r+17|0]|1&a[i[r+8>>2]+7|0]||(i[36426]=0),t=i[47353]+(2047&p[r+4>>1])|0,i[36445]=t,4&e&&((0|((0|(e=i[50757]-i[50758]|0))<=0?e+170:e))<6||(n=i[47568],e=216192+(i[50758]<<4)|0,i[e>>2]=522,i[e+8>>2]=n,i[e+4>>2]=16777215&t,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0)),1&a[r+20|0]&&(t=p[r+4>>1],n=i[36444],i[36444]=n+1,(0|((0|(e=i[50757]-i[50758]|0))<=0?e+170:e))<6||(f=i[36445],g=i[47355],e=216192+(i[50758]<<4)|0,i[e>>2]=266,i[e+8>>2]=n+g,i[e+4>>2]=16777215&f|(63488&t)<<13,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0))),(0|(e=i[36441]))>0&&(t=216192+(i[36425]<<4)|0,i[t+4>>2]||(i[t+4>>2]=e),i[36441]=0),e=d+1<<5,t=d-1<<5,!(n=o[r+18|0])|2&o[i[r+8>>2]+7|0]||GA(n,1),g=e+145840|0,l=t+145840|0,f=1;t:{r:{if(i[47198]&&(u=i[r+8>>2],15!=o[u+10|0])){n:if(2==o[r+17|0])switch(o[l+17|0]-3|0){case 0:case 5:break r;default:break n}f=0,nA(A+704|0,u,r,b,0),(0|((0|(e=i[50757]-i[50758]|0))<=0?e+170:e))<6||(t=i[36445],e=216192+(i[50758]<<4)|0,i[e>>2]=1802,i[e+4>>2]=16777215&t,t=i[A+708>>2],i[e+8>>2]=i[A+704>>2],i[e+12>>2]=t,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0)}n:switch(o[r+17|0]){case 0:GA(i[r+12>>2],0),a[r+23|0]=o[i[r+8>>2]+14|0];break t;case 4:t=i[r+8>>2],2==(0|(e=o[g+17|0]))|!o[g+20|0]&3==(0|e)||(s[r>>1]=8192|p[r>>1]),2&o[t+7|0]&&(i[A+88>>2]=0,i[A+92>>2]=0,i[A+80>>2]=0,i[A+84>>2]=0,i[A+72>>2]=0,i[A+76>>2]=0,i[m>>2]=0,i[m+4>>2]=0,i[A+56>>2]=0,i[A+60>>2]=0,i[A+48>>2]=0,i[A+52>>2]=0,le(0,1,r,A+552|0,145784),i[A+56>>2]=i[A+620>>2],i[m>>2]=i[A+640>>2],i[36424]<0&&(n=o[g+19|0],e=i[50758],i[36425]=e,i[36441]=0,i[12+(e=216192+(e<<4)|0)>>2]=n,i[e+8>>2]=0,i[e>>2]=8,i[e+4>>2]=0,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0,f=o[g+22|0],n=o[g+21|0],g=i[129280+(o[r+16|0]<<2)>>2],(0|(e=i[36424]))<0|(0|(u=i[36440]))<=0||i[4+(e=216192+(e<<4)|0)>>2]||(i[e+4>>2]=u),e=i[50758],i[36424]=e,i[36440]=0,i[(e=216192+(e<<4)|0)>>2]=9,i[e+4>>2]=0,f|=n<<16,n=255==(0|n),i[e+12>>2]=n?3604556:f,i[e+8>>2]=n?h:g,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0),Ae(t,0,A+48|0,r,0)),le(0,0,r,A+552|0,145784),i[A+552>>2]=4|i[A+552>>2],(0|(e=i[36440]))<=0||(0|(t=i[36424]))<0||(i[4+(t=216192+(t<<4)|0)>>2]||(i[t+4>>2]=e),i[36440]=0),i[36426]=0,i[36439]=-1,i[36455]=i[50758],de(),i[36427]=-1,i[36422]=0,(e=i[A+624>>2])&&(n=e,e=i[A+644>>2],Je(n,2,i[A+596>>2]<<1,i[A+552>>2],0,e?(e<<5)/100|0:32)),i[36426]=0;break t;case 6:le(0,0,r,A+552|0,145784),8&o[0|r]&&(e=i[r+12>>2],(0|(t=i[36440]))<=0||(0|(n=i[36424]))<0||(i[4+(n=216192+(n<<4)|0)>>2]||(i[n+4>>2]=t),i[36440]=0),i[36426]=0,i[36439]=-1,i[36455]=i[50758],de(),i[36427]=-1,i[36422]=0,(t=i[A+624>>2])&&(n=e,e=i[A+644>>2],Je(t,2,i[A+596>>2]<<1,i[A+552>>2],n,e?(e<<5)/100|0:32))),e=i[r+12>>2],(0|(t=i[36440]))<=0||(0|(n=i[36424]))<0||(i[4+(n=216192+(n<<4)|0)>>2]||(i[n+4>>2]=t),i[36440]=0),i[36426]=0,i[36439]=-1,i[36455]=i[50758],de(),i[36427]=-1,i[36422]=0,(t=i[A+624>>2])&&(n=e,e=i[A+644>>2],Je(t,2,i[A+596>>2]<<1,i[A+552>>2],n,e?(e<<5)/100|0:32)),i[36426]=0;break t;case 5:n=i[r+8>>2],i[I+40>>2]=0,i[(e=I)+32>>2]=0,i[e+36>>2]=0,i[e+24>>2]=0,i[e+28>>2]=0,i[e+16>>2]=0,i[e+20>>2]=0,i[e+8>>2]=0,i[e+12>>2]=0,i[e>>2]=0,i[e+4>>2]=0,i[A+48>>2]=4;a:{s:{i:{o:switch(o[g+17|0]-2|0){case 0:t=o[r+19|0],e=i[50758],i[36425]=e,i[36441]=0,i[12+(e=216192+(e<<4)|0)>>2]=t,i[e+8>>2]=0,i[e>>2]=8,i[e+4>>2]=0,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0,t=o[r+22|0],u=o[r+21|0],f=i[129280+(o[r+16|0]<<2)>>2],(0|(e=i[36424]))<0|(0|(c=i[36440]))<=0||i[4+(e=216192+(e<<4)|0)>>2]||(i[e+4>>2]=c),e=(c=!(255&~u))?h:f,f=1;break s;case 1:break o;default:break i}if(!o[g+20|0]){t=o[g+19|0],e=i[50758],i[36425]=e,i[36441]=0,i[12+(e=216192+(e<<4)|0)>>2]=t,i[e+8>>2]=0,i[e>>2]=8,i[e+4>>2]=0,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0,t=o[g+22|0],u=o[g+21|0],f=i[129280+(o[g+16|0]<<2)>>2],(0|(e=i[36424]))<0|(0|(c=i[36440]))<=0||i[4+(e=216192+(e<<4)|0)>>2]||(i[e+4>>2]=c),e=(c=!(255&~u))?h:f,f=1;break s}}if(f=0,i[36424]>=0)break a;t=o[g+19|0],e=i[50758],i[36425]=e,i[36441]=0,i[12+(e=216192+(e<<4)|0)>>2]=t,i[e+8>>2]=0,i[e>>2]=8,i[e+4>>2]=0,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0,t=o[r+22|0],u=o[r+21|0],f=i[129280+(o[r+16|0]<<2)>>2],(0|(e=i[36424]))<0|(0|(c=i[36440]))<=0||i[4+(e=216192+(e<<4)|0)>>2]||(i[e+4>>2]=c),e=(c=!(255&~u))?h:f,f=0}C=i[50758],i[36424]=C,i[36440]=0,i[(C=216192+(C<<4)|0)>>2]=9,i[C+4>>2]=0,i[C+12>>2]=c?3604556:255&t|(255&u)<<16,i[C+8>>2]=e,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0}a:if(!(2&o[n+7|0])&2!=o[l+17|0])8&o[0|r]&&GA(50,0);else{if(le(0,1,r,A+552|0,145784),i[A+56>>2]=i[A+620>>2],i[A+64>>2]=i[A+640>>2],Ae(n,0,A+48|0,r,0),!(8&o[0|r]))break a;GA(25,1),Ae(n,0,A+48|0,r,0)}a:if(f){if(i[36455]!=i[36454])break a;i[36455]=i[50758]}else s[r>>1]=8192|p[r>>1];if(le(0,0,r,A+552|0,145784),i[A+56>>2]=i[A+620>>2],i[A+64>>2]=i[A+640>>2],i[A+76>>2]=i[A+636>>2],i[A+80>>2]=i[A+656>>2],Ae(n,0,A+48|0,r,0),o[r+20|0]|o[84+(145840+(d<<5)|0)|0])break t;if(7==(0|(e=o[g+17|0]))&&(GA(20,0),e=o[g+17|0]),6!=(255&e))break t;GA(12,0);break t;case 7:a:{s:{i:{o:{l:switch((e=o[g+17|0])-2|0){case 1:break o;case 0:break l;default:break i}t=o[r+19|0],e=i[50758],i[36425]=e,i[36441]=0,i[12+(e=216192+(e<<4)|0)>>2]=t,i[e+8>>2]=0,i[e>>2]=8,i[e+4>>2]=0,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0,f=o[r+22|0],e=o[r+21|0],n=i[129280+(o[r+16|0]<<2)>>2],(0|(t=i[36424]))<0|(0|(u=i[36440]))<=0||i[4+(t=216192+(t<<4)|0)>>2]||(i[t+4>>2]=u),t=(u=!(255&~e))?h:n;break s}t=o[g+19|0],e=i[50758],i[36425]=e,i[36441]=0,i[12+(e=216192+(e<<4)|0)>>2]=t,i[e+8>>2]=0,i[e>>2]=8,i[e+4>>2]=0,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0,f=o[g+22|0],e=o[g+21|0],n=i[129280+(o[g+16|0]<<2)>>2],(0|(t=i[36424]))<0|(0|(u=i[36440]))<=0||i[4+(t=216192+(t<<4)|0)>>2]||(i[t+4>>2]=u),t=(u=!(255&~e))?h:n;break s}if(i[36424]>=0)break a;t=o[r+19|0],e=i[50758],i[36425]=e,i[36441]=0,i[12+(e=216192+(e<<4)|0)>>2]=t,i[e+8>>2]=0,i[e>>2]=8,i[e+4>>2]=0,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0,f=o[r+22|0],e=o[r+21|0],n=i[129280+(o[r+16|0]<<2)>>2],(0|(t=i[36424]))<0|(0|(u=i[36440]))<=0||i[4+(t=216192+(t<<4)|0)>>2]||(i[t+4>>2]=u),t=(u=!(255&~e))?h:n}n=i[50758],i[36424]=n,i[36440]=0,i[(n=216192+(n<<4)|0)>>2]=9,i[n+4>>2]=0,i[n+12>>2]=u?3604556:(255&e)<<16|f,i[n+8>>2]=t,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0,e=o[g+17|0]}a:{s:{i:switch((255&e)-2|0){case 1:if(o[g+20|0])break s;break;case 0:break i;default:break s}if(i[36455]!=i[36454])break a;i[36455]=i[50758];break a}s[r>>1]=8192|p[r>>1]}le(0,0,r,A+552|0,145784),i[A+56>>2]=0,i[A+60>>2]=0,i[m>>2]=0,i[m+4>>2]=0,i[A+80>>2]=0,i[A+84>>2]=0,i[A+72>>2]=0,i[A+76>>2]=0,i[A+88>>2]=0,i[A+56>>2]=i[A+620>>2],i[m>>2]=i[A+640>>2],i[A+80>>2]=i[A+656>>2],i[A+48>>2]=0,i[A+52>>2]=0,i[A+76>>2]=i[A+636>>2],i[A+92>>2]=i[A+596>>2]<<1,8&o[0|r]&&Ae(i[r+8>>2],0,A+48|0,r,0),Ae(i[r+8>>2],0,A+48|0,r,0);break t;case 8:if(i[A+88>>2]=0,i[A+92>>2]=0,i[A+80>>2]=0,i[A+84>>2]=0,i[A+72>>2]=0,i[A+76>>2]=0,i[m>>2]=0,i[m+4>>2]=0,i[A+56>>2]=0,i[A+60>>2]=0,i[A+48>>2]=0,i[A+52>>2]=0,1&a[0|r]||(t=o[r+19|0],e=i[50758],i[36425]=e,i[36441]=0,i[12+(e=216192+(e<<4)|0)>>2]=t,i[e+8>>2]=0,i[e>>2]=8,i[e+4>>2]=0,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0,n=o[r+22|0],t=o[r+21|0],f=i[129280+(o[r+16|0]<<2)>>2],(0|(e=i[36424]))<0|(0|(u=i[36440]))<=0||i[4+(e=216192+(e<<4)|0)>>2]||(i[e+4>>2]=u),e=i[50758],i[36424]=e,i[36440]=0,i[(e=216192+(e<<4)|0)>>2]=9,i[e+4>>2]=0,n|=t<<16,t=255==(0|t),i[e+12>>2]=t?3604556:n,i[e+8>>2]=t?h:f,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0),8==o[l+17|0]&&(i[36426]=0),le(0,0,r,A+552|0,145784),i[A+56>>2]=i[A+620>>2],i[A+64>>2]=i[A+640>>2],i[A+92>>2]=i[A+596>>2]<<1,2==o[g+17|0]){i[36455]==i[36454]&&(i[36455]=i[50758]),Ae(i[r+8>>2],0,A+48|0,r,0);break t}if(!(!(1&a[0|r])|2!=o[l+17|0])){Ae(i[r+8>>2],0,A+48|0,r,0);break t}i[36426]=0,Ae(i[r+8>>2],0,A+48|0,r,0),i[36426]=0;break t;case 3:i[A+88>>2]=0,i[A+92>>2]=0,i[A+80>>2]=0,i[A+84>>2]=0,i[A+72>>2]=0,i[A+76>>2]=0,i[m>>2]=0,i[m+4>>2]=0,i[A+56>>2]=0,i[A+60>>2]=0,i[A+48>>2]=0,i[A+52>>2]=0,n=i[i[r+8>>2]+4>>2],1&a[0|r]||(t=o[r+19|0],e=i[50758],i[36425]=e,i[36441]=0,i[12+(e=216192+(e<<4)|0)>>2]=t,i[e+8>>2]=0,i[e>>2]=8,i[e+4>>2]=0,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0,f=o[r+22|0],t=o[r+21|0],u=i[129280+(o[r+16|0]<<2)>>2],(0|(e=i[36424]))<0|(0|(c=i[36440]))<=0||i[4+(e=216192+(e<<4)|0)>>2]||(i[e+4>>2]=c),e=i[50758],i[36424]=e,i[36440]=0,i[(e=216192+(e<<4)|0)>>2]=9,i[e+4>>2]=0,f|=t<<16,t=255==(0|t),i[e+12>>2]=t?3604556:f,i[e+8>>2]=t?h:u,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0),8==o[l+17|0]&&(i[36426]=0),2!=o[g+17|0]|i[36455]!=i[36454]||(i[36455]=i[50758]),le(0,0,r,A+552|0,145784),(0|(e=i[A+584>>2]-o[r+18|0]|0))>0&&GA(e,1),i[A+56>>2]=i[A+620>>2],i[A+64>>2]=i[A+640>>2],i[A+76>>2]=i[A+636>>2],i[A+80>>2]=i[A+656>>2],i[A+92>>2]=i[A+596>>2]<<1,Ae(i[r+8>>2],0,A+48|0,r,n<<24>>31&5);break t;case 2:break n;default:break t}u=i[r+8>>2]}d=o[r+3|0],i[A+88>>2]=0,i[A+92>>2]=0,i[A+80>>2]=0,i[A+84>>2]=0,i[A+72>>2]=0,i[A+76>>2]=0,i[m>>2]=0,i[m+4>>2]=0,i[A+56>>2]=0,i[A+60>>2]=0,i[A+48>>2]=0,i[A+52>>2]=0,le(0,0,r,A+552|0,145784),e=i[A+628>>2],i[A+56>>2]=e,i[A+92>>2]=i[A+596>>2]<<1;r:{if(!e||(c=0,n=B,t=v,2&o[A+552|0])){if(o[l+17|0]?(c=0,le(0,0,l,A+400|0,0),e=i[A+476>>2],i[A+56>>2]=e,!e|!(2&o[A+400|0])||(i[A+72>>2]=i[A+496>>2],c=1),t=i[A+512>>2],i[A+84>>2]=i[A+508>>2],i[A+88>>2]=t):c=0,e)break r;i[A+48>>2]=1,i[A+52>>2]=1,n=E,t=y}i[t>>2]=i[n>>2]}i[A+64>>2]=i[A+640>>2],t=o[r+16|0],e=0,(n=o[r+7|0])?(Jt(n,A+96|0),t=Jr(i[A+220>>2]),(0|(n=i[A+224>>2]))<=0||(e=Jr(n))):t=i[129280+(t<<2)>>2],i[36455]==i[36454]&&(i[36455]=i[50758]),n=(n=15&d)>>>0<2?1:n>>>0>6?3:2;r:{n:switch(o[l+17|0]-3|0){case 2:case 4:c=o[r+19|0],l=i[50758],i[36425]=l,i[36441]=0,i[12+(l=216192+(l<<4)|0)>>2]=c,i[l+8>>2]=e,i[l>>2]=8,i[l+4>>2]=0,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0,c=o[r+22|0],l=o[r+21|0],(0|(e=i[36440]))<=0||(0|(d=i[36424]))<0||i[4+(d=216192+(d<<4)|0)>>2]||(i[d+4>>2]=e),e=i[50758],i[36424]=e,i[36440]=0,i[(e=216192+(e<<4)|0)>>2]=9,i[e+4>>2]=0,c|=l<<16,l=255==(0|l),i[e+12>>2]=l?3604556:c,i[e+8>>2]=l?h:t,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0,Ae(u,1,A+48|0,r,n);break r;case 0:case 5:c=o[r+19|0],l=i[50758],i[36425]=l,i[36441]=0,i[12+(l=216192+(l<<4)|0)>>2]=c,i[l+8>>2]=e,i[l>>2]=8,i[l+4>>2]=0,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0,Ae(u,1,A+48|0,r,n),c=o[r+22|0],l=o[r+21|0],(0|(e=i[36440]))<=0||(0|(d=i[36424]))<0||i[4+(d=216192+(d<<4)|0)>>2]||(i[d+4>>2]=e),e=i[50758],i[36424]=e,i[36440]=0,i[(e=216192+(e<<4)|0)>>2]=9,i[e+4>>2]=0,c|=l<<16,l=255==(0|l),i[e+12>>2]=l?3604556:c,i[e+8>>2]=l?h:t,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0;break r}c?(c=o[r+22|0],(0|(l=i[36440]))<=0||(0|(d=i[36424]))<0||i[4+(d=216192+(d<<4)|0)>>2]||(i[d+4>>2]=l),l=i[50758],i[36424]=l,i[36440]=0,i[(l=216192+(l<<4)|0)>>2]=9,i[l+4>>2]=0,i[l+12>>2]=(c|c<<16)-983040,i[l+8>>2]=x,l=i[50758]+1|0,i[50758]=(0|l)<=169?l:0,c=o[r+19|0],l=i[50758],i[36425]=l,i[36441]=0,i[(l=216192+(l<<4)|0)>>2]=8,i[l+4>>2]=0,i[l+12>>2]=c-1,i[l+8>>2]=e,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0,Ae(u,1,A+48|0,r,n),l=o[r+21|0],c=o[r+22|0],(0|(e=i[36440]))<=0||(0|(d=i[36424]))<0||i[4+(d=216192+(d<<4)|0)>>2]||(i[d+4>>2]=e),e=i[50758],i[36424]=e,i[36440]=0,i[(e=216192+(e<<4)|0)>>2]=9,i[e+4>>2]=0,c|=l<<16,l=255==(0|l),i[e+12>>2]=l?3604556:c,i[e+8>>2]=l?h:t,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0):(1&a[0|r]||(c=o[r+19|0],l=i[50758],i[36425]=l,i[36441]=0,i[12+(l=216192+(l<<4)|0)>>2]=c,i[l+8>>2]=e,i[l>>2]=8,i[l+4>>2]=0,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0,c=o[r+22|0],l=o[r+21|0],(0|(e=i[36440]))<=0||(0|(d=i[36424]))<0||i[4+(d=216192+(d<<4)|0)>>2]||(i[d+4>>2]=e),e=i[50758],i[36424]=e,i[36440]=0,i[(e=216192+(e<<4)|0)>>2]=9,i[e+4>>2]=0,c|=l<<16,l=255==(0|l),i[e+12>>2]=l?3604556:c,i[e+8>>2]=l?h:t,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0),Ae(u,1,A+48|0,r,n))}!i[47198]|1^f||(nA(A+704|0,i[r+8>>2],r,b,0),(0|((0|(e=i[50757]-i[50758]|0))<=0?e+170:e))<6||(t=i[36445],e=216192+(i[50758]<<4)|0,i[e>>2]=1802,i[e+4>>2]=16777215&t,t=i[A+708>>2],i[e+8>>2]=i[A+704>>2],i[e+12>>2]=t,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0)),i[A+56>>2]=i[A+620>>2],i[A+84>>2]=0,i[A+88>>2]=0,i[A+64>>2]=i[A+640>>2],t=i[A+632>>2],i[A+68>>2]=t,e=k;r:{if(!t){if(!o[g+17|0])break r;if(i[A+72>>2]=0,le(0,0,g,A+248|0,0),i[A+52>>2]=1,e=i[A+368>>2],i[A+84>>2]=i[A+364>>2],i[A+88>>2]=e,t=i[A+328>>2],i[A+68>>2]=t,e=w,!t)break r}i[A+72>>2]=i[e>>2]}Ae(u,2,A+48|0,r,n)}if(e=i[36442]+1|0,i[36442]=e,(0|e)>997)break A;if(!(i[36423]>(0|e)))break}(0|(e=i[36440]))<=0||(0|(t=i[36424]))<0||(i[4+(t=216192+(t<<4)|0)>>2]||(i[t+4>>2]=e),i[36440]=0),i[36426]=0,i[36439]=-1,i[36455]=i[50758],de(),i[36427]=-1,e=0,i[36423]<=0||(t=i[47568],n=i[33284],(0|((0|(e=i[50757]-i[50758]|0))<=0?e+170:e))>=6&&(e=216192+(i[50758]<<4)|0,i[e>>2]=1290,i[e+8>>2]=t,i[e+4>>2]=16777215&n,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0),i[36423]=0,e=0)}return W=A+720|0,e}function ee(e,A,t,r){var n,s=0,c=0,g=0,u=0,d=0,p=0,m=0,I=0,k=0,x=0,v=0,B=0,y=0,E=0,M=0,G=0,D=0,Q=0,T=0,P=0,z=0,F=0,S=0,N=0,O=0;W=n=W-48|0;e:{if(t>>>0<=2){for(z=i[124732+(t<<=2)>>2],F=i[t+124720>>2];(0|(t=i[A+4>>2]))==i[A+104>>2]?t=hA(A):(i[A+4>>2]=t+1,t=o[0|t]),32==(0|t)|t-9>>>0<5;);k=1;A:{t:switch(t-43|0){case 0:case 2:break t;default:break A}k=45==(0|t)?-1:1,(0|(t=i[A+4>>2]))==i[A+104>>2]?t=hA(A):(i[A+4>>2]=t+1,t=o[0|t])}A:{t:{for(;;){if(a[g+84056|0]==(32|t)){if(g>>>0>6||((0|(t=i[A+4>>2]))==i[A+104>>2]?t=hA(A):(i[A+4>>2]=t+1,t=o[0|t])),8!=(0|(g=g+1|0)))continue;break t}break}if(3!=(0|g)){if(8==(0|g))break t;if(!r|g>>>0<4)break A;if(8==(0|g))break t}if((0|(t=i[A+116>>2]))>0|(0|t)>=0&&(i[A+4>>2]=i[A+4>>2]-1),!(!r|g>>>0<4))for(t=(0|t)<0;t||(i[A+4>>2]=i[A+4>>2]-1),(g=g-1|0)>>>0>3;);}W=m=W-16|0,f(b(b(0|k)*b(1/0))),(A=2147483647&(u=l(2)))-8388608>>>0<=2130706431?(t=A,t<<=25,r=1065353216+(A=A>>>7|0)|0):(t=u<<25,r=u>>>7|2147418112,A>>>0>=2139095040||(t=0,r=0,A&&(WA(m,t=A,0,0,0,(A=w(A))+81|0),p=i[m>>2],d=i[m+4>>2],t=i[m+8>>2],r=65536^i[m+12>>2]|16265-A<<16))),i[n>>2]=p,i[n+4>>2]=d,i[n+8>>2]=t,i[n+12>>2]=-2147483648&u|r,W=m+16|0,p=i[n+8>>2],d=i[n+12>>2],u=i[n>>2],I=i[n+4>>2];break e}A:{t:{r:if(!g){for(g=0;;){if(a[g+84473|0]!=(32|t))break r;if(g>>>0>1||((0|(t=i[A+4>>2]))==i[A+104>>2]?t=hA(A):(i[A+4>>2]=t+1,t=o[0|t])),3==(0|(g=g+1|0)))break}break t}r:switch(0|g){case 0:if(48==(0|t)){if((0|(g=i[A+4>>2]))==i[A+104>>2]?g=hA(A):(i[A+4>>2]=g+1,g=o[0|g]),88==(-33&g)){W=c=W-432|0,(0|(t=i[A+4>>2]))==i[A+104>>2]?g=hA(A):(i[A+4>>2]=t+1,g=o[0|t]);n:{a:{for(;;){if(48!=(0|g)){if(46!=(0|g))break n;if((0|(t=i[A+4>>2]))!=i[A+104>>2]){i[A+4>>2]=t+1,g=o[0|t];break a}break}(0|(t=i[A+4>>2]))!=i[A+104>>2]?(P=1,i[A+4>>2]=t+1,g=o[0|t]):(P=1,g=hA(A))}g=hA(A)}if(B=1,48==(0|g)){for(;y=(t=y)-1|0,E=E-!t|0,(0|(t=i[A+4>>2]))==i[A+104>>2]?g=hA(A):(i[A+4>>2]=t+1,g=o[0|t]),48==(0|g););P=1}}for(I=1073676288;;){n:{t=32|g;a:{if(!((S=g-48|0)>>>0<10)){if(46!=(0|g)&t-97>>>0>=6)break n;if(46==(0|g)){if(B)break n;B=1,y=p,E=d;break a}}t=(0|g)>57?t-87|0:S,(0|d)<=0&p>>>0<=7|(0|d)<0?s=t+(s<<4)|0:!d&p>>>0<=28?(Qt(c+48|0,t),me(c+32|0,Q,T,u,I,0,0,0,1073414144),Q=i[c+32>>2],T=i[c+36>>2],u=i[c+40>>2],I=i[c+44>>2],me(c+16|0,i[c+48>>2],i[c+52>>2],i[c+56>>2],i[c+60>>2],Q,T,u,I),Be(c,i[c+16>>2],i[c+20>>2],i[c+24>>2],i[c+28>>2],m,v,G,D),G=i[c+8>>2],D=i[c+12>>2],m=i[c>>2],v=i[c+4>>2]):x|!t||(me(c+80|0,Q,T,u,I,0,0,0,1073610752),Be(c- -64|0,i[c+80>>2],i[c+84>>2],i[c+88>>2],i[c+92>>2],m,v,G,D),G=i[c+72>>2],D=i[c+76>>2],x=1,m=i[c+64>>2],v=i[c+68>>2]),d=(p=p+1|0)?d:d+1|0,P=1}(0|(t=i[A+4>>2]))!=i[A+104>>2]?(i[A+4>>2]=t+1,g=o[0|t]):g=hA(A);continue}break}n:if(P){if((0|d)<=0&p>>>0<=7|(0|d)<0)for(u=p,I=d;s<<=4,8!=(0|(u=u+1|0))|(I=u?I:I+1|0););a:{s:{i:{if(80==(-33&g)){if(u=Ke(A,r),I=t=Z,u|-2147483648!=(0|t))break a;if(r){if((0|(t=i[A+116>>2]))>0|(0|t)>=0)break i;break s}m=0,v=0,Vt(A,0,0),t=0,A=0;break n}if(u=0,I=0,i[A+116>>2]<0)break a}i[A+4>>2]=i[A+4>>2]-1}u=0,I=0}if(s)if(t=u+((A=B?y:p)<<2)|0,A=(d=(B?E:d)<<2|A>>>30)+I|0,(p=t-32|0)>>>0>0-z>>>0&(0|(A=d=(t>>>0<u>>>0?A+1|0:A)-(t>>>0<32)|0))>=0|(0|A)>0)i[56798]=68,Qt(c+160|0,k),me(c+144|0,i[c+160>>2],i[c+164>>2],i[c+168>>2],i[c+172>>2],-1,-1,-1,2147418111),me(c+128|0,i[c+144>>2],i[c+148>>2],i[c+152>>2],i[c+156>>2],-1,-1,-1,2147418111),m=i[c+128>>2],v=i[c+132>>2],t=i[c+140>>2],A=i[c+136>>2];else if((0|d)>=(0|(t=(A=z-226|0)>>31))&A>>>0<=p>>>0|(0|t)<(0|d)){if((0|s)>=0)for(;Be(c+416|0,m,v,G,D,0,0,0,-1073807360),Be(c+400|0,m,v,G,D,(A=t=(0|(A=$A(m,v,G,D,1073610752)))>=0)?i[c+416>>2]:m,A?i[c+420>>2]:v,A?i[c+424>>2]:G,A?i[c+428>>2]:D),p=(A=p)-1|0,d=d-!A|0,G=i[c+408>>2],D=i[c+412>>2],m=i[c+400>>2],v=i[c+404>>2],(0|(s=t|s<<1))>=0;);A=d-((z>>31)+(p>>>0<z>>>0)|0)|0,(0|(t=(t=32+(p-z|0)|0)>>>0<F>>>0&(0|(A=t>>>0<32?A+1|0:A))<=0|(0|A)<0?(0|t)>0?t:0:F))>=113?(Qt(c+384|0,k),y=i[c+392>>2],E=i[c+396>>2],Q=i[c+384>>2],T=i[c+388>>2],u=0,A=0):(PA(c+352|0,mt(1,144-t|0)),Qt(c+336|0,k),Q=i[c+336>>2],T=i[c+340>>2],y=i[c+344>>2],E=i[c+348>>2],Lr(c+368|0,i[c+352>>2],i[c+356>>2],i[c+360>>2],i[c+364>>2],Q,T,y,E),M=i[c+376>>2],N=i[c+380>>2],u=i[c+372>>2],A=i[c+368>>2]),Lt(c+320|0,(r=!(1&s)&!!(0|DA(m,v,G,D,0,0,0,0))&(0|t)<32)+s|0),me(c+304|0,Q,T,y,E,i[c+320>>2],i[c+324>>2],i[c+328>>2],i[c+332>>2]),t=A,Be(c+272|0,i[c+304>>2],i[c+308>>2],i[c+312>>2],i[c+316>>2],A,u,M,N),me(c+288|0,Q,T,y,E,(A=r)?0:m,A?0:v,A?0:G,A?0:D),Be(c+256|0,i[c+288>>2],i[c+292>>2],i[c+296>>2],i[c+300>>2],i[c+272>>2],i[c+276>>2],i[c+280>>2],i[c+284>>2]),pr(c+240|0,i[c+256>>2],i[c+260>>2],i[c+264>>2],i[c+268>>2],t,u,M,N),DA(A=i[c+240>>2],r=i[c+244>>2],t=i[c+248>>2],u=i[c+252>>2],0,0,0,0)||(i[56798]=68),bA(c+224|0,A,r,t,u,p),m=i[c+224>>2],v=i[c+228>>2],t=i[c+236>>2],A=i[c+232>>2]}else i[56798]=68,Qt(c+208|0,k),me(c+192|0,i[c+208>>2],i[c+212>>2],i[c+216>>2],i[c+220>>2],0,0,0,65536),me(c+176|0,i[c+192>>2],i[c+196>>2],i[c+200>>2],i[c+204>>2],0,0,0,65536),m=i[c+176>>2],v=i[c+180>>2],t=i[c+188>>2],A=i[c+184>>2];else PA(c+112|0,0*+(0|k)),m=i[c+112>>2],v=i[c+116>>2],t=i[c+124>>2],A=i[c+120>>2]}else{a:{s:{if((0|(t=i[A+116>>2]))>0|(0|t)>=0){if(t=i[A+4>>2],i[A+4>>2]=t-1,!r)break s;if(i[A+4>>2]=t-2,!B)break a;i[A+4>>2]=t-3;break a}if(r)break a}Vt(A,0,0)}PA(c+96|0,0*+(0|k)),m=i[c+96>>2],v=i[c+100>>2],t=i[c+108>>2],A=i[c+104>>2]}i[n+16>>2]=m,i[n+20>>2]=v,i[n+24>>2]=A,i[n+28>>2]=t,W=c+432|0,p=i[n+24>>2],d=i[n+28>>2],u=i[n+16>>2],I=i[n+20>>2];break e}i[A+116>>2]<0||(i[A+4>>2]=i[A+4>>2]-1)}g=A,M=k,c=r,A=0,k=0,W=s=W-8976|0,N=(S=0-z|0)-F|0;n:{a:{for(;;){if(48!=(0|t)){if(46!=(0|t))break n;if((0|(t=i[g+4>>2]))!=i[g+104>>2]){i[g+4>>2]=t+1,t=o[0|t];break a}break}(0|(A=i[g+4>>2]))!=i[g+104>>2]?(i[g+4>>2]=A+1,t=o[0|A]):t=hA(g),A=1}t=hA(g)}if(x=1,48==(0|t)){for(;p=(A=p)-1|0,d=d-!A|0,(0|(A=i[g+4>>2]))==i[g+104>>2]?t=hA(g):(i[g+4>>2]=A+1,t=o[0|A]),48==(0|t););A=1}}i[s+784>>2]=0;n:{a:{s:{i:{o:{if((r=46==(0|t))|(m=t-48|0)>>>0<=9)for(;;){l:{if(1&r){if(!x){p=u,d=I,x=1;break l}r=!A;break o}I=(u=u+1|0)?I:I+1|0,(0|k)<=2044?(P=48==(0|t)?P:u,A=(s+784|0)+(k<<2)|0,B&&(m=(C(i[A>>2],10)+t|0)-48|0),i[A>>2]=m,A=1,B=(t=9==(0|(r=B+1|0)))?0:r,k=t+k|0):48!=(0|t)&&(i[s+8960>>2]=1|i[s+8960>>2],P=18396)}if((0|(t=i[g+4>>2]))==i[g+104>>2]?t=hA(g):(i[g+4>>2]=t+1,t=o[0|t]),!((r=46==(0|t))|(m=t-48|0)>>>0<10))break}if(p=x?p:u,d=x?d:I,!(!A|69!=(-33&t))){if(m=Ke(g,c),v=A=Z,!(m|-2147483648!=(0|A))){if(!c)break s;m=0,v=0,i[g+116>>2]<0||(i[g+4>>2]=i[g+4>>2]-1)}d=d+v|0,d=(p=p+m|0)>>>0<m>>>0?d+1|0:d;break a}if(r=!A,(0|t)<0)break i}i[g+116>>2]<0||(i[g+4>>2]=i[g+4>>2]-1)}if(!r)break a;i[56798]=28}u=0,I=0,Vt(g,0,0),t=0,A=0;break n}if(A=i[s+784>>2])if(u>>>0>9&(0|I)>=0|(0|I)>0|(0|u)!=(0|p)|(0|d)!=(0|I)|(A>>>F|0?(0|F)<=30:0))if(p>>>0>S>>>1>>>0&(0|d)>=0|(0|d)>0)i[56798]=68,Qt(s+96|0,M),me(s+80|0,i[s+96>>2],i[s+100>>2],i[s+104>>2],i[s+108>>2],-1,-1,-1,2147418111),me(s- -64|0,i[s+80>>2],i[s+84>>2],i[s+88>>2],i[s+92>>2],-1,-1,-1,2147418111),u=i[s+64>>2],I=i[s+68>>2],t=i[s+76>>2],A=i[s+72>>2];else if((t=p>>>0<(A=z-226|0)>>>0)&(0|d)<=(0|(A>>=31))|(0|A)>(0|d))i[56798]=68,Qt(s+144|0,M),me(s+128|0,i[s+144>>2],i[s+148>>2],i[s+152>>2],i[s+156>>2],0,0,0,65536),me(s+112|0,i[s+128>>2],i[s+132>>2],i[s+136>>2],i[s+140>>2],0,0,0,65536),u=i[s+112>>2],I=i[s+116>>2],t=i[s+124>>2],A=i[s+120>>2];else{if(B){if((0|B)<=8){for(g=i[(A=(s+784|0)+(k<<2)|0)>>2];g=C(g,10),9!=(0|(B=B+1|0)););i[A>>2]=g}k=k+1|0}if(x=p,!((0|P)>(0|p)|(0|P)>=9|(0|p)>17)){if(9==(0|x)){Qt(s+192|0,M),Lt(s+176|0,i[s+784>>2]),me(s+160|0,i[s+192>>2],i[s+196>>2],i[s+200>>2],i[s+204>>2],i[s+176>>2],i[s+180>>2],i[s+184>>2],i[s+188>>2]),u=i[s+160>>2],I=i[s+164>>2],t=i[s+172>>2],A=i[s+168>>2];break n}if((0|x)<=8){Qt(s+272|0,M),Lt(s+256|0,i[s+784>>2]),me(s+240|0,i[s+272>>2],i[s+276>>2],i[s+280>>2],i[s+284>>2],i[s+256>>2],i[s+260>>2],i[s+264>>2],i[s+268>>2]),Qt(s+224|0,i[124720+(0-x<<2)>>2]),oe(s+208|0,i[s+240>>2],i[s+244>>2],i[s+248>>2],i[s+252>>2],i[s+224>>2],i[s+228>>2],i[s+232>>2],i[s+236>>2]),u=i[s+208>>2],I=i[s+212>>2],t=i[s+220>>2],A=i[s+216>>2];break n}if(A=27+(C(x,-3)+F|0)|0,!((t=i[s+784>>2])>>>A|0&&(0|A)<=30)){Qt(s+352|0,M),Lt(s+336|0,t),me(s+320|0,i[s+352>>2],i[s+356>>2],i[s+360>>2],i[s+364>>2],i[s+336>>2],i[s+340>>2],i[s+344>>2],i[s+348>>2]),Qt(s+304|0,i[124648+(x<<2)>>2]),me(s+288|0,i[s+320>>2],i[s+324>>2],i[s+328>>2],i[s+332>>2],i[s+304>>2],i[s+308>>2],i[s+312>>2],i[s+316>>2]),u=i[s+288>>2],I=i[s+292>>2],t=i[s+300>>2],A=i[s+296>>2];break n}}for(;!i[(s+784|0)+((k=(t=k)-1|0)<<2)>>2];);if(B=0,A=(0|x)%9|0){if(r=0,A=(0|x)<0?A+9|0:A,t){for(d=1e9/(0|(p=i[124720+(0-A<<2)>>2]))|0,m=0,g=0;u=(u=m)+(k=((I=i[(m=(s+784|0)+(g<<2)|0)>>2])>>>0)/(p>>>0)|0)|0,i[m>>2]=u,r=(u=!u&(0|r)==(0|g))?r+1&2047:r,x=u?x-9|0:x,m=C(d,I-C(p,k)|0),(0|(g=g+1|0))!=(0|t););m&&(i[(s+784|0)+(t<<2)>>2]=m,t=t+1|0)}else t=0;x=9+(x-A|0)|0}else r=0;for(;;){g=(s+784|0)+(r<<2)|0;a:{for(;;){if((36!=(0|x)|h[g>>2]>=10384593)&(0|x)>=36)break a;for(k=t+2047|0,m=0,A=t;t=A,p=m,m=(A=i[(k=(s+784|0)+((u=2047&k)<<2)|0)>>2])<<29,A=I=A>>>3|0,!(d=(p=p+m|0)>>>0<m>>>0?A+1|0:A)&p>>>0<1000000001?m=0:p=(A=p)-rr(m=vn(A,d,1e9),Z,1e9,0)|0,i[k>>2]=p,A=(0|u)!=(t-1&2047)||(0|r)==(0|u)||p?t:u,k=u-1|0,(0|r)!=(0|u););if(B=B-29|0,m)break}(0|(r=r-1&2047))==(0|A)&&(g=t=(p=s+784|0)+((A+2046&2047)<<2)|0,d=i[t>>2],t=A-1&2047,i[g>>2]=d|i[p+(t<<2)>>2]),x=x+9|0,i[(s+784|0)+(r<<2)>>2]=m;continue}break}a:{s:for(;;){for(p=t+1&2047,m=(s+784|0)+((t-1&2047)<<2)|0;;){u=(0|x)>45?9:1;i:{for(;;){A=r,g=0;o:{for(;;){if((0|(r=A+g&2047))!=(0|t)&&!((r=i[(s+784|0)+(r<<2)>>2])>>>0<(d=i[124672+(g<<2)>>2])>>>0)){if(r>>>0>d>>>0)break o;if(4!=(0|(g=g+1|0)))continue}break}if(36==(0|x)){for(p=0,d=0,g=0,u=0,I=0;(0|(r=A+g&2047))==(0|t)&&(i[780+(s+((t=t+1&2047)<<2)|0)>>2]=0),Lt(s+768|0,i[(s+784|0)+(r<<2)>>2]),me(s+752|0,p,d,u,I,0,0,1342177280,1075633366),Be(s+736|0,i[s+752>>2],i[s+756>>2],i[s+760>>2],i[s+764>>2],i[s+768>>2],i[s+772>>2],i[s+776>>2],i[s+780>>2]),u=i[s+744>>2],I=i[s+748>>2],p=i[s+736>>2],d=i[s+740>>2],4!=(0|(g=g+1|0)););if(Qt(s+720|0,M),me(s+704|0,p,d,u,I,i[s+720>>2],i[s+724>>2],i[s+728>>2],i[s+732>>2]),u=i[s+712>>2],I=i[s+716>>2],p=0,d=0,m=i[s+704>>2],v=i[s+708>>2],(0|(r=(k=(0|(g=(c=B+113|0)-z|0))<(0|F))?(0|g)>0?g:0:F))<=112)break i;break a}}if(B=u+B|0,r=t,(0|A)!=(0|t))break}for(I=1e9>>>u|0,k=~(-1<<u),g=0,r=A;d=(d=g)+((c=i[(g=(s+784|0)+(A<<2)|0)>>2])>>>u|0)|0,i[g>>2]=d,r=(d=!d&(0|A)==(0|r))?r+1&2047:r,x=d?x-9|0:x,g=C(I,c&k),(0|t)!=(0|(A=A+1&2047)););if(!g)continue;if((0|r)!=(0|p)){i[(s+784|0)+(t<<2)>>2]=g,t=p;continue s}i[m>>2]=1|i[m>>2];continue}break}break}PA(s+656|0,mt(1,225-r|0)),Lr(s+688|0,i[s+656>>2],i[s+660>>2],i[s+664>>2],i[s+668>>2],m,v,u,I),Q=i[s+696>>2],T=i[s+700>>2],G=i[s+688>>2],D=i[s+692>>2],PA(s+640|0,mt(1,113-r|0)),ze(s+672|0,m,v,u,I,i[s+640>>2],i[s+644>>2],i[s+648>>2],i[s+652>>2]),pr(s+624|0,m,v,u,I,p=i[s+672>>2],d=i[s+676>>2],y=i[s+680>>2],E=i[s+684>>2]),Be(s+608|0,G,D,Q,T,i[s+624>>2],i[s+628>>2],i[s+632>>2],i[s+636>>2]),u=i[s+616>>2],I=i[s+620>>2],m=i[s+608>>2],v=i[s+612>>2]}if((0|(x=A+4&2047))!=(0|t)){a:if((x=i[(s+784|0)+(x<<2)>>2])>>>0<=499999999){if(!x&(A+5&2047)==(0|t))break a;PA(s+496|0,.25*+(0|M)),Be(s+480|0,p,d,y,E,i[s+496>>2],i[s+500>>2],i[s+504>>2],i[s+508>>2]),y=i[s+488>>2],E=i[s+492>>2],p=i[s+480>>2],d=i[s+484>>2]}else 5e8==(0|x)?(O=+(0|M),(A+5&2047)!=(0|t)?(PA(s+560|0,.75*O),Be(s+544|0,p,d,y,E,i[s+560>>2],i[s+564>>2],i[s+568>>2],i[s+572>>2]),y=i[s+552>>2],E=i[s+556>>2],p=i[s+544>>2],d=i[s+548>>2]):(PA(s+528|0,.5*O),Be(s+512|0,p,d,y,E,i[s+528>>2],i[s+532>>2],i[s+536>>2],i[s+540>>2]),y=i[s+520>>2],E=i[s+524>>2],p=i[s+512>>2],d=i[s+516>>2])):(PA(s+592|0,.75*+(0|M)),Be(s+576|0,p,d,y,E,i[s+592>>2],i[s+596>>2],i[s+600>>2],i[s+604>>2]),y=i[s+584>>2],E=i[s+588>>2],p=i[s+576>>2],d=i[s+580>>2]);(0|r)>111||(ze(s+464|0,p,d,y,E,0,0,0,1073676288),DA(i[s+464>>2],i[s+468>>2],i[s+472>>2],i[s+476>>2],0,0,0,0)||(Be(s+448|0,p,d,y,E,0,0,0,1073676288),y=i[s+456>>2],E=i[s+460>>2],p=i[s+448>>2],d=i[s+452>>2]))}Be(s+432|0,m,v,u,I,p,d,y,E),pr(s+416|0,i[s+432>>2],i[s+436>>2],i[s+440>>2],i[s+444>>2],G,D,Q,T),u=i[s+424>>2],I=i[s+428>>2],m=i[s+416>>2],v=i[s+420>>2],(N-2|0)>=(2147483647&c)||(i[s+408>>2]=u,i[s+412>>2]=2147483647&I,i[s+400>>2]=m,i[s+404>>2]=v,me(s+384|0,m,v,u,I,0,0,0,1073610752),u=(A=(0|(A=$A(i[s+400>>2],i[s+404>>2],i[s+408>>2],i[s+412>>2],1081081856)))>=0)?i[s+392>>2]:u,I=A?i[s+396>>2]:I,m=A?i[s+384>>2]:m,v=A?i[s+388>>2]:v,B=A+B|0,!(!!(0|DA(p,d,y,E,0,0,0,0))&(A?k&(0|r)!=(0|g):k))&(B+110|0)<=(0|N)||(i[56798]=68)),bA(s+368|0,m,v,u,I,B),u=i[s+368>>2],I=i[s+372>>2],t=i[s+380>>2],A=i[s+376>>2]}else Qt(s+48|0,M),Lt(s+32|0,A),me(s+16|0,i[s+48>>2],i[s+52>>2],i[s+56>>2],i[s+60>>2],i[s+32>>2],i[s+36>>2],i[s+40>>2],i[s+44>>2]),u=i[s+16>>2],I=i[s+20>>2],t=i[s+28>>2],A=i[s+24>>2];else PA(s,0*+(0|M)),u=i[s>>2],I=i[s+4>>2],t=i[s+12>>2],A=i[s+8>>2]}i[n+40>>2]=A,i[n+44>>2]=t,i[n+32>>2]=u,i[n+36>>2]=I,W=s+8976|0,p=i[n+40>>2],d=i[n+44>>2],u=i[n+32>>2],I=i[n+36>>2];break e;case 3:break t}(0|(t=i[A+116>>2]))>0|(0|t)>=0&&(i[A+4>>2]=i[A+4>>2]-1);break A}if((0|(t=i[A+4>>2]))==i[A+104>>2]?t=hA(A):(i[A+4>>2]=t+1,t=o[0|t]),40!=(0|t)){if(d=2147450880,i[A+116>>2]<0)break e;i[A+4>>2]=i[A+4>>2]-1;break e}for(g=1;(0|(t=i[A+4>>2]))==i[A+104>>2]?t=hA(A):(i[A+4>>2]=t+1,t=o[0|t]),t-48>>>0<10|t-65>>>0<26|95==(0|t)||!(t-97>>>0>=26);)g=g+1|0;if(d=2147450880,41==(0|t))break e;(0|(t=i[A+116>>2]))>0|(0|t)>=0&&(i[A+4>>2]=i[A+4>>2]-1);t:{if(r){if(g)break t;break e}break A}for(;g=g-1|0,(0|t)>0|(0|t)>=0&&(i[A+4>>2]=i[A+4>>2]-1),g;);break e}i[56798]=28,Vt(A,0,0)}d=0}i[e>>2]=u,i[e+4>>2]=I,i[e+8>>2]=p,i[e+12>>2]=d,W=n+48|0}function Ae(e,A,t,r,n){var l,c=0,g=0,u=0,d=0,f=0,h=0,m=0,b=0,I=0,w=0,k=0,x=0,v=0,B=0,y=0,E=0,M=0,G=0,D=0,Q=0,T=0;if(W=l=W-112|0,i[t+8>>2]){Q=i[50754]/70|0,w=(h=i[r+12>>2])||256;e:if(2!=(0|A)){if(1==(0|A)){A:if(3!=o[e+11|0])switch(o[r-15|0]-3|0){case 0:case 5:break A;default:break e}w=(0|(h=i[i[47192]+44>>2]))<(0|w)?w:h}}else{if((0|(h=i[i[47192]+80>>2]))<=0|!(8&o[0|r]|h>>>0<=o[e+14|0]|32&o[e+6|0]))break e;Q<<=1}if(i[36436]=0,v=e,T=A,f=r,W=I=W-16|0,e=i[34460]+i[t+8>>2]|0,A=(A=o[e+2|0])>>>0>=24?24:A,i[I+12>>2]=A,g=i[t+12>>2]+i[t+24>>2]|0,i[36422]=g,A){for(h=e+4|0,c=1&s[e+4>>1];e=145488+(d<<3)|0,r=h+(c?d<<6:C(d,44))|0,i[e+4>>2]=r,b=p[r>>1],s[e+2>>1]=b,s[e>>1]=o[r+16|0],u=2&b?d:u,(0|(d=d+1|0))!=(0|A););h=145488,(0|u)<=0||(1!=(0|T)?(A=A-u|0,i[I+12>>2]=A,h=145488+(u<<3)|0):(A=u+1|0,i[I+12>>2]=A,h=145488))}else A=0,h=145488;if(!(!i[t+4>>2]|i[t+20>>2]|2!=o[v+11|0])){if(c=i[t+36>>2],r=i[t+40>>2],e=0,(0|(A=i[I+12>>2]))>=2){u=c>>>12|0,b=r>>>26&7,B=r>>>18&248,k=C(x=63&r,50),E=63&(M=c>>>6|0),d=c<<1&126,G=C(r>>>16&31,50)-750|0,D=C(r>>>11&31,50)-750|0,y=C(r>>>6&31,50)-750|0;e:{A:if(1!=(0|T)){if(!(u|x))break e;if(8&u?(A=i[4+(h+((g=A-1|0)<<3)|0)>>2],s[A>>1]<0?e=A:(e=(0|(e=i[44469]+1|0))<=169?e:0,i[44469]=e,g=p[A+20>>1]|p[A+22>>1]<<16,e=177888+(e<<6)|0,c=p[A+16>>1]|p[A+18>>1]<<16,s[e+16>>1]=c,s[e+18>>1]=c>>>16,s[e+20>>1]=g,s[e+22>>1]=g>>>16,g=p[A+4>>1]|p[A+6>>1]<<16,c=p[A>>1]|p[A+2>>1]<<16,s[e>>1]=c,s[e+2>>1]=c>>>16,s[e+4>>1]=g,s[e+6>>1]=g>>>16,g=p[A+12>>1]|p[A+14>>1]<<16,c=p[A+8>>1]|p[A+10>>1]<<16,s[e+8>>1]=c,s[e+10>>1]=c>>>16,s[e+12>>1]=g,s[e+14>>1]=g>>>16,g=p[A+28>>1]|p[A+30>>1]<<16,c=p[A+24>>1]|p[A+26>>1]<<16,s[e+24>>1]=c,s[e+26>>1]=c>>>16,s[e+28>>1]=g,s[e+30>>1]=g>>>16,g=p[A+36>>1]|p[A+38>>1]<<16,c=p[A+32>>1]|p[A+34>>1]<<16,s[e+32>>1]=c,s[e+34>>1]=c>>>16,s[e+36>>1]=g,s[e+38>>1]=g>>>16,g=p[A+44>>1]|p[A+46>>1]<<16,c=p[A+40>>1]|p[A+42>>1]<<16,s[e+40>>1]=c,s[e+42>>1]=c>>>16,s[e+44>>1]=g,s[e+46>>1]=g>>>16,g=p[A+52>>1]|p[A+54>>1]<<16,c=p[A+48>>1]|p[A+50>>1]<<16,s[e+48>>1]=c,s[e+50>>1]=c>>>16,s[e+52>>1]=g,s[e+54>>1]=g>>>16,g=p[A+60>>1]|p[A+62>>1]<<16,A=p[A+56>>1]|p[A+58>>1]<<16,s[e+56>>1]=A,s[e+58>>1]=A>>>16,s[e+60>>1]=g,s[e+62>>1]=g>>>16,a[e+16|0]=0,s[e>>1]=32768|p[e>>1],g=i[I+12>>2]-1|0),i[4+(h+(g<<3)|0)>>2]=e,A=1792,(0|(g=s[e+4>>1]))<300||(A=1536,g>>>0<400||(A=g>>>0<500?1280:1024)),i[36436]=A,c=35):(i[I+12>>2]=A+1,s[(e=(g=h+(A<<3)|0)-8|0)>>1]=d,A=i[e+4>>2],e=(0|(e=i[44469]+1|0))<=169?e:0,i[44469]=e,(e=177888+(M=e<<6)|0)&&(c=p[A+4>>1]|p[A+6>>1]<<16,m=p[A>>1]|p[A+2>>1]<<16,s[e>>1]=m,s[e+2>>1]=m>>>16,s[e+4>>1]=c,s[e+6>>1]=c>>>16,c=p[A+60>>1]|p[A+62>>1]<<16,m=p[A+56>>1]|p[A+58>>1]<<16,s[e+56>>1]=m,s[e+58>>1]=m>>>16,s[e+60>>1]=c,s[e+62>>1]=c>>>16,c=p[A+52>>1]|p[A+54>>1]<<16,m=p[A+48>>1]|p[A+50>>1]<<16,s[e+48>>1]=m,s[e+50>>1]=m>>>16,s[e+52>>1]=c,s[e+54>>1]=c>>>16,c=p[A+44>>1]|p[A+46>>1]<<16,m=p[A+40>>1]|p[A+42>>1]<<16,s[e+40>>1]=m,s[e+42>>1]=m>>>16,s[e+44>>1]=c,s[e+46>>1]=c>>>16,c=p[A+36>>1]|p[A+38>>1]<<16,m=p[A+32>>1]|p[A+34>>1]<<16,s[e+32>>1]=m,s[e+34>>1]=m>>>16,s[e+36>>1]=c,s[e+38>>1]=c>>>16,c=p[A+28>>1]|p[A+30>>1]<<16,m=p[A+24>>1]|p[A+26>>1]<<16,s[e+24>>1]=m,s[e+26>>1]=m>>>16,s[e+28>>1]=c,s[e+30>>1]=c>>>16,c=p[A+20>>1]|p[A+22>>1]<<16,m=p[A+16>>1]|p[A+18>>1]<<16,s[e+16>>1]=m,s[e+18>>1]=m>>>16,s[e+20>>1]=c,s[e+22>>1]=c>>>16,c=p[A+12>>1]|p[A+14>>1]<<16,A=p[A+8>>1]|p[A+10>>1]<<16,s[e+8>>1]=A,s[e+10>>1]=A>>>16,s[e+12>>1]=c,s[e+14>>1]=c>>>16,a[M+177904|0]=0,s[e>>1]=32768|p[e>>1]),s[g>>1]=0,i[g+4>>2]=e,d>>>0>=37&&(i[36422]=(d+i[36422]|0)-36),c=E<<1,x&&fA(e,k,y,D,b,G,B,u)),i[i[32972]+132>>2]||(A=o[e+17|0])&&(A=s[102896+(((0|(A=(c<<6>>>0)/(A>>>0)|0))>=199?199:A)<<1)>>1],a[e+18|0]=(0|C(A,o[e+18|0]))/512,a[e+19|0]=(0|C(A,o[e+19|0]))/512,a[e+20|0]=(0|C(A,o[e+20|0]))/512,a[e+21|0]=(0|C(A,o[e+21|0]))/512,a[e+22|0]=(0|C(A,o[e+22|0]))/512,a[e+23|0]=(0|C(A,o[e+23|0]))/512,a[e+24|0]=(0|C(A,o[e+24|0]))/512,a[e+25|0]=(0|C(A,o[e+25|0]))/512),r-536870912>>>0<=1073741823){if(b=i[44469],(0|(g=i[I+12>>2]))>0)for(e=C(r>>>29|0,10)+102854|0,B=s[e+4>>1],x=s[e+2>>1],k=s[e>>1],G=s[e+6>>1],D=s[e+8>>1],c=0;A=i[4+(y=h+(c<<3)|0)>>2],s[A>>1]<0?e=A:(e=177888+(E=(b=(0|(e=b+1|0))<=169?e:0)<<6)|0)?(r=p[A+4>>1]|p[A+6>>1]<<16,g=p[A>>1]|p[A+2>>1]<<16,s[e>>1]=g,s[e+2>>1]=g>>>16,s[e+4>>1]=r,s[e+6>>1]=r>>>16,r=p[A+60>>1]|p[A+62>>1]<<16,g=p[A+56>>1]|p[A+58>>1]<<16,s[e+56>>1]=g,s[e+58>>1]=g>>>16,s[e+60>>1]=r,s[e+62>>1]=r>>>16,r=p[A+52>>1]|p[A+54>>1]<<16,g=p[A+48>>1]|p[A+50>>1]<<16,s[e+48>>1]=g,s[e+50>>1]=g>>>16,s[e+52>>1]=r,s[e+54>>1]=r>>>16,r=p[A+44>>1]|p[A+46>>1]<<16,g=p[A+40>>1]|p[A+42>>1]<<16,s[e+40>>1]=g,s[e+42>>1]=g>>>16,s[e+44>>1]=r,s[e+46>>1]=r>>>16,r=p[A+36>>1]|p[A+38>>1]<<16,g=p[A+32>>1]|p[A+34>>1]<<16,s[e+32>>1]=g,s[e+34>>1]=g>>>16,s[e+36>>1]=r,s[e+38>>1]=r>>>16,r=p[A+28>>1]|p[A+30>>1]<<16,g=p[A+24>>1]|p[A+26>>1]<<16,s[e+24>>1]=g,s[e+26>>1]=g>>>16,s[e+28>>1]=r,s[e+30>>1]=r>>>16,r=p[A+20>>1]|p[A+22>>1]<<16,g=p[A+16>>1]|p[A+18>>1]<<16,s[e+16>>1]=g,s[e+18>>1]=g>>>16,s[e+20>>1]=r,s[e+22>>1]=r>>>16,r=p[A+12>>1]|p[A+14>>1]<<16,A=p[A+8>>1]|p[A+10>>1]<<16,s[e+8>>1]=A,s[e+10>>1]=A>>>16,s[e+12>>1]=r,s[e+14>>1]=r>>>16,a[E+177904|0]=0,s[e>>1]=32768|p[e>>1],g=i[I+12>>2]):e=0,i[y+4>>2]=e,s[e+8>>1]=(0|C(B,s[e+8>>1]))/256,s[e+6>>1]=(0|C(x,s[e+6>>1]))/256,s[e+4>>1]=(0|C(k,s[e+4>>1]))/256,s[e+12>>1]=(0|C(D,s[e+12>>1]))/256,s[e+10>>1]=(0|C(G,s[e+10>>1]))/256,(0|g)>(0|(c=c+1|0)););i[44469]=b}if(!e)break e}else{A=i[h+4>>2],(0|(g=s[A>>1]))<0?e=A:(r=(0|(r=i[44469]+1|0))<=169?r:0,i[44469]=r,(r=177888+(g=r<<6)|0)&&(e=p[A+4>>1]|p[A+6>>1]<<16,m=p[A>>1]|p[A+2>>1]<<16,s[r>>1]=m,s[r+2>>1]=m>>>16,s[r+4>>1]=e,s[r+6>>1]=e>>>16,e=p[A+60>>1]|p[A+62>>1]<<16,m=p[A+56>>1]|p[A+58>>1]<<16,s[r+56>>1]=m,s[r+58>>1]=m>>>16,s[r+60>>1]=e,s[r+62>>1]=e>>>16,e=p[A+52>>1]|p[A+54>>1]<<16,m=p[A+48>>1]|p[A+50>>1]<<16,s[r+48>>1]=m,s[r+50>>1]=m>>>16,s[r+52>>1]=e,s[r+54>>1]=e>>>16,e=p[A+44>>1]|p[A+46>>1]<<16,m=p[A+40>>1]|p[A+42>>1]<<16,s[r+40>>1]=m,s[r+42>>1]=m>>>16,s[r+44>>1]=e,s[r+46>>1]=e>>>16,e=p[A+36>>1]|p[A+38>>1]<<16,m=p[A+32>>1]|p[A+34>>1]<<16,s[r+32>>1]=m,s[r+34>>1]=m>>>16,s[r+36>>1]=e,s[r+38>>1]=e>>>16,e=p[A+28>>1]|p[A+30>>1]<<16,m=p[A+24>>1]|p[A+26>>1]<<16,s[r+24>>1]=m,s[r+26>>1]=m>>>16,s[r+28>>1]=e,s[r+30>>1]=e>>>16,e=p[A+20>>1]|p[A+22>>1]<<16,m=p[A+16>>1]|p[A+18>>1]<<16,s[r+16>>1]=m,s[r+18>>1]=m>>>16,s[r+20>>1]=e,s[r+22>>1]=e>>>16,e=p[A+12>>1]|p[A+14>>1]<<16,A=p[A+8>>1]|p[A+10>>1]<<16,s[r+8>>1]=A,s[r+10>>1]=A>>>16,s[r+12>>1]=e,s[r+14>>1]=e>>>16,a[g+177904|0]=0,g=-32768|p[r>>1],s[r>>1]=g,e=r)),i[h+4>>2]=e,s[h>>1]=d||50,s[h+2>>1]=16384|p[h+2>>1],s[e>>1]=16384|g,g=i[h+12>>2],A=o[g+17|0],r=i[32972],i[r+132>>2]&&(a[e+39|0]=o[g+39|0]-4);t:if(x){if(2048&c){A=(C(A,31&M)>>>0)/30|0,i[r+132>>2]||(r=o[e+17|0])&&(A=s[102896+(((0|(A=(A<<6>>>0)/(r>>>0)|0))>=199?199:A)<<1)>>1],a[e+18|0]=(0|C(A,o[e+18|0]))/512,a[e+19|0]=(0|C(A,o[e+19|0]))/512,a[e+20|0]=(0|C(A,o[e+20|0]))/512,a[e+21|0]=(0|C(A,o[e+21|0]))/512,a[e+22|0]=(0|C(A,o[e+22|0]))/512,a[e+23|0]=(0|C(A,o[e+23|0]))/512,a[e+24|0]=(0|C(A,o[e+24|0]))/512,a[e+25|0]=(0|C(A,o[e+25|0]))/512),fA(e,k,y,D,b,G,B,u);break t}if(fA(e,k,y,D,b,G,B,u),i[i[32972]+132>>2])break t;if(!(A=o[e+17|0]))break t;A=s[102896+(((0|(A=(E<<7>>>0)/(A>>>0)|0))>=199?199:A)<<1)>>1],a[e+18|0]=(0|C(A,o[e+18|0]))/512,a[e+19|0]=(0|C(A,o[e+19|0]))/512,a[e+20|0]=(0|C(A,o[e+20|0]))/512,a[e+21|0]=(0|C(A,o[e+21|0]))/512,a[e+22|0]=(0|C(A,o[e+22|0]))/512,a[e+23|0]=(0|C(A,o[e+23|0]))/512,a[e+24|0]=(0|C(A,o[e+24|0]))/512,a[e+25|0]=(0|C(A,o[e+25|0]))/512}else if(r=i[r+132>>2],8&u){if(r)break t;if(!(r=o[e+17|0]))break t;A=((16320&C(A,48))>>>0)/(r>>>0)|0,A=s[102896+((A>>>0>=199?199:A)<<1)>>1],a[e+18|0]=(0|C(A,o[e+18|0]))/512,a[e+19|0]=(0|C(A,o[e+19|0]))/512,a[e+20|0]=(0|C(A,o[e+20|0]))/512,a[e+21|0]=(0|C(A,o[e+21|0]))/512,a[e+22|0]=(0|C(A,o[e+22|0]))/512,a[e+23|0]=(0|C(A,o[e+23|0]))/512,a[e+24|0]=(0|C(A,o[e+24|0]))/512,a[e+25|0]=(0|C(A,o[e+25|0]))/512}else r||(A=o[e+17|0])&&(A=s[102896+(((A=1792/(A>>>0)|0)>>>0>=199?199:A)<<1)>>1],a[e+18|0]=(0|C(A,o[e+18|0]))/512,a[e+19|0]=(0|C(A,o[e+19|0]))/512,a[e+20|0]=(0|C(A,o[e+20|0]))/512,a[e+21|0]=(0|C(A,o[e+21|0]))/512,a[e+22|0]=(0|C(A,o[e+22|0]))/512,a[e+23|0]=(0|C(A,o[e+23|0]))/512,a[e+24|0]=(0|C(A,o[e+24|0]))/512,a[e+25|0]=(0|C(A,o[e+25|0]))/512);if(!(8&u))break A;A=2816,(0|(r=s[e+4>>1]))<300||(A=2560,r>>>0<400||(A=r>>>0<500?2304:2048)),i[36436]=A}4&u&&(s[e>>1]=32|p[e>>1]),2&u&&(s[e>>1]=16|p[e>>1])}64&u&&GA(20,0),e=d&u<<27>>31}else e=0;g=e+i[36422]|0,i[36422]=g,A=i[I+12>>2]}if((0|(r=A-1|0))<=0)c=0;else{if(e=0,d=0,c=0,A-2>>>0>=3)for(B=-4&r,b=0;c=(((s[(u=d<<3)+h>>1]+c|0)+s[h+(8|u)>>1]|0)+s[h+(16|u)>>1]|0)+s[h+(24|u)>>1]|0,d=d+4|0,(0|B)!=(0|(b=b+4|0)););if(u=3&r)for(;c=s[h+(d<<3)>>1]+c|0,d=d+1|0,(0|u)!=(0|(e=e+1|0)););}if(e=A,(u=i[t+20>>2])&&(e=r,d=u+i[34460]|0,(b=o[d+2|0])&&(x=p[d+4>>1],s[h+(r<<3)>>1]=o[d+20|0],u=1,e=A,1!=(0|b)))){if(B=d+4|0,x&=1,G=1&(d=b-1|0),2!=(0|b))for(D=-2&d,b=0;y=B+(u<<6)|0,E=B+C(u,44)|0,M=o[(k=x?y:E)+16|0],i[4+(d=h+(e<<3)|0)>>2]=k,s[d>>1]=M,s[d+2>>1]=p[k>>1],y=o[16+(k=x?y- -64|0:E+44|0)|0],i[d+12>>2]=k,s[d+8>>1]=y,s[d+10>>1]=p[k>>1],u=u+2|0,e=e+2|0,(0|D)!=(0|(b=b+2|0)););G&&(u=B+(x?u<<6:C(u,44))|0,b=o[u+16|0],i[4+(d=h+(e<<3)|0)>>2]=u,s[d>>1]=b,s[d+2>>1]=p[u>>1],e=e+1|0)}e:if(!((0|c)<=0)){A:{t:switch(T-1|0){case 1:if(u=(0|(u=(i[t+44>>2]+g|0)-45|0))<=10?10:u,8&o[0|f]&&(u=u+(o[i[36128]+14|0]<<1)|0),(0|r)<=0)break e;if(f=(u<<8)/(0|c)|0,d=0,2!=(0|A))for(A=-2&r,u=0;s[(c=(g=d<<3)+h|0)>>1]=(0|C(f,s[c>>1]))/256,s[(g=h+(8|g)|0)>>1]=(0|C(f,s[g>>1]))/256,d=d+2|0,(0|A)!=(0|(u=u+2|0)););if(!(1&r))break e;s[(A=h+(d<<3)|0)>>1]=(0|C(f,s[A>>1]))/256;break e;case 0:if(1!=i[t>>2])break A;if((0|(u=i[t+44>>2]))>129)break A;s[h>>1]=(0|C(u,s[h>>1]))/130;break A}(0|(u=i[t+44>>2]))<=0||(g=(u-c|0)+g|0,i[36422]=g)}if(!(!g|(0|r)<=0)){if(f=(c+g<<8)/(0|c)|0,d=0,2!=(0|A))for(A=-2&r,u=0;s[(c=(g=d<<3)+h|0)>>1]=(0|C(f,s[c>>1]))/256,s[(g=h+(8|g)|0)>>1]=(0|C(f,s[g>>1]))/256,d=d+2|0,(0|A)!=(0|(u=u+2|0)););1&r&&(s[(A=h+(d<<3)|0)>>1]=(0|C(f,s[A>>1]))/256)}}if(i[l+108>>2]=e,W=I+16|0,h){if((0|(e=i[t+16>>2]))!=i[36438]&&(i[36438]=e,A=216192+(i[50758]<<4)|0,i[A>>2]=14,i[A+4>>2]=e,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0),d=(e=i[i[32972]+132>>2])?1:3,A=i[h+4>>2],i[t+28>>2]|!o[145748]||(a[145748]=0,d=e?2:4),(r=i[36426])&&(!((2&(e=p[r>>1]))>>>1|o[r+16|0]<2)|16&e||(g=216192+(i[36439]<<4)|0,i[g+12>>2]=A,8&e&&(e=(0|(e=i[44469]+1|0))<=169?e:0,i[44469]=e,(e=177888+(u=e<<6)|0)&&(f=p[A+4>>1]|p[A+6>>1]<<16,c=p[A>>1]|p[A+2>>1]<<16,s[e>>1]=c,s[e+2>>1]=c>>>16,s[e+4>>1]=f,s[e+6>>1]=f>>>16,f=p[A+60>>1]|p[A+62>>1]<<16,c=p[A+56>>1]|p[A+58>>1]<<16,s[e+56>>1]=c,s[e+58>>1]=c>>>16,s[e+60>>1]=f,s[e+62>>1]=f>>>16,f=p[A+52>>1]|p[A+54>>1]<<16,c=p[A+48>>1]|p[A+50>>1]<<16,s[e+48>>1]=c,s[e+50>>1]=c>>>16,s[e+52>>1]=f,s[e+54>>1]=f>>>16,f=p[A+44>>1]|p[A+46>>1]<<16,c=p[A+40>>1]|p[A+42>>1]<<16,s[e+40>>1]=c,s[e+42>>1]=c>>>16,s[e+44>>1]=f,s[e+46>>1]=f>>>16,f=p[A+36>>1]|p[A+38>>1]<<16,c=p[A+32>>1]|p[A+34>>1]<<16,s[e+32>>1]=c,s[e+34>>1]=c>>>16,s[e+36>>1]=f,s[e+38>>1]=f>>>16,f=p[A+28>>1]|p[A+30>>1]<<16,c=p[A+24>>1]|p[A+26>>1]<<16,s[e+24>>1]=c,s[e+26>>1]=c>>>16,s[e+28>>1]=f,s[e+30>>1]=f>>>16,f=p[A+20>>1]|p[A+22>>1]<<16,c=p[A+16>>1]|p[A+18>>1]<<16,s[e+16>>1]=c,s[e+18>>1]=c>>>16,s[e+20>>1]=f,s[e+22>>1]=f>>>16,f=p[A+12>>1]|p[A+14>>1]<<16,c=p[A+8>>1]|p[A+10>>1]<<16,s[e+8>>1]=c,s[e+10>>1]=c>>>16,s[e+12>>1]=f,s[e+14>>1]=f>>>16,a[u+177904|0]=0,s[e>>1]=32768|p[e>>1]),s[8+(u=u+177888|0)>>1]=p[r+8>>1],a[u+21|0]=o[r+21|0],s[u+10>>1]=p[r+10>>1],a[u+22|0]=o[r+22|0],s[u+12>>1]=p[r+12>>1],a[u+23|0]=o[r+23|0],s[u+14>>1]=p[r+14>>1],a[u+24|0]=o[r+24|0],a[u+25|0]=o[r+25|0],i[g+12>>2]=e))),2!=(0|T)|2!=o[v+11|0]||(de(),i[36427]=i[50758]),!((0|(v=i[l+108>>2]))<2)){for(e=i[36433],f=(C(256-e|0,w)+(e<<8)|0)/256|0,e=i[36432],g=(C(256-e|0,w)+(e<<8)|0)/256|0,c=i[50754],e=0,r=1;u=p[2+(I=(h+(r<<3)|0)-8|0)>>1],u=(0|C((0|C(c,s[I>>1]))/1e3|0,4&u?g:16384&u?f:w))/256|0,i[(r<<2)+l>>2]=u,e=e+u|0,(0|v)!=(0|(r=r+1|0)););if(!((0|e)<=0|(0|e)>=(0|Q)|(0|v)<2)){if(r=1,f=1&(u=v-1|0),2!=(0|v))for(g=-2&u,w=0;i[(u=(r<<2)+l|0)>>2]=(0|C(i[u>>2],Q))/(0|e),i[u+4>>2]=(0|C(i[u+4>>2],Q))/(0|e),r=r+2|0,(0|g)!=(0|(w=w+2|0)););f&&(i[(r=(r<<2)+l|0)>>2]=(0|C(i[r>>2],Q))/(0|e))}if(w=0,!((0|v)<2))for(v=T+256|0,r=1;e=i[4+(h+(r<<3)|0)>>2],!(u=i[t+28>>2])|128&o[0|A]||(i[36422]=0,Je(u,v,0,c=i[t>>2],0,f=(f=i[t+32>>2])?(f<<5)/100|0:32),a[145748]=1,i[t+28>>2]=0),(0|n)<0||(n=64&o[0|A]?6:n,(i[l+108>>2]-1|0)==(0|r)&&(n=(u=n)|(3840&(n=i[36436])?n:0))),u=i[(r<<2)+l>>2],i[36440]=u+i[36440],i[36441]=u+i[36441],u?(f=i[50758],i[36439]=f,(0|n)>=0&&(i[(f=216192+(f<<4)|0)>>2]=d,i[f+12>>2]=e,i[f+8>>2]=A,i[f+4>>2]=u+(n<<16),A=i[50758]+1|0,i[50758]=(0|A)<=169?A:0),i[36426]=e,w=u+w|0):i[36426]=0,A=e,(0|(r=r+1|0))<i[l+108>>2];);}!i[36438]|1==(0|T)||(i[36438]=0,e=216192+(i[50758]<<4)|0,i[e>>2]=14,i[e+4>>2]=0,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0)}}W=l+112|0}function te(e,A,t,r){var n,s=0,l=0,c=0,g=0,u=0,d=0,f=0,h=0,m=0,b=0,I=0,w=0,k=0,x=0,v=0,B=0,y=0,E=0,M=0,G=0,D=0,Q=0;W=n=W-1856|0,i[n+164>>2]=0,t?h=i[t>>2]:kA(t=n- -64|0,0,96),i[33264]=0,i[n+1824>>2]=0,i[n+1828>>2]=0,i[n+1832>>2]=0,i[n+1836>>2]=0,a[n+1616|0]=0,a[n+992|0]=0,a[n+1200|0]=0,a[n+784|0]=0;e:if(i[e+688>>2]){for(i[n+1840>>2]=A,32==o[0|(s=A)]&&(s=A+1|0,i[n+1840>>2]=s),m=n+416|1,E=n+1844|1,G=n+1848|1,D=n+1852|1,i[n+1820>>2]=s,VA(n+168|0,s),s=i[n+1820>>2];32!=(32|o[0|s]);)s=VA(n+164|0,s)+i[n+1820>>2]|0,i[n+1820>>2]=s,w=w+1|0;_e(n+256|0,A,M=(0|(c=s-A|0))>=159?159:c),!(B=4194304&h)|1!=(0|w)?(x=(36==(0|(s=i[47202])))<<2,1==(0|w)|36!=(0|s)||(s=i[n+1840>>2]-1|0,i[n+1840>>2]=s,a[0|s]=95,x=0,l=!!(0|Ve(e,n+1840|0,n+1616|0,n+1832|0,0,t)),s=i[47202])):(l=1,VA(n+172|0,s+1|0),dt(i[n+172>>2])&&(0|aA(i[n+164>>2]))==(0|aA(i[n+172>>2]))&&(l=0),x=36==(0|(s=i[47202]))?4:l,l=0);A:{t:{r:{n:{a:if(16&s)b=15&s,x=0;else{if(k=1,l||(k=!!(0|Ve(e,n+1840|0,n+1616|0,n+1832|0,2,t))),50331648&(s=i[n+1832>>2])&&(c=i[n+1820>>2],46==o[c+1|0]&&(a[c+1|0]=32,s=i[n+1832>>2])),536870912&s){if(!r)break e;rt(r,i[n+1840>>2]);break e}if(8192&s|!(128&s)|k)r=i[33264];else if(s=i[n+1840>>2],i[n+1820>>2]=s,!((0|(r=i[33264]))<=0))for(l=0;32==o[0|s]&&(a[0|s]=45,l=l+1|0,s=i[n+1820>>2],r=i[33264]),s=s+1|0,i[n+1820>>2]=s,(0|r)>(0|l););s:if(!(r|1!=(0|w))&&(c=VA(n+576|0,f=i[n+1840>>2]),32==o[c+f|0])){l=n+1408|0,r=f;i:{o:{l:{for(;;){c:if(dt(i[n+576>>2])){g:{if(46==o[1+(g=r+c|0)|0]){b=0;u:switch(o[(s=c+2|0)+r|0]-32|0){case 0:break g;case 7:break u;default:break c}if(b=1,c=s,115==o[g+3|0])break g;break c}if(b=1,(0|d)<=0)break l}if(!((0|c)<=0)){if(I=3&c,u=0,c>>>0<4)s=0;else for(v=-4&c,s=0,g=0;a[0|l]=o[r+s|0],a[l+1|0]=o[(1|s)+r|0],a[l+2|0]=o[(2|s)+r|0],a[l+3|0]=o[(3|s)+r|0],s=s+4|0,l=l+4|0,(0|v)!=(0|(g=g+4|0)););if(I)for(;a[0|l]=o[r+s|0],s=s+1|0,l=l+1|0,(0|I)!=(0|(u=u+1|0)););}if(d=d+1|0,b)r=r+c|0;else if(c=VA(n+576|0,r=3+(r+c|0)|0),32==o[r+c|0])continue}break}if(!((0|d)<2)){(c=(c=l-(s=n+1408|0)|0)+(s=_e(f,s,c))|0)>>>0<r>>>0&&kA(c,32,(n+1408|0)+r-(s+l)|0),i[33264]=(d<<1)-2,i[n+1836>>2]=0;break o}}if(!d)break s;if(i[n+1832>>2]=0,i[n+1836>>2]=0,!i[33264])break i}i[n+1832>>2]=128}x=1}if(21==o[n+1616|0]){rt(189088,n+1616|0),s=0;break e}if(Q=o[n+1833|0],l=1,!k){if(i[n+168>>2]-48>>>0<10){if(Et(e,84174,189088),s=0,21==o[189088])break e;if(!(!(128&o[e+109|0])|32&o[t+2|0])){a[189088]=21,a[189089]=0;break e}l=!!(0|ce(e,i[n+1840>>2],n+1616|0,n+1832|0,t,0))}else l=0;if(!(l|2==(3&h))&&(16777216&(r=i[e+104>>2])||(l=0,!(!(33554432&r)|!(1&h))))&&(16&h||(l=0,!(1&a[t+13|0])))){v=i[n+1840>>2],s=0,d=0,g=0,W=I=W-224|0,a[0|(u=n+1616|0)]=0,i[I+216>>2]=0,i[I+220>>2]=0;s:if(!(a[v-2|0]-48>>>0<10|(1&a[0|t]?0:2&o[e+107|0])||(r=o[0|(c=v+1|0)],(!(2561&p[e+106>>1])|!(1&a[t+2|0]))&32==(0|r)))){if(32!=(0|(d=o[0|v]))){for(b=32767,r=0;;){if(!(s=JA(101868,d<<24>>24,8))){d=0;break s}if(f=0,(0|(s=i[(s<<2)-305584>>2]))==(0|r)&&!((0|(f=g+1|0))<=2)){d=0;break s}i:{o:{l:{c:{if(!((0|r)<2)){if(10==(0|r)|100==(0|r))break c;if(!((0|r)>(0|s))){d=0;break s}}if(!r)break o;if((0|r)<(0|s))break l;break o}if((0|r)>=(0|s))break o}if(d=0,(0|y)%10|(0|C(r,10))<(0|s))break s;s=s-r|0,b=r;break i}if((0|s)>=(0|b)){d=0;break s}y=r+y|0}if(d=o[0|c],c=l=c+1|0,r=s,g=f,32==(0|d))break}r=o[0|l]}else l=c;if((r<<24>>24)-48>>>0<10)d=0;else if((0|(r=s+y|0))<i[e+120>>2])d=0;else if((0|r)>i[e+116>>2])d=0;else if(Et(e,85600,I+176|0),s=u,4&o[e+107|0]||(s=rt(u,s=I+176|0)+jt(s)|0),i[I+4>>2]=i[e+140>>2],i[I>>2]=r,Bt(I+16|0,85839,I),d=0,46!=o[0|l]){yA(e,v,l,t,1)&&(i[t>>2]=32768|i[t>>2]),c=0;i:if(8&o[e+107|0]){if(g=i[t>>2],26741==i[e+212>>2]){if(32768&g)break i;if(!(16384&g))break s;c=1,g=0;o:{l:switch(o[0|l]-97|0){case 0:case 4:break l;default:break o}l:{c:{g:{u:switch((b=o[l+1|0])-116|0){case 6:break o;case 1:case 2:case 3:case 4:case 5:break c;case 0:break u;default:break g}if(116!=o[l+2|0])break l;break o}if(32==(0|b))break o}if(!((0|r)%1e3|0)&&108==(0|b))break o}g=1}if(g)break i;break s}i[t>>2]=32768|g}i[(r=e+8232|0)>>2]=0,i[r+4>>2]=0,ce(e,I+16|2,s,I+216|0,t,c),d=1,4&o[e+107|0]&&yn(u,I+176|0)}}W=I+224|0,d?(i[n+1832>>2]=8192|i[n+1832>>2],l=1):l=0}}if(b=k?x:32&Q?1:x,x=0,!(!(1&h)|(0|w)<2)&&yr(i[n+168>>2])){s:{if(1&a[188785]){if(!(!(r=8192&(s=i[n+1832>>2]))|l))break s;x=r>>>2^2048;break a}if(l)break n;s=i[n+1832>>2]}if(!(128&s|w>>>0>3)&&!((0|(s=i[e+8220>>2]))<4)&&(r=1,(0|s)>=i[e+8216>>2]))break A}}if(u=0,(0|b)<=0)break r;r=b;break A}if((0|(r=b))>0)break A;u=0,f=0,g=0,d=0;break t}if(l)f=0,g=0,d=0;else{r=i[n+1840>>2],i[n+1820>>2]=r,s=999,d=0,f=0,m=0;r:{n:{a:{for(;;){s:{i:{o:{if(s-1>>>0>=2){if((0|w)<2)break o;if(VA(n+1408|0,r),(0|(s=i[n+1408>>2]))<577&i[e+600>>2]>0)break o;if(s=aA(s),(i[s+4>>2]!=i[e+600>>2]?s:0)|1==i[e+40>>2])break o;s=o[0|r],i[n+1408>>2]=s<<24>>24;l:switch(s-32|0){default:if(!s)break o;break;case 0:case 7:break o;case 1:case 2:case 3:case 4:case 5:case 6:}u=VA(n+1408|0,r),k=9;l:{c:{g:{u:if(-33&(s=i[n+1408>>2])){for(l=0,g=0;;){d:{f:{if(39==(0|s)){if((0|f)>0|(0|l)>1)break u;if(g=l?g:39,3!=i[e+40>>2])break f;break d}g=l?g:s}l=l+1|0}if(!Nt(e,s)){if(39!=(0|(s=i[n+1408>>2]))&&!yr(s))break o;if(u=VA(n+1408|0,r+u|0)+u|0,-33&(s=i[n+1408>>2]))continue;break u}break}if((0|l)<=2)break g;k=l}else g=0;if(2!=(0|(s=i[e+40>>2])))break c;W=s=W-208|0,a[0|s]=0,l=o[0|(c=r-1|0)],a[0|c]=32,r=Ce(e,r,s,200,0,-2147483648,0),a[0|c]=l,W=s+208|0,r=!r|(32768&r)>>>15;break l}s=i[e+40>>2],k=l}r=(a[e+168|0]+1|0)<(k-((0|s)==(0|g))|0)}if(!r)break o;r=i[n+1820>>2]}if(39!=o[0|r])break i;d=67108864,x=0}if(u=0,MA(e,n+992|0,0,f),r=i[n+1820>>2],32!=(0|(s=o[0|r])))break s;f=0,g=0;break t}if(x=0,r=we(e,r,n+992|0,1&(m|=(0|f)>0))+i[n+1820>>2]|0,i[n+1820>>2]=r,21==o[n+992|0])break a;for(f=f+1|0,l=0;l=(s=l)+1|0,32!=o[r+s|0];);d=67108864;continue}break}if(!o[n+992|0]|39==(0|s)||(a[r-1|0]=32,r=i[n+1820>>2]),c=Ce(e,r,n+1616|0,200,n+784|0,h,n+1832|0),21==(0|(r=o[n+1616|0]))){rt(189088,n+1616|0),s=0;break e}if(!(r|o[n+784|0])&&(VA(n+1408|0,i[n+1820>>2]),1==(0|w)&&(dt(i[n+1408>>2])||tr(i[n+1408>>2])))){zt(e,i[n+1820>>2],n+1616|0,b)&&rt(189088,n+1616|0),s=0;break e}i[n+172>>2]=a[i[n+1820>>2]-1|0];s:if(1024&c)for(v=n+176|1,b=0,s=1,m=0,f=0;;){if((k=131072&c)|!(1&s)||(a[n+1408|0]=0,!(r=Ce(e,i[n+1820>>2],n+1408|0,200,n+576|0,805306368|h,n+1832|0)))){2048&c&&(i[e+8184>>2]=1),a[i[n+1820>>2]-1|0]=i[n+172>>2];i:{o:{l:{c:if(k){if(a[n+176|0]=0,s=i[n+1820>>2],r=1,g=63&c){if(I=1&c,f=g-1|0,l=0,1!=(0|g))for(y=g-I|0,g=0;u=s,i[n+1820>>2]=s+1,a[0|(B=(n+176|0)+r|0)]=(0|l)!=(0|f)?o[0|s]:0,s=s+2|0,i[n+1820>>2]=s,a[B+1|0]=(0|f)!=(1|l)?o[u+1|0]:0,l=l+2|0,r=r+2|0,(0|y)!=(0|(g=g+2|0)););I&&(g=s+1|0,i[n+1820>>2]=g,a[(n+176|0)+r|0]=(0|l)!=(0|f)?o[0|s]:0,r=r+1|0,s=g)}a[(n+176|0)+r|0]=0}else{if(s=i[n+1820>>2],!(g=15&c))break l;if(r=0,l=g,u=3&c)for(;s=s+1|0,i[n+1820>>2]=s,128==(192&o[0|s])||(l=l-1|0,(0|u)!=(0|(r=r+1|0))););if(g>>>0<4)break c;for(;;)if(s=s+1|0,i[n+1820>>2]=s,128!=(192&o[0|s])){for(;s=s+1|0,i[n+1820>>2]=s,128==(192&o[0|s]););for(;s=s+1|0,i[n+1820>>2]=s,128==(192&o[0|s]););for(;s=s+1|0,i[n+1820>>2]=s,128==(192&o[0|s]););if(r=(0|l)>4,l=l-4|0,!r)break}}if(r=s-1|0,i[n+172>>2]=a[0|r],a[0|r]=32,r=h|=8388608,!k)break o;if(fn(n+576|0,n+784|0,12),i[n+1852>>2]=v,r=rt(n+1200|0,s=n+1616|0),Ve(e,n+1852|0,s,n+1832|0,0,t)&&rt(r,n+1616|0),!(32&o[n+1833|0]))break i;a[0|r]=0,zt(e,i[n+1852>>2],r,1);break i}r=s-1|0,i[n+172>>2]=a[0|r],a[0|r]=32,r=8388608|h}h=r,yn(n+1200|0,n+784|0)}if(a[n+784|0]=0,g=1,r=Ve(e,n+1820|0,n+1616|0,n+1824|0,1024,t),i[n+1832>>2]||(s=i[n+1828>>2],i[n+1832>>2]=i[n+1824>>2],i[n+1836>>2]=s,g=m),r){u=0,f=c;break r}if(u=Ce(e,i[n+1820>>2],n+1616|0,200,n+784|0,8404992&h,n+1832|0),s=1,f=c,m=g,21==o[n+1616|0]){a[i[n+1820>>2]-1|0]=i[n+172>>2],rt(189088,n+1616|0),s=0;break e}}else s=n+416|0,ve(e,i[n+1820>>2],r,s),u=Ce(e,i[n+1820>>2],n+1616|0,200,n+784|0,268435456|h,n+1832|0),_e(i[n+1820>>2],s,jt(s)),1024&u||(rt(n+1616|0,n+1408|0),s=rt(n+784|0,n+576|0),8&o[188788]&&(QA(g=s,s=n+576|0),c=i[47195],i[n+48>>2]=s,en(c,85205,n+48|0)),u=r),s=0;if(r=(l=1024&u)>>>10|0,b>>>0>48)break s;if(b=b+1|0,c=u,!l)break}else u=c,f=0,m=0,r=0;if(r|!u)break n;for(c=rt(n+1408|0,n+1616|0),l=ve(e,i[n+1820>>2],u,n+416|0),g=m,s=u;;){s:{if(a[n+1616|0]=0,o[n+1200|0]){if(a[i[n+1820>>2]-1|0]=i[n+172>>2],r=Ve(e,n+1840|0,n+1616|0,n+1824|0,l,t),a[i[n+1820>>2]-1|0]=32,21==o[n+1616|0]){e=n+416|0,_e(i[n+1820>>2],e,jt(e)),rt(189088,n+1616|0),s=0;break e}if(i[n+1832>>2]||(m=i[n+1828>>2],i[n+1832>>2]=i[n+1824>>2],i[n+1836>>2]=m),r){a[n+1200|0]=0;break s}g=i[n+1824>>2]?1:g}if(r=Ve(e,n+1820|0,n+1616|0,n+1824|0,l,t),21==o[n+1616|0]){e=n+416|0,_e(i[n+1820>>2],e,jt(e)),rt(189088,n+1616|0),s=0;break e}if(i[n+1832>>2]||(m=i[n+1828>>2],i[n+1832>>2]=i[n+1824>>2],i[n+1836>>2]=m),!r)if(16384&s)rt(n+1616|0,c);else{h|=l<<11&8192|s<<9&134217728;i:if(524288&s){if(m=rt(n+576|0,r=n+784|0),s=Ce(e,i[n+1820>>2],n+1616|0,200,r,h,n+1832|0),yn(r,m),r=0,!s){s=0;break i}if(1024&s)break i;r=1,l=ve(e,i[n+1820>>2],s,0)}else s=0,Ce(e,i[n+1820>>2],n+1616|0,200,0,h,n+1832|0),r=0;if(21==o[n+1616|0]){rt(189088,n+1616|0),e=n+416|0,_e(i[n+1820>>2],e,jt(e)),a[i[n+1820>>2]-1|0]=i[n+172>>2],s=0;break e}if(r)continue}}break}65536&u||(at(e,n+1616|0,200,n+784|0),a[n+784|0]=0),r=n+416|0,_e(i[n+1820>>2],r,jt(r));break r}rt(189088,e=n+992|0),s=!Dt(1|e,84744,3)<<12;break e}u=0,g=m}a[i[n+1820>>2]-1|0]=i[n+172>>2]}}if(r=i[n+164>>2],i[n+1852>>2]=8026656,i[n+1848>>2]=8022304,i[n+1844>>2]=7566112,4&h){t:{if(s=255&r){if(102==(0|s))break t;if(E=G,an(r<<24>>24))break t}E=D}Ce(e,E,189088,200,0,0,0)}for(r=0,s=n+1200|0,m=o[n+784|0];;){t:{r:{n:switch(0|(c=o[0|s])){case 0:break t;case 6:case 7:break n;default:break r}r=c}s=s+1|0;continue}break}t:if(r|g){if(i[e+32>>2]|65536&f){for(l=0,ie(e,n+1616|0,n+1832|0,3,0),s=n+1200|0;;){r:switch(o[0|s]){case 6:l&&(a[0|s]=5),l=1;default:s=s+1|0;continue;case 0:}break}i[n+24>>2]=n+1616,i[n+20>>2]=n+1200,i[n+16>>2]=n+992,Ct(189088,200,85233,n+16|0),a[189287]=0,ie(e,189088,n+1832|0,-1,0);break t}i[n+8>>2]=n+1616,i[n+4>>2]=n+1200,i[n>>2]=n+992,Ct(189088,200,85233,n),a[189287]=0,ie(e,189088,n+1832|0,-1,0)}else ie(e,r=n+1616|0,n+1832|0,-1,!!(0|m)<<1),i[n+40>>2]=r,i[n+36>>2]=n+1200,i[n+32>>2]=n+992,Ct(189088,200,85233,n+32|0),a[189287]=0;o[n+784|0]&&(r=jt(189088),a[983+(n-r|0)|0]=0,rt(r+189088|0,n+784|0)),16&(r=h|x)&&(i[n+1832>>2]=-268435457&i[n+1832>>2]);t:if(!(128&r)|!(16&o[e+14|0]))if(3072&r){if(gA(e,6),!(2048&r))break t;i[n+1832>>2]=268435456|i[n+1832>>2]}else 16&o[C(i[33264],12)+t|0]&&(1536&(t=i[n+1832>>2])?gA(e,4):2048&t&&gA(e,3));else gA(e,3);8192&u&&(i[e+8192>>2]=2,i[e+8184>>2]=2);t:{if(8&(t=i[n+1836>>2]))i[e+8184>>2]=0,i[e+8188>>2]=3,r=e+8196|0;else if(1&t)i[e+8192>>2]=0,i[e+8184>>2]=2,r=e+8196|0;else if(2&t)i[e+8192>>2]=2,i[e+8184>>2]=0,i[e+8188>>2]=0,r=e+8196|0;else{if(!(4&t))break t;i[e+8184>>2]=0,i[e+8192>>2]=0,i[e+8196>>2]=2,r=e+8188|0}i[r>>2]=0}!o[i[n+1820>>2]]|256&t||((0|(t=i[e+8184>>2]))>0&&(i[e+8184>>2]=t-1),(0|(t=i[e+8192>>2]))>0&&(i[e+8192>>2]=t-1),(0|(t=i[e+8196>>2]))>0&&(i[e+8196>>2]=t-1),(0|(t=i[e+8188>>2]))<=0||(i[e+8188>>2]=t-1)),1!=(0|w)|25966!=i[e+212>>2]||!yr(i[n+168>>2])|105==i[n+168>>2]||(i[n+1832>>2]=16777216|i[n+1832>>2]);t:if(2&o[e+68|0]&&98304&(r=i[n+1832>>2])&&!((0|(t=jt(189088)-1|0))<=0))for(s=0;;){if(e=s+1|0,6==o[s+189088|0]){t=a[0|(e=e+189088|0)];r:{if(65536&r){if((0|br(69))==(0|t)?(w=br(101),a[0|e]=w):w=o[0|e],l=111,(0|br(79))==w<<24>>24)break r;break t}if((0|br(101))==(0|t)?(w=br(69),a[0|e]=w):w=o[0|e],l=79,(0|br(111))!=w<<24>>24)break t}a[0|e]=br(l);break t}if((0|t)==(0|(s=e)))break}e=i[n+1832>>2],_e(A,n+256|0,M),s=e|d;break e}if(s=0,a[n+1616|0]=0,zt(e,i[n+1840>>2],n+1616|0,r)){if(c=rt(189088,n+1616|0),!B){if(r=i[n+164>>2],i[n+1408>>2]=8026656,i[n+576>>2]=8022304,i[n+416>>2]=7566112,4&h){A=n+576|1,t=n+1408|1;A:{if(s=255&r){if(102==(0|s))break A;if(m=A,an(r<<24>>24))break A}m=t}Ce(e,m,c,200,0,0,0)}s=128&i[n+1832>>2]}}else s=((0|w)>1)<<12}else a[189088]=0;return W=n+1856|0,s}function re(e,A,t,r,n,s,l,c){var g,u,d=0,f=0,p=0,h=0,m=0,b=0,I=0,w=0,k=0,x=0,v=0,B=0,y=0,E=0,M=0,G=0,D=0,Q=0,T=0,P=0,z=0,F=0,S=0,N=0,O=0,L=0,Y=0,H=0,R=0,j=0,V=0,U=0,K=0,Z=0,X=0,q=0,J=0,_=0,$=0,ee=0,Ae=0;W=g=W-384|0,u=i[A>>2];e:{A:{t:{r:{if(n){if(7!=o[0|n])break r;i[A>>2]=(r||1)+u;break t}i[s>>2]=0,i[A>>2]=u+1;break e}z=86135,R=268435456&l,j=134217728&l,V=8388608&l,U=16384&l,K=8192&l,N=t-1|0,O=r-t|0,Z=2&l,X=128&l,q=l>>>31|0,J=-2147483648&l,L=g+96|1;r:for(;;)for(i[g+268>>2]=0,I=(p=i[A>>2])+r|0,M=-2,y=-6,t=n,G=J,Q=0,F=0,E=1,d=0,D=0,P=0;;){h=p,w=d;n:{a:{s:{i:{o:{l:{c:{g:{u:{d:{f:{p:{h:{m:{C:{b:{for(;x=t,t=t+1|0,!((f=o[0|x])>>>0>9);){m=t;I:switch(0|f){case 0:if(!(t=Y)){Y=0,t=86135;break C}for(;;){f=1;w:{k:switch(0|(d=o[0|t])){case 0:case 3:break b;case 5:break k;default:break w}f=2}t=(t+f|0)+((9==(0|d))<<1)|0}case 1:if(P=1,!q)continue;break o;case 2:P=2;continue;case 4:Y=t;continue;case 5:t=x+2|0,d=i[e+320>>2];w:{if((p=o[x+1|0])>>>0>=32){if(!(d>>>p-32&1))break w;break o}if(!(d>>>p&1))break o}E=E+1|0;continue;case 9:t=x+3|0;continue;case 8:P=1,F=1,G=0;break;case 3:break m}}m=0,d=w,p=h;I:switch(0|P){case 0:w:{k:{if((0|(d=o[0|I]))!=(0|f)){if(69!=(0|d))break o;if(101==(0|f))break k;break o}if(m=0,128==(192&f))break w}m=21}I=I+1|0,Q=Q+1|0;break n;case 1:break h;case 2:break I;default:break d}if(i[g+264>>2]=i[g+268>>2],!o[I-1|0])break o;y=(0|(d=y+6|0))>=19?19:d,B=I+1|0,v=VA(g+268|0,I),k=o[0|I],m=20,d=w;I:{w:switch(f-11|0){case 6:t=x+2|0,d=i[g+268>>2],p=a[x+1|0];k:if(f=i[604+(((p=((0|p)<65?191:-65)+p|0)<<2)+e|0)>>2])d=!!(0|Pr(f,d));else{if((0|p)>7)break o;x:{if((0|(f=i[e+600>>2]))>0){if((d=d-f|0)-1>>>0<255)break x;break o}if((f=d-192|0)>>>0<=413){d=o[344+(o[f+94240|0]+e|0)|0]&1<<p;break k}if(d>>>0>255)break o}d=o[344+(e+d|0)|0]&1<<p}if(!d)break o;I=I+v|0,m=(2==(0|p)?19:20)-y|0;break n;case 7:if(t=x+2|0,d=a[x+1|0],!(d=i[4788+((((0|d)<65?191:-65)+d<<2)+e|0)>>2]))break o;k:for(;;){if(7==(0|(m=o[0|d])))break o;if(126==(0|m)){m=20-y|0;break n}x:if(k){if(b=I,f=d,(0|m)==(0|k))for(;;){if((0|(m=o[0|(f=f+1|0)]))!=(0|(d=o[0|(b=b+1|0)])))break x;if(!d)break}}else f=d,b=I;if(m)for(;;)if(p=o[0|f],f=d=f+1|0,!p)continue k;break}if((0|(d=b-I|0))<0)break o;I=d+I|0,m=20-y|0;break n;case 14:f=i[g+268>>2];k:{x:if(d=i[e+604>>2])d=!!(0|Pr(d,f));else{v:{if((0|(d=i[e+600>>2]))>0){if((b=f-d|0)-1>>>0<255)break v;break k}if((d=f-192|0)>>>0<=413){d=1&a[344+(o[d+94240|0]+e|0)|0];break x}if(b=f,f>>>0>255)break a}d=1&a[344+(e+b|0)|0]}if(d)break o;f=i[g+268>>2]}if(!j)break a;if(32==(0|f))break o;break a;case 4:if((d=i[g+268>>2])-48>>>0<10|d-2406>>>0<10)break a;if(!o[e+170|0])break o;m=20-y|0;break n;case 5:if(Or(i[g+268>>2]))break o;break s;case 0:if(i[g+268>>2]==i[g+264>>2])break s;break o;case 17:t=x+2|0,d=32768,m=0;k:{x:switch((f=o[x+1|0])-1|0){case 0:break d;case 1:break x;default:break k}if(m=1,d=w,!V)break d;break o}if(16==(0|(d=240&f))){if(m=23,d=w,c>>>(15&f)&16384)break d;break o}if(3!=(0|f)&32!=(0|d))break n;if(_e(d=g+96|0,N,p=1+(i[A>>2]+(Q+O|0)|0)|0),a[0|(d=d+p|0)]=32,a[d+1|0]=0,i[33265]=0,i[33266]=0,i[g+16>>2]=L,Ve(e,g+16|0,g+272|0,133060,0,0),m=23,!(3!=(0|f)|(0|(b=i[33265]))>=0|16384&i[33266]))break n;if(d=w,p=h,b>>>(15&f)&16384)break d;break o;case 34:k:{if(d=k-32|0){if(13==(0|d))break k;break o}if(!U)break o}b=22-y|0;break i;case 10:if(d=1,21==o[0|t])break I;break l;case 18:if(32!=(0|(b=i[g+268>>2])))for(f=I+v|0;;){k:{x:if(d=i[e+632>>2])d=!!(0|Pr(d,b));else{v:{if((0|(d=i[e+600>>2]))>0){if((b=b-d|0)-1>>>0<255)break v;break k}if((d=b-192|0)>>>0<=413){d=128&o[344+(o[d+94240|0]+e|0)|0];break x}if(b>>>0>255)break k}d=128&o[344+(e+b|0)|0]}if(d)break o}if(f=VA(g+268|0,f)+f|0,32==(0|(b=i[g+268>>2])))break}b=19-y|0;break i;case 49:break c;case 2:break g;case 3:break u;case 1:break d;case 13:break f;case 12:break w;default:break p}VA(g+272|0,t),v=-1;w:if((0|(d=i[g+272>>2]))!=(0|(f=i[g+268>>2])))if(-33&f)for(;;){k=I,v=-1;k:if(18==(0|d)&&(d=a[x+2|0],m=i[4788+((((0|d)<65?191:-65)+d<<2)+e|0)>>2])){for(;;){if(7==(0|(p=o[0|m])))break k;if(126==(0|p)){v=0;break k}x:if((0|(I=o[0|k]))==(0|p)){if(d=k,f=m,I)for(;;){if((0|(p=o[0|(f=f+1|0)]))!=(0|(m=o[0|(d=d+1|0)])))break x;if(!m)break}}else f=m,d=k;if(!p){d=d-k|0;break}for(;d=o[0|f],f=m=f+1|0,d;);}v=d}if(p=VA(g+268|0,k),(0|(d=i[g+272>>2]))==(0|(f=i[g+268>>2]))|!(-33&f))break w;if(I=p+k|0,-1!=(0|v))break}else k=I;else k=I;I=(0|d)==(0|f)||(0|v)>=0?k:B,m=0;break n}for(;d=d+1|0,21==o[0|(t=t+1|0)];);break l}t=t+1|0}m=x}if(!(32!=o[h-1|0]&F|G||((0|(f=F?E+4|0:E))>=(0|S)&&(_=D,$=w,S=f,ee=Q,z=t),!(8&i[47197])|R|(0|f)<=0))){for(QA(t,x=g+272|0),B=i[47195],p=g+16|0,t=0,k=0,G=0,D=0,W=I=W-496|0,a[I+80|0]=0,(0|r)>0?(_e(I+288|0,u,r),w=r):w=0,a[w+(d=I+288|0)|0]=0,h=jt(d)+d|0,v=(0|l)<0;;){if(b=o[0|n],w=n,n=n+1|0,b>>>0>9)for(;;){m:{C:{b:{I:{w:{k:switch((d=255&b)-14|0){case 4:break b;case 3:break I;case 0:break w;case 14:break k;default:break C}if(w=w+2|0,b=32,!v&1==(0|(n=o[0|n])))break m;a[0|h]=36,rt(d=h+1|0,n=mr(128960,n)),h=jt(n)+d|0;break m}d=o[w+2|0],b=o[0|n],i[I+36>>2]=127&o[w+3|0],i[I+32>>2]=4&d?80:83,Bt(I+48|0,85131,I+32|0),1&d&&(n=jt(n=I+48|0)+n|0,a[0|n]=101,a[n+1|0]=0),2&(n=127&d)&&(d=jt(d=I+48|0)+d|0,a[0|d]=105,a[d+1|0]=0),4&n&&(d=jt(d=I+48|0)+d|0,a[0|d]=112,a[d+1|0]=0),8&n&&(d=jt(d=I+48|0)+d|0,a[0|d]=118,a[d+1|0]=0),16&n&&(d=jt(d=I+48|0)+d|0,a[0|d]=100,a[d+1|0]=0),32&n&&(d=jt(d=I+48|0)+d|0,a[0|d]=102,a[d+1|0]=0),n>>>0>=64&&(n=jt(n=I+48|0)+n|0,a[0|n]=113,a[n+1|0]=0),1&b&&(n=jt(n=I+48|0)+n|0,a[0|n]=116,a[n+1|0]=0),w=w+4|0,h=rt(h,n=I+48|0)+jt(n)|0,b=32;break m}w=w+2|0,b=o[a[0|n]+93871|0];break m}n=a[0|n],a[0|h]=76,d=((n=n+((0|n)<65?191:-65)|0)>>>0)/10|0,a[h+1|0]=d+48,b=n-C(d,10)|48,1==(0|D)&&(a[0|h]=b,b=76),w=w+2|0,h=h+2|0;break m}b=d>>>0<=31?o[d+93904|0]:32==(0|d)?95:b,w=n}if(a[0|h]=b,n=w+1|0,h=h+1|0,!((b=o[0|w])>>>0>=10))break}d=1;m:switch(0|b){case 1:d=t;case 8:a[0|h]=0,h=I+80|0,t=d,D=1;continue;case 2:a[0|h]=0,w=jt(d=I+288|0)+d|0,h=o[84899]|o[84900]<<8,a[0|w]=h,a[w+1|0]=h>>>8,D=2,a[w+2|0]=o[84901],h=jt(d)+d|0;continue;case 5:k=a[0|n],n=w+2|0;continue;case 9:G=(o[0|n]+C(o[w+2|0],255)|0)-256|0,n=w+3|0;continue;case 0:case 3:break m;default:continue}break}if(a[0|h]=0,h=p,(0|G)>0&&(i[I+16>>2]=G,Bt(p,85581,I+16|0),h=p+7|0),(0|k)>0&&(i[I>>2]=k,Bt(h,85694,I),h=jt(h)+h|0),1&((0|(n=jt(I+80|0)))>0|t)){1&t&&(a[0|h]=95,h=h+1|0);m:if(!((0|(w=n-1|0))<0|h>>>0>=p>>>0))for(;;){if(a[0|h]=o[(I+80|0)+w|0],h=h+1|0,(0|w)<=0)break m;if(w=w-1|0,!(h>>>0<p>>>0))break}a[0|h]=41,a[h+1|0]=32,h=h+2|0}a[0|h]=0,a[(t=I+288|0)+((p+3|0)-h|0)|0]=0,yn(h,t),(0|(t=jt(p)))<=7&&(kA(t+p|0,32,8-t|0),t=8),a[t+p|0]=0,W=I+496|0,i[g+4>>2]=p,i[g>>2]=(0|r)>1?f+35|0:f,i[g+8>>2]=x,en(B,89088,g)}t=m;break o}if(!o[0|h])break o;M=(0|(d=M+2|0))>=19?19:d,VA(g+264|0,h),d=RA(g+268|0,p=h-1|0),k=o[0|p],B=p;h:{m:{C:{b:{I:{w:switch(f-10|0){case 13:if(d=(0|(T=o[0|t]))==(0|(f=o[0|h])),v=-1,32==(0|f)|(0|f)==(0|T))break b;if(f)break I;break C;case 7:t=x+2|0,m=i[g+268>>2],h=a[x+1|0];k:if(f=i[604+(((h=((0|h)<65?191:-65)+h|0)<<2)+e|0)>>2])f=!!(0|Pr(f,m));else{if((0|h)>7)break o;x:{if((0|(f=i[e+600>>2]))>0){if((m=m-f|0)-1>>>0<255)break x;break o}if((f=m-192|0)>>>0<=413){f=o[344+(o[f+94240|0]+e|0)|0]&1<<h;break k}if(m>>>0>255)break o}f=o[344+(e+m|0)|0]&1<<h}if(!f)break o;p=1+(p-d|0)|0,m=(2==(0|h)?19:20)-M|0;break h;case 8:if(t=x+2|0,d=a[x+1|0],!(d=i[4788+((((0|d)<65?191:-65)+d<<2)+e|0)>>2]))break o;k:{for(;;){if(7==(0|(k=o[0|d])))break o;if(126==(0|k)){v=0;break k}f=p;x:{v:{if((0|(x=(v=jt(d))-1|0))>0)for(f=h-v|0,m=0,b=p;;){if(!o[0|(b=b-1|0)])break v;if((0|x)==(0|(m=m+1|0)))break}B:if(!((0|(m=o[0|f]))!=(0|k)|!m))for(;;){if((0|(k=o[0|(d=d+1|0)]))!=(0|(m=o[0|(f=f+1|0)])))break B;if(!m)break}if(!k)break x}for(f=d;m=o[0|f],f=d=f+1|0,m;);continue}break}if((0|v)<0)break o}m=20-y|0,p=1+(p-v|0)|0;break h;case 15:f=i[g+268>>2];k:{x:if(h=i[e+604>>2])h=!!(0|Pr(h,f));else{v:{if((0|(h=i[e+600>>2]))>0){if((f=f-h|0)-1>>>0<255)break v;break k}if((h=f-192|0)>>>0<=413){h=1&a[344+(o[h+94240|0]+e|0)|0];break x}if(f>>>0>255)break k}h=1&a[344+(e+f|0)|0]}if(h)break o}m=20-M|0,p=1+(p-d|0)|0;break h;case 1:if(i[g+268>>2]!=i[g+264>>2])break o;m=21-M|0,p=1+(p-d|0)|0;break h;case 5:if(!((h=i[g+268>>2])-48>>>0<10|h-2406>>>0<10))break o;m=21-M|0,p=1+(p-d|0)|0;break h;case 6:if(Or(i[g+268>>2]))break o;m=21-y|0,p=1+(p-d|0)|0;break h;case 18:if(t=x+2|0,!(3==(0|(f=o[x+1|0]))|32==(240&f)))break n;if(_e(d=g+96|0,N,p=1+(i[A>>2]+(Q+O|0)|0)|0),a[0|(d=d+p|0)]=32,a[d+1|0]=0,i[33265]=0,i[33266]=0,i[g+16>>2]=L,Ve(e,g+16|0,g+272|0,133060,0,0),m=23,!(3!=(0|f)|(0|(b=i[33265]))>=0|16384&i[33266]))break n;if(d=w,p=h,b>>>(15&f)&16384)break d;break o;case 11:if(f=1,21==o[0|t])for(;f=f+1|0,21==o[0|(t=t+1|0)];);if(i[e+8208>>2]<(0|f))break o;m=18+(f-M|0)|0;break h;case 0:if(m=19,d=w,p=h,i[e+8212>>2]>0)break d;break o;case 19:if(m=3,32==(0|(b=i[g+268>>2])))break h;for(f=1+(p-d|0)|0;;){k:{x:if(d=i[e+632>>2])d=!!(0|Pr(d,b));else{v:{if((0|(d=i[e+600>>2]))>0){if((b=b-d|0)-1>>>0<255)break v;break k}if((d=b-192|0)>>>0<=413){d=128&o[344+(o[d+94240|0]+e|0)|0];break x}if(b>>>0>255)break k}d=128&o[344+(e+b|0)|0]}if(d)break o}if(f=f-RA(g+268|0,f-1|0)|0,32==(0|(b=i[g+268>>2])))break}break h;case 16:if(m=1,d=w,p=h,i[e+8184>>2])break d;break o;case 9:if(m=1,d=w,p=h,Z)break d;break o;case 36:for(;;){if(m=50,d=w,!(h=(255&k)-32|0))break o;if(14==(0|h))break d;k=o[0|(B=B-1|0)]}case 35:break w;default:break m}w:{if(d=k-32|0){if(13==(0|d))break w;break o}if(!X)break o}m=22-y|0;break h}I:{for(;;){v=-1,b=h,h=h-1|0;w:if(18==(0|T)&&(d=a[x+2|0],m=i[4788+((((0|d)<65?191:-65)+d<<2)+e|0)>>2]))for(Ae=b+1|0;;){if(7==(0|(B=o[0|m]))){v=-1;break w}if(126==(0|B)){v=0;break w}f=b;k:{if((0|(H=(v=jt(m))-1|0))>0)for(f=Ae-v|0,k=0,d=b;;){if(!o[0|(d=d-1|0)])break k;if((0|H)==(0|(k=k+1|0)))break}x:if(!((0|(d=o[0|f]))!=(0|B)|!d))for(;;){if((0|(B=o[0|(m=m+1|0)]))!=(0|(d=o[0|(f=f+1|0)])))break x;if(!d)break}if(!B)break w}for(f=m;d=o[0|f],f=m=f+1|0,d;);}if(d=(0|(f=o[0|h]))==(0|T),32==(0|f)|(0|f)==(0|T))break I;if(!f){h=b;break C}if(-1!=(0|v))break}h=b;break C}h=b}p=d?h:p}m=0,p=(0|v)<0?p:h+1|0;break h}if((0|f)!=(0|k))break o;m=4,32!=(0|f)&&(m=128!=(192&f)?21-M|0:0)}d=w;break d}if((0|f)!=(0|k))break o;b=128!=(192&f)?21-y|0:0;break i}if(m=1,K)break o}E=m+E|0;continue}if(d=a[x+1|0],w=o[x+3|0],p=o[x+2|0],1&!(i[e+8208>>2]|4&p)&a[e+84|0])break o;t=x+4|0,b=0,w=127&w|(127&p)<<8|d<<16;break i}g:if(!(B>>>0<=(f=i[A>>2]+r|0)>>>0)){for(;;){if(101!=o[0|f]){if(d=f>>>0<I>>>0,f=f+1|0,d)continue;break g}break}b=0,D=f;break i}b=0;break i}m=-20;break n}if(k=0,32!=(0|(f=i[g+268>>2])))for(b=I+v|0,m=0;;){if(!m){l:{c:if(p=i[e+632>>2])f=!!(0|Pr(p,f));else{g:{if((0|(p=i[e+600>>2]))>0){if((f=f-p|0)-1>>>0<255)break g;break l}if((p=f-192|0)>>>0<=413){f=128&o[344+(o[p+94240|0]+e|0)|0];break c}if(f>>>0>255)break l}f=128&o[344+(e+f|0)|0]}f&&(k=k+1|0)}f=i[g+268>>2]}l:if(p=i[e+632>>2])m=!!(0|Pr(p,f));else{c:{if((0|(p=i[e+600>>2]))>0){if(m=0,(f=f-p|0)-1>>>0<255)break c;break l}if((p=f-192|0)>>>0<=413){m=128&o[344+(o[p+94240|0]+e|0)|0];break l}if(m=0,f>>>0>255)break l}m=128&o[344+(e+f|0)|0]}if(b=VA(g+268|0,b)+b|0,32==(0|(f=i[g+268>>2])))break}if(!((0|d)>(0|k))){b=18+(d-y|0)|0;break i}}for(;d=o[0|t],t=n=t+1|0,d;);if(7!=o[0|n])continue r;if(e=r+ee|0,i[A>>2]=i[A>>2]+(e||1),S)break A;break t}d=w,I=B,p=h,E=b+E|0;continue}I=I+v|0,m=21-y|0;break n}I=I+v|0,m=20-y|0}d=w,p=h,E=m+E|0}}z=86135}i[s+12>>2]=_,i[s+8>>2]=$,i[s+4>>2]=z,i[s>>2]=S}W=g+384|0}function ne(e,A){var t,r=0,n=0,l=0,c=0,g=0,u=0,d=0,f=0,h=0,m=0,b=0,w=0,k=0,x=0,v=0,B=0,y=0,E=0,M=0,G=0,D=0,Q=0,T=0,P=0,z=0,F=0,S=0,N=0,O=0,L=0;W=t=W-1168|0,i[t+928>>2]=0,i[t+932>>2]=0,i[t+920>>2]=0,i[t+924>>2]=0,i[t+912>>2]=0,i[t+916>>2]=0,i[t+904>>2]=0,i[t+908>>2]=0,i[t+896>>2]=0,i[t+900>>2]=0;e:{A:{if(e){if(o[0|e]|8&A)break A;break e}if(!(8&A))break e}if(fn(t+1088|0,e,40),16&A){if((0|sr(rt(t+704|0,e)))<=0)break e;k=8&A}else(k=8&A)|o[t+1088|0]||(s[t+1088>>1]=o[85055]|o[85056]<<8,a[t+1090|0]=o[85057]),i[t+496>>2]=137584,i[t+500>>2]=47,i[t+504>>2]=47,Bt(r=t+512|0,85286,t+496|0),i[t+484>>2]=t+1088,i[t+480>>2]=r,Bt(r=t+704|0,85425,t+480|0),(0|sr(r))>0||(i[t+468>>2]=47,i[t+472>>2]=47,i[t+464>>2]=137584,Bt(r=t+512|0,85648,t+464|0),i[t+452>>2]=t+1088,i[t+448>>2]=r,Bt(t+704|0,85425,t+448|0));if(n=k?86012:85055,!(x=eA(t+704|0,85712))){if(r=0,3&A)break e;n=(0|Pt(r=t+1088|0))<0?n:r}if((w=2&A)||(r=i[47192])&&(nn(r),i[47192]=0),y=rt(t+992|0,n),B=rt(t+944|0,n),w?((r=cn(200992,43))&&(a[0|r]=0),i[t+432>>2]=e+3,Bt(e=t+704|0,86030,t+432|0),yn(200992,e)):(i[32972]=199592,fn(200992,e,40),a[201088]=0,a[201040]=0,i[50299]=200992,i[50298]=201088,i[50297]=201040),Qe(w),x){for(M=i[30450],G=t+548|0,D=t+544|0,Q=t+540|0,T=t+536|0,P=t+532|0,z=t+528|0,F=12|(e=t+512|0),S=8|e,N=4|e;vA(t+704|0,190,x);){e=t+704|0;A:{if(35!=o[t+704|0]){t:if(!((0|(e=jt(t+704|0)-1|0))<=0))for(;;){if(!(32==(0|(n=a[0|(r=(t+704|0)+e|0)]))|n-9>>>0<5))break t;if(a[0|r]=0,!((0|(e=e-1|0))>0))break}if(!(e=Ge(t+704|0)))break A}a[0|e]=0}e=t+704|0;A:if(r=o[t+704|0])for(;;){if(32==(0|(r=r<<24>>24))|r-9>>>0<5)break A;if(!(r=o[0|(e=e+1|0)]))break}if(a[0|e]=0,o[t+704|0])if(e=e+1|0,r=Qr(129744,t+704|0)){l=0,W=n=W-416|0;A:if(c=i[47192]){t:switch(r-19|0){case 16:if(i[n+32>>2]=n+412,1!=(0|ae(e,84249,n+32|0)))break A;i[c+324>>2]=i[n+412>>2];break A;case 8:gt(e,c+320|0,27);break A;case 2:if(i[n+48>>2]=188784,ae(e,84249,n+48|0),!(e=o[188784]))break A;i[c+152>>2]=e;break A;case 11:if(o[0|e])for(g=i[30450];;)if(r=e,e=e+1|0,!(32==(0|(l=a[0|r]))|l-9>>>0<5)){for(l=wt(r),i[n+412>>2]=l,(0|l)>0&&(l>>>0<=31?i[c+104>>2]=i[c+104>>2]|1<<l:l>>>0<=63?i[c+108>>2]=i[c+108>>2]|1<<l-32:(i[n+64>>2]=l,en(g,84700,n- -64|0)),r=e);r=(e=r)+1|0,(l=a[0|e])-48>>>0<10|(32|l)-97>>>0<26;);if(!l)break}8&(e=i[c+104>>2])&&(i[c+124>>2]=46,i[c+128>>2]=44),4&e&&(i[c+124>>2]=0);break A;default:if(256!=(65280&r))break A;i[n+16>>2]=24+(c+((255&r)<<2)|0),ae(e,84249,n+16|0);break A;case 1:i[n+144>>2]=c,i[n+148>>2]=c+4,ae(e,85642,n+144|0);break A;case 3:if(r=0,kA(l=n+160|0,0,240),i[n+132>>2]=n+360,i[n+128>>2]=n+320,i[n+124>>2]=n+280,i[n+120>>2]=n+240,i[n+116>>2]=n+200,i[n+112>>2]=l,l=ae(e,85037,n+112|0),i[n+412>>2]=l,i[c+152>>2]=0,(0|l)<=0)break A;for(f=i[30450];;){r:if(hr(g=(n+160|0)+C(r,40)|0,85301)){n:{if((0|(d=i[34454]))>0)for(b=i[34455],e=0;;){if(!hr(g,b+C(e,68)|0))break n;if((0|d)==(0|(e=e+1|0)))break}i[n+96>>2]=g,en(f,85562,n+96|0),l=i[n+412>>2];break r}a[156+(r+c|0)|0]=e}if(!((0|l)>(0|(r=r+1|0))))break}break A;case 9:i[n+88>>2]=c+20,i[n+84>>2]=c+16,i[n+80>>2]=c+8,ae(e,84778,n+80|0);break A;case 10:gt(e,c+12|0,29);break A;case 5:if((0|(f=kt(e,n+160|0)))<=0)break A;if(r=0,e=0,f>>>0>=4)for(b=-4&f,g=c+304|0;d=n+160|0,s[g+(e<<1)>>1]=i[d+(e<<2)>>2],s[g+((u=1|e)<<1)>>1]=i[d+(u<<2)>>2],s[g+((u=2|e)<<1)>>1]=i[d+(u<<2)>>2],s[g+((u=3|e)<<1)>>1]=i[d+(u<<2)>>2],e=e+4|0,(0|b)!=(0|(l=l+4|0)););if(!(l=3&f))break A;for(;s[304+(c+(e<<1)|0)>>1]=i[(n+160|0)+(e<<2)>>2],e=e+1|0,(0|l)!=(0|(r=r+1|0)););break A;case 6:if((0|(f=kt(e,n+160|0)))<=0)break A;if(r=0,e=0,f>>>0>=4)for(b=-4&f,g=c+296|0;d=n+160|0,a[e+g|0]=i[d+(e<<2)>>2],a[(u=1|e)+g|0]=i[d+(u<<2)>>2],a[(u=2|e)+g|0]=i[d+(u<<2)>>2],a[(u=3|e)+g|0]=i[d+(u<<2)>>2],e=e+4|0,(0|b)!=(0|(l=l+4|0)););if(!(l=3&f))break A;for(;a[296+(e+c|0)|0]=i[(n+160|0)+(e<<2)>>2],e=e+1|0,(0|l)!=(0|(r=r+1|0)););break A;case 7:if((0|(f=kt(e,n+160|0)))<=0)break A;if(r=0,e=0,f>>>0>=4)for(b=-4&f,g=c+304|0;u=d=g+(e<<1)|0,h=p[d>>1],d=n+160|0,s[u>>1]=h+p[d+(e<<2)>>1],s[(h=g+((u=1|e)<<1)|0)>>1]=p[h>>1]+p[d+(u<<2)>>1],s[(h=g+((u=2|e)<<1)|0)>>1]=p[h>>1]+p[d+(u<<2)>>1],s[(h=g+((u=3|e)<<1)|0)>>1]=p[h>>1]+p[d+(u<<2)>>1],e=e+4|0,(0|b)!=(0|(l=l+4|0)););if(!(l=3&f))break A;for(;s[304+(g=c+(e<<1)|0)>>1]=p[g+304>>1]+p[(n+160|0)+(e<<2)>>1],e=e+1|0,(0|l)!=(0|(r=r+1|0)););break A;case 4:a[c+169|0]=1;break A;case 0:}a[c+208|0]=1}else i[n>>2]=mr(129568,r),en(i[30450],89101,n);W=n+416|0}else{A:switch(Qr(131904,t+704|0)-1|0){case 1:if(w)continue;if(a[t+1040|0]=0,i[t+512>>2]=5,i[t+32>>2]=t+1040,i[t+36>>2]=t+512,ae(e,86237,t+32|0),1769103734==i[t+1040>>2]&7630433==i[t+1044>>2])continue;if((e=jt(t+1040|0)+2|0)>>>0<99-v>>>0&&(a[0|(r=v+201088|0)]=i[t+512>>2],rt(r+1|0,t+1040|0),v=e+v|0),!O){if(e=0,(r=g=t+1040|0)||(r=i[57150])){if(e=86875,i[24+(n=W-32|0)>>2]=0,i[n+28>>2]=0,i[n+16>>2]=0,i[n+20>>2]=0,i[n+8>>2]=0,i[n+12>>2]=0,i[n>>2]=0,i[n+4>>2]=0,c=0,l=o[86875])if(o[86876]){for(;i[(c=n+(l>>>3&28)|0)>>2]=i[c>>2]|1<<l,l=o[e+1|0],e=e+1|0,l;);t:if(l=o[0|(e=r)])for(;;){if(!(i[n+(l>>>3&28)>>2]>>>l&1))break t;if(l=o[e+1|0],e=e+1|0,!l)break}c=e-r|0}else{for(e=r;n=e,e=e+1|0,o[0|n]==(0|l););c=n-r|0}if(o[0|(e=c+r|0)]){r=86875,W=l=W-32|0,n=a[86875];t:if(o[86876]&&n){if(kA(l,0,32),n=o[86875])for(;i[(c=l+(n>>>3&28)|0)>>2]=i[c>>2]|1<<n,n=o[r+1|0],r=r+1|0,n;);if(r=e,n=o[0|e])for(;;){if(i[l+(n>>>3&28)>>2]>>>n&1)break t;if(n=o[r+1|0],r=r+1|0,!n)break}}else r=_A(e,n);W=l+32|0,o[0|(r=(r-e|0)+e|0)]?(i[57150]=r+1,a[0|r]=0):i[57150]=0}else i[57150]=0,e=0}r=rt(y,e),rt(B,e),Pt(rt(t+896|0,e)),i[47192]=J(r),fn(i[32972]+40|0,g,20)}O=1;continue;case 0:if(w)continue;for(;r=e,e=e+1|0,32==(0|(n=a[0|r]))|n-9>>>0<5;);fn(201040,r,40);continue;case 2:i[t+1152>>2]=0,r=t+512|0,i[t+48>>2]=r,i[t+52>>2]=t+1152,ae(e,86237,t+48|0),a[201200]=Qr(132112,r),a[201201]=i[t+1152>>2];continue;case 4:i[t+64>>2]=B,ae(e,86939,t- -64|0);continue;case 3:i[t+80>>2]=t+896,ae(e,86939,t+80|0);continue;case 8:if(i[t+1152>>2]=100,i[t+1164>>2]=100,i[t+1148>>2]=100,i[t+112>>2]=t+1144,i[t+1144>>2]=0,i[t+96>>2]=t+512,i[t+100>>2]=t+1152,i[t+104>>2]=t+1164,i[t+108>>2]=t+1148,(0|ae(e,91156,t+96|0))<2)continue;if((e=i[t+512>>2])>>>0>8)continue;if((0|(r=i[t+1152>>2]))>=0&&(n=i[32972]+(e<<1)|0,r=I(m=2.56001*+(0|r))<2147483648?~~m:-2147483648,s[n+236>>1]=r,s[n+164>>1]=r),(0|(r=i[t+1164>>2]))>=0&&(n=i[32972]+(e<<1)|0,r=I(m=2.56001*+(0|r))<2147483648?~~m:-2147483648,s[n+254>>1]=r,s[n+182>>1]=r),(0|(n=i[t+1148>>2]))<0?r=i[32972]:(g=(r=i[32972])+(e<<1)|0,n=I(m=2.56001*+(0|n))<2147483648?~~m:-2147483648,s[g+200>>1]=n),s[218+((e<<1)+r|0)>>1]=i[t+1144>>2],e)continue;s[r+200>>1]=(0|C(s[r+200>>1],105))/100;continue;case 9:if(i[t+132>>2]=t+696,i[t+128>>2]=t+700,2!=(0|ae(e,87106,t+128|0)))continue;if(e=i[32972],r=i[t+700>>2],i[e+64>>2]=(r<<12)-36864,i[e+68>>2]=C(i[t+696>>2]-r|0,108),I(m=256*(+(r-82|0)/82*.25+1))<2147483648){i[e+116>>2]=~~m;continue}i[e+116>>2]=-2147483648;continue;case 35:L||Pt(t+896|0),i[t+1164>>2]=0,a[t+1156|0]=o[91267],i[t+1152>>2]=o[91263]|o[91264]<<8|o[91265]<<16|o[91266]<<24,i[t+144>>2]=t+1164,i[t+148>>2]=t+512,i[t+152>>2]=t+1152,(0|ae(e,91302,t+144|0))<2|i[49848]>59||(e=xt(t+512|0))&&(a[C(i[49848],3)+199408|0]=e,e=xt(t+1152|0),r=i[49848],n=C(r,3)+199408|0,a[n+1|0]=e,i[49848]=r+1,a[n+2|0]=i[t+1164>>2]),L=1;continue;case 10:i[t+1140>>2]=0,r=i[32972],i[r+100>>2]=0,i[t+164>>2]=r+100,i[t+160>>2]=r+96,ae(e,87106,t+160|0);continue;case 11:if(i[t+176>>2]=t+1140,1!=(0|ae(e,87268,t+176|0)))continue;i[i[32972]+88>>2]=i[t+1140>>2]<<5;continue;case 12:if(i[t+192>>2]=t+1140,1!=(0|ae(e,87268,t+192|0)))continue;i[i[32972]+92>>2]=i[t+1140>>2];continue;case 13:if(i[t+208>>2]=t+1140,1!=(0|ae(e,87268,t+208|0)))continue;r=i[32972],(0|(e=i[t+1140>>2]))>=5&&(i[r+108>>2]=1,i[t+1140>>2]=4,e=4),i[r+104>>2]=e+1;continue;case 14:for(i[t+552>>2]=-1,i[t+556>>2]=-1,i[t+544>>2]=-1,i[t+548>>2]=-1,i[t+536>>2]=-1,i[t+540>>2]=-1,i[t+528>>2]=-1,i[t+532>>2]=-1,i[t+240>>2]=z,i[t+244>>2]=P,i[t+248>>2]=T,i[t+252>>2]=Q,i[t+256>>2]=D,i[t+260>>2]=G,i[t+520>>2]=-1,i[t+524>>2]=-1,i[t+512>>2]=-1,i[t+516>>2]=-1,i[t+228>>2]=N,i[t+232>>2]=S,i[t+236>>2]=F,i[t+224>>2]=t+512,ae(e,84222,t+224|0),b=i[32972],e=0,l=i[t+516>>2],n=0;;){if(r=n,c=l,g=e,-1==(0|(n=i[(l=(e<<=2)+(t+512|0)|0)>>2]))&&(n=8e3,i[l>>2]=8e3,g&&(i[(t+512|0)+(4|e)>>2]=i[508+(e+t|0)>>2])),l=i[(t+512|0)+(4|e)>>2],!((0|r)>=(0|(n=(0|n)/8|0))||(0|(d=n-r|0))<=0||(f=r+1|0,e=r,1&d&&(a[344+(r+b|0)|0]=(0|c)>=255?255:c,e=f),(0|n)==(0|f))))for(f=l-c|0;h=b+344|0,u=c+((0|C(f,e-r|0))/(0|d)|0)|0,a[h+e|0]=(0|u)>=255?255:u,u=c+((0|C(f,(E=e+1|0)-r|0))/(0|d)|0)|0,a[h+E|0]=(0|u)>=255?255:u,(0|n)!=(0|(e=e+2|0)););if(e=g+2|0,!(g>>>0<10))break}continue;case 15:if(i[t+272>>2]=t+1140,1!=(0|ae(e,87268,t+272|0)))continue;i[i[32972]+112>>2]=(i[t+1140>>2]<<6)/100;continue;case 16:r=i[32972],i[(n=r+300|0)>>2]=0,i[n+4>>2]=0,i[(l=r+292|0)>>2]=0,i[l+4>>2]=0,i[(c=r+284|0)>>2]=0,i[c+4>>2]=0,i[(g=r+276|0)>>2]=0,i[g+4>>2]=0,i[t+316>>2]=r+304,i[t+312>>2]=n,i[t+308>>2]=r+296,i[t+304>>2]=l,i[t+300>>2]=r+288,i[t+296>>2]=c,i[t+292>>2]=r+280,i[t+288>>2]=g,r=ae(e,84553,t+288|0),e=i[32972],i[e+272>>2]=r,i[e+276>>2]=0-i[e+276>>2],i[e+284>>2]=0-i[e+284>>2],i[e+292>>2]=0-i[e+292>>2],i[e+300>>2]=0-i[e+300>>2];continue;case 17:r=i[32972],i[(n=r+336|0)>>2]=0,i[n+4>>2]=0,i[(l=r+328|0)>>2]=0,i[l+4>>2]=0,i[(c=r+320|0)>>2]=0,i[c+4>>2]=0,i[(g=r+312|0)>>2]=0,i[g+4>>2]=0,i[t+348>>2]=r+340,i[t+344>>2]=n,i[t+340>>2]=r+332,i[t+336>>2]=l,i[t+332>>2]=r+324,i[t+328>>2]=c,i[t+324>>2]=r+316,i[t+320>>2]=g,e=ae(e,84553,t+320|0),i[i[32972]+308>>2]=e;continue;case 36:r=i[32972],i[t+352>>2]=r+120,i[t+356>>2]=r+124,i[t+1140>>2]=ae(e,87106,t+352|0);continue;case 33:i[t+368>>2]=i[32972]+84,ae(e,87268,t+368|0),Ze(3);continue;case 31:r=i[32972],i[(n=r+156|0)>>2]=0,i[n+4>>2]=0,i[(l=r+148|0)>>2]=0,i[l+4>>2]=0,i[(c=r+140|0)>>2]=0,i[c+4>>2]=0,i[(g=r+132|0)>>2]=0,i[g+4>>2]=0,i[t+412>>2]=r+160,i[t+408>>2]=n,i[t+404>>2]=r+152,i[t+400>>2]=l,i[t+396>>2]=r+144,i[t+392>>2]=c,i[t+388>>2]=r+136,i[t+384>>2]=g,ae(e,84553,t+384|0),e=i[32972],i[e+152>>2]=i[e+152>>2]-40;continue;case 32:i[t+416>>2]=145740,ae(e,87268,t+416|0),Ze(3);continue;case 6:case 7:continue}i[t+16>>2]=t+704,en(M,87359,t+16|0)}}cr(x)}A:{if((e=i[47192])|w){if(w)break A}else e=J(y),i[47192]=e;t:{if(!k){if((0|(e=Pt(t+896|0)))<0&&(i[t>>2]=t+896,en(i[30450],87567,t),e=0),i[i[32972]+60>>2]=e,r=i[47192],i[r+292>>2]=e,Te(r,B,4&A),o[132848])break t;nn(i[47192]),r=0;break e}i[i[32972]+60>>2]=0,i[e+292>>2]=0}a[v+201088|0]=0}r=i[32972]}return W=t+1168|0,r}function ae(e,A,t){var r,n,l,c=0,g=0,u=0,d=0,f=0,p=0,h=0,b=0,I=0,w=0,k=0,x=0,v=0,B=0,y=0,E=0,M=0,G=0,D=0;W=l=W-16|0,i[l+12>>2]=t,W=c=W-144|0,r=kA(c,0,144),i[r+76>>2]=-1,i[r+44>>2]=e,i[r+32>>2]=18,i[r+84>>2]=e,c=A,M=t,e=0,W=n=W-304|0;e:{A:{t:if(i[r+4>>2]||(Ht(r),i[r+4>>2])){if(!(A=o[0|c]))break e;r:{n:{a:{s:{for(;;){i:{o:if(32==(0|(A&=255))|A-9>>>0<5){for(;A=c,c=c+1|0,32==(0|(t=o[A+1|0]))|t-9>>>0<5;);for(Vt(r,0,0);(0|(t=i[r+4>>2]))==i[r+104>>2]?t=hA(r):(i[r+4>>2]=t+1,t=o[0|t]),32==(0|t)|t-9>>>0<5;);c=i[r+4>>2],(0|(t=i[r+116>>2]))>0|(0|t)>=0&&(c=c-1|0,i[r+4>>2]=c),c=t=c-i[r+44>>2]|0,f=x+i[r+124>>2]|0,f=(g=t>>31)+((t=I+i[r+120>>2]|0)>>>0<I>>>0?f+1|0:f)|0,x=(I=t+c|0)>>>0<t>>>0?f+1|0:f}else{l:{c:{g:{if(37==o[0|c]){if(42==(0|(A=o[c+1|0])))break g;if(37!=(0|A))break c}if(Vt(r,0,0),37!=o[0|c])(0|(A=i[r+4>>2]))==i[r+104>>2]?A=hA(r):(i[r+4>>2]=A+1,A=o[0|A]);else{for(;(0|(A=i[r+4>>2]))==i[r+104>>2]?A=hA(r):(i[r+4>>2]=A+1,A=o[0|A]),32==(0|A)|A-9>>>0<5;);c=c+1|0}if(o[0|c]!=(0|A)){if((0|(t=i[r+116>>2]))>0|(0|t)>=0&&(i[r+4>>2]=i[r+4>>2]-1),(0|A)>=0)break e;if(u=0,G)break e;break t}d=(g=A=i[r+4>>2]-i[r+44>>2]|0)>>31,A=x+i[r+124>>2]|0,u=((t=I+i[r+120>>2]|0)>>>0<I>>>0?A+1|0:A)+d|0,x=(I=t+g|0)>>>0<t>>>0?u+1|0:u,A=c;break o}p=0,A=c+2|0;break l}36!=o[c+2|0]|A-48>>>0>=10?(p=i[M>>2],M=M+4|0,A=c+1|0):(A=o[c+1|0]-48|0,i[12+(t=W-16|0)>>2]=M,A=(A>>>0>1?(A<<2)-4|0:0)+M|0,i[t+8>>2]=A+4,p=i[A>>2],A=c+3|0)}if(h=0,c=0,o[0|A]-48>>>0<10)for(;c=(o[0|A]+C(c,10)|0)-48|0,t=o[A+1|0],A=A+1|0,t-48>>>0<10;);109==(0|(w=o[0|A]))&&(b=0,h=!!(0|p),w=o[A+1|0],e=0,A=A+1|0),A=(t=A)+1|0,g=3,u=h;l:{c:switch(w-65|0){case 39:g=t+2|0,A=(t=104==o[t+1|0])?g:A,g=t?-2:-1;break l;case 43:g=t+2|0,A=(t=108==o[t+1|0])?g:A,g=t?3:1;break l;case 51:case 57:g=1;break l;case 11:g=2;break l;case 41:break l;case 0:case 2:case 4:case 5:case 6:case 18:case 23:case 26:case 32:case 34:case 35:case 36:case 37:case 38:case 40:case 45:case 46:case 47:case 50:case 52:case 55:break c;default:break r}g=0,A=t}u=g,y=(g=3==(47&(t=o[0|A])))?1:u;l:if(91!=(0|(B=g?32|t:t))){c:{if(110!=(0|B)){if(99!=(0|B))break c;c=(0|c)<=1?1:c;break l}fr(p,y,I,x);break o}for(Vt(r,0,0);(0|(t=i[r+4>>2]))==i[r+104>>2]?t=hA(r):(i[r+4>>2]=t+1,t=o[0|t]),32==(0|t)|t-9>>>0<5;);t=i[r+4>>2],(0|(g=i[r+116>>2]))>0|(0|g)>=0&&(t=t-1|0,i[r+4>>2]=t),g=t=t-i[r+44>>2]|0,f=x+i[r+124>>2]|0,x=(u=t>>31)+((t=I+i[r+120>>2]|0)>>>0<I>>>0?f+1|0:f)|0,x=(I=t+g|0)>>>0<t>>>0?x+1|0:x}if(k=c,Vt(r,c,v=c>>31),(0|(t=i[r+4>>2]))==i[r+104>>2]){if((0|hA(r))<0)break n}else i[r+4>>2]=t+1;(0|(t=i[r+116>>2]))>0|(0|t)>=0&&(i[r+4>>2]=i[r+4>>2]-1),t=16;l:{c:{g:{u:{d:switch(B-88|0){default:if((t=B-65|0)>>>0>6|!(1<<t&113))break l;case 9:case 13:case 14:case 15:if(ee(n+8|0,r,y,0),t=i[r+4>>2]-i[r+44>>2]|0,i[r+120>>2]!=(0-t|0)|i[r+124>>2]!=(0-((t>>31)+!!(0|t)|0)|0))break g;break a;case 3:case 11:case 27:if(115==(16|B)){if(kA(n+32|0,-1,257),a[n+32|0]=0,115!=(0|B))break c;a[n+65|0]=0,a[n+46|0]=0,s[n+42>>1]=0,s[n+44>>1]=0;break c}kA(n+32|0,d=94==(0|(g=o[A+1|0])),257),a[n+32|0]=0,t=d?A+2|0:A+1|0;f:{p:{h:{if(45!=(0|(A=o[(d?2:1)+A|0]))){if(93==(0|A))break h;g=94!=(0|g),A=t;break f}g=94!=(0|g),a[n+78|0]=g;break p}g=94!=(0|g),a[n+126|0]=g}A=t+1|0}for(;;){if(45==(0|(t=o[0|A]))){if(t=45,!(!(d=o[A+1|0])|93==(0|d))){if(u=A+1|0,d>>>0<=(A=o[A-1|0])>>>0)t=d;else for(;a[(A=A+1|0)+(n+32|0)|0]=g,(t=o[0|u])>>>0>A>>>0;);A=u}}else{if(!t)break n;if(93==(0|t))break c}a[33+(t+n|0)|0]=g,A=A+1|0}case 23:t=8;break u;case 12:case 29:t=10;break u;case 1:case 2:case 4:case 5:case 6:case 7:case 8:case 10:case 16:case 18:case 19:case 20:case 21:case 22:case 25:case 26:case 28:case 30:case 31:break l;case 0:case 24:case 32:break u;case 17:}t=0}d=0,f=0,g=0,u=0,w=0,W=E=W-16|0;u:if(1!=(0|t)&t>>>0<=36){for(;(0|(c=i[r+4>>2]))==i[r+104>>2]?c=hA(r):(i[r+4>>2]=c+1,c=o[0|c]),32==(0|c)|c-9>>>0<5;);d:{f:switch(c-43|0){case 0:case 2:break f;default:break d}w=45==(0|c)?-1:0,(0|(c=i[r+4>>2]))==i[r+104>>2]?c=hA(r):(i[r+4>>2]=c+1,c=o[0|c])}d:{f:{p:{h:{if(!(!!(0|t)&16!=(0|t)|48!=(0|c))){if((0|(c=i[r+4>>2]))==i[r+104>>2]?c=hA(r):(i[r+4>>2]=c+1,c=o[0|c]),88==(-33&c)){if(t=16,(0|(c=i[r+4>>2]))==i[r+104>>2]?c=hA(r):(i[r+4>>2]=c+1,c=o[0|c]),o[c+121329|0]<16)break p;(0|(t=i[r+116>>2]))>0|(0|t)>=0&&(i[r+4>>2]=i[r+4>>2]-1),Vt(r,0,0);break u}if(t)break h;t=8;break p}if(!((t=t||10)>>>0>o[c+121329|0])){(0|(t=i[r+116>>2]))>0|(0|t)>=0&&(i[r+4>>2]=i[r+4>>2]-1),Vt(r,0,0),i[56798]=28;break u}}if(10==(0|t)){if((g=c-48|0)>>>0<=9){for(t=0;u=(t=C(t,10)+g|0)>>>0<429496729,(0|(c=i[r+4>>2]))==i[r+104>>2]?c=hA(r):(i[r+4>>2]=c+1,c=o[0|c]),u&(g=c-48|0)>>>0<=9;);d=t}h:if(!(g>>>0>9)){for(t=rr(d,0,10,0),u=Z;;){if(f=u,u=429496729==(0|(f=(d=t+g|0)>>>0<g>>>0?f+1|0:f))&d>>>0>=2576980378|f>>>0>429496729,(0|(t=i[r+4>>2]))==i[r+104>>2]?c=hA(r):(i[r+4>>2]=t+1,c=o[0|t]),u|(g=c-48|0)>>>0>9)break h;if(t=rr(d,f,10,0),!(-1==(0|(u=Z))&~g>>>0>=t>>>0|-1!=(0|u)))break}t=10;break f}if(t=10,g>>>0<=9)break f;break d}}if(t-1&t){if((u=o[c+121329|0])>>>0<t>>>0){for(;d=(g=C(t,g)+u|0)>>>0<119304647,(0|(c=i[r+4>>2]))==i[r+104>>2]?c=hA(r):(i[r+4>>2]=c+1,c=o[0|c]),d&(u=o[c+121329|0])>>>0<t>>>0;);d=g}if(t>>>0<=u>>>0)break f;for(;;){if(g=rr(d,f,t,0),-1==(0|(k=Z))&~(u&=255)>>>0<g>>>0)break f;if(f=k,f=(d=g+u|0)>>>0<u>>>0?f+1|0:f,(0|(c=i[r+4>>2]))==i[r+104>>2]?c=hA(r):(i[r+4>>2]=c+1,c=o[0|c]),t>>>0<=(u=o[c+121329|0])>>>0)break f;if(tt(E,t,0,0,0,d,f,0,0),i[E+8>>2]|i[E+12>>2])break}}else{if(k=a[84400+(C(t,23)>>>5&7)|0],(g=o[c+121329|0])>>>0<t>>>0){for(;d=(u=u<<k|g)>>>0<134217728,(0|(c=i[r+4>>2]))==i[r+104>>2]?c=hA(r):(i[r+4>>2]=c+1,c=o[0|c]),d&(g=o[c+121329|0])>>>0<t>>>0;);d=u}if(!(t>>>0<=g>>>0||(v=31&k,(63&k)>>>0>=32?(u=0,v=-1>>>v|0):v=(u=-1>>>v|0)|(1<<v)-1<<32-v,!u&d>>>0>v>>>0)))for(;;){if(D=255&g,g=d,c=31&k,(63&k)>>>0>=32?(f=g<<c,c=0):(f=(1<<c)-1&g>>>32-c|f<<c,c=g<<c),d=D|c,(0|(c=i[r+4>>2]))==i[r+104>>2]?c=hA(r):(i[r+4>>2]=c+1,c=o[0|c]),t>>>0<=(g=o[c+121329|0])>>>0)break f;if(!((0|u)==(0|f)&d>>>0<=v>>>0|u>>>0>f>>>0))break}}}if(!(o[c+121329|0]>=t>>>0)){for(;(0|(c=i[r+4>>2]))==i[r+104>>2]?c=hA(r):(i[r+4>>2]=c+1,c=o[0|c]),o[c+121329|0]<t>>>0;);i[56798]=68,w=0,d=-1,f=-1}}(0|(t=i[r+116>>2]))>0|(0|t)>=0&&(i[r+4>>2]=i[r+4>>2]-1),d=(t=d^w)-w|0,f=((c=w>>31)^f)-((t>>>0<w>>>0)+c|0)|0}else i[56798]=28;if(W=E+16|0,t=i[r+4>>2]-i[r+44>>2]|0,i[r+120>>2]==(0-t|0)&i[r+124>>2]==(0-((t>>31)+!!(0|t)|0)|0))break a;if(!(!p|112!=(0|B))){i[p>>2]=d;break l}fr(p,y,d,f);break l}if(!p)break l;c=i[n+16>>2],t=i[n+20>>2],g=i[n+8>>2],h=i[n+12>>2];g:switch(0|y){case 0:W=f=W-32|0;u:if(0|(u=(d=2147483647&t)-1065418752|0)>>>0<(k=d-1082064896|0)>>>0){if(d=(33554431&t)<<7|c>>>25,k=u=0,!(!u&16777216==(0|(c&=33554431))?!(g|h):!u&c>>>0<16777216)){u=d+1073741825|0;break u}if(u=d+1073741824|0,16777216^c|g|h|k)break u;u=(1&d)+u|0}else(!c&2147418112==(0|d)?!(g|h):d>>>0<2147418112)?(u=2139095040,d>>>0>1082064895||(u=0,(d=d>>>16|0)>>>0<16145||(WA(f+16|0,g,h,c,u=65535&t|65536,d-16129|0),YA(f,g,h,c,u,16257-d|0),c=i[f+8>>2],u=(33554431&i[f+12>>2])<<7|c>>>25,d=i[f>>2]|!!(i[f+16>>2]|i[f+24>>2]|i[f+20>>2]|i[f+28>>2]),h=i[f+4>>2],(!(g=0)&16777216==(0|(c&=33554431))?!(d|h):!g&c>>>0<16777216)?16777216^c|d|g|h||(u=(1&u)+u|0):u=u+1|0))):u=4194303&((33554431&t)<<7|c>>>25)|2143289344;W=f+32|0,i[p>>2]=-2147483648&t|u;break l;case 1:m[p>>3]=tA(g,h,c,t);break l;case 2:break g;default:break l}i[p>>2]=g,i[p+4>>2]=h,i[p+8>>2]=c,i[p+12>>2]=t;break l}g=(E=99!=(0|B))?31:c+1|0;c:if(1!=(0|y)){if(h){if(c=0,!(t=se(g)))break s;for(;;){for(e=t;;){if((0|(t=i[r+4>>2]))==i[r+104>>2]?t=hA(r):(i[r+4>>2]=t+1,t=o[0|t]),!o[33+(t+n|0)|0]){g=0,b=e;break c}if(a[e+c|0]=t,(0|g)==(0|(c=c+1|0)))break}if(u=1,!(t=Oe(e,g=g<<1|1)))break}b=e,e=0;break r}if(c=0,p)for(;;){if((0|(e=i[r+4>>2]))==i[r+104>>2]?e=hA(r):(i[r+4>>2]=e+1,e=o[0|e]),!o[33+(e+n|0)|0]){g=0,b=e=p;break c}a[c+p|0]=e,c=c+1|0}for(;(0|(e=i[r+4>>2]))==i[r+104>>2]?e=hA(r):(i[r+4>>2]=e+1,e=o[0|e]),o[33+(e+n|0)|0];);e=0,b=0,g=0}else{if(t=p,h&&!(t=se(g<<2)))break s;for(i[n+296>>2]=0,i[n+300>>2]=0,c=0;;){e=t;g:{for(;;){if((0|(t=i[r+4>>2]))==i[r+104>>2]?t=hA(r):(i[r+4>>2]=t+1,t=o[0|t]),!o[33+(t+n|0)|0])break g;a[n+27|0]=t,d=n+28|0,t=i[(u=(t=n+296|0)||228604)>>2];u:{d:{f:{p:{if(!(b=n+27|0)){if(t)break p;t=0;break u}if(!t){if((0|(f=(t=o[0|b])<<24>>24))>=0){d&&(i[d>>2]=t),t=!!(0|f);break u}if(!i[i[56841]>>2]){if(t=1,!d)break f;i[d>>2]=57343&f,t=1;break u}if((t=t-194|0)>>>0>50)break p;t=i[124752+(t<<2)>>2];break d}if(w=1,!(((y=(f=o[0|b])>>>3|0)-16|(t>>26)+y)>>>0>7))for(;;){if(w=w-1|0,(0|(t=f-128|t<<6))>=0){i[u>>2]=0,d&&(i[d>>2]=t),t=1-w|0;break u}if(!w)break d;if(128!=(192&(f=o[0|(b=b+1|0)])))break}}i[u>>2]=0,i[56798]=25,t=-1}break u}i[u>>2]=t,t=-2}if(-2!=(0|t)){if(b=0,-1==(0|t))break n;if(e&&(i[(c<<2)+e>>2]=i[n+28>>2],c=c+1|0),!(!h|(0|c)!=(0|g)))break}}if(u=1,t=Oe(e,(g=g<<1|1)<<2))continue;break r}break}if(b=0,g=e,n+296|0&&i[n+296>>2])break n}if(t=i[r+4>>2],(0|(d=i[r+116>>2]))>0|(0|d)>=0&&(t=t-1|0,i[r+4>>2]=t),t=(d=t-i[r+44>>2]|0)+i[r+120>>2]|0,f=i[r+124>>2]+(d>>31)|0,!((f=t>>>0<d>>>0?f+1|0:f)|t)|!(E|(0|t)==(0|k)&(0|f)==(0|v)))break i;h&&(i[p>>2]=e),99!=(0|B)&&(g&&(i[(c<<2)+g>>2]=0),b?a[c+b|0]=0:b=0),e=g}c=t=i[r+4>>2]-i[r+44>>2]|0,u=x+i[r+124>>2]|0,x=(g=t>>31)+((t=I+i[r+120>>2]|0)>>>0<I>>>0?u+1|0:u)|0,x=(I=t+c|0)>>>0<t>>>0?x+1|0:x,G=!!(0|p)+G|0}if(c=A+1|0,A=o[A+1|0])continue;break e}break}e=g;break a}u=1,b=0,e=0;break r}u=h;break A}u=h}if(G)break A}G=-1}u&&(ye(b),ye(e))}return W=n+304|0,W=r+144|0,W=l+16|0,G}function se(e){var A,t=0,r=0,n=0,a=0,s=0,l=0,c=0,g=0,u=0,d=0;W=A=W-16|0;e:{A:{t:{r:{n:{a:{s:{i:{o:{if((e|=0)>>>0<=244){if(3&(t=(l=i[57152])>>>(r=(c=e>>>0<11?16:e+11&-8)>>>3|0)|0)){t=228648+(e=(r=r+(1&~t)|0)<<3)|0,n=i[e+228656>>2],(0|t)!=(0|(e=i[n+8>>2]))?(i[e+12>>2]=t,i[t+8>>2]=e):i[57152]=Zr(-2,r)&l,e=n+8|0,t=r<<3,i[n+4>>2]=3|t,i[4+(t=t+n|0)>>2]=1|i[t+4>>2];break e}if((d=i[57154])>>>0>=c>>>0)break o;if(t){t=228648+(e=(n=un(0-(e=(0-(e=2<<r)|e)&t<<r)&e))<<3)|0,a=i[e+228656>>2],(0|t)!=(0|(e=i[a+8>>2]))?(i[e+12>>2]=t,i[t+8>>2]=e):(l=Zr(-2,n)&l,i[57152]=l),i[a+4>>2]=3|c,n=(e=n<<3)-c|0,i[4+(r=a+c|0)>>2]=1|n,i[e+a>>2]=n,d&&(t=228648+(-8&d)|0,s=i[57157],(e=1<<(d>>>3))&l?e=i[t+8>>2]:(i[57152]=e|l,e=t),i[t+8>>2]=s,i[e+12>>2]=s,i[s+12>>2]=t,i[s+8>>2]=e),e=a+8|0,i[57157]=r,i[57154]=n;break e}if(!(u=i[57153]))break o;for(r=i[228912+(un(0-u&u)<<2)>>2],s=(-8&i[r+4>>2])-c|0,t=r;(e=i[t+16>>2])||(e=i[t+20>>2]);)s=(n=(t=(-8&i[e+4>>2])-c|0)>>>0<s>>>0)?t:s,r=n?e:r,t=e;if(g=i[r+24>>2],(0|(n=i[r+12>>2]))!=(0|r)){e=i[r+8>>2],i[e+12>>2]=n,i[n+8>>2]=e;break A}if(!(e=i[(t=r+20|0)>>2])){if(!(e=i[r+16>>2]))break i;t=r+16|0}for(;a=t,n=e,(e=i[(t=e+20|0)>>2])||(t=n+16|0,e=i[n+16>>2]););i[a>>2]=0;break A}if(c=-1,!(e>>>0>4294967231)&&(c=-8&(e=e+11|0),u=i[57153])){s=0-c|0,l=0,c>>>0<256||(l=31,c>>>0>16777215||(l=62+((c>>>38-(e=w(e>>>8|0))&1)-(e<<1)|0)|0));l:{c:{if(t=i[228912+(l<<2)>>2])for(e=0,r=c<<(31!=(0|l)?25-(l>>>1|0):0);;){if(!((a=(-8&i[t+4>>2])-c|0)>>>0>=s>>>0||(n=t,s=a,a))){s=0,e=t;break c}if(a=i[t+20>>2],t=i[16+((r>>>29&4)+t|0)>>2],e=a?(0|a)==(0|t)?e:a:e,r<<=1,!t)break}else e=0;if(!(e|n)){if(n=0,!(e=(0-(e=2<<l)|e)&u))break o;e=i[228912+(un(e&0-e)<<2)>>2]}if(!e)break l}for(;s=(r=(t=(-8&i[e+4>>2])-c|0)>>>0<s>>>0)?t:s,n=r?e:n,e=(t=i[e+16>>2])||i[e+20>>2];);}if(!(!n|i[57154]-c>>>0<=s>>>0)){if(l=i[n+24>>2],(0|n)!=(0|(r=i[n+12>>2]))){e=i[n+8>>2],i[e+12>>2]=r,i[r+8>>2]=e;break t}if(!(e=i[(t=n+20|0)>>2])){if(!(e=i[n+16>>2]))break s;t=n+16|0}for(;a=t,r=e,(e=i[(t=e+20|0)>>2])||(t=r+16|0,e=i[r+16>>2]););i[a>>2]=0;break t}}}if((e=i[57154])>>>0>=c>>>0){n=i[57157],(t=e-c|0)>>>0>=16?(i[4+(r=n+c|0)>>2]=1|t,i[e+n>>2]=t,i[n+4>>2]=3|c):(i[n+4>>2]=3|e,i[4+(e=e+n|0)>>2]=1|i[e+4>>2],r=0,t=0),i[57154]=t,i[57157]=r,e=n+8|0;break e}if((g=i[57155])>>>0>c>>>0){t=g-c|0,i[57155]=t,e=(r=i[57158])+c|0,i[57158]=e,i[e+4>>2]=1|t,i[r+4>>2]=3|c,e=r+8|0;break e}if(e=0,u=c+47|0,i[57270]?r=i[57272]:(i[57273]=-1,i[57274]=-1,i[57271]=4096,i[57272]=4096,i[57270]=A+12&-16^1431655768,i[57275]=0,i[57263]=0,r=4096),(t=(a=u+r|0)&(s=0-r|0))>>>0<=c>>>0)break e;if((n=i[57262])&&n>>>0<(l=(r=i[57260])+t|0)>>>0|r>>>0>=l>>>0)break e;o:{if(!(4&o[229052])){l:{c:{g:{u:{if(n=i[57158])for(e=229056;;){if((r=i[e>>2])>>>0<=n>>>0&n>>>0<r+i[e+4>>2]>>>0)break u;if(!(e=i[e+8>>2]))break}if(-1==(0|(r=Ir(0))))break l;if(l=t,(e=(n=i[57271])-1|0)&r&&(l=(t-r|0)+(e+r&0-n)|0),l>>>0<=c>>>0)break l;if((n=i[57262])&&n>>>0<(s=(e=i[57260])+l|0)>>>0|e>>>0>=s>>>0)break l;if((0|r)!=(0|(e=Ir(l))))break g;break o}if((0|(r=Ir(l=s&a-g)))==(i[e>>2]+i[e+4>>2]|0))break c;e=r}if(-1==(0|e))break l;if(c+48>>>0<=l>>>0){r=e;break o}if(-1==(0|Ir(r=(r=i[57272])+(u-l|0)&0-r)))break l;l=r+l|0,r=e;break o}if(-1!=(0|r))break o}i[57263]=4|i[57263]}if(-1==(0|(r=Ir(t)))|-1==(0|(e=Ir(0)))|e>>>0<=r>>>0)break r;if((l=e-r|0)>>>0<=c+40>>>0)break r}e=i[57260]+l|0,i[57260]=e,e>>>0>h[57261]&&(i[57261]=e);o:{if(a=i[57158]){for(e=229056;;){if(((n=i[e>>2])+(t=i[e+4>>2])|0)==(0|r))break o;if(!(e=i[e+8>>2]))break}break a}for((e=i[57156])>>>0<=r>>>0&&e||(i[57156]=r),e=0,i[57265]=l,i[57264]=r,i[57160]=-1,i[57161]=i[57270],i[57267]=0;t=228648+(n=e<<3)|0,i[n+228656>>2]=t,i[n+228660>>2]=t,32!=(0|(e=e+1|0)););t=(n=l-40|0)-(e=r+8&7?-8-r&7:0)|0,i[57155]=t,e=e+r|0,i[57158]=e,i[e+4>>2]=1|t,i[4+(r+n|0)>>2]=40,i[57159]=i[57274];break n}if(8&o[e+12|0]|n>>>0>a>>>0|r>>>0<=a>>>0)break a;i[e+4>>2]=t+l,r=(e=a+8&7?-8-a&7:0)+a|0,i[57158]=r,e=(t=i[57155]+l|0)-e|0,i[57155]=e,i[r+4>>2]=1|e,i[4+(t+a|0)>>2]=40,i[57159]=i[57274];break n}n=0;break A}r=0;break t}h[57156]>r>>>0&&(i[57156]=r),t=r+l|0,e=229056;a:{s:{i:{o:{l:{c:{for(;;){if((0|t)!=i[e>>2]){if(e=i[e+8>>2])continue;break c}break}if(!(8&o[e+12|0]))break l}for(e=229056;;){if((t=i[e>>2])>>>0<=a>>>0&&(s=t+i[e+4>>2]|0)>>>0>a>>>0)break o;e=i[e+8>>2]}}if(i[e>>2]=r,i[e+4>>2]=i[e+4>>2]+l,i[4+(u=(r+8&7?-8-r&7:0)+r|0)>>2]=3|c,e=(l=t+(t+8&7?-8-t&7:0)|0)-(g=c+u|0)|0,(0|a)==(0|l)){i[57158]=g,e=i[57155]+e|0,i[57155]=e,i[g+4>>2]=1|e;break s}if(i[57157]==(0|l)){i[57157]=g,e=i[57154]+e|0,i[57154]=e,i[g+4>>2]=1|e,i[e+g>>2]=e;break s}if(1==(3&(s=i[l+4>>2]))){a=-8&s;l:if(s>>>0<=255){if(n=i[l+8>>2],t=s>>>3|0,(0|(r=i[l+12>>2]))==(0|n)){i[57152]=i[57152]&Zr(-2,t);break l}i[n+12>>2]=r,i[r+8>>2]=n}else{if(c=i[l+24>>2],(0|l)==(0|(r=i[l+12>>2])))if((t=i[(s=l+20|0)>>2])||(t=i[(s=l+16|0)>>2])){for(;n=s,(t=i[(s=(r=t)+20|0)>>2])||(s=r+16|0,t=i[r+16>>2]););i[n>>2]=0}else r=0;else t=i[l+8>>2],i[t+12>>2]=r,i[r+8>>2]=t;if(c){n=i[l+28>>2];c:{if(i[(t=228912+(n<<2)|0)>>2]==(0|l)){if(i[t>>2]=r,r)break c;i[57153]=i[57153]&Zr(-2,n);break l}if(i[c+(i[c+16>>2]==(0|l)?16:20)>>2]=r,!r)break l}i[r+24>>2]=c,(t=i[l+16>>2])&&(i[r+16>>2]=t,i[t+24>>2]=r),(t=i[l+20>>2])&&(i[r+20>>2]=t,i[t+24>>2]=r)}}s=i[4+(l=a+l|0)>>2],e=e+a|0}if(i[l+4>>2]=-2&s,i[g+4>>2]=1|e,i[e+g>>2]=e,e>>>0<=255){t=228648+(-8&e)|0,(r=i[57152])&(e=1<<(e>>>3))?e=i[t+8>>2]:(i[57152]=e|r,e=t),i[t+8>>2]=g,i[e+12>>2]=g,i[g+12>>2]=t,i[g+8>>2]=e;break s}if(s=31,e>>>0<=16777215&&(s=62+((e>>>38-(t=w(e>>>8|0))&1)-(t<<1)|0)|0),i[g+28>>2]=s,i[g+16>>2]=0,i[g+20>>2]=0,t=228912+(s<<2)|0,(n=i[57153])&(r=1<<s)){for(s=e<<(31!=(0|s)?25-(s>>>1|0):0),r=i[t>>2];;){if(t=r,(-8&i[r+4>>2])==(0|e))break i;if(r=s>>>29|0,s<<=1,!(r=i[16+(n=(4&r)+t|0)>>2]))break}i[n+16>>2]=g}else i[57153]=r|n,i[t>>2]=g;i[g+24>>2]=t,i[g+12>>2]=g,i[g+8>>2]=g;break s}for(t=(n=l-40|0)-(e=r+8&7?-8-r&7:0)|0,i[57155]=t,e=e+r|0,i[57158]=e,i[e+4>>2]=1|t,i[4+(r+n|0)>>2]=40,i[57159]=i[57274],i[(n=(e=(s+(s-39&7?39-s&7:0)|0)-47|0)>>>0<a+16>>>0?a:e)+4>>2]=27,e=i[57267],i[n+16>>2]=i[57266],i[n+20>>2]=e,e=i[57265],i[n+8>>2]=i[57264],i[n+12>>2]=e,i[57266]=n+8,i[57265]=l,i[57264]=r,i[57267]=0,e=n+24|0;i[e+4>>2]=7,t=e+8|0,e=e+4|0,t>>>0<s>>>0;);if((0|n)==(0|a))break n;if(i[n+4>>2]=-2&i[n+4>>2],s=n-a|0,i[a+4>>2]=1|s,i[n>>2]=s,s>>>0<=255){t=228648+(-8&s)|0,(r=i[57152])&(e=1<<(s>>>3))?e=i[t+8>>2]:(i[57152]=e|r,e=t),i[t+8>>2]=a,i[e+12>>2]=a,i[a+12>>2]=t,i[a+8>>2]=e;break n}if(e=31,s>>>0<=16777215&&(e=62+((s>>>38-(e=w(s>>>8|0))&1)-(e<<1)|0)|0),i[a+28>>2]=e,i[a+16>>2]=0,i[a+20>>2]=0,t=228912+(e<<2)|0,(n=i[57153])&(r=1<<e)){for(e=s<<(31!=(0|e)?25-(e>>>1|0):0),n=i[t>>2];;){if((0|s)==(-8&i[(t=n)+4>>2]))break a;if(r=e>>>29|0,e<<=1,!(n=i[16+(r=(4&r)+t|0)>>2]))break}i[r+16>>2]=a}else i[57153]=r|n,i[t>>2]=a;i[a+24>>2]=t,i[a+12>>2]=a,i[a+8>>2]=a;break n}e=i[t+8>>2],i[e+12>>2]=g,i[t+8>>2]=g,i[g+24>>2]=0,i[g+12>>2]=t,i[g+8>>2]=e}e=u+8|0;break e}e=i[t+8>>2],i[e+12>>2]=a,i[t+8>>2]=a,i[a+24>>2]=0,i[a+12>>2]=t,i[a+8>>2]=e}if(!((e=i[57155])>>>0<=c>>>0)){t=e-c|0,i[57155]=t,e=(r=i[57158])+c|0,i[57158]=e,i[e+4>>2]=1|t,i[r+4>>2]=3|c,e=r+8|0;break e}}i[56798]=48,e=0;break e}t:if(l){t=i[n+28>>2];r:{if(i[(e=228912+(t<<2)|0)>>2]==(0|n)){if(i[e>>2]=r,r)break r;u=Zr(-2,t)&u,i[57153]=u;break t}if(i[l+(i[l+16>>2]==(0|n)?16:20)>>2]=r,!r)break t}i[r+24>>2]=l,(e=i[n+16>>2])&&(i[r+16>>2]=e,i[e+24>>2]=r),(e=i[n+20>>2])&&(i[r+20>>2]=e,i[e+24>>2]=r)}t:if(s>>>0<=15)e=s+c|0,i[n+4>>2]=3|e,i[4+(e=e+n|0)>>2]=1|i[e+4>>2];else if(i[n+4>>2]=3|c,i[4+(a=n+c|0)>>2]=1|s,i[a+s>>2]=s,s>>>0<=255)t=228648+(-8&s)|0,(r=i[57152])&(e=1<<(s>>>3))?e=i[t+8>>2]:(i[57152]=e|r,e=t),i[t+8>>2]=a,i[e+12>>2]=a,i[a+12>>2]=t,i[a+8>>2]=e;else{e=31,s>>>0<=16777215&&(e=62+((s>>>38-(e=w(s>>>8|0))&1)-(e<<1)|0)|0),i[a+28>>2]=e,i[a+16>>2]=0,i[a+20>>2]=0,t=228912+(e<<2)|0;r:{if((r=1<<e)&u){for(e=s<<(31!=(0|e)?25-(e>>>1|0):0),c=i[t>>2];;){if((-8&i[(t=c)+4>>2])==(0|s))break r;if(r=e>>>29|0,e<<=1,!(c=i[16+(r=(4&r)+t|0)>>2]))break}i[r+16>>2]=a}else i[57153]=r|u,i[t>>2]=a;i[a+24>>2]=t,i[a+12>>2]=a,i[a+8>>2]=a;break t}e=i[t+8>>2],i[e+12>>2]=a,i[t+8>>2]=a,i[a+24>>2]=0,i[a+12>>2]=t,i[a+8>>2]=e}e=n+8|0;break e}A:if(g){t=i[r+28>>2];t:{if(i[(e=228912+(t<<2)|0)>>2]==(0|r)){if(i[e>>2]=n,n)break t;i[57153]=Zr(-2,t)&u;break A}if(i[g+(i[g+16>>2]==(0|r)?16:20)>>2]=n,!n)break A}i[n+24>>2]=g,(e=i[r+16>>2])&&(i[n+16>>2]=e,i[e+24>>2]=n),(e=i[r+20>>2])&&(i[n+20>>2]=e,i[e+24>>2]=n)}s>>>0<=15?(e=s+c|0,i[r+4>>2]=3|e,i[4+(e=e+r|0)>>2]=1|i[e+4>>2]):(i[r+4>>2]=3|c,i[4+(n=r+c|0)>>2]=1|s,i[n+s>>2]=s,d&&(t=228648+(-8&d)|0,a=i[57157],(e=1<<(d>>>3))&l?e=i[t+8>>2]:(i[57152]=e|l,e=t),i[t+8>>2]=a,i[e+12>>2]=a,i[a+12>>2]=t,i[a+8>>2]=e),i[57157]=n,i[57154]=s),e=r+8|0}return W=A+16|0,0|e}function ie(e,A,t,r,n){var s,l=0,c=0,g=0,u=0,f=0,p=0,h=0,m=0,C=0,b=0,I=0,w=0,k=0,x=0,v=0,B=0,y=0;W=s=W-544|0,kA(s+320|0,0,100),kA(s+208|0,0,100),u=t?i[t>>2]:u,C=i[e+12>>2],f=i[36115];e:{A:{t:{r:{for(;;){if(l=(0|(l=o[A+c|0]))>=(0|f)?13:l,a[s+c|0]=l,!l){l=c;break r}if(g=(0|f)<=(0|(g=o[(l=1|c)+A|0]))?13:g,a[l+s|0]=g,!g)break r;if(200==(0|(c=c+2|0)))break}c=198,I=o[s+199|0];break t}if(!l)break A;I=o[s+(c=l-1|0)|0],1!=(0|l)&&(c=l-2|0)}if(v=8&u,i[s+536>>2]=(v>>>3|0?3:7)&u,u=o[s+c|0],f=1,h=(0|(p=Ne(e,s,s+432|0,s+540|0,s+536|0,1)))>=0?p:0,k=o[0|s])for(c=s,l=k;l=i[144464+((255&l)<<2)>>2],2==o[l+11|0]&&(1048576&(l=i[l+4>>2])||(g=(2097152&l)>>>21|0,g|=l=12==o[i[144464+(o[0|(m=c+1|0)]<<2)>>2]+10|0],a[(s+208|0)+f|0]=g,b=i[144464+(o[(l?2:1)+c|0]<<2)>>2],g=o[b+11|0]-10>>>0<4294967289|!(32&o[b+6|0])&2==o[i[144464+(o[(l?3:2)+c|0]<<2)>>2]+11|0]?g:g?2:1,c=l?m:c,a[(s+320|0)+f|0]=g,f=f+1|0)),l=o[0|(c=c+1|0)];);c=t=t?h:p;t:{r:{n:{a:{s:{i:{o:{l:{c:{g:{u:{d:switch(i[e+8>>2]-1|0){case 11:if((0|(t=i[s+540>>2]))<2)break c;if(c=1,h=1&(l=t-1|0),2!=(0|t))break u;f=0;break g;case 8:if((0|(l=i[s+540>>2]))<2)break r;if(f=3&(g=l-1|0),c=1,l-2>>>0>=3)for(h=-4&g,g=0;u=a[0|(l=(s+432|0)+c|0)],a[0|l]=(0|u)<0?4:u,u=a[l+1|0],a[l+1|0]=(0|u)<0?4:u,u=a[l+2|0],a[l+2|0]=(0|u)<0?4:u,u=l,l=a[l+3|0],a[u+3|0]=(0|l)<0?4:l,c=c+4|0,(0|h)!=(0|(g=g+4|0)););if(!f)break r;for(l=0;g=a[0|(u=(s+432|0)+c|0)],a[0|u]=(0|g)<0?4:g,c=c+1|0,(0|f)!=(0|(l=l+1|0)););break r;case 7:if(!o[s+322|0]|a[s+321|0]>0)break r;case 0:if(i[s+536>>2]|i[s+540>>2]<3)break r;if(i[s+536>>2]=2,c=4,t)break t;a[s+434|0]=4;break t;case 1:if(i[s+536>>2])break t;f:{p:{if((0|(f=i[s+540>>2]))>=3){t=f-2|0,i[s+536>>2]=t,c=t;h:if(512&C&&(l=i[144464+(I<<2)>>2],2!=(0|(g=o[l+11|0])))){c=i[l>>2],l=s;m:{C:{if(26977!=(0|(h=i[e+212>>2]))){if(24942!=(0|h))break C;b:switch(c-110|0){case 0:case 5:if(c=t,2==o[i[144464+(u<<2)>>2]+11|0])break h}c=f-1|0;break m}if(115==(0|c)&&(c=t,2==o[i[144464+(u<<2)>>2]+11|0]))break h;c=f-1|0;break m}C:{b:{if(115==(0|c)){if(c=t,8!=(0|(g=o[i[144464+(u<<2)>>2]+11|0])))break b;break h}if(8!=(0|g))break C;g=o[i[144464+(u<<2)>>2]+11|0]}if(c=t,2==(255&g))break h}c=f-1|0}i[l+536>>2]=c}if(524288&C&&(a[(l=f-1|0)+(f=s+208|0)|0]<=a[t+f|0]||(i[s+536>>2]=l,c=l)),o[(s+432|0)+c|0]>1){l=c;break f}if(l=2,t=c-1|0,c>>>0>=2)break p;i[s+536>>2]=c+1;break f}t=1}l=t,i[s+536>>2]=l}if(c=4,a[0|(t=(s+432|0)+l|0)]>=0)break t;if(a[(l=(s+432|0)+l|0)-1|0]>=4&a[l+1|0]>3)break t;a[0|t]=4;break t;case 2:if(i[s+536>>2])break t;for(t=(c=i[s+540>>2])-1|0,t&=t>>31;;){if((0|(c=c-1|0))<=0)break n;if(!(a[0|(l=(s+432|0)+c|0)]>=0))break}i[s+536>>2]=c,c=4,a[0|l]=4;break t;case 3:if(i[s+536>>2])break r;if(l=(0|(c=i[s+540>>2]-3|0))<=1?1:c,i[s+536>>2]=l,c=4,t)break t;a[l+(s+432|0)|0]=4;break t;case 4:if(i[s+536>>2])break t;if(l=(t=i[s+540>>2])-3|0,i[s+536>>2]=l,(0|t)<=15){f:{p:switch(o[i[144464+(I<<2)>>2]+11|0]-2|0){case 0:l=a[t+94176|0];break f;case 2:l=a[t+94192|0];break f}l=a[t+94160|0]}i[s+536>>2]=l}c=4,a[(s+432|0)+l|0]=4;break t;case 5:if(i[s+536>>2])break t;if(f=-1,g=0,!((0|(t=(l=i[s+540>>2])-1|0))<2)){if(c=1,m=1&l,3!=(0|l))for(b=(-2&l)-4|0,l=0;a[(s+432|0)+c|0]<0&&(g=(u=(0|(h=a[(s+320|0)+c|0]))<(0|f))?g:c,f=u?f:h),a[(u=c+1|0)+(s+432|0)|0]<0&&(g=(h=(0|(x=a[u+(s+320|0)|0]))<(0|f))?g:u,f=h?f:x),c=c+2|0,u=(0|l)!=(0|b),l=l+2|0,u;);!m|a[(s+432|0)+c|0]>=0||(f=(l=(0|(u=a[(s+320|0)+c|0]))<(0|f))?f:u,g=l?g:c)}i[s+536>>2]=g,2!=o[t+(s+320|0)|0]|(0|f)>1?(0|f)>0||(g=1,i[s+536>>2]=1):(i[s+536>>2]=t,g=t),c=4,a[(s+432|0)+g|0]=4;break t;case 14:break a;case 12:break s;case 6:break d;default:break t}if(i[s+536>>2])break t;f=(t=i[s+540>>2])-1|0,i[s+536>>2]=f;d:if(!((0|t)<2))for(c=1;;){if(1==o[(s+432|0)+c|0]){f=c-1|0,i[s+536>>2]=f;break d}if((0|t)==(0|(c=c+1|0)))break}c=4,a[(s+432|0)+f|0]=4;break t}for(m=-2&l,f=0,g=0;l=o[0|(b=(u=s+432|0)+c|0)],w=b,x=a[(b=s+208|0)+c|0]>0,a[0|w]=x||4==(0|l)?3:l,B=4==(0|(u=o[0|(w=(l=c+1|0)+u|0)]))?3:u,u=a[l+b|0]>0,a[0|w]=u?3:B,f=u?l:x?c:f,c=c+2|0,(0|m)!=(0|(g=g+2|0)););}if(h&&(u=4==(0|(l=o[0|(g=(s+432|0)+c|0)]))?3:l,l=a[(s+208|0)+c|0]>0,a[0|g]=l?3:u,f=l?c:f),l=i[s+536>>2])break i;if((0|f)>0){i[s+536>>2]=f,l=f;break i}if((0|t)<6)break l;l=t-3|0;break o}if(l=i[s+536>>2])break i}l=t-1|0}i[s+536>>2]=l}c=4,a[(s+432|0)+l|0]=4;break t}if(i[s+536>>2])break t;l=1,i[s+536>>2]=1,o[s+209|0]|i[s+540>>2]<3|a[s+210|0]<=0||(l=2,i[s+536>>2]=2),c=4,a[s+432|l]=4;break t}if(i[s+536>>2])break r;if((0|(l=i[s+540>>2]))<3)break r;if(kA(s+432|1,0,l-1|0),i[s+536>>2]=2,t||(a[s+434|0]=4),c=4,l>>>0<4)break t;a[431+(l+s|0)|0]=3;break t}i[s+536>>2]=t,c=4;break t}c=t}!(256&C)|2&n||(0|(t=i[s+540>>2]))<3|(0|p)>2||4!=o[0|(l=(t=t+(s+432|0)|0)-1|0)]|2!=o[i[144464+(I<<2)>>2]+11|0]||(a[0|l]=1,a[t-2|0]=4);t:{r:{if(v)p=i[s+540>>2];else{if(t=a[s+433|0],!(!(4096&C)|3!=(0|(p=i[s+540>>2])))){if(4==(0|t)){a[s+434|0]=3;break r}if(4==o[s+434|0]){a[s+433|0]=3;break r}}if(!(!(8192&C)|(0|t)>=0|(0|p)<4|a[s+434|0]<4)){a[s+433|0]=3;break r}}if(g=0,(0|p)<2)break t}for(f=(0|c)<4?4:3,b=128&C,x=64&C,w=32&C,h=p-1|0,B=16&C,y=!(32768&C),I=0,u=0,c=1;;){r:{n:if((0|(l=a[0|(m=(s+432|0)+c|0)]))>=0)g=f;else{g=3;a:{s:if(!(!(!B|(0|f)>3)&(0|c)==(0|h))){if(!(1&(I|y)))break a;if(!(a[431+(s+c|0)|0]>1)){if((0|(l=a[(t=c+1|0)+(s+432|0)|0]))>=2){if(4!=(0|f))break s;if(g=4,l>>>0>=3)break s}else if(!(!w|3!=(0|f))){f=3;break r}if(!x|c>>>0<2)break a;if(g=o[(s+320|0)+c|0])break a;if((0|h)>(0|(l=c))){for(;;){if(a[(s+320|0)+l|0]>0)break r;if((0|h)==(0|(l=l+1|0)))break}if(g)break a}if(a[t+(s+320|0)|0]<=0)break a;break r}g=f}l=o[0|m];break n}a[0|m]=f,I=1,g=3,l=f}n:{if(l<<24>>24>=4){if(t=u||c,!u|!b)break n;a[0|m]=3}f=g;break r}f=g,u=t}if(g=1,(0|p)==(0|(c=c+1|0)))break}}if(r=!v|(0|r)>=0?r:i[((0|p)<3?16:20)+e>>2],f=0,l=0,g){if(I=3&(t=p-1|0),g=0,p-2>>>0<3)c=1;else for(v=-4&t,c=1,u=0;l=(t=(0|(l=(m=(0|(l=(h=(0|(l=(p=(0|(h=a[(t=s+432|0)+c|0]))<(0|l))?l:h))>(0|(m=a[(b=c+1|0)+t|0])))?l:m))>(0|(w=a[(x=c+2|0)+t|0])))?l:w))>(0|(B=a[(w=c+3|0)+t|0])))?l:B,f=t?m?h?p?f:c:b:x:w,c=c+4|0,(0|v)!=(0|(u=u+4|0)););if(I)for(;l=(t=(0|(u=a[(s+432|0)+c|0]))<(0|l))?l:u,f=t?f:c,c=c+1|0,(0|I)!=(0|(g=g+1|0)););}if((0|r)<0?r=l:(0|r)<=(0|l)&(0|l)>4||(a[(s+432|0)+f|0]=r),I=A+197|0,p=1,!(1&n)&&(t=i[144464+(k<<2)>>2])){if(l=s,!(1!=(0|(g=o[t+11|0]))&15!=(0|k)))for(;t=o[0|(l=l+1|0)],1==(0|(g=o[i[144464+(t<<2)>>2]+11|0]))|15==(0|t););!(48&(t=i[e+4>>2]))|2!=(0|g)||(a[0|A]=(32&t)>>>5|0&&a[s+433|0]>3?11:23,A=A+1|0)}t:if(!(A>>>0>=I>>>0))for(h=65536&C,m=2&C,v=4&C,c=s;;){if(!(l=o[0|c]))break t;if(n=c,c=c+1|0,t=i[144464+(l<<2)>>2]){r:{n:{a:switch(o[t+11|0]){case 0:i[e+8200>>2]=0;break r;case 2:if(!(16&o[t+6|0]))break n}if(20!=o[0|c])break r}if((0|(k=i[s+540>>2]))<(0|p))break e;u=a[0|(C=(s+432|0)+p|0)],i[e+8200>>2]=u;n:{a:{if(!((0|(t=u))>1)){if(g=k-1|0,!(!v|(0|p)<2|(0|r)<2)&&(t=0,(0|g)==(0|p)))break a;if(t=1,!(1==(0|p)|m|(k-2|0)==(0|p)&a[g+(s+432|0)|0]<2|(0|g)==(0|p)||a[431+(s+p|0)|0]>=0&&(t=u,h))){t=0,a[0|C]=0;break a}}if(t&&(0|t)<2)break n}a[0|A]=o[t+94151|0],A=A+1|0,u=a[0|C]}g=(0|r)>(0|u),12==o[0|c]&&1&(k=i[e+28>>2])&&(c=(16&k?(0|f)!=(0|p):(0|t)<4)?n+2|0:c),r=g?r:u,p=p+1|0}if(1!=(0|l)&&(a[0|A]=l,A=A+1|0),!(A>>>0<I>>>0))break}}a[0|A]=0}return void(W=s+544|0)}D(86136,86634,1353,94208),d()}function oe(e,A,t,r,n,a,s,o,l){var c,g=0,u=0,d=0,f=0,p=0,m=0,C=0,b=0,I=0,k=0,x=0,v=0,B=0,y=0,E=0,M=0,G=0,D=0,Q=0,T=0,P=0,z=0,F=0,S=0,N=0,O=0,L=0,Y=0,H=0,R=0;W=c=W-336|0,f=o,m=65535&l,p=r,d=65535&n,x=-2147483648&(n^l);e:{if(!((I=l>>>16&32767)-32767>>>0>4294934529&(C=n>>>16&32767)-32767>>>0>=4294934530)){if(!(!r&2147418112==(0|(g=2147483647&n))?!(A|t):g>>>0<2147418112)){b=r,x=32768|n;break e}if(!(!o&2147418112==(0|(n=2147483647&l))?!(a|s):n>>>0<2147418112)){b=o,x=32768|l,A=a,t=s;break e}if(!(A|r|2147418112^g|t)){if(!(a|o|2147418112^n|s)){A=0,t=0,x=2147450880;break e}x|=2147418112,A=0,t=0;break e}if(!(a|o|2147418112^n|s)){A=0,t=0;break e}if(!(A|r|t|g)){b=(A=!(a|o|n|s))?0:b,x=A?2147450880:x,A=0,t=0;break e}if(!(a|o|n|s)){x|=2147418112,A=0,t=0;break e}65535==(0|g)|g>>>0<65535&&(l=r=!(d|p),g=r?A:p,o=r<<=6,WA(c+320|0,A,t,p,d,(r=r+(32==(0|(l=w(l?t:d)))?w(g)+32|0:l)|0)-15|0),v=16-r|0,p=i[c+328>>2],d=i[c+332>>2],t=i[c+324>>2],A=i[c+320>>2]),n>>>0>65535||(o=r=!(f|m),l=r?a:f,n=r<<=6,WA(c+304|0,a,s,f,m,(r=r+(32==(0|(o=w(o?s:m)))?w(l)+32|0:o)|0)-15|0),v=(r+v|0)-16|0,f=i[c+312>>2],m=i[c+316>>2],a=i[c+304>>2],s=i[c+308>>2])}if(G=n=65536|m,D=f,g=n<<15|(r=f)>>>17,tt(c+288|0,r=n=r<<15|s>>>17,o=g,0,0,l=0-r|0,g=1963258675-(g+!!(0|r)|0)|0,0,0),tt(c+272|0,0-(r=i[c+296>>2])|0,0-(i[c+300>>2]+!!(0|r)|0)|0,0,0,l,g,0,0),tt(c+256|0,l=(r=i[c+280>>2])<<1|i[c+276>>2]>>>31,r=i[c+284>>2]<<1|r>>>31,0,0,n,o,0,0),tt(c+240|0,l,r,0,0,0-(g=i[c+264>>2])|0,0-(i[c+268>>2]+!!(0|g)|0)|0,0,0),tt(c+224|0,g=(l=i[c+248>>2])<<1|i[c+244>>2]>>>31,r=i[c+252>>2]<<1|l>>>31,0,0,n,o,0,0),tt(c+208|0,g,r,0,0,0-(l=i[c+232>>2])|0,0-(i[c+236>>2]+!!(0|l)|0)|0,0,0),tt(c+192|0,l=(r=i[c+216>>2])<<1|i[c+212>>2]>>>31,r=i[c+220>>2]<<1|r>>>31,0,0,n,o,0,0),tt(c+176|0,l,r,0,0,0-(g=i[c+200>>2])|0,0-(i[c+204>>2]+!!(0|g)|0)|0,0,0),tt(c+160|0,l=n,r=o,0,0,o=(f=(n=i[c+184>>2])<<1|i[c+180>>2]>>>31)-1|0,n=(i[c+188>>2]<<1|n>>>31)-!f|0,0,0),tt(c+144|0,a<<15,s<<15|a>>>17,0,0,r=o,n,0,0),k=c+112|0,E=i[c+168>>2],o=i[c+172>>2],u=(f=i[c+160>>2])+(l=i[c+152>>2])|0,g=(m=i[c+164>>2])+i[c+156>>2]|0,l=g=l>>>0>u>>>0?g+1|0:g,g=(g=(0|m)==(0|g)&u>>>0<f>>>0|g>>>0<m>>>0)>>>0>(m=g+E|0)>>>0?o+1|0:o,tt(k,r,n,0,0,0-(o=(f=!l&u>>>0>1|!!(0|l))+m|0)|0,0-(!!(0|o)+(g=f>>>0>o>>>0?g+1|0:g)|0)|0,0,0),tt(c+128|0,1-u|0,0-((u>>>0>1)+l|0)|0,0,0,r,n,0,0),S=(C-I|0)+v|0,k=n=i[c+116>>2],f=(r=i[c+112>>2])<<1,C=g=n<<1|r>>>31,r=g,M=o=i[c+140>>2],r=r+(g=o<<1|(n=i[c+136>>2])>>>31)|0,n=r=(o=(l=n<<1|i[c+132>>2]>>>31)+f|0)>>>0<l>>>0?r+1|0:r,y=r=r-(o>>>0<13927)|0,E=r,N=g=65536|d,O=p,Y=(r=p)<<1,H=g=g<<1|r>>>31,T=g,P=r=rr(y,u=0,g,0),B=g=Z,v=A<<1,I=r=t<<1|A>>>31,m=g=0,y=(0|n)==(0|y)&(l=o-13927|0)>>>0<o>>>0|n>>>0>y>>>0,n=(0|n)==(0|C)&o>>>0<f>>>0|n>>>0<C>>>0,r=i[c+120>>2],g=o=i[c+124>>2]<<1|r>>>31,g=(r=(u=M>>>31|0)+(r=r<<1|k>>>31)|0)>>>0<u>>>0?g+1|0:g,u=(o=r)>>>0>(r=r+n|0)>>>0?g+1|0:g,u=(n=r)>>>0>(r=r+y|0)>>>0?u+1|0:u,n=r-1|0,g=rr(I,m,y=u-!r|0,C=0),o=Z+B|0,k=(0|B)==(0|(o=(r=g+P|0)>>>0<g>>>0?o+1|0:o))&r>>>0<P>>>0|o>>>0<B>>>0,M=n,n=rr(n,g=0,Q=(L=t>>>31|0)|p<<1,B=0),g=Z+o|0,u=0,f=g=n>>>0>(p=n+r|0)>>>0?g+1|0:g,u=(n=r=(0|g)==(0|o)&r>>>0>p>>>0|o>>>0>g>>>0)>>>0>(r=r+k|0)>>>0?1:u,n=rr(T,m,y,C),g=Z+u|0,k=r=n+r|0,r=r>>>0<n>>>0?g+1|0:g,n=rr(T,m,M,B),d=Z,o=n,n=rr(Q,B,y,C),g=Z+d|0,n=g=n>>>0>(u=o+n|0)>>>0?g+1|0:g,r=r+(g=(0|d)==(0|g)&o>>>0>u>>>0|g>>>0<d>>>0)|0,k=d=k+n|0,d=r=d>>>0<n>>>0?r+1|0:r,g=u+f|0,n=g=(r=(n=0)+p|0)>>>0<n>>>0?g+1|0:g,o=(0|g)==(0|f)&r>>>0<p>>>0|g>>>0<f>>>0,g=d,u=o,z=o=o+k|0,u=g=u>>>0>o>>>0?g+1|0:g,k=r,d=r,p=n,P=l,r=rr(l,0,Q,B),o=Z,n=r,l=rr(E,b,I,b),g=Z+o|0,l=(0|o)==(0|(g=(r=r+l|0)>>>0<l>>>0?g+1|0:g))&r>>>0<n>>>0|o>>>0>g>>>0,o=g,n=rr(M,B,F=-2&v,0),g=Z+g|0,n=g=n>>>0>(f=n+r|0)>>>0?g+1|0:g,r=(0|g)==(0|o)&r>>>0>f>>>0|o>>>0>g>>>0,o=0,r=((l=r+l|0)>>>0<r>>>0?1:o)+p|0,g=u,l=r=(d=l+d|0)>>>0<l>>>0?r+1|0:r,o=r=(0|r)==(0|p)&d>>>0<k>>>0|r>>>0<p>>>0,R=r=r+z|0,k=g=o>>>0>r>>>0?g+1|0:g,r=rr(T,m,P,b),z=Z,T=r,o=rr(y,C,F,b),g=Z+z|0,p=r=r+o|0,u=r+(m=rr(E,b,Q,B))|0,r=(o=r>>>0<o>>>0?g+1|0:g)+Z|0,r=u>>>0<m>>>0?r+1|0:r,C=u,m=u+(g=rr(I,b,M,B))|0,u=Z+r|0,Q=(0|r)==(0|(u=g>>>0>m>>>0?u+1|0:u))&m>>>0<C>>>0|r>>>0>u>>>0,g=((r=(r=(r=(0|r)==(0|o)&p>>>0>C>>>0|r>>>0<o>>>0)+(g=(0|o)==(0|z)&p>>>0<T>>>0|o>>>0<z>>>0)|0)+Q|0)|(M=0))+l|0,p=g=(o=u)>>>0>(C=o+d|0)>>>0?g+1|0:g,r=(0|l)==(0|g)&d>>>0>C>>>0|l>>>0>g>>>0,g=k,o=r,M=r=r+R|0,l=g=o>>>0>r>>>0?g+1|0:g,r=rr(E,b,F,b),E=Z,d=r,o=rr(I,b,P,b),g=Z+E|0,o=(0|(g=(r=r+o|0)>>>0<o>>>0?g+1|0:g))==(0|E)&r>>>0<d>>>0|g>>>0<E>>>0,d=g,r=g+f|0,g=(o|(k=0))+n|0,d=(0|n)==(0|(g=r>>>0<d>>>0?g+1|0:g))&r>>>0<f>>>0|n>>>0>g>>>0,u=(o=g)+(g=m)|0,g=0,g=((n=r=(0|o)==(0|(u=(f=(m=0)+r|0)>>>0<m>>>0?u+1|0:u))&r>>>0>f>>>0|o>>>0>u>>>0)>>>0>(r=r+d|0)>>>0?1:g)+p|0,u=l,n=g=(n=r)>>>0>(r=r+C|0)>>>0?g+1|0:g,l=u=(l=o=(0|p)==(0|g)&r>>>0<C>>>0|g>>>0<p>>>0)>>>0>(o=o+M|0)>>>0?u+1|0:u,131071==(0|u)|u>>>0<131071?(O=Y|L,N=B|H,tt(c+80|0,r,n,o,l,a,s,D,G),m=u=i[c+84>>2],g=A<<17,p=(t=(f=0)-(d=i[c+88>>2])|0)-(u=!!(u|(A=i[c+80>>2])))|0,d=(g-(i[c+92>>2]+(d>>>0>f>>>0)|0)|0)-(t>>>0<u>>>0)|0,f=0-A|0,m=0-(!!(0|A)+m|0)|0,A=S+16382|0):(tt(c+96|0,r=(1&n)<<31|r>>>1,n=o<<31|n>>>1,o=(1&l)<<31|o>>>1,l=l>>>1|0,a,s,D,G),I=p=i[c+100>>2],p=(f=0-(v=i[c+104>>2])|0)-(d=!!(p|(u=i[c+96>>2])))|0,d=((A<<16)-(i[c+108>>2]+(m>>>0<v>>>0)|0)|0)-(d>>>0>f>>>0)|0,f=0-u|0,m=0-(!!(0|u)+I|0)|0,v=A,I=t,A=S+16383|0),(0|A)>=32767)x|=2147418112,A=0,t=0;else{if((0|A)>0)u=d<<1|p>>>31,p=p<<1|m>>>31,d=u,v=o,I=65535&l|A<<16,u=m<<1|f>>>31,l=f<<1;else{if((0|A)<=-113){A=0,t=0;break e}YA(c- -64|0,r,n,o,l,1-A|0),WA(c+48|0,v,I,O,N,A+112|0),tt(c+32|0,a,s,D,G,r=i[c+64>>2],n=i[c+68>>2],v=i[c+72>>2],I=i[c+76>>2]),A=i[c+40>>2],f=(t=i[c+56>>2])-(p=A<<1|(u=i[c+36>>2])>>>31)|0,d=i[c+60>>2]-((i[c+44>>2]<<1|A>>>31)+(t>>>0<p>>>0)|0)|0,g=(A=i[c+32>>2])<<1,p=f-(A=(0|(o=u<<1|A>>>31))==(0|(l=i[c+52>>2]))&g>>>0>(t=i[c+48>>2])>>>0|o>>>0>l>>>0)|0,d=d-(A>>>0>f>>>0)|0,u=l-((t>>>0<g>>>0)+o|0)|0,l=t-g|0}A=l,tt(c+16|0,a,s,D,G,3,0,0,0),tt(c,a,s,D,G,5,0,0,0),o=u+(t=0)|0,o=l>>>0>(A=A+(g=1&r)|0)>>>0?o+1|0:o,l=A,s=(0|s)==(0|o)&A>>>0>a>>>0|s>>>0<o>>>0,u=d,A=(0|t)==(0|o)&A>>>0<g>>>0|t>>>0>o>>>0,g=n,t=g=(t=A=(A=(0|(u=A>>>0>(a=A+p|0)>>>0?u+1|0:u))==(0|G))&(0|a)==(0|D)?s:A&a>>>0>D>>>0|u>>>0>G>>>0)>>>0>(A=A+r|0)>>>0?g+1|0:g,r=(0|n)==(0|g)&A>>>0<r>>>0|n>>>0>g>>>0,g=I,g=(n=r)>>>0>(r=r+v|0)>>>0?g+1|0:g,s=r,d=(0|(n=i[c+20>>2]))==(0|o)&h[c+16>>2]<l>>>0|n>>>0<o>>>0,n=i[c+28>>2],n=g>>>0<2147418112&((0|(r=i[c+24>>2]))==(0|a)&(0|n)==(0|u)?d:(0|n)==(0|u)&r>>>0<a>>>0|n>>>0<u>>>0),r=t,g=(t=A=(0|t)==(0|(r=(d=n)>>>0>(n=A+n|0)>>>0?r+1|0:r))&A>>>0>n>>>0|t>>>0>r>>>0)>>>0>(A=A+s|0)>>>0?g+1|0:g,s=A,o=(0|(t=i[c+4>>2]))==(0|o)&h[c>>2]<l>>>0|t>>>0<o>>>0,t=i[c+12>>2],t=u=(t=A=g>>>0<2147418112&((0|(A=i[c+8>>2]))==(0|a)&(0|t)==(0|u)?o:(0|t)==(0|u)&A>>>0<a>>>0|t>>>0<u>>>0))>>>0>(A=A+n|0)>>>0?r+1|0:r,n=(0|r)==(0|u)&A>>>0<n>>>0|r>>>0>u>>>0,r=g,a=n,b|=n=n+s|0,x|=r=a>>>0>n>>>0?r+1|0:r}}i[e>>2]=A,i[e+4>>2]=t,i[e+8>>2]=b,i[e+12>>2]=x,W=c+336|0}function le(e,A,t,r,n){var s,l,c,g=0,u=0,d=0,f=0,h=0,m=0,C=0,b=0,I=0,w=0,k=0,x=0,v=0,B=0,y=0,E=0,M=0,G=0,D=0,Q=0,T=0;if(W=l=W-80|0,c=i[t+8>>2],!n|!p[t+4>>1]||(i[n+8>>2]=0),s=kA(r,0,152),i[s+44>>2]=o[c+14|0],i[s+40>>2]=o[c+15|0],r=p[c+8>>1]){for(r=i[34459]+(r<<1)|0,w=256&A,k=t+32|0,B=t-32|0,y=t- -64|0,E=t+96|0,M=t+-64|0,G=t-28|0,D=1&A,Q=t-24|0,x=i[30450];;){g=15&(h=(A=p[r>>1])>>>8|0);e:{A:{t:{r:{n:{a:{s:{i:{o:{l:{c:{g:switch(0|(d=A>>>12|0)){case 10:break s;case 9:break i;case 6:break o;case 2:case 3:break l;case 1:break c;case 0:break g;case 11:case 12:case 13:case 14:case 15:break a;default:break n}u=255&A;g:{u:{d:switch(0|g){case 13:if(u)break u;g=r,A=0;break g;case 0:g=r;f:switch(u-1|0){case 1:break e;case 0:break A}i[l+20>>2]=Kr(l+75|0,i[c>>2]),i[l+16>>2]=A,en(x,85851,l+16|0);break e;case 5:if(2!=o[i[144464+(o[t+34|0]<<2)>>2]+11|0])break e;i[s+20>>2]=u;break e;case 12:break d;default:break r}i[s+44>>2]=i[s+44>>2]+(A<<24>>31&-256|u);break e}a[s+132|0]=o[r+3|0],g=r+2|0,a[s+133|0]=o[0|g],A=2,u>>>0<3||(a[s+134|0]=o[r+5|0],g=r+4|0,a[s+135|0]=o[0|g],A=4,u>>>0<5||(a[s+136|0]=o[r+7|0],g=r+6|0,a[s+137|0]=o[0|g],A=6,u>>>0<7||(a[s+138|0]=o[r+9|0],g=r+8|0,a[s+139|0]=o[0|g],A=8,u>>>0<9||(a[s+140|0]=o[r+11|0],g=r+10|0,a[s+141|0]=o[0|g],A=10,u>>>0<11||(a[s+142|0]=o[r+13|0],g=r+12|0,a[s+143|0]=o[0|g],A=12,u>>>0<13||(a[s+144|0]=o[r+15|0],g=r+14|0,a[s+145|0]=o[0|g],A=14,u>>>0<15||(a[s+146|0]=o[r+17|0],g=r+16|0,a[s+147|0]=o[0|g],A=16)))))))}a[132+(A+s|0)|0]=0,u=C;break A}if(!e|g>>>0>7)break e;if(d=t,2!=o[i[144464+(o[t+2|0]<<2)>>2]+11|0]&&(d=k,2!=o[i[144464+(o[t+34|0]<<2)>>2]+11|0]))break e;if(!(1&(g=i[e+56>>2]))&&16&o[0|t])break e;u=15&o[d+3|0],u=2&g&&o[d+6|0]<=u>>>0?4:u;c:{g:{u:{d:switch((g=7&h)-3|0){case 1:break g;case 0:break d;default:break u}if(u>>>0>3)break c;break e}if(i[102832+(g<<2)>>2]>(0|u))break c;break e}if(o[d+6|0]>u>>>0)break e}i[s+8>>2]=255&A,u=1;break t}if(8192==(57344&A)){for(T=i[32972],h=1,v=0;;){f=255&A,g=(m=4095&A)>>>8|0;l:if(m>>>0<=3583){6==(0|(u=(g>>>0)%7|0))&&(u=p[r+2>>1]),I=0,g=t;c:{g:{u:switch(0|u){case 6:if(d=0,p[t+36>>1]|p[t+68>>1])break l;case 3:g=y;break g;case 9:if(d=0,p[t+36>>1]|p[t+68>>1])break l;if(g=E,!p[t+100>>1])break c;break l;case 7:if(d=0,p[t+36>>1])break l;for(u=1;;){if(2==o[i[144464+(o[2+(g=(u<<5)+t|0)|0]<<2)>>2]+11|0])break g;if(p[4+(((u=u+1|0)<<5)+t|0)>>1])break}break l;case 5:if(d=0,p[t+4>>1])break l;case 0:I=1,g=B;break g;case 4:if(d=0,p[t+36>>1])break l;case 2:g=k;break g;case 8:if(d=0,!n)break l;if(I=1,i[(g=n)+8>>2])break c;break l;case 10:break u;default:break g}if(d=0,p[t+4>>1]|p[G>>1])break l;I=1,g=M;break c}g:switch(0|u){case 0:case 5:break g;default:break c}g=(1==o[g+2|0]?-32:0)+g|0}if(w?(u=i[144464+(o[g+2|0]<<2)>>2],i[g+8>>2]=u):u=i[g+8>>2],m>>>0<=1791){if(d=1,i[i[144464+(f<<2)>>2]>>2]==i[u>>2])break l;if(!(!I|2!=o[u+11|0])){d=(0|f)==o[u+13|0];break l}d=(0|f)==o[u+12|0];break l}f=31&m,d=0;c:switch(m>>>5&7){case 0:d=(0|f)==o[u+11|0];break l;case 1:d=(0|f)==(15&p[u+6>>1]);break l;case 2:d=i[u+4>>2]>>>f&1;break l;case 4:break c;default:break l}c:switch(0|f){case 0:case 1:case 2:case 3:case 4:if(2!=o[i[144464+(o[g+2|0]<<2)>>2]+11|0]){if(2!=o[i[144464+(o[g+34|0]<<2)>>2]+11|0])break l;g=g+32|0}u=15&o[g+3|0],u=!e|!(2&o[e+56|0])?u:o[g+6|0]<=u>>>0?4:u;g:{u:switch(f-3|0){case 1:d=o[g+6|0]<=u>>>0;break l;case 0:if(d=1,u>>>0<=3)break g;break l}if(d=1,i[102832+(f<<2)>>2]>(0|u))break l}d=0;break l;case 17:if(!o[u+11|0]){d=1;break l}d=(32&o[t+1|0])>>>5|0;break l;case 18:d=0!=p[g+4>>1];break l;case 19:if(d=1,p[g+36>>1])break l;d=!o[i[g+40>>2]+11|0];break l;case 9:if(p[g+4>>1])break l;for(;;){if(d=!!(0|(u=12&o[g-29|0])),u)break l;if(p[4+(g=g-32|0)>>1])break}break l;case 10:d=2!=o[u+11|0];break l;case 11:for(;;){if(d=!!(0|(u=p[g+36>>1])),u)break l;if(u=g,g=g+32|0,2==o[i[u+40>>2]+11|0])break}break l;case 12:if(d=1,2==(254&o[u+11|0]))break l;d=(16&o[u+4|0])>>>4|0;break l;case 13:for(;d=(2==o[i[g+8>>2]+11|0])+d|0,u=p[g+4>>1],g=g-32|0,!u;);d=1==(0|d);break l;case 14:for(;d=(2==o[i[g+8>>2]+11|0])+d|0,u=p[g+4>>1],g=g-32|0,!u;);d=2==(0|d);break l;case 16:break c;default:break l}d=(16&o[0|g])>>>4|0}else if(d=0,15==(0|g)){c:switch(f-1|0){case 0:d=D;break l;case 1:break c;default:break l}d=0!=i[T+132>>2]}l:if(1970>>>(g=(u=65535&A)>>>12|0)&1)g=a[g+102848|0];else{c:switch(0|g){case 0:if(g=1,3328!=(3840&u))break l;g=1+(1+(255&u)>>>1|0)|0;break l;case 6:g=(u>>>9&7)-5>>>0<2?12:1;break l;case 2:case 3:g=3328==(0|(g=3840&u))||1536==(0|g)?2:1;break l}g=4,(u=p[r+4>>1])>>>0>61439||(g=2==(0|u)?3:2)}if(r=((g=3==p[(r=(g<<1)+r|0)>>1])<<1)+r|0,g^=d,h=v?g|h:g&h,v=4096&A,8192!=(57344&(A=p[r>>1])))break}if(!(1&h))if(26624!=(63488&A)){l:if(1970>>>(g=A>>>12|0)&1)g=a[g+102848|0];else{c:switch(0|g){case 0:if(g=1,3328!=(3840&A))break l;g=1+(1+(255&A)>>>1|0)|0;break l;case 6:g=(A>>>9&7)-5>>>0<2?12:1;break l;case 2:case 3:g=3328==(0|(A&=3840))||1536==(0|A)?2:1;break l}g=4,(A=p[r+4>>1])>>>0>61439||(g=2==(0|A)?3:2)}r=((24576==(65024&p[(A=(g<<1)+r|0)>>1]))<<1)+A|0}else r=((255&A)<<1)+r|0}g=r-2|0,u=C;break A}o:switch(g>>>1|0){case 0:r=(((255&A)<<1)+r|0)-2|0;break e;case 5:i[s>>2]=2|i[s>>2],((A=o[i[t+40>>2]+12|0])-28&255)>>>0<=5&&(g=p[4+(A=((A<<2)+r|0)-112|0)>>1],A=p[A+2>>1],i[s+96>>2]=A>>>4<<24>>24,i[s+76>>2]=(15&A)<<18|g<<2),r=r+24|0;break e;case 6:break o;default:break e}((A=o[i[Q>>2]+13|0])-28&255)>>>0<=5&&(g=p[4+(A=((A<<2)+r|0)-112|0)>>1],A=p[A+2>>1],i[s+100>>2]=A>>>4<<24>>24,i[s+80>>2]=(15&A)<<18|g<<2),r=r+24|0;break e}A=p[(r=r+2|0)>>1]|A<<16&983040;i:switch(g-1|0){case 0:if((0|b)>9)break e;i[(l+32|0)+(b<<2)>>2]=r,r=(i[34459]+(A<<1)|0)-2|0,b=b+1|0;break e;case 1:i[s+124>>2]=A;break e;case 2:break i;default:break e}i[s+128>>2]=A;break e}i[108+(g=((1!=(0|g))<<3)+s|0)>>2]=p[r+2>>1]|(255&A)<<16,A=p[r+4>>1]<<16,r=r+6|0,i[g+112>>2]=A|p[r>>1];break e}if(u=p[(g=r+2|0)>>1],m=A>>>4|0,i[88+(h=((f=d-11|0)<<2)+s|0)>>2]=255&m,i[h+68>>2]=A<<18&3932160|u<<2,2==(0|(r=p[r+4>>1]))){r=g;break e}if(u=A>>>0<=53247?r>>>0>61439?2:1:C-(4==(0|f))|0,d-13>>>0>1)break A;i[h+88>>2]=m<<24>>24;break A}i[l+4>>2]=Kr(l+75|0,i[c>>2]),i[l>>2]=A,en(x,85851,l);break e}i[4+((g<<2)+s|0)>>2]=u,u=w&&1==(0|g)?1:C}g=r}1!=(0|u)|(0|b)<=0?(r=g,C=u):(r=i[(l+32|0)+((b=b-1|0)<<2)>>2],C=0)}if(r=r+2|0,1==(0|C))break}!n|2!=o[t+17|0]||(e=i[t+4>>2],i[n>>2]=i[t>>2],i[n+4>>2]=e,e=i[t+28>>2],i[n+24>>2]=i[t+24>>2],i[n+28>>2]=e,e=i[t+20>>2],i[n+16>>2]=i[t+16>>2],i[n+20>>2]=e,e=i[t+12>>2],i[n+8>>2]=i[t+8>>2],i[n+12>>2]=e),a[t+23|0]=i[s+44>>2],(e=i[s+68>>2])?(i[t+24>>2]=e,e=s+88|0):(i[t+24>>2]=i[s+72>>2],e=s+92|0),i[t+28>>2]=i[e>>2]}W=l+80|0}function ce(e,A,t,r,n,s){var l,c=0,g=0,u=0,d=0,f=0,p=0,h=0,m=0,b=0,I=0,w=0,k=0,x=0,v=0,B=0,y=0,E=0,M=0;W=l=W-848|0;e:if(!(!i[e+104>>2]|8&o[n+2|0]|193==i[47202])){for(i[r>>2]=0,i[33272]=0,i[33274]=s,a[l+192|0]=0,i[33273]=l+192;d=(s=d)+1|0,a[0|(k=A+s|0)]-48>>>0<10;);i[56798]=0,y=l+188|0,p=-2147483648,W=w=W-16|0;A:if(c=o[0|A]){f=A;t:{for(;;){if(!(32==(0|(c=c<<24>>24))|c-9>>>0<5))break t;if(c=o[f+1|0],f=f+1|0,!c)break}break A}t:switch((c=o[0|f])-43|0){case 0:case 2:break t;default:break A}b=45==(0|c)?-1:0,f=f+1|0}else f=A;for(;c=-48,(((h=a[0|f])-48&255)>>>0<10||(c=-87,(h-97&255)>>>0<26||(c=-55,!((h-65&255)>>>0>25))))&&!((0|(h=c+h|0))>=10);)tt(w,10,0,0,0,m,I,0,0),c=1,i[w+8>>2]|i[w+12>>2]||(v=rr(m,I,10,0),-1==(0|(B=Z))&~h>>>0<v>>>0||(c=B,I=(m=h+v|0)>>>0<h>>>0?c+1|0:c,x=1,c=u)),f=f+1|0,u=c;y&&(i[y>>2]=x?f:A);A:{t:{if(u)i[56798]=68,m=-2147483648,I=0;else if(!I&m>>>0<2147483648)break t;if(!b){i[56798]=68,p=2147483647;break A}if(!(!I&m>>>0<=2147483648)){i[56798]=68;break A}}p=(b^m)-b|0}if(W=w+16|0,b=p,!(i[56798]|i[l+188>>2]==(0|A))){A:{t:{r:{if(!(!((0|(h=64&o[e+109|0]?4:3))!=(0|s)|i[e+124>>2]!=a[A-2|0])&a[A-3|0]-48>>>0<10)){n:{if(32!=i[e+124>>2]){if(!(16&o[e+105|0]))break r;if(3==(0|s))break n;break r}if(3!=(0|s))break r}if(4&o[n+2|0]|a[A-2|0]-48>>>0>=10)break r}a[133104]=0,a[l+288|0]=0,E=1;break t}if(a[133104]=0,i[33275]=0,a[l+288|0]=0,M=1,x=0,48==o[0|A])break A}x=yA(e,A,k,n,0)}46!=o[0|k]|a[A+d|0]-48>>>0<10|1&a[n+13|0]|a[k+2|0]-48>>>0<10||(a[0|k]=0);A:if(!x||(v=1,26741==i[e+212>>2])){if(p=l+256|0,i[l+844>>2]=p,g=d,64&o[n+1|0]&&(a[l+256|0]=45,p=l+256|1,i[l+844>>2]=p,g=s+2|0),f=o[A+g|0]){for(;!(32==(255&f)|(0|g)>28)&&(c=i[l+844>>2],i[l+844>>2]=c+1,a[0|c]=f,f=o[(g=g+1|0)+A|0]););p=i[l+844>>2]}if(a[0|p]=0,v=1,c=a[l+256|0]){if(!(u=i[e+136>>2])||hr(l+256|0,u)){if(c-48>>>0<10)break A;if(i[l+176>>2]=l+256,Bt(c=l+800|0,88653,l+176|0),!Et(e,c,133104))break A;i[r>>2]=128|i[r>>2],i[l+160>>2]=l+256,Bt(c=l+800|0,88773,l+160|0),Et(e,c,133116),v=0}x=2}}y=i[n>>2],a[l+352|0]=0,a[l+624|0]=0;A:{t:{r:if(!(!M|48!=o[0|A]||32==(0|(c=a[A+1|0]))|(0|c)==i[e+128>>2])){n:{if(2==(0|s)){if(58!=o[A+3|0]|a[A+5|0]-48>>>0>=10)break n;if(!(32==(0|(c=a[A+7|0]))|c-9>>>0<5))break n;break r}if((0|s)>3)break t}if(48==o[0|A]&&!((0|(c=s-1|0))<=0))for(g=0;;){if(Et(e,88875,jt(u=l+288|0)+u|0),48!=o[(g=g+1|0)+A|0])break r;if(!((0|c)>(0|g)))break}}r:{n:{if(!(32==(0|(c=a[0|k]))&&16&o[e+105|0])){if(B=2,m=s+2|0,(0|c)==i[e+124>>2])break n;I=1,p=0,c=0;break r}B=1,m=s+2|0}if(4&o[n+14|0])p=1,c=0,I=1;else for(c=0,f=1,g=s,I=1;;){u=c,c=f,f=(w=g+B|0)+A|0,g=0;n:{for(;;){if(p=1,!(a[g+f|0]-48>>>0>=10)){if((0|h)!=(0|(g=g+1|0)))continue;break n}break}c=u;break r}if(a[f+h|0]-48>>>0<10){c=u;break r}if(g=0,a[f-1|0]-48>>>0<10){c=u;break r}n:{for(;;){if(48==o[(g+w|0)+A|0]){if((0|h)!=(0|(g=g+1|0)))continue;break n}break}I=0}if((0|(u=a[(g=h+w|0)+A|0]))!=i[e+124>>2]&(!(16&o[e+105|0])|32!=(0|u)))break r;if(m=g+2|0,4&o[2+(C(f=c+1|0,12)+n|0)|0])break}}g=!b;r:if(!(!I|!(64&o[1+(C(c,12)+n|0)|0])|26741!=i[e+212>>2])){n:switch(o[0|(u=A+m|0)]-97|0){case 0:case 4:break n;default:break r}n:{a:{s:{i:switch((f=o[u+1|0])-116|0){case 6:break r;case 1:case 2:case 3:case 4:case 5:break a;case 0:break i;default:break s}if(116!=o[u+2|0])break n;break r}if(32==(0|f))break r}if(!(!!((0|b)%1e3|0)&1!=(0|c))&&108==(0|f))break r}i[33274]=1|i[33274]}m=32768&y,g&=E;r:if(i[e+128>>2]!=a[0|k]|a[A+d|0]-48>>>0>=10){n:{if(!g){if(g=0,u=1,!((0|c)>0&p))break n;b=(d=xe(e,b,c,I,l+624|0))?0:b,g=!!(0|d),f=0;break r}g=1,b=0,1==i[33275]&&(i[l+144>>2]=c+1,Bt(d=l+800|0,89026,l+144|0),Et(e,d,l+688|0)||(i[l+128>>2]=c,Bt(d=l+800|0,89026,l+128|0),Et(e,d,l+624|0)))}u=1,f=0}else Et(e,88882,l+624|0),u=0,f=256;p=m?2:x;r:{if(c|o[l+624|0]|46!=o[0|k]){if(c)break r}else Et(e,89192,l+624|0);if(i[l+844>>2]=A,a[A+1|0]-48>>>0<10)for(;d=i[l+844>>2],i[l+844>>2]=d+1,a[d+2|0]-48>>>0<10;);if(a[i[l+844>>2]-1|0]-48>>>0>=10||(i[l+416>>2]=i[l+844>>2]-1,Ve(e,l+416|0,l+192|0,r,4,n)&&(i[33272]=2)),o[l+192|0]|48==o[i[l+844>>2]]||Ve(e,l+844|0,l+192|0,r,4,n)&&(i[33272]=1),M){if(!p&u&&(i[l+112>>2]=b,Bt(n=l+800|0,89214,l+112|0),Et(e,n,t)))break A;if(1&a[e+110|0]){for(d=A;32!=(32|o[0|d]);)d=d+1|0;i[l+416>>2]=d,37==o[d+1|0]&&(Et(e,89328,t),n=jt(t),a[i[l+416>>2]+1|0]=32,t=t+n|0)}}}De(e,b,l+416|0,g,c,p|f|E),!(2&o[e+109|0])|(0|c)<=0?(i[l+60>>2]=15,i[l- -64>>2]=l+624,i[l+56>>2]=l+416,i[l+52>>2]=l+352,i[l+48>>2]=l+288,Bt(t,89415,l+48|0)):(i[l+88>>2]=15,i[l+96>>2]=l+416,i[l+92>>2]=l+352,i[l+84>>2]=l+624,i[l+80>>2]=l+288,Bt(t,89346,l+80|0));r:if(!u)for(;;){for(s=s+1|0,u=0;u=(d=u)+1|0,a[(c=s+d|0)+A|0]-48>>>0<10;);n=2;n:{a:{s:{i:{o:{l:switch((u=57344&i[e+104>>2])-8192>>>13|0){case 6:break a;case 2:break s;case 0:case 4:case 5:break i;case 1:break o;case 3:break l;default:break n}n=5}if(48==(0|(u=o[0|(g=A+s|0)])))for(;Et(e,88875,c=l+688|0),yn(t,c),d=d-1|0,48==(0|(u=o[0|(g=(s=s+1|0)+A|0)])););if((0|n)<(0|d)|(u<<24>>24)-48>>>0>=10)break n;n=l+688|0,De(e,wt(g),n,0,0,0),yn(t,n),s=s+d|0;break n}if(De(e,wt(n=A+s|0),l+416|0,0,0,0),!(8192==(0|u)&48!=o[0|n])){if(i[l+16>>2]=d,Bt(n=l+800|0,89508,l+16|0),!Et(e,n,l+688|0))break n;yn(49152==(0|u)?t:l+416|0,l+688|0)}yn(t,l+416|0),s=c;break n}if((0|d)>4)break n;if(48==o[0|(n=A+s|0)])break n;De(e,s=wt(n),n=l+688|0,0,0,0),yn(t,n),s=c;break n}if(!((0|d)<=1))for(;;){if(i[l+32>>2]=a[A+s|0],Bt(n=l+800|0,89575,l+32|0),!Et(e,n,l+688|0))break n;if(yn(t,l+688|0),s=s+1|0,!((0|(d=d-1|0))>1))break}}n:if(!((u=o[0|(d=A+s|0)])-48>>>0>=10||jt(t)>>>0>=190))for(;;){if(n=l+688|0,Ie(e,a[0|d]-48|0,0,2,n),c=jt(t),i[l>>2]=15,i[l+4>>2]=n,Bt(t+c|0,89594,l),(u=o[0|(d=(s=s+1|0)+A|0)])-48>>>0>=10)break n;if(!(jt(t)>>>0<=189))break}if(Et(e,89678,l+688|0)&&yn(t,l+688|0),i[e+128>>2]!=(0|u)|a[1+(A+s|0)|0]-48>>>0>=10)break r;Et(e,88882,n=l+688|0),yn(t,n)}if(!(n=o[0|t])|21==(0|n)||(n=VA(l+184|0,A=1+(A+s|0)|0),s=i[l+184>>2],!(2&o[e+106|0])|32!=(0|s)||(VA(l+184|0,A+n|0),s=i[l+184>>2]),yr(s)|I||(e=jt(t)+t|0,a[0|e]=11,a[e+1|0]=0)),i[r>>2]=-2147483648|i[r>>2],i[33275]=i[33275]-1,g=1,v)break e;i[33264]=1;break e}i[r>>2]=-129&i[r>>2],g=0;break e}g=1}}return W=l+848|0,g}function ge(e,A,t,r){var n,l,c=0,g=0,u=0,d=0,f=0,h=0,m=0,b=0,I=0,w=0,k=0,x=0,v=0,B=0,y=0,E=0,M=0,G=0,D=0,Q=0,T=0;if(W=n=W-416|0,B=p[t+8>>1],I=o[t+10|0],64&(l=i[t>>2])){for(i[t>>2]=-65&l,a[199388]=1,u=i[47202],m=i[49846],f=i[47352],h=i[47351],d=i[47350];;){c=(g=i[198304+(h<<2)>>2])>>8;e:{A:switch((31&g)-9|0){case 0:u=c;break e;case 4:m=c;break e;case 3:break A;default:break e}f=g>>>0>=256?c+f|0:0}if(!(!(128&g)&(0|d)>(0|(h=h+1|0))))break}i[47352]=f,i[47351]=h,i[49846]=m,i[47202]=u}m=0;e:if(!((0|(c=i[49572]))>997))if(1048576&l||!o[0|A])o[199388]&&(i[49572]=c+1,a[199388]=0,i[(e=190288+(c<<3)|0)>>2]=983042,i[e+4>>2]=0),a[189088]=0;else if(!((0|c)>990)){(0|(c=i[e+8224>>2]))>0&&(i[e+8224>>2]=c-1),u=512&l?r:r+4|0,f=16==(240&i[47202]),(x=2&l)&&((0|(g=i[47200]))<3||(0|(c=i[47350]))>243||(o[199388]&&(i[(h=198300+(c<<2)|0)>>2]=-129&i[h>>2]),i[47350]=c+1,a[199388]=1,y=3==(0|g)?20:g,i[198304+(c<<2)>>2]=y<<8|193)),d=f?u:r;A:{t:{if(!(8&l)){for(;r=o[(c=b)+A|0],a[c+(n+240|0)|0]=r,223&r&&(b=c+1|0,c>>>0<160););if(a[n+66|0]=0,b=n- -64|2,m=dA(i[47192],A,t,b),i[n+412>>2]=m,!(4096&m))break t;_e(A,n+240|0,c);break e}r:if(Dt(A,87276,3))Ue(A,189088,n+240|0);else{if(h=0,223&(c=o[0|(b=A+3|0)]))for(;a[(n+240|0)+h|0]=nr(c<<24>>24),h=h+1|0,223&(c=o[0|(b=b+1|0)]););a[(r=n+240|0)+h|0]=0,c=0;n:if(!((0|(t=i[34461]))<=0)){for(;;){if(!hr(r,C(c,44)+137856|0)){i[34457]=c;break n}if((0|t)==(0|(c=c+1|0)))break}c=t}if((0|(t=(0|t)==(0|c)?-1:c))<=0)break r;qr(t),a[189090]=0,a[189089]=t,a[189088]=21}m=-2147483648,i[n+412>>2]=-2147483648,r=-1;break A}if(!(!(8388608&m)|8&o[t+12|0])){for(W=f=W-208|0,h=i[e+60>>2],g=A;r=g,g=g+1|0,32!=o[0|r];);VA(f+204|0,g);t:if(yr(i[f+204>>2])){u=rt(f,189088),g=(!(256&h)|(k=te(e,g,t+12|0,0))>>>15)&!(67108864&k)&21!=o[189088];r:{n:{if(512&h){if(!(g&!(16&o[t+12|0])))break n;break r}if(g)break r}rt(189088,u);break t}if(a[0|r]=45,i[t>>2]=-2&i[t>>2],m=0,g=189088,w=te(i[47192],A,t,0),i[n+412>>2]=w,!((0|h)<=0)&&(u=o[189088])){for(;m=(2==o[i[144464+(u<<2)>>2]+11|0])+m|0,u=o[0|(g=g+1|0)];);if(!((31&h)>=(0|m))){a[0|r]=32,i[n+412>>2]=te(i[47192],A,t,0);break t}}i[n+412>>2]=128|(w||k),i[33264]=1}W=f+208|0}if(r=-1,21==o[189088]){if(h=rt(n+16|0,132848),f=i[n+412>>2],g=_e(A,n+240|0,c),u=n- -64|1,(0|(r=Mt(o[189089]?189089:87315,188772,189296)))<0||(i[t>>2]=4194304|i[t>>2],o[n+66|0]?(s[n+64>>1]=8192,f=te(i[47193],u,t,0)):f=dA(i[47193],g,t,b)),21==o[189088]&&(c=_e(g,n+240|0,c),(0|(r=Mt(o[189089]?189089:87315,188772,189296)))<0||(i[t>>2]=4194304|i[t>>2],o[n+66|0]?(s[n+64>>1]=8192,f=te(i[47193],u,t,0)):f=dA(i[47193],c,t,b)),m=4096,21==o[189088]))break e;i[n+412>>2]=f,(0|r)>=0||(a[189090]=0,s[94544]=3341,-1==(0|r)&&(rt(132848,h),qr(i[i[32972]+60>>2]),r=i[i[32972]+60>>2]))}m=i[n+412>>2],128&l||(d=268435456&m&&(0|d)<=1?1:d,!(256&m)|528&l|i[e+8224>>2]|2&o[t-11|0]||(i[e+8224>>2]=3,d=(0|d)<=4?4:d)),d=(0|d)<=0&&i[49846]>2?1:d}if(t=o[199388],!((0|d)<=0|(0|(b=i[49572]))>990)){i[49572]=b+1,g=1&t,t=0,s[(c=190288+(b<<3)|0)>>1]=g?2:0,a[c+7|0]=0,a[c+3|0]=0,g=d>>>0>1,a[c+2|0]=g?9:11,s[c+4>>1]=0,i[e+8236>>2]=0;A:if(!(!(c=g?d-2|0:0)|(0|(b=i[49572]))>990))for(u=e+8236|0;;){if(i[49572]=b+1,s[(g=190288+(b<<3)|0)>>1]=0,a[g+7|0]=0,a[g+3|0]=0,f=c>>>0>1,a[g+2|0]=f?9:11,s[g+4>>1]=0,i[u>>2]=0,b=i[49572],(0|(c=f?c-2|0:0))<=0)break A;if(!((0|b)<991))break}i[e+8228>>2]=0,i[e+8232>>2]=0}a[199388]=1&t,!x|1!=i[47200]||(i[49572]=b+2,a[199388]=0,s[(c=190288+(b<<3)|0)>>1]=1&t?2:0,a[c+7|0]=0,s[c+2>>1]=10,s[c+4>>1]=0,s[c+12>>1]=0,i[c+8>>2]=1179648,a[c+15|0]=0,1&l&&dt(a[A+1|0])&&(t=o[199388],a[199388]=0,A=i[49572],i[49572]=A+2,s[(A=190288+(A<<3)|0)>>1]=t?2:0,a[A+7|0]=0,s[A+2>>1]=10,s[A+4>>1]=0,s[A+12>>1]=0,i[A+8>>2]=1179648,a[A+15|0]=0)),c=I>>>0<31;A:if(!((0|r)<0))if(A=i[49572],t=o[190290+((d=A-1|0)<<3)|0],9!=o[189088]|21!=o[189089])21!=(0|t)&&(g=o[199388],a[199388]=0,a[7+(t=190288+(A<<3)|0)|0]=0,s[t+2>>1]=21,s[t+4>>1]=0,s[t>>1]=g?2:0,d=A),i[49572]=d+1,a[190295+(d<<3)|0]=r;else{if(21!=(0|t))break A;i[49572]=d}A=2047&B,t=(c?I:31)<<11,f=(E=128&l)?o[i[144464+(o[189088]<<2)>>2]+11|0]?189088:189089:189088,(d=o[0|f])|!(1&a[199388])||(d=23,a[0|f]=23,a[f+1|0]=0),M=A|t,u=i[49572];A:if(d)if((0|u)>994)A=0;else for(Q=(-2147483648==(-1610612736&m))<<4,B=M+1|0,T=e+8233|0,A=0,g=1,k=0,G=1,I=-1,x=-1,c=0;;){h=f+1|0;t:{if(255!=(0|(w=255&d))){if(t=i[144464+(w<<2)>>2])break t;i[n>>2]=w,W=t=W-16|0,i[t+12>>2]=n,mn(132552,87474,n),W=t+16|0,u=i[49572]}if(!(d=o[0|h]))break A;if(f=h,(0|u)<995)continue;break A}t:if(21!=(0|(v=255&d)))if(1!=(0|(f=o[t+11|0]))){t=B;r:switch(v-12|0){case 8:a[3+(t=190288+((I=u-1|0)<<3)|0)|0]=g,s[t>>1]=4|p[t>>1],t=c;break t;case 0:s[(t=190280+(u<<3)|0)>>1]=8|p[t>>1],t=c;break t;case 10:m|=16384,i[n+412>>2]=m,t=c;break t;case 3:break t}w=o[199388],a[199388]=0,a[7+(t=190288+(v=u<<3)|0)|0]=0,a[t+2|0]=d,s[t+4>>1]=c,c=(w?2:0)|Q,s[t>>1]=c,2==(0|f)?((0|g)>=4&&(a[189076]=1),(0|I)<0||(0|(A=u-1|0))!=(0|I)&&(a[190291+(A<<3)|0]=g),s[t>>1]=4|c,D=(A=(0|g)>(0|x))?u:D,x=A?g:x,c=1,k&&(a[t+7|0]=k),I=u,k=0,A=g):(!G|!(64&o[0|T])||(s[t>>1]=8|c),c=g),u=u+1|0,i[49572]=u,a[v+190291|0]=A,t=0,G=0,g=c}else{if(!p[t+8>>1]){g=o[t+14|0],t=c;break t}if((0|I)<0){t=c,k=w;break t}a[190295+(I<<3)|0]=d,t=c}else i[(t=190288+(u<<3)|0)>>2]=1376256,s[t+4>>1]=0,a[t+7|0]=o[f+1|0],i[49572]=u+1,qr(o[f+1|0]),h=f+2|0,u=i[49572],t=c;if(!(d=o[0|h]))break A;if(f=h,c=t,!((0|u)<995))break}else A=0;131072&l&&(t=u+1|0,i[49572]=t,g=o[199388],a[199388]=0,a[7+(c=190288+(u<<3)|0)|0]=0,s[c+2>>1]=27,s[c+4>>1]=0,s[c>>1]=g?2:0,u=t),E||(s[190292+(b<<3)>>1]=M),i[e+8228>>2]=0,2!=o[i[144464+(o[190282+(u<<3)|0]<<2)>>2]+11|0]|(0|A)<4||(i[e+8228>>2]=1),(0|r)>=0&&(rt(132848,n+16|0),qr(i[i[32972]+60>>2]),t=o[199388],a[199388]=0,r=i[49572],s[(A=190288+(r<<3)|0)>>1]=t?2:0,s[A+2>>1]=21,s[A+4>>1]=0,a[A+7|0]=i[i[32972]+60>>2],u=r+1|0,i[49572]=u),(0|y)>0&&(a[199388]=0,i[49572]=u+1,i[(A=190288+(u<<3)|0)>>2]=655362,t=i[47350],i[47350]=t+1,a[A+7|0]=0,s[A+4>>1]=0,i[198304+(t<<2)>>2]=y<<8|225),1024&m&&(s[(A=190288+(D<<3)|0)>>1]=64|p[A>>1]),i[e+8232>>2]=m}return W=n+416|0,m}function ue(e,A,t,r,n){var s=0,l=0,c=0,g=0,u=0,d=0,f=0,p=0,h=0,m=0,b=0,I=0,w=0,k=0,x=0,v=0,B=0,y=0,E=0,M=0,G=0,D=0,Q=0,T=0;e:if(A){if(w=n<<4,l=(A=i[33268])+t|0,!((0|A)<=0||(s=o[0|(g=w+129360|0)],f=o[g+1|0]-s<<8,f=1!=(0|A)?(0|f)/(0|A)|0:f,(0|t)>=(0|l))))for(p=f>>>0>255,b=f>>>8|0,s<<=8,g=0-f>>>8|0,v=(0|f)<=0,A=t;v?(u=(d=(d=(0|(c=(0|(c=i[101024+(a[C(A,6)+e|0]<<2)>>2]))<(0|g)?g:c))>=18?18:c)+(c=(0|(c=(0|(s=s+f|0))/256|0))>0?c:0)|0)>>>0>=254?254:d,c=c>>>0>=254?254:c):(c=C(A,6)+e|0,a[c+2|0]=p|o[c+2|0],c=(d=(0|(c=(0|s)/256|0))>0?c:0)>>>0>=254?254:d,u=(d=d+b|0)>>>0>=254?254:d,s=s+f|0),d=C(A,6)+e|0,a[d+5|0]=c,a[d+4|0]=u,(0|l)!=(0|(A=A+1|0)););if(2&o[188785]?(g=i[33271],i[33270]=g):g=i[33270],b=(p=o[3+(s=129360+(A=n<<4)|0)|0])-(c=o[s+2|0])<<8,v=i[s+4>>2],(0|t)>0?(y=101056,k=5,d=(0|b)/(o[A+129368|0]-1|0)|0):(y=i[12+(A=A+129360|0)>>2],k=o[A+10|0],d=0),(0|l)<(0|g)){for(f=(0|t)<=0,I=((A=b>>31)^b)-A|0,h=129360+(n<<4)|0,c<<=8,B=p<<8,p=0;;){A:{if(u=C(l,6)+e|0,!(!(1&f)&(0|(s=a[0|u]))<4)){t=0,A=l;t:if(1&(5==(0|s)|f)){for(;(0|(d=a[C(A,6)+e|0]))<=6&&(t=((0|d)>3)+t|0,(0|g)!=(0|(A=A+1|0))););if(m=0,(0|(x=(0|(A=o[h+8|0]))>(0|t)?t:A))<2){d=0,p=c;break t}d=(0|b)/(x-1|0)|0,p=c}else(0|x)>0?p=d+p|0:(p=B+(C(I,a[m+y|0])>>6)|0,(0|k)>(0|(m=m+1|0))||(y=i[h+12>>2],m=0));if(x=x-1|0,!((0|s)<4)){a[0|u]=6,t=(A=(0|(A=(0|p)/256|0))>0?A:0)+(((t=(s=i[v+(s<<2)>>2])>>31)^s)-t|0)|0;break A}}3!=(0|s)?(A=(0|p)/256|0,(63&o[u-6|0])>>>0>=3?(t=(s=i[v+(s<<2)>>2])>>31,t=(A=(0|(A=A-a[h+9|0]|0))>0?A:0)+((t^s)-t|0)|0):t=(A=(0|A)>0?A:0)+(((t=(s=i[v+(s<<2)>>2])>>31)^s)-t|0)|0):t=(A=(0|(A=(0|p)/256|0))>0?A:0)+(((t=(s=i[v+12>>2])>>31)^s)-t|0)|0}if(a[u+5|0]=A>>>0>=254?254:A,f=0,A=(0|t)>0?t:0,a[u+4|0]=A>>>0>=254?254:A,a[u+2|0]=o[u+2|0]|s>>>31,(0|g)==(0|(l=l+1|0)))break}l=g}if(!(o[133068]||(3==(268435455&n)&&(A=C(l,6)+e|0,a[A+2|0]=2|o[A+2|0]),i[33269]?(A=o[5+(s=100768+(n<<4)|0)|0],c=s+3|0,t=o[s+4|0]-A|0):(A=o[2+(t=100768+(n<<4)|0)|0],c=w+100768|0,t=o[t+1|0]-A|0),s=C(l,6)+e|0,a[s+5|0]=A>>>0>=254?254:A,a[s+2|0]=o[s+2|0]|t>>>31,A=(d=A)+(((A=t>>31)^t)-A|0)|0,a[s+4|0]=A>>>0>=254?254:A,t=C(g,6)+e|0,a[t+1|0]=o[0|c],A=l+1|0,4==o[0|t]&&(a[0|t]=6),(0|(t=r-A|0))<=0||(n=o[12+(l=100768+(n<<4)|0)|0],l=o[l+13|0]-n<<8,l=1!=(0|t)?(0|l)/(0|t)|0:l,(0|A)>=(0|r)))))for(d=l>>>0>255,f=l>>>8|0,t=n<<8,n=0-l>>>8|0,p=(0|l)<=0;p?(c=(g=(c=(0|(s=(0|n)>(0|(s=i[101024+(a[C(A,6)+e|0]<<2)>>2]))?n:s))>=18?18:s)+(s=(0|(s=(0|(t=t+l|0))/256|0))>0?s:0)|0)>>>0>=254?254:g,g=s>>>0>=254?254:s):(s=C(A,6)+e|0,a[s+2|0]=d|o[s+2|0],g=(s=(0|(s=(0|t)/256|0))>0?s:0)>>>0>=254?254:s,c=(s=s+f|0)>>>0>=254?254:s,t=t+l|0),s=C(A,6)+e|0,a[s+5|0]=g,a[s+4|0]=c,(0|r)!=(0|(A=A+1|0)););}else{if(A=(k=i[34455])+C(n,68)|0,l=o[A+24|0],g=o[A+25|0],s=(A=i[33268])+t|0,!((0|A)<=0||(u=g-l<<8,u=1!=(0|A)?(0|u)/(0|A)|0:u,(0|t)>=(0|s))))for(d=u>>>0>255,f=u>>>8|0,A=l<<8,g=0-u>>>8|0,p=(0|u)<=0;p?(l=(l=(b=(0|(l=(0|(l=i[101024+(a[C(t,6)+e|0]<<2)>>2]))<(0|g)?g:l))>=18?18:l)+(c=(0|(l=(0|(A=A+u|0))/256|0))>0?l:0)|0)>>>0>=254?254:l,c=c>>>0>=254?254:c):(l=C(t,6)+e|0,a[l+2|0]=d|o[l+2|0],c=(l=(0|(l=(0|A)/256|0))>0?l:0)>>>0>=254?254:l,l=(l=l+f|0)>>>0>=254?254:l,A=A+u|0),b=C(t,6)+e|0,a[b+5|0]=c,a[b+4|0]=l,(0|s)!=(0|(t=t+1|0)););2&o[188785]?(t=i[33271],i[33270]=t):t=i[33270],g=t,A=k+C(n,68)|0;A:if(255!=(0|(f=o[A+33|0])))for(;;){if((0|(g=g-1|0))<(0|s)){g=t;break A}if(!(a[C(g,6)+e|0]<4))break}if((0|t)>(0|s)){for(D=((l=(M=(p=o[A+32|0])-(u=o[0|(c=A+31|0)])<<8)>>31)^M)-l|0,B=255==(0|(A=o[0|(d=A+30|0)])),b=f<<8,v=u<<8,Q=p<<8,w=k+C(n,68)|0,T=255!=(0|A),p=0,f=0,A=1,u=0;;){A:{if(h=C(s,6)+e|0,!(!(1&A)&(0|(I=a[0|h]))<4)){t:if(1&(5==(0|I)|A)){r:if(T){if(E=1,A=0,l=d,!((0|g)<=(0|(u=s+1|0)))){for(;;){if(l=d,(0|(f=a[C(u,6)+e|0]))>6)break r;if(A=((0|f)>3)+A|0,(0|g)==(0|(u=u+1|0)))break}l=d}}else{if(A=0,u=s,l=c,(0|g)<=(0|s))break r;for(;;){if(l=c,(0|(f=a[C(u,6)+e|0]))>6)break r;if(A=((0|f)>3)+A|0,(0|g)==(0|(u=u+1|0)))break}l=c}if(f=o[0|l]<<8,G=0,(0|(u=(0|A)<(0|(l=o[w+34|0]))?A:l))<2){y=0;break t}y=(0|M)/(u-1|0)|0}else(0|s)!=(0|g)?E?(B=1,u=u+1|0,E=0,f=v):(0|u)>0?(f=f+y|0,E=0):(E=0,f=(C(a[16+(w+G|0)|0],D)>>6)+Q|0,G=(0|(A=G+1|0))<o[w+35|0]?A:0):(B=2,f=b);if(u=u-1|0,!((0|I)<4)){A=l=s+1|0;t:if(!((0|t)<=(0|s)))for(;;){if(a[C(A,6)+e|0]>1)break t;if(!((0|t)>=(0|(A=A+1|0))))break}a[0|h]=6,a[h+1|0]=o[w+26|0],p=0,m=o[w+27|0],s=(0|(s=(0|f)/256|0))>0?s:0,a[h+5|0]=s>>>0>=254?254:s,s=s+m|0,a[h+4|0]=s>>>0>=254?254:s,x=A-l|0;break A}}if((0|I)>=2){A=l=s+1|0;t:if(!((0|t)<=(0|s)))for(;;){if(a[C(A,6)+e|0]>1)break t;if(!((0|t)>=(0|(A=A+1|0))))break}p=0,s=(0|(s=(0|f)/256|0))>0?s:0,a[h+5|0]=s>>>0>=254?254:s,m=i[100976+(I<<2)>>2],a[h+2|0]=o[h+2|0]|m>>>31,s=(0|(s=(I=s)+(((s=m>>31)^m)-s|0)|0))>0?s:0,a[h+4|0]=s>>>0>=254?254:s,x=A-l|0}else(0|x)<=1?(m=a[36+(w+B|0)|0],A=0):(m=a[36+(A=w+B|0)|0],A=(a[A+39|0]-m|0)/(x-1|0)|0),l=i[100976+(I<<2)>>2],a[h+2|0]=o[h+2|0]|l>>>31,A=(0|(A=(((0|f)/256|0)+m|0)+C(A,p)|0))>0?A:0,a[h+5|0]=A>>>0>=254?254:A,A=(0|(A=A+(((I=l)^(l>>=31))-l|0)|0))>0?A:0,a[h+4|0]=A>>>0>=254?254:A,p=p+1|0,l=s+1|0}if(A=0,(0|t)==(0|(s=l)))break}s=t}if(o[133068])break e;if(l=C(s,6)+e|0,i[33269]?(c=k+C(n,68)|0,A=o[c+47|0],g=o[c+46|0]-A|0,c=c+45|0):(c=k+C(n,68)|0,A=o[c+44|0],g=o[c+43|0]-A|0,c=c+42|0),c=o[0|c],d=(((d=g>>31)^g)-d|0)+A|0,a[l+4|0]=d>>>0>=254?254:d,a[l+5|0]=A>>>0>=254?254:A,A=C(s,6)+e|0,a[A+2|0]=o[A+2|0]|g>>>31,t=C(t,6)+e|0,a[t+1|0]=c,A=s+1|0,4==o[0|t]&&(a[0|t]=6),(0|(t=r-A|0))<=0)break e;if(l=k+C(n,68)|0,n=o[l+48|0],l=o[l+49|0]-n<<8,l=1!=(0|t)?(0|l)/(0|t)|0:l,(0|A)>=(0|r))break e;for(d=l>>>0>255,f=l>>>8|0,t=n<<8,n=0-l>>>8|0,p=(0|l)<=0;p?(c=(g=(c=(0|(s=(0|n)>(0|(s=i[101024+(a[C(A,6)+e|0]<<2)>>2]))?n:s))>=18?18:s)+(s=(0|(s=(0|(t=t+l|0))/256|0))>0?s:0)|0)>>>0>=254?254:g,g=s>>>0>=254?254:s):(s=C(A,6)+e|0,a[s+2|0]=d|o[s+2|0],g=(s=(0|(s=(0|t)/256|0))>0?s:0)>>>0>=254?254:s,c=(s=s+f|0)>>>0>=254?254:s,t=t+l|0),s=C(A,6)+e|0,a[s+5|0]=g,a[s+4|0]=c,(0|r)!=(0|(A=A+1|0)););}}function de(){var e,A=0,t=0,r=0,n=0,o=0,l=0,c=0,g=0,u=0,d=0,f=0,h=0,m=0,b=0,I=0;if((0|(e=i[36455]))!=(0|(g=i[36454]))){e:if(!((0|(m=i[36427]))<0|(0|g)==(0|m))){t=f=i[8+(216192+((u=m)<<4)|0)>>2];A:{for(;;){if((r=i[(l=216192+((u=(0|(r=u-1|0))<0?169:r)<<4)|0)>>2])-5>>>0<2)break A;t:{if((0|r)<=4){if(i[l+12>>2]!=(0|t))break A;if(r=p[l+4>>1],i[l+12>>2]=f,t=i[l+8>>2],16&(A=p[t>>1]))break t;for(I=32&A?(C(r,12)>>>0)/10|0:r,n=0,r=t,c=0;;){A=p[t>>1];r:if(!(c>>>0<3&&8&A)){if(A=A<<16>>16,(0|(b=(d=s[2+((h=c<<1)+t|0)>>1])-(o=s[2+(h=f+h|0)>>1])|0))>(0|(d=(0|C(I,(0|C(i[200944+(c<<2)>>2],(0|b)>0?d+(o<<1)|0:(d<<1)+o|0))/3e3|0))/256|0)))n||((0|A)<0?r=t:(r=0,A=(0|(A=i[44469]+1|0))<=169?A:0,i[44469]=A,(A=177888+(n=A<<6)|0)&&(r=p[t+4>>1]|p[t+6>>1]<<16,o=p[t>>1]|p[t+2>>1]<<16,s[A>>1]=o,s[A+2>>1]=o>>>16,s[A+4>>1]=r,s[A+6>>1]=r>>>16,r=p[t+60>>1]|p[t+62>>1]<<16,o=p[t+56>>1]|p[t+58>>1]<<16,s[A+56>>1]=o,s[A+58>>1]=o>>>16,s[A+60>>1]=r,s[A+62>>1]=r>>>16,r=p[t+52>>1]|p[t+54>>1]<<16,o=p[t+48>>1]|p[t+50>>1]<<16,s[A+48>>1]=o,s[A+50>>1]=o>>>16,s[A+52>>1]=r,s[A+54>>1]=r>>>16,r=p[t+44>>1]|p[t+46>>1]<<16,o=p[t+40>>1]|p[t+42>>1]<<16,s[A+40>>1]=o,s[A+42>>1]=o>>>16,s[A+44>>1]=r,s[A+46>>1]=r>>>16,r=p[t+36>>1]|p[t+38>>1]<<16,o=p[t+32>>1]|p[t+34>>1]<<16,s[A+32>>1]=o,s[A+34>>1]=o>>>16,s[A+36>>1]=r,s[A+38>>1]=r>>>16,r=p[t+28>>1]|p[t+30>>1]<<16,o=p[t+24>>1]|p[t+26>>1]<<16,s[A+24>>1]=o,s[A+26>>1]=o>>>16,s[A+28>>1]=r,s[A+30>>1]=r>>>16,r=p[t+20>>1]|p[t+22>>1]<<16,o=p[t+16>>1]|p[t+18>>1]<<16,s[A+16>>1]=o,s[A+18>>1]=o>>>16,s[A+20>>1]=r,s[A+22>>1]=r>>>16,r=p[t+12>>1]|p[t+14>>1]<<16,o=p[t+8>>1]|p[t+10>>1]<<16,s[A+8>>1]=o,s[A+10>>1]=o>>>16,s[A+12>>1]=r,s[A+14>>1]=r>>>16,a[n+177904|0]=0,s[A>>1]=32768|p[A>>1],r=A))),A=d+p[h+2>>1]|0;else{if((0-d|0)<=(0|b))break r;n||((0|A)<0?r=t:(r=0,A=(0|(A=i[44469]+1|0))<=169?A:0,i[44469]=A,(A=177888+(n=A<<6)|0)&&(r=p[t+4>>1]|p[t+6>>1]<<16,o=p[t>>1]|p[t+2>>1]<<16,s[A>>1]=o,s[A+2>>1]=o>>>16,s[A+4>>1]=r,s[A+6>>1]=r>>>16,r=p[t+60>>1]|p[t+62>>1]<<16,o=p[t+56>>1]|p[t+58>>1]<<16,s[A+56>>1]=o,s[A+58>>1]=o>>>16,s[A+60>>1]=r,s[A+62>>1]=r>>>16,r=p[t+52>>1]|p[t+54>>1]<<16,o=p[t+48>>1]|p[t+50>>1]<<16,s[A+48>>1]=o,s[A+50>>1]=o>>>16,s[A+52>>1]=r,s[A+54>>1]=r>>>16,r=p[t+44>>1]|p[t+46>>1]<<16,o=p[t+40>>1]|p[t+42>>1]<<16,s[A+40>>1]=o,s[A+42>>1]=o>>>16,s[A+44>>1]=r,s[A+46>>1]=r>>>16,r=p[t+36>>1]|p[t+38>>1]<<16,o=p[t+32>>1]|p[t+34>>1]<<16,s[A+32>>1]=o,s[A+34>>1]=o>>>16,s[A+36>>1]=r,s[A+38>>1]=r>>>16,r=p[t+28>>1]|p[t+30>>1]<<16,o=p[t+24>>1]|p[t+26>>1]<<16,s[A+24>>1]=o,s[A+26>>1]=o>>>16,s[A+28>>1]=r,s[A+30>>1]=r>>>16,r=p[t+20>>1]|p[t+22>>1]<<16,o=p[t+16>>1]|p[t+18>>1]<<16,s[A+16>>1]=o,s[A+18>>1]=o>>>16,s[A+20>>1]=r,s[A+22>>1]=r>>>16,r=p[t+12>>1]|p[t+14>>1]<<16,o=p[t+8>>1]|p[t+10>>1]<<16,s[A+8>>1]=o,s[A+10>>1]=o>>>16,s[A+12>>1]=r,s[A+14>>1]=r>>>16,a[n+177904|0]=0,s[A>>1]=32768|p[A>>1],r=A))),A=p[h+2>>1]-d|0}n=1,s[2+((c<<1)+r|0)>>1]=A,i[l+8>>2]=r}if(6==(0|(c=c+1|0)))break}f=r}if((0|g)!=(0|u))continue;break A}break}f=t}for(r=0;;){if((t=i[(u=216192+(m<<4)|0)>>2])-5>>>0<2)break e;if((0|t)<=4){if(t=i[u+8>>2],A=p[u+4>>1],r){if((0|t)!=(0|r))break e;i[u+8>>2]=f}else f=t;if(16&(r=p[f>>1]))break e;for(h=32&r?(C(A,6)>>>0)/5|0:A,n=0,t=r=i[u+12>>2],c=0;;){A:{t:if((0|(g=(l=s[2+((A=c<<1)+r|0)>>1])-(A=s[2+(d=A+f|0)>>1])|0))>(0|(l=(0|C(h,(0|C(i[200944+(c<<2)>>2],(0|g)>0?l+(A<<1)|0:(l<<1)+A|0))/3e3|0))/256|0))){if(!n){if(s[r>>1]<0){t=r,A=A+l|0;break t}t=(0|(t=i[44469]+1|0))<=169?t:0,i[44469]=t,n=p[r+20>>1]|p[r+22>>1]<<16,A=16+(t=177888+(t<<6)|0)|0,g=p[r+16>>1]|p[r+18>>1]<<16,s[A>>1]=g,s[A+2>>1]=g>>>16,s[A+4>>1]=n,s[A+6>>1]=n>>>16,A=p[r+4>>1]|p[r+6>>1]<<16,n=p[r>>1]|p[r+2>>1]<<16,s[t>>1]=n,s[t+2>>1]=n>>>16,s[t+4>>1]=A,s[t+6>>1]=A>>>16,A=p[r+12>>1]|p[r+14>>1]<<16,n=p[r+8>>1]|p[r+10>>1]<<16,s[t+8>>1]=n,s[t+10>>1]=n>>>16,s[t+12>>1]=A,s[t+14>>1]=A>>>16,A=p[r+28>>1]|p[r+30>>1]<<16,n=p[r+24>>1]|p[r+26>>1]<<16,s[t+24>>1]=n,s[t+26>>1]=n>>>16,s[t+28>>1]=A,s[t+30>>1]=A>>>16,A=p[r+36>>1]|p[r+38>>1]<<16,n=p[r+32>>1]|p[r+34>>1]<<16,s[t+32>>1]=n,s[t+34>>1]=n>>>16,s[t+36>>1]=A,s[t+38>>1]=A>>>16,A=p[r+44>>1]|p[r+46>>1]<<16,n=p[r+40>>1]|p[r+42>>1]<<16,s[t+40>>1]=n,s[t+42>>1]=n>>>16,s[t+44>>1]=A,s[t+46>>1]=A>>>16,A=p[r+52>>1]|p[r+54>>1]<<16,n=p[r+48>>1]|p[r+50>>1]<<16,s[t+48>>1]=n,s[t+50>>1]=n>>>16,s[t+52>>1]=A,s[t+54>>1]=A>>>16,A=p[r+60>>1]|p[r+62>>1]<<16,n=p[r+56>>1]|p[r+58>>1]<<16,s[t+56>>1]=n,s[t+58>>1]=n>>>16,s[t+60>>1]=A,s[t+62>>1]=A>>>16,a[t+16|0]=0,s[t>>1]=32768|p[t>>1],A=p[d+2>>1]}A=A+l|0}else{if((0|g)>=(0-l|0))break A;n||(s[r>>1]<0?t=r:(t=(0|(t=i[44469]+1|0))<=169?t:0,i[44469]=t,n=p[r+20>>1]|p[r+22>>1]<<16,A=16+(t=177888+(t<<6)|0)|0,g=p[r+16>>1]|p[r+18>>1]<<16,s[A>>1]=g,s[A+2>>1]=g>>>16,s[A+4>>1]=n,s[A+6>>1]=n>>>16,A=p[r+4>>1]|p[r+6>>1]<<16,n=p[r>>1]|p[r+2>>1]<<16,s[t>>1]=n,s[t+2>>1]=n>>>16,s[t+4>>1]=A,s[t+6>>1]=A>>>16,A=p[r+12>>1]|p[r+14>>1]<<16,n=p[r+8>>1]|p[r+10>>1]<<16,s[t+8>>1]=n,s[t+10>>1]=n>>>16,s[t+12>>1]=A,s[t+14>>1]=A>>>16,A=p[r+28>>1]|p[r+30>>1]<<16,n=p[r+24>>1]|p[r+26>>1]<<16,s[t+24>>1]=n,s[t+26>>1]=n>>>16,s[t+28>>1]=A,s[t+30>>1]=A>>>16,A=p[r+36>>1]|p[r+38>>1]<<16,n=p[r+32>>1]|p[r+34>>1]<<16,s[t+32>>1]=n,s[t+34>>1]=n>>>16,s[t+36>>1]=A,s[t+38>>1]=A>>>16,A=p[r+44>>1]|p[r+46>>1]<<16,n=p[r+40>>1]|p[r+42>>1]<<16,s[t+40>>1]=n,s[t+42>>1]=n>>>16,s[t+44>>1]=A,s[t+46>>1]=A>>>16,A=p[r+52>>1]|p[r+54>>1]<<16,n=p[r+48>>1]|p[r+50>>1]<<16,s[t+48>>1]=n,s[t+50>>1]=n>>>16,s[t+52>>1]=A,s[t+54>>1]=A>>>16,A=p[r+60>>1]|p[r+62>>1]<<16,n=p[r+56>>1]|p[r+58>>1]<<16,s[t+56>>1]=n,s[t+58>>1]=n>>>16,s[t+60>>1]=A,s[t+62>>1]=A>>>16,a[t+16|0]=0,s[t>>1]=32768|p[t>>1],A=p[d+2>>1])),A=A-l|0}n=1,s[2+((c<<1)+t|0)>>1]=A,i[u+12>>2]=t}if(6==(0|(c=c+1|0)))break}f=t}if((0|e)==(0|(m=(0|(t=m+1|0))<=169?t:0)))break}}i[36454]=e}}function fe(e,A){var t,r,n=0,a=0,s=0,o=0,d=0,f=0,p=0,h=0,b=0,w=0,k=0,v=0,B=0,y=0,E=0,M=0,G=0,D=0,Q=0,T=0,P=0,z=0,F=0;W=t=W-48|0,u(+e),a=0|l(1),n=0|l(0),r=a;e:{A:{t:{if((d=2147483647&a)>>>0<=1074752122){if(598523==(1048575&a))break t;if(d>>>0<=1073928572){if((0|r)>0|(0|r)>=0){o=(e+=-1.5707963267341256)+-6077100506506192e-26,m[A>>3]=o,m[A+8>>3]=e-o-6077100506506192e-26,a=1;break e}o=(e+=1.5707963267341256)+6077100506506192e-26,m[A>>3]=o,m[A+8>>3]=e-o+6077100506506192e-26,a=-1;break e}if((0|r)>0|(0|r)>=0){o=(e+=-3.1415926534682512)+-1.2154201013012384e-10,m[A>>3]=o,m[A+8>>3]=e-o-1.2154201013012384e-10,a=2;break e}o=(e+=3.1415926534682512)+1.2154201013012384e-10,m[A>>3]=o,m[A+8>>3]=e-o+1.2154201013012384e-10,a=-2;break e}if(d>>>0<=1075594811){if(d>>>0<=1075183036){if(1074977148==(0|d))break t;if((0|r)>0|(0|r)>=0){o=(e+=-4.712388980202377)+-1.8231301519518578e-10,m[A>>3]=o,m[A+8>>3]=e-o-1.8231301519518578e-10,a=3;break e}o=(e+=4.712388980202377)+1.8231301519518578e-10,m[A>>3]=o,m[A+8>>3]=e-o+1.8231301519518578e-10,a=-3;break e}if(1075388923==(0|d))break t;if((0|r)>0|(0|r)>=0){o=(e+=-6.2831853069365025)+-2.430840202602477e-10,m[A>>3]=o,m[A+8>>3]=e-o-2.430840202602477e-10,a=4;break e}o=(e+=6.2831853069365025)+2.430840202602477e-10,m[A>>3]=o,m[A+8>>3]=e-o+2.430840202602477e-10,a=-4;break e}if(d>>>0>1094263290)break A}n=(G=(o=e+-1.5707963267341256*(h=.6366197723675814*e+6755399441055744-6755399441055744))-(w=6077100506506192e-26*h))<-.7853981633974483,a=I(h)<2147483648?~~h:-2147483648,n?(a=a-1|0,w=6077100506506192e-26*(h+=-1),o=e+-1.5707963267341256*h):G>.7853981633974483&&(a=a+1|0,w=6077100506506192e-26*(h+=1),o=e+-1.5707963267341256*h),e=o-w,m[A>>3]=e,u(+e),n=0|l(1),l(0),((s=d>>>20|0)-(n>>>20&2047)|0)<17||(w=o,e=(o-=e=6077100506303966e-26*h)-(w=20222662487959506e-37*h-(w-o-e)),m[A>>3]=e,u(+e),n=0|l(1),l(0),(s-(n>>>20&2047)|0)<50||(w=o,e=(o-=e=20222662487111665e-37*h)-(w=84784276603689e-45*h-(w-o-e)),m[A>>3]=e)),m[A+8>>3]=o-e-w;break e}if(d>>>0>=2146435072)e-=e,m[A>>3]=e,m[A+8>>3]=e,a=0;else{for(c(0,0|n),c(1,1048575&r|1096810496),e=+g(),a=0,n=1;s=(t+16|0)+(a<<3)|0,o=+(0|(a=I(e)<2147483648?~~e:-2147483648)),m[s>>3]=o,e=16777216*(e-o),a=1,s=n,n=0,s;);for(m[t+32>>3]=e,a=2;a=(n=a)-1|0,0==m[(t+16|0)+(n<<3)>>3];);if(D=t+16|0,s=0,W=f=W-560|0,d=C(M=(0|(d=((a=(d>>>20|0)-1046|0)-3|0)/24|0))>0?d:0,-24)+a|0,((k=i[28105])+(p=(y=n+1|0)-1|0)|0)>=0)for(a=k+y|0,n=M-p|0;m[(f+320|0)+(s<<3)>>3]=(0|n)<0?0:+i[112432+(n<<2)>>2],n=n+1|0,(0|a)!=(0|(s=s+1|0)););for(B=d-24|0,a=0,s=(0|k)>0?k:0,v=(0|y)<=0;;){if(v)e=0;else for(b=a+p|0,n=0,e=0;e=m[(n<<3)+D>>3]*m[(f+320|0)+(b-n<<3)>>3]+e,(0|y)!=(0|(n=n+1|0)););if(m[(a<<3)+f>>3]=e,n=(0|a)==(0|s),a=a+1|0,n)break}z=47-d|0,Q=48-d|0,F=d-25|0,a=k;A:{for(;;){if(e=m[(a<<3)+f>>3],n=0,s=a,!(b=(0|a)<=0))for(;v=(f+480|0)+(n<<2)|0,p=I(o=5.960464477539063e-8*e)<2147483648?~~o:-2147483648,p=I(e=-16777216*(o=+(0|p))+e)<2147483648?~~e:-2147483648,i[v>>2]=p,e=m[((s=s-1|0)<<3)+f>>3]+o,(0|a)!=(0|(n=n+1|0)););e=mt(e,B),e+=-8*x(.125*e),e-=+(0|(v=I(e)<2147483648?~~e:-2147483648));t:{r:{n:{if(T=(0|B)<=0){if(B)break n;p=i[476+((a<<2)+f|0)>>2]>>23}else E=s=(a<<2)+f|0,s=(p=i[s+476>>2])-((n=p>>Q)<<Q)|0,i[E+476>>2]=s,v=n+v|0,p=s>>z;if((0|p)<=0)break t;break r}if(p=2,!(e>=.5)){p=0;break t}}if(n=0,s=0,!b)for(;P=i[(E=(f+480|0)+(n<<2)|0)>>2],b=16777215,s||(b=16777216,P)?(i[E>>2]=b-P,s=1):s=0,(0|a)!=(0|(n=n+1|0)););r:if(!T){n=8388607;n:switch(0|F){case 1:n=4194303;break;case 0:break n;default:break r}i[476+(b=(a<<2)+f|0)>>2]=i[b+476>>2]&n}v=v+1|0,2==(0|p)&&(e=1-e,p=2,s&&(e-=mt(1,B)))}if(0!=e)break;if(s=0,!((0|k)>=(0|(n=a)))){for(;s=i[(f+480|0)+((n=n-1|0)<<2)>>2]|s,(0|n)>(0|k););if(s){for(d=B;d=d-24|0,!i[(f+480|0)+((a=a-1|0)<<2)>>2];);break A}}for(n=1;s=n,n=n+1|0,!i[(f+480|0)+(k-s<<2)>>2];);for(s=a+s|0;;){if(p=a+y|0,a=a+1|0,m[(f+320|0)+(p<<3)>>3]=i[112432+(M+a<<2)>>2],n=0,e=0,(0|y)>0)for(;e=m[(n<<3)+D>>3]*m[(f+320|0)+(p-n<<3)>>3]+e,(0|y)!=(0|(n=n+1|0)););if(m[(a<<3)+f>>3]=e,!((0|a)<(0|s)))break}a=s}(e=mt(e,24-d|0))>=16777216?(B=(f+480|0)+(a<<2)|0,n=I(o=5.960464477539063e-8*e)<2147483648?~~o:-2147483648,s=I(e=-16777216*+(0|n)+e)<2147483648?~~e:-2147483648,i[B>>2]=s,a=a+1|0):(n=I(e)<2147483648?~~e:-2147483648,d=B),i[(f+480|0)+(a<<2)>>2]=n}if(e=mt(1,d),!((0|a)<0)){for(n=a;s=n,m[(n<<3)+f>>3]=e*+i[(f+480|0)+(n<<2)>>2],n=n-1|0,e*=5.960464477539063e-8,s;);if(b=0,!((0|a)<0))for(d=(0|k)>0?k:0,s=a;;){for(B=d>>>0<b>>>0?d:b,k=a-s|0,n=0,e=0;e=m[115200+(n<<3)>>3]*m[(n+s<<3)+f>>3]+e,y=(0|n)!=(0|B),n=n+1|0,y;);if(m[(f+160|0)+(k<<3)>>3]=e,s=s-1|0,n=(0|a)!=(0|b),b=b+1|0,!n)break}}if(e=0,(0|a)>=0)for(n=a;s=n,n=n-1|0,e+=m[(f+160|0)+(s<<3)>>3],s;);if(m[t>>3]=p?-e:e,e=m[f+160>>3]-e,n=1,(0|a)>0)for(;e+=m[(f+160|0)+(n<<3)>>3],s=(0|n)!=(0|a),n=n+1|0,s;);m[t+8>>3]=p?-e:e,W=f+560|0,a=7&v,e=m[t>>3],(0|r)<0?(m[A>>3]=-e,m[A+8>>3]=-m[t+8>>3],a=0-a|0):(m[A>>3]=e,m[A+8>>3]=m[t+8>>3])}}return W=t+48|0,a}function pe(){var e=0,A=0,t=0,r=0,n=0,l=0,c=0,g=0,u=0,d=0,f=0,p=0,b=0,w=0,k=0,x=0,v=0,B=0,y=0,E=0,M=0,G=0,D=0,Q=0,T=0,P=0,z=0,F=0,S=0,N=0,O=0,L=0,Y=0,H=0,R=0,j=0,V=0,W=0,U=0,K=0,X=0,q=0,J=0,_=0,$=0,ee=0;i[55925]=0,e=i[56772],i[56772]=e+1,t=i[55961],b=i[55922],k=st(39.89822670059037*(A=+(0|e))),d=st(22.30530784048753*A),A=+(0|b)/50*(+(0|t)/100)*(st(14.765485471872028*A)+(k+d))*10,e=I(A)<2147483648?~~A:-2147483648,i[56607]=e+i[56607];e:if(!(i[55923]<=0)){for(;;){for(t=rr(i[33209],0,1103515245,0),e=Z,e=gn(t=t+12345|0,e=t>>>0<12345?e+1|0:e),i[33209]=e,e=8191+((e>>>0)%16383|0)|0,i[55929]=e,N=+(0|e),A=.75*m[28387]+N,m[28387]=A,O=(0|(e=i[55924]))>(0|(D=i[55928]))?.5*A:A,R=(n=.033*+i[56652])>0?1-n:1,t=i[56650]<<2,P=1==(0|(T=i[55921]))&&(0|t)>263?263:t,j=111136+((L=i[56651])<<1)|0,V=111136+((z=i[56658])<<1)|0,W=(0|z)>0,Y=i[55918],U=C(Y,40),K=i[55925],X=m[27967],H=i[56607],A=m[27979],v=m[27969],g=m[27970],F=i[56780],E=i[56654],p=m[27976],w=m[27972],B=m[28388],y=m[28389],b=i[55927],r=m[28383],f=i[55926],M=i[55956],q=m[27975],d=m[28131],l=m[28130],c=m[28123],x=m[28121],u=m[28122],Q=m[28120],G=m[28119],J=m[28129],_=m[28128],$=m[28127],ee=nt(0*m[27968]),S=0;;){k=l;A:{t:switch(T-1|0){case 0:B=0,l=x*c,c=u,u=r=l+(G*(B=(0|e)<=2?m[111312+(e<<3)>>3]:B)+Q*c);break A;case 1:if(r=0,(0|e)>=(0|b)){y=0;break A}l=m[27965]-m[27966],m[27965]=l,r=.028*(y=l+y);break A;case 2:if(!f){M=100,r=0;break A}M=100,t=I(l=+(0|e)/+(0|f)*100)<2147483648?~~l:-2147483648,r=+s[110928+((0|t)%100<<1)>>1],r=A*((+s[110928+((t+1|0)%100<<1)>>1]-r)*(l-+(0|t))+r);break A;case 3:break t;default:break A}f?(M=256,t=I(l=+(0|e)/+(0|f)*256)<2147483648?~~l:-2147483648,r=+s[111344+((0|t)%256<<1)>>1],r=A*((+s[111344+((t+1|0)%256<<1)>>1]-r)*(l-+(0|t))+r)):(M=256,r=0)}if((0|e)>=(0|f)&&((0|H)>0?(e=(0|U)/(0|H)|0,p=0,w=0,w=z>>>0<=87?.001*+s[V>>1]:w,p=L>>>0<=87?.001*+s[j>>1]*.1:p,D=e>>W,b=(0|(t=(f=(e-1|0)<=(0|P))?e-2|0:P))<=40?40:t,l=+s[111776+((b=f||(0|t)<40?b:P)<<1)>>1],m[27966]=l,x=l,l=+(0|b),m[27965]=x*l*.333,E=(0|(t=e-b|0))>(0|E)?E:t,F=0-(t=(0|F)<0?0-E|0:E)|0,G=(l*=.00833)*l,G*=1-(Q=(x=(l=$e(X*+((0|Y)/(0|b)|0)))*ee)+x)-(x=l*-l),e=4!=(0|(f=e+t|0))):(i[55930]=0,i[55931]=0,i[55932]=0,i[55933]=0,D=4,p=0,w=0,f=4,e=0),g=(e|=!K)?n:g,v=e?R:v,e=0),e=e+1|0,l=r=J*d+($*r+_*k),d=k,4==(0|(S=S+1|0)))break}if(i[55926]=f,i[55956]=M,i[55924]=e,m[28383]=r,i[55927]=b,m[28389]=y,m[28388]=B,m[27972]=w,m[27976]=p,i[55928]=D,i[56654]=E,i[56780]=F,m[27970]=g,m[27969]=v,m[28122]=u,m[28120]=Q,m[28119]=G,m[28123]=c,m[28121]=x,m[28131]=d,m[28130]=r,5==(0|T)&&(r=6e3*((A=+(0|e)/+(0|f))+A+-1),m[28383]=r),A=r*v+m[28384]*g,m[28383]=A,m[28384]=A,(0|e)<(0|b)&&(A=p*N+A,m[28383]=A),g=O*m[27974],k=A*m[27973]+g,d=0,2!=i[55916]&&(d=m[27987],u=m[27986],m[27987]=u,A=g+A*w,m[27986]=A,g=m[28059],c=m[28058],m[28059]=c,A=g*m[28057]+(m[28055]*(d*m[27985]+(m[27983]*A+u*m[27984]))+c*m[28056]),m[28058]=A,d=m[28049],g=m[28051],u=m[28048],c=m[28047],n=m[28050],m[28051]=n,A=d*g+(c*A+u*n),m[28050]=A,d=m[28043],g=m[28041],u=m[28040],c=m[28039],n=m[28042],m[28043]=n,A=g*d+(c*A+u*n),m[28042]=A,d=m[28035],g=m[28033],u=m[28032],c=m[28031],n=m[28034],m[28035]=n,A=g*d+(c*A+u*n),m[28034]=A,d=m[28027],g=m[28025],u=m[28024],c=m[28023],n=m[28026],m[28027]=n,A=g*d+(c*A+u*n),m[28026]=A,d=m[28019],g=m[28017],u=m[28016],c=m[28015],n=m[28018],m[28019]=n,A=g*d+(c*A+u*n),m[28018]=A,d=m[28011],g=m[28009],u=m[28008],c=m[28007],n=m[28010],m[28011]=n,A=g*d+(c*A+u*n),m[28010]=A,d=m[28003],g=m[28001],u=m[28e3],c=m[27999],n=m[28002],m[28003]=n,A=g*d+(c*A+u*n),m[28002]=A,d=m[27995],g=m[27993],u=m[27992],c=m[27991],n=m[27994],m[27995]=n,d=g*d+(c*A+u*n),m[27994]=d),A=m[28385],m[28385]=k,g=m[28075],u=m[28074],m[28075]=u,c=m[28067],n=m[28066],m[28067]=n,g=g*m[28073]+(m[28071]*k+u*m[28072]),m[28074]=g,u=c*m[28065]+(m[28063]*k+n*m[28064]),m[28066]=u,c=m[28081],n=m[28083],l=m[28079],r=m[28080],p=m[28082],m[28083]=p,k=c*n+(l*(A=q*O+k-A)+r*p),m[28082]=k,c=m[28091],n=m[28089],l=m[28087],r=m[28088],p=m[28090],m[28091]=p,c=n*c+(l*A+r*p),m[28090]=c,n=m[28099],l=m[28097],r=m[28095],p=m[28096],w=m[28098],m[28099]=w,n=l*n+(r*A+p*w),m[28098]=n,l=m[28107],r=m[28105],p=m[28103],w=m[28104],v=m[28106],m[28107]=v,l=r*l+(p*A+w*v),m[28106]=l,r=m[28115],p=m[28113],w=m[28111],v=m[28112],B=m[28114],m[28115]=B,r=p*r+(w*A+v*B),m[28114]=r,p=m[28139],w=m[28137],v=m[28136],B=m[28135],y=m[27971],x=m[28138],m[28139]=x,A=w*p+(B*(A*y-(r-(l-(n-(c-(k-(d+g+u)))))))+v*x),m[28138]=A,A=m[27977]*(A*+i[50779]),r=+(0|(e=I(A)<2147483648?~~A:-2147483648)),(0|(e=i[50776]))<i[50773]&&(f=e+1|0,t=i[50772],(b=i[50774])?(i[50776]=f,e=C(b,a[e+t|0])):(b=o[e+t|0],t=a[t+f|0],i[50776]=e+2,e=b|t<<8),r+=+((0|C(i[50775],(0|C(e,i[50780]))/1024|0))/40|0)),(0|(e=i[55962]))<=63&&(i[55962]=e+1,r=r*+(0|e)*.015625),(0|(e=i[55963]))<=0||(e=e-1|0,i[55963]=e,r=r*+(0|e)*.015625,e||(i[55962]=0)),t=(e=i[51293])+1|0,i[51293]=t,f=C(s[205184+(e<<1)>>1],i[50755])>>8,e=I(r)<2147483648?~~r:-2147483648,(0|t)>=5500&&(i[51293]=0),t=i[51290],i[51290]=t+1,e=(0|(e=(0|(e=e+f|0))<=-32768?-32768:e))>=32767?32767:e,a[0|t]=e,t=i[51290],i[51290]=t+1,a[0|t]=e>>>8,f=(t=i[51292])+1|0,i[51292]=f,s[205184+(t<<1)>>1]=e,(0|f)>=5500&&(i[51292]=0),f=1,i[56606]=i[56606]+1,h[54046]<i[51290]+2>>>0)break e;if(e=i[55925]+1|0,i[55925]=e,!((0|e)<i[55923]))break}f=0}return f}function he(e,A,t,r,n,l,c){var g,u,d,f=0,p=0,h=0,b=0,I=0,w=0,k=0,x=0,v=0,B=0,y=0,E=0,M=0,G=0,D=0,Q=0,T=0;W=g=W-80|0,i[g+76>>2]=A,d=g+55|0,u=g+56|0;e:{A:{t:{r:{n:for(;;){if(h=A,(2147483647^x)<(0|f))break r;x=f+x|0;a:{s:{i:{if(p=o[0|(f=h)])for(;;){o:{l:if(A=255&p){if(37!=(0|A))break o;for(p=f;;){if(37!=o[p+1|0]){A=p;break l}if(f=f+1|0,I=o[p+2|0],p=A=p+2|0,37!=(0|I))break}}else A=f;if((0|(f=f-h|0))>(0|(D=2147483647^x)))break r;if(e&&dn(e,h,f),f)continue n;i[g+76>>2]=A,f=A+1|0,v=-1,36!=o[A+2|0]|a[A+1|0]-48>>>0>=10||(v=a[A+1|0]-48|0,E=1,f=A+3|0),i[g+76>>2]=f,w=0;l:if((A=(p=a[0|f])-32|0)>>>0>31)k=f;else if(k=f,75913&(A=1<<A))for(;;){if(k=f+1|0,i[g+76>>2]=k,w|=A,(A=(p=a[f+1|0])-32|0)>>>0>=32)break l;if(f=k,!(75913&(A=1<<A)))break}l:if(42!=(0|p)){if((0|(B=_t(g+76|0)))<0)break r;p=i[g+76>>2]}else{if(36!=o[k+2|0]|a[k+1|0]-48>>>0>=10){if(E)break i;if(p=k+1|0,!e){i[g+76>>2]=p,E=0,B=0;break l}A=i[t>>2],i[t>>2]=A+4,E=0,A=i[A>>2]}else i[((a[k+1|0]<<2)+n|0)-192>>2]=10,p=k+3|0,E=1,A=i[((a[k+1|0]<<3)+r|0)-384>>2];if(i[g+76>>2]=p,B=A,(0|A)>=0)break l;B=0-B|0,w|=8192}if(f=0,b=-1,46==o[0|p])if(42!=o[p+1|0])i[g+76>>2]=p+1,b=_t(g+76|0),A=i[g+76>>2],G=1;else{if(36!=o[p+3|0]|a[p+2|0]-48>>>0>=10){if(E)break i;A=p+2|0,b=0,e&&(p=i[t>>2],i[t>>2]=p+4,b=i[p>>2])}else i[((a[p+2|0]<<2)+n|0)-192>>2]=10,A=p+4|0,b=i[((a[p+2|0]<<3)+r|0)-384>>2];i[g+76>>2]=A,G=~b>>>31|0}else A=p,G=0;for(;;){if(y=f,k=28,I=A,(f=a[0|A])-123>>>0<4294967238)break t;if(A=I+1|0,!((f=o[123983+(f+C(y,58)|0)|0])-1>>>0<8))break}i[g+76>>2]=A;l:{c:{if(27!=(0|f)){if(!f)break t;if((0|v)>=0){i[(v<<2)+n>>2]=f,f=i[4+(p=(v<<3)+r|0)>>2],i[g+64>>2]=i[p>>2],i[g+68>>2]=f;break c}if(!e)break a;CA(g- -64|0,f,t,c);break l}if((0|v)>=0)break t}if(f=0,!e)continue n}p=-65537&w,w=8192&w?p:w,v=0,M=84065,k=u;l:{c:{g:{u:{d:{f:{p:{h:{m:{C:{b:{I:{w:{k:{x:{v:switch(f=a[0|I],(f=y&&3==(15&f)?-33&f:f)-88|0){case 11:break l;case 9:case 13:case 14:case 15:break c;case 27:break p;case 12:case 17:break C;case 23:break b;case 0:case 32:break I;case 24:break w;case 22:break k;case 29:break x;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 10:case 16:case 18:case 19:case 20:case 21:case 25:case 26:case 28:case 30:case 31:break s}v:switch(f-65|0){case 0:case 4:case 5:case 6:break c;case 2:break d;case 1:case 3:break s}if(83==(0|f))break f;break s}p=i[g+64>>2],I=i[g+68>>2],M=84065;break m}f=0;k:switch(255&y){case 0:case 1:case 6:i[i[g+64>>2]>>2]=x;continue n;case 2:h=i[g+64>>2],i[h>>2]=x,i[h+4>>2]=x>>31;continue n;case 3:s[i[g+64>>2]>>1]=x;continue n;case 4:a[i[g+64>>2]]=x;continue n;case 7:break k;default:continue n}h=i[g+64>>2],i[h>>2]=x,i[h+4>>2]=x>>31;continue n}b=b>>>0<=8?8:b,w|=8,f=120}if(h=u,Q=32&f,(p=i[g+64>>2])|(I=i[g+68>>2]))for(;a[0|(h=h-1|0)]=Q|o[124512+(15&p)|0],T=!I&p>>>0>15|!!(0|I),y=I,I=I>>>4|0,p=(15&y)<<28|p>>>4,T;);if(!(i[g+64>>2]|i[g+68>>2])|!(8&w))break h;M=84065+(f>>>4|0)|0,v=2;break h}if(f=u,I=h=i[g+68>>2],h|(p=i[g+64>>2]))for(;a[0|(f=f-1|0)]=7&p|48,y=!I&p>>>0>7|!!(0|I),I=(h=I)>>>3|0,p=(7&h)<<29|p>>>3,y;);if(h=f,!(8&w))break h;b=(0|(f=u-h|0))<(0|b)?b:f+1|0;break h}p=i[g+64>>2],I=f=i[g+68>>2],(0|f)<0?(I=h=0-(I+!!(0|p)|0)|0,p=0-p|0,i[g+64>>2]=p,i[g+68>>2]=h,v=1,M=84065):2048&w?(v=1,M=84066):M=(v=1&w)?84067:84065}h=Kt(p,I,u)}if((0|b)<0&&G)break r;if(w=G?-65537&w:w,!(b|!!((f=i[g+64>>2])|(p=i[g+68>>2])))){h=u,b=0;break s}b=(0|(f=!(f|p)+(u-h|0)|0))<(0|b)?b:f;break s}if(k=(f=(f=JA(h=(f=i[g+64>>2])||84639,0,I=b>>>0>=2147483647?2147483647:b))?f-h|0:I)+h|0,(0|b)>=0){w=p,b=f;break s}if(w=p,b=f,o[0|k])break r;break s}if(b){p=i[g+64>>2];break u}f=0,or(e,32,B,0,w);break g}i[g+12>>2]=0,i[g+8>>2]=i[g+64>>2],p=g+8|0,i[g+64>>2]=p,b=-1}f=0;u:{for(;;){if(!(h=i[p>>2]))break u;if(!((h=(0|(I=XA(g+4|0,h)))<0)|I>>>0>b-f>>>0)){if(p=p+4|0,b>>>0>(f=f+I|0)>>>0)continue;break u}break}if(h)break A}if(k=61,(0|f)<0)break t;if(or(e,32,B,f,w),f)for(k=0,p=i[g+64>>2];;){if(!(h=i[p>>2]))break g;if((k=(h=XA(g+4|0,h))+k|0)>>>0>f>>>0)break g;if(dn(e,g+4|0,h),p=p+4|0,!(f>>>0>k>>>0))break}else f=0}or(e,32,B,f,8192^w),f=(0|f)<(0|B)?B:f;continue n}if((0|b)<0&&G)break r;if(k=61,(0|(f=0|Tn[0|l](e,m[g+64>>3],B,b,w,f)))>=0)continue n;break t}a[g+55|0]=i[g+64>>2],b=1,h=d,w=p;break s}p=o[f+1|0],f=f+1|0}if(e)break e;if(!E)break a;for(f=1;;){if(e=i[(f<<2)+n>>2]){if(CA((f<<3)+r|0,e,t,c),x=1,10!=(0|(f=f+1|0)))continue;break e}break}if(x=1,f>>>0>=10)break e;for(;;){if(i[(f<<2)+n>>2])break i;if(10==(0|(f=f+1|0)))break}break e}k=28;break t}if((0|(p=(0|b)>(0|(I=k-h|0))?b:I))>(2147483647^v))break r;if(k=61,(0|D)<(0|(f=(0|(b=p+v|0))<(0|B)?B:b)))break t;or(e,32,f,b,w),dn(e,M,v),or(e,48,f,b,65536^w),or(e,48,p,I,0),dn(e,h,I),or(e,32,f,b,8192^w);continue}break}x=0;break e}k=61}i[56798]=k}x=-1}return W=g+80|0,x}function me(e,A,t,r,n,a,s,o,l){var c,g,u,d=0,f=0,p=0,h=0,m=0,C=0,b=0,I=0,k=0,x=0,v=0,B=0,y=0,E=0,M=0,G=0,D=0,Q=0,T=0,P=0,z=0,F=0,S=0,N=0,O=0,L=0,Y=0,H=0,R=0,j=0,V=0;W=c=W-96|0,v=65535&l,m=-2147483648&(n^l),G=b=65535&n;e:{if(!((g=l>>>16&32767)-32767>>>0>4294934529&(u=n>>>16&32767)-32767>>>0>=4294934530)){if(d=r,!(!r&2147418112==(0|(I=k=2147483647&n))?!(A|t):I>>>0<2147418112)){p=r,m=32768|n;break e}if(!(!(n=o)&2147418112==(0|(C=k=2147483647&l))?!(a|s):C>>>0<2147418112)){p=o,m=32768|l,A=a,t=s;break e}if(!(A|d|2147418112^I|t)){if(!(n|a|s|C)){m=2147450880,A=0,t=0;break e}m|=2147418112,A=0,t=0;break e}if(!(n|a|2147418112^C|s)){if(n=A|d,r=t|I,A=0,t=0,!(r|n)){m=2147450880;break e}m|=2147418112;break e}if(!(A|d|t|I)){A=0,t=0;break e}if(!(n|a|s|C)){A=0,t=0;break e}65535==(0|I)|I>>>0<65535&&(k=(d=!(r|b))<<6,n=w(l=d?A:r)+32|0,WA(c+80|0,A,t,r,b,(l=k+(32==(0|(l=w(d?t:b)))?n:l)|0)-15|0),x=16-l|0,r=i[c+88>>2],G=i[c+92>>2],t=i[c+84>>2],A=i[c+80>>2]),C>>>0>65535||(b=(l=!(o|v))<<6,d=w(n=l?a:o)+32|0,WA(c- -64|0,a,s,o,v,(n=b+(32==(0|(n=w(l?s:v)))?d:n)|0)-15|0),x=16+(x-n|0)|0,o=i[c+72>>2],v=i[c+76>>2],a=i[c+64>>2],s=i[c+68>>2])}if(n=a,a=s<<15|a>>>17,L=t,k=rr(B=-32768&(l=n<<15),n=0,t,0),M=n=Z,Y=a,I=A,A=rr(a,0,A,0),a=Z+n|0,t=A>>>0>(l=A+k|0)>>>0?a+1|0:a,d=0,A=rr(I,f,B,f),n=(a=l)+Z|0,b=n=A>>>0>(C=d+A|0)>>>0?n+1|0:n,H=(0|a)==(0|n)&d>>>0>C>>>0|n>>>0<a>>>0,R=r,y=rr(B,f,r,0),j=Z,A=rr(L,f,Y,f),d=Z+j|0,d=A>>>0>(E=A+y|0)>>>0?d+1|0:d,A=v<<15|o>>>17,r=rr(D=o<<15|s>>>17,0,I,f),a=Z+d|0,T=a=r>>>0>(Q=r+E|0)>>>0?a+1|0:a,a=(r=(0|t)==(0|M)&l>>>0<k>>>0|t>>>0<M>>>0)+a|0,v=a=t>>>0>(P=t+Q|0)>>>0?a+1|0:a,s=P,t=a,G=rr(B,f,z=65536|G,h),V=Z,r=rr(R,p,Y,f),n=Z+V|0,l=n=r>>>0>(F=r+G|0)>>>0?n+1|0:n,A=rr(S=-2147483648|A,0,I,f),a=Z+n|0,a=A>>>0>(N=A+F|0)>>>0?a+1|0:a,A=rr(D,p,L,f),O=a,a=a+Z|0,k=A>>>0>(M=A+N|0)>>>0?a+1|0:a,n=t+M|0,a=B=(A=0)>>>0>(I=A+s|0)>>>0?n+1|0:n,t=(A=I+H|0)>>>0<I>>>0?a+1|0:a,x=((u+g|0)+x|0)-16383|0,r=rr(S,p,L,f),o=Z,n=rr(z,p,Y,f),a=Z+o|0,h=(0|o)==(0|(a=n>>>0>(s=n+r|0)>>>0?a+1|0:a))&r>>>0>s>>>0|a>>>0<o>>>0,o=a,n=rr(D,p,R,p),a=Z+a|0,n=a=(r=n+s|0)>>>0<n>>>0?a+1|0:a,s=(0|a)==(0|o)&r>>>0<s>>>0|a>>>0<o>>>0,a=0,a=(o=s)>>>0>(s=s+h|0)>>>0?1:a,o=s,s=rr(S,p,z,p),a=Z+a|0,H=o=o+s|0,s=s>>>0>o>>>0?a+1|0:a,o=r,f=n,n=(0|d)==(0|j)&y>>>0>E>>>0|d>>>0<j>>>0,a=0,n=((h=d=(0|d)==(0|T)&E>>>0>Q>>>0|d>>>0>T>>>0)>>>0>(d=n+d|0)>>>0?1:a)+f|0,a=s,h=n=(r=r+d|0)>>>0<d>>>0?n+1|0:n,y=r,n=r=(0|n)==(0|f)&r>>>0<o>>>0|n>>>0<f>>>0,d=r=r+H|0,s=a=n>>>0>r>>>0?a+1|0:a,n=rr(D,p,z,p),f=Z,r=rr(S,p,R,p),a=Z+f|0,r=a=r>>>0>(o=r+n|0)>>>0?a+1|0:a,n=(a=(0|f)==(0|a)&n>>>0>o>>>0|a>>>0<f>>>0)+s|0,s=n=r>>>0>(E=r+d|0)>>>0?n+1|0:n,a=o+h|0,n=a=(r=(n=0)+y|0)>>>0<n>>>0?a+1|0:a,o=(0|h)==(0|a)&r>>>0<y>>>0|a>>>0<h>>>0,a=s,a=(s=o+(f=E)|0)>>>0<o>>>0?a+1|0:a,y=s,o=r,d=n,n=(r=(r=(r=(0|l)==(0|V)&G>>>0>F>>>0|l>>>0<V>>>0)+(l=(0|l)==(0|O)&F>>>0>N>>>0|l>>>0>O>>>0)|0)+(n=(0|k)==(0|O)&M>>>0<N>>>0|k>>>0<O>>>0)|0)+d|0,a=s=a,d=s=(o=(0|(n=(r=l=(h=k)+o|0)>>>0<h>>>0?n+1|0:n))==(0|d)&o>>>0>r>>>0|n>>>0<d>>>0)+y|0,s=a=o>>>0>s>>>0?a+1|0:a,o=r,a=0,l=n,n=n+((f=h=(0|v)==(0|B)&I>>>0<P>>>0|v>>>0>B>>>0)>>>0>(h=h+((0|v)==(0|T)&Q>>>0>P>>>0|v>>>0<T>>>0)|0)>>>0?1:a)|0,a=s,l=a=(s=o=(0|(n=(r=r+h|0)>>>0<h>>>0?n+1|0:n))==(0|l)&r>>>0<o>>>0|n>>>0<l>>>0)>>>0>(o=o+d|0)>>>0?a+1|0:a,65536&a?x=x+1|0:(d=b>>>31|0,a=l<<1|o>>>31,o=o<<1|n>>>31,l=a,a=n<<1|r>>>31,r=r<<1|t>>>31,n=a,a=b<<1|C>>>31,C<<=1,b=a,a=t<<1|A>>>31,A=A<<1|d,t=a|(s=0)),(0|x)>=32767)m|=2147418112,A=0,t=0;else{A:{if((0|x)<=0){if((s=1-x|0)>>>0<=127){WA(c+48|0,C,b,A,t,a=x+127|0),WA(c+32|0,r,n,o,l,a),YA(c+16|0,C,b,A,t,s),YA(c,r,n,o,l,s),C=i[c+32>>2]|i[c+16>>2]|!!(i[c+48>>2]|i[c+56>>2]|i[c+52>>2]|i[c+60>>2]),b=i[c+36>>2]|i[c+20>>2],A=i[c+40>>2]|i[c+24>>2],t=i[c+44>>2]|i[c+28>>2],r=i[c>>2],n=i[c+4>>2],s=i[c+8>>2],a=i[c+12>>2];break A}A=0,t=0;break e}s=o,a=65535&l|x<<16}p|=s,m|=a,(!A&-2147483648==(0|t)?!(C|b):(0|t)>0|(0|t)>=0)?A|C|-2147483648^t|b?(A=r,t=n):(d=m,m=(r=(0|(a=n))==(0|(t=(t=A=1&r)>>>0>(A=A+r|0)>>>0?a+1|0:a))&A>>>0<r>>>0|t>>>0<a>>>0)>>>0>(p=r+p|0)>>>0?d+1|0:d):(r=(0|n)==(0|(t=(A=r+1|0)?n:n+1|0))&A>>>0<r>>>0|t>>>0<n>>>0,n=m,m=(p=r+p|0)>>>0<r>>>0?n+1|0:n)}}i[e>>2]=A,i[e+4>>2]=t,i[e+8>>2]=p,i[e+12>>2]=m,W=c+96|0}function Ce(e,A,t,r,n,s,l){var c,g=0,u=0,d=0,f=0,p=0,h=0,m=0,C=0,b=0,I=0,w=0,k=0,x=0,v=0,B=0;W=c=W-480|0,i[c+476>>2]=0,i[c+456>>2]=0,i[c+460>>2]=0,i[c+448>>2]=0,i[c+452>>2]=0,i[c+440>>2]=0,i[c+444>>2]=0,i[c+432>>2]=0,i[c+436>>2]=0,g=0;e:if(i[e+684>>2]){for(m=l?i[l>>2]:m;d=o[A+g|0],a[(c+112|0)+g|0]=d,u=g+1|0,d&&(d=g>>>0<158,g=u,d););if(a[u+(c+112|0)|0]=0,!((I=268435456&s)|!(8&i[47197]))){u=0;A:if(223&(d=o[0|A]))for(g=0;;){if(a[(c+272|0)+g|0]=d,!(223&(d=o[(u=g+1|0)+A|0])))break A;if(f=g>>>0<118,g=u,!f)break}a[(g=c+272|0)+u|0]=0,i[c+48>>2]=g,en(i[47195],(0|s)>=0?87019:86877,c+48|0)}i[c+464>>2]=A,i[e+8208>>2]=0,i[e+8212>>2]=0,n&&(a[0|n]=0);A:{t:if(223&(g=o[0|A]))for(w=536870912&s,k=4096&s,x=c+105|0,u=A,d=0;;){f=VA(c+476|0,u),b=!!(0|dt(i[c+476>>2]))+b|0,h=o[7668+(g=(p=255&g)+e|0)|0];r:if(!((C=i[c+476>>2])-48>>>0<10|C-2406>>>0<10)|(b?o[e+170|0]:0)){n:if((d=i[c+476>>2]-i[e+600>>2]|0)>>>0>127||!(d=i[6192+((d<<2)+e|0)>>2])){if(h){for(C=5168+((p<<2)+e|0)|0,h=h+(g=o[g+7924|0])|0,v=p|o[u+1|0]<<8,d=0;i[7184+(u=(g<<2)+e|0)>>2]==(0|v)&&(i[c+472>>2]=i[c+464>>2],re(e,c+472|0,A,2,i[u+6704>>2],c+432|0,s,m),(0|(u=i[c+432>>2]))>0&&(u=u+35|0,i[c+432>>2]=u),d=1,re(e,c+464|0,A,1,i[C>>2],c+448|0,s,m),i[c+448>>2]>(0|u)||(u=i[c+444>>2],i[c+456>>2]=i[c+440>>2],i[c+460>>2]=u,u=i[c+436>>2],i[c+448>>2]=i[c+432>>2],i[c+452>>2]=u,i[c+464>>2]=i[c+472>>2])),h>>>0>(g=g+1|0)>>>0;);if(d)break n}a:{s:{if(!(g=i[5168+((p<<2)+e|0)>>2])){if(re(e,c+464|0,A,0,i[e+5168>>2],c+448|0,s,m),i[c+448>>2])break a;if(16&o[188808])break s;if(d=VA(c+468|0,p=(u=i[c+464>>2])-1|0),g=i[c+468>>2],!(i[e+600>>2]<=0|(0|g)>577)){if(Or(g)){i[c+32>>2]=21,Bt(t,87049,c+32|0);break A}g=i[c+468>>2]}if(57384==(0|g)&&((0|(h=i[e+92>>2]))<=i[47352]||(i[47352]=h)),rn(g)&&((0|(g=i[e+72>>2]))<=i[47352]||(i[47352]=g)),!((h=(g=i[c+468>>2])-192|0)>>>0>413)&&(h=o[h+94240|0])&&(d=d-1|0,!(32==o[u-2|0]&32==o[d+u|0]))){for(i[c+472>>2]=p,a[0|p]=h;f=o[(g=u)+d|0],a[0|g]=f,u=g+1|0,32!=(0|f););if((0|d)>0&&kA(g,32,d),i[e+24>>2]&&!((0|zr(94222,i[c+468>>2]))<=0)){i[c+464>>2]=p,d=0;break r}d=0,a[0|t]=0,i[c+464>>2]=A,i[e+8208>>2]=0,i[e+8212>>2]=0;break r}if(!(g=aA(g)))break s;if((0|(u=i[g+4>>2]))==i[e+600>>2])break s;if((0|u)==i[e+188>>2]){i[c+4>>2]=kr(c- -64|0,i[e+192>>2]),i[c>>2]=21,Bt(t,87218,c);break A}if(!(4&o[g+16|0]))break s;i[c+20>>2]=kr(c- -64|0,i[g+12>>2]),i[c+16>>2]=21,Bt(t,87218,c+16|0);break A}if(re(e,c+464|0,A,1,g,c+448|0,s,m),i[c+448>>2])break a}s:if(!((g=i[c+476>>2])-768>>>0<112)){if(dt(g)){if(a[(f+i[c+464>>2]|0)-1|0]<33&(0|b)<=1)break s;if(a[0|t]=0,!l)break t;i[l>>2]=4096|i[l>>2];break t}wA(e,i[c+476>>2],-1,c+272|0,0),o[c+272|0]&&(i[c+448>>2]=1,i[c+452>>2]=c+272)}i[c+464>>2]=(f+i[c+464>>2]|0)-1;break n}i[e+288>>2]=0}else re(e,c+464|0,A,f,d,c+448|0,s,m);if(u=(g=i[c+452>>2])||86135,i[c+452>>2]=u,d=0,!(i[c+448>>2]<=0)){if(g=1|i[c+456>>2],(0|s)<0)break e;if(!(21!=o[0|u]|k)){rt(t,u);break A}if(!(!(8&i[47197])|I))n:if(g=i[47195],(0|(f=i[g+76>>2]))>=0&(!f|i[56823]!=(-1073741825&f)))p=i[(f=g+76|0)>>2],i[f>>2]=p||1073741823,10==i[g+80>>2]||(0|(p=i[g+20>>2]))==i[g+16>>2]?Yt(g):(i[g+20>>2]=p+1,a[0|p]=10),i[f>>2]=0;else{if(10!=i[g+80>>2]&&(0|(f=i[g+20>>2]))!=i[g+16>>2]){i[g+20>>2]=f+1,a[0|f]=10;break n}Yt(g)}if(f=-32769&(g=i[c+456>>2]),i[c+456>>2]=f,!(!n|!f|(1024&g?w:0))){e=i[c+464>>2],rt(n,u),g=f|(B=(t=e)-_e(A,e=c+112|0,jt(e))|0,1024==(1151&g)?B:0);break e}(g=i[c+460>>2])&&(a[0|g]=69),at(e,t,r,u)}}else a[c+104|0]=95,_e(x,u,f),g=1,a[105+(c+f|0)|0]=0,Et(e,c+104|0,c- -64|0),d-1>>>0<=4294967293&&(g=jt(g=c- -64|0)+g|0,a[0|g]=11,a[g+1|0]=0,g=0),at(e,t,r,c- -64|0),i[c+464>>2]=u+f,d=g;if(u=i[c+464>>2],!(223&(g=o[0|u])))break}_e(A,e=c+112|0,jt(e))}g=0}return W=c+480|0,g}function be(e,A){var t,r=0,n=0,s=0,l=0,c=0,g=0,u=0,d=0,f=0,p=0,h=0,m=0,b=0,I=0,w=0,k=0,x=0,v=0,B=0,y=0,E=0,M=0;W=t=W-2976|0,i[A>>2]=1,r=i[e+20>>2],i[(c=t+2960|0)>>2]=i[e+16>>2],i[c+4>>2]=r,r=i[e+12>>2],i[(c=t+2952|0)>>2]=i[e+8>>2],i[c+4>>2]=r,r=i[e+4>>2],i[t+2944>>2]=i[e>>2],i[t+2948>>2]=r,i[50303]||xA();e:if(e=i[t+2948>>2],o[0|e]&&e||((e=i[t+2944>>2])||(e=(e=i[t+2952>>2])||85055,i[t+2944>>2]=e),fn(r=t+80|0,e,60),et(r,0),!(s=TA(201216,r))||(i[t+2948>>2]=i[s+4>>2]+1,o[t+2958|0]|o[t+2956|0]|o[t+2957|0]))){I=t+1536|0,W=m=W-336|0;A:if(!(!(e=i[4+(b=t+2944|0)>>2])|!o[0|e])){if((0|(w=jt(e)))>=0){for(r=w>>>0>=79?79:w,d=1;e=nr(a[i[b+4>>2]+n|0]),a[(m+256|0)+n|0]=e,d=(45==(255&e))+d|0,e=(0|r)!=(0|n),n=n+1|0,e;);if(1!=(0|d))break A}d=1}if((0|(f=i[50303]))<=0)i[I>>2]=0,e=0;else{for(c=(0|d)>=0;;){u=i[201216+(v<<2)>>2];A:if(Dt(i[u+8>>2],88032,3)){if((e=i[b+4>>2])&&Dt(e,91687,3)){if(c){e=100;t:if(d){if(r=0,n=i[u+4>>2],!(k=o[0|n])){if(!Dt(m+256|0,90013,9))break t;break A}for(;;){for(B=1,g=n+1|0,x=1,y=0,n=0;(0|n)<(0|w)&&45!=(0|(e=a[(m+256|0)+n|0]))||(e=0),y=((p=45==(0|(h=o[n+g|0])))&!!(0|(x=(p?0:h)<<24>>24==(0|e)?x:0)))+y|0,n=n+1|0,B=p+B|0,h;);if(n=n+g|0,(p=x+y|0)&&(r=(0|(e=C((g=(0|(e=d-p|0))<=0?5:5-e|0)-((0|(e=B-p|0))>0?e:0)|0,100)-(k<<24>>24<<1)|0))>(0|r)?e:r),!(k=o[0|n]))break}if(!(e=r))break A}(r=i[b>>2])&&(e=hr(r,i[u>>2])?hr(r,i[u+8>>2])?e:e+400|0:e+500|0),((n=o[b+12|0])-1&255)>>>0>1||((r=o[u+12|0])-1&255)>>>0>1||(e=(0|r)!=(0|n)?e-50|0:e+50|0),n=o[b+13|0],e=2!=o[u+12|0]|n>>>0>12?e:o[u+13|0]>12?e+5|0:e,(r=o[u+13|0])&&((r=((n?C(n,100):3e3)>>>0)/(r>>>0)|0)>>>0<=99&&(r=1e4/(r>>>0)|0),e=(g=e)+((e=5-(((r-100&65535)>>>0)/10|0)|0)>>31&e)|0,e=n?e+10|0:e),e=(0|e)<=1?1:e}else{if(Dt(i[u+8>>2],m+256|0,w))break A;e=100}i[I+(l<<2)>>2]=u,i[u+16>>2]=e}else i[I+(l<<2)>>2]=u;l=l+1|0}if((0|f)==(0|(v=v+1|0)))break}i[I+(l<<2)>>2]=0,e=0,l&&(AA(I,l,8),e=l)}if(W=m+336|0,d=e,e||(i[A>>2]=0,e=TA(201216,85055),i[t+1536>>2]=e,d=!!(0|e)),A=o[t+2957|0],c=2,2!=(0|(e=o[t+2956|0]))&&(c=2,(A-1&255)>>>0<12||(M=1!=(0|e),c=1==(0|e))),f=(l=i[132136+(c<<2)>>2])+(h=A>>>0<60)|0,e=0,(0|d)>0)for(r=0;;){s=i[(t+1536|0)+(E<<2)>>2];A:{t:{r:{if(M){if(h)break t;if(A=0,r)break t}else{if(A=o[s+12|0],r|h)break r;A=(0|A)!=(0|c)}if(n=0,A|o[s+13|0]<60)break A;break t}if((0|A)!=(0|c)){n=r;break A}}i[(t+80|0)+(r<<2)>>2]=s,n=r+1|0}A:if(o[s+15|0]){if(p=0,A=e,r=n,!((0|e)>11))for(;;){if((n=o[0|f])||(f=l,n=o[0|l]),e=i[s+12>>2],g=C(A,24)+202624|0,i[g+8>>2]=i[s+8>>2],i[g+12>>2]=e,e=i[s+4>>2],i[g>>2]=i[s>>2],i[g+4>>2]=e,e=i[s+20>>2],i[g+16>>2]=i[s+16>>2],i[g+20>>2]=e,a[g+14|0]=n,i[(t+80|0)+(r<<2)>>2]=g,f=f+1|0,r=r+1|0,e=A+1|0,(p=p+1|0)>>>0>=o[s+15|0])break A;if(n=(0|A)<11,A=e,!n)break}}else r=n;if((0|(E=E+1|0))==(0|d))break}else{if(!s)break e;r=0}A:if(!(!(n=o[0|f])|(0|e)>=12))for(;;){if(A=i[s+12>>2],l=C(e,24)+202624|0,i[l+8>>2]=i[s+8>>2],i[l+12>>2]=A,A=i[s+4>>2],i[l>>2]=i[s>>2],i[l+4>>2]=A,A=i[s+20>>2],i[l+16>>2]=i[s+16>>2],i[l+20>>2]=A,a[l+14|0]=n,i[(t+80|0)+(r<<2)>>2]=l,r=r+1|0,!(n=o[0|(f=f+1|0)]))break A;if(A=(0|e)<11,e=e+1|0,!A)break}r?(e=i[(t+80|0)+(o[t+2958|0]%(0|r)<<2)>>2],(A=o[e+14|0])?(a[202976]=0,i[t+48>>2]=47,Bt(t+2971|0,91351,t+48|0),a[t+2971|0]=0,A>>>0<=9?(i[t+20>>2]=A,i[t+16>>2]=t+2971,Bt(202976,91378,t+16|0)):(i[t+36>>2]=A-10,i[t+32>>2]=t+2971,Bt(202976,91503,t+32|0)),e=i[e+8>>2],i[t+4>>2]=202976,i[t>>2]=e,e=202912,Bt(202912,87760,t)):e=i[e+8>>2]):e=0}else{if(e=i[s+8>>2],!o[202976])break e;i[t+64>>2]=e,i[t+68>>2]=202976,e=202912,Bt(202912,87760,t- -64|0)}return W=t+2976|0,e}function Ie(e,A,t,r,n){var s,l,c=0,g=0,u=0,d=0,f=0,p=0,h=0;W=s=W-464|0,a[s+432|0]=0,a[s+368|0]=0,a[s+304|0]=0,a[s+292|0]=0,f=(0|A)/10|0,c=i[33273];e:{if(!(l=2&r)|2!=i[33272]){h=32&r?113:111,d=1&r,p=A-C(f,10)|0;A:{t:{r:{n:{a:{s:{i:{o:if(o[0|c])c=0;else{l:{if(8&r){if(i[s+288>>2]=A,Bt(g=s+452|0,91198,s+288|0),c=Et(e,g,s+304|0)){g=0;break o}i[s+272>>2]=A,Bt(g=s+452|0,91314,s+272|0),c=Et(e,g,s+304|0),g=0}else{if(!d)break l;if(u=rt(s+432|0,133104),4&r){if(i[s+260>>2]=h,i[s+256>>2]=A,Bt(g=s+452|0,91324,s+256|0),c=Et(e,g,s+304|0),o[133116]&&c)break i;if(g=c,c)break o}i[s+244>>2]=h,i[s+240>>2]=A,Bt(g=s+452|0,91384,s+240|0),g=c=Et(e,g,s+304|0)}if(c)break o}l:{if(l){if(!(1&a[133096]))break l;i[s+208>>2]=A,Bt(c=s+452|0,91498,s+208|0),c=Et(e,c,s+304|0)}else u=i[e+108>>2],i[s+224>>2]=A,Bt(c=s+452|0,(0|t)>=2?91700:(262144&u)>>>18|0?91534:91700,s+224|0),c=Et(e,c,s+304|0);if(c)break o}!d|!(32&o[e+109|0])?(i[s+192>>2]=A,Bt(c=s+452|0,91766,s+192|0),c=Et(e,c,s+304|0)):c=0}if(!(16&r)|(0|A)>9)break a;c=g;break s}if(rt(u,133116),!(16&r)|(0|A)>9)break n}Et(e,88875,s+368|0);break t}if(!c)break r;c=g}a[s+368|0]=0;break t}r:if(d&&(i[s+180>>2]=h,i[s+176>>2]=f,Bt(c=s+452|0,91846,s+176|0),Et(e,c,s+368|0))){if(g=1,!p|!(16&o[e+109|0]))break r;yn(s+368|0,133104)}else g||(i[s+160>>2]=f,Bt(g=s+452|0,512&r?91936:92016,s+160|0),Et(e,g,s+368|0),g=0);if(c=p,o[s+368|0]||(c=p,16&o[e+106|0]&&(i[s+144>>2]=254&f,Bt(c=s+452|0,92016,s+144|0),Et(e,c,s+368|0),c=(0|A)%20|0)),a[s+304|0]=0,f=c,(0|c)<=0)c=g;else{if(l&&(c=i[33273],o[0|c])){rt(s+304|0,c),a[s+432|0]=0,u=d;break A}if(u=0,8&r&&(i[s+128>>2]=f,Bt(r=s+452|0,91314,s+128|0),u=Et(e,r,s+304|0)),!d|16&o[e+104|0]||(i[s+116>>2]=h,i[s+112>>2]=f,Bt(r=s+452|0,91384,s+112|0),g=(u=Et(e,r,s+304|0))?1:g),c=g,!u){r:{if(!l|!(1&i[33274])){if(!(16&o[e+104|0])&&l)break r;g=i[e+108>>2],i[s+96>>2]=f,Bt(r=s+452|0,(0|t)>=2?91700:(262144&g)>>>18|0?91534:91700,s+96|0),t=Et(e,r,s+304|0)}else i[s+80>>2]=f,Bt(t=s+452|0,91498,s+80|0),t=Et(e,t,s+304|0);if(t)break t}i[s+64>>2]=f,Bt(t=s+452|0,91766,s- -64|0),Et(e,t,s+304|0)}}}u=d,o[s+432|0]|c|!d||((0|A)<20|(16&o[e+104|0]?0:p)||(Et(e,92162,s+432|0),u=1,!o[s+432|0]))&&(Et(e,92205,s+432|0),u=1)}if(!(!(t=a[s+304|0])|!(48&(A=i[e+104>>2]))|!o[s+368|0])){if(Et(e,90824,s+292|0),!u|!(8&o[e+109|0])||(a[s+292|0]=0),16&o[e+104|0]){i[s+28>>2]=s+432,i[s+24>>2]=s+368,i[s+20>>2]=s+292,i[s+16>>2]=s+304,Bt(n,91059,s+16|0),r=1;break e}i[s+12>>2]=s+432,i[s+8>>2]=s+304,i[s+4>>2]=s+292,i[s>>2]=s+368,Bt(n,91059,s),r=1;break e}512&A&&(!t|(0|(A=jt(s+368|0)-1|0))<0||(c=2!=o[i[144464+(a[0|(A=A+(s+368|0)|0)]<<2)>>2]+11|0],1==(0|(r=o[i[144464+(t<<2)>>2]+11|0]))&&(r=o[i[144464+(a[s+305|0]<<2)>>2]+11|0]),c|2!=(255&r)||(a[0|A]=0))),!(8&o[e+110|0])|!o[s+432|0]?(i[s+56>>2]=s+432,i[s+52>>2]=s+304,i[s+48>>2]=s+368,Bt(n,92282,s+48|0)):(i[s+36>>2]=s+304,i[s+32>>2]=s+368,(0|(A=Bt(n,90368,s+32|0)))>0&&(A=2==o[i[144464+(o[(t=A-1|0)+n|0]<<2)>>2]+11|0]?t:A),rt(A+n|0,s+432|0))}else rt(n,c);r=0}e:if(268435456&(e=i[e+104>>2])){if((0|jt(n))<=0)break e;for(A=0,e=0;6==o[0|(t=e+n|0)]&&(A&&(a[0|t]=5),A=1),e=e+1|0,(0|jt(n))>(0|e););}else if(256&e&&(A=0,!((0|(e=(d=jt(n))-1|0))<0))){if(e)for(p=-2&d,c=0;6==o[0|(g=e+n|0)]?(t=1,A&&(a[0|g]=5)):t=A,6==o[0|(g=g-1|0)]?(A=1,t&&(a[0|g]=5)):A=t,e=e-2|0,(0|p)!=(0|(c=c+2|0)););1&d&&(!A|6!=o[0|(e=e+n|0)]||(a[0|e]=5))}return W=s+464|0,r}function we(e,A,t,r){var n,l,c=0,g=0,u=0,d=0,f=0,p=0,h=0;if(W=n=W-352|0,a[n+304|0]=0,a[n+224|0]=0,a[n+64|0]=0,u=i[i[47192]+292>>2],h=VA(n+348|0,A),57344==(1048320&(c=i[n+348>>2]))&&(c&=255,i[n+348>>2]=c),2&r&&gr(c)&&Et(e,85437,n+304|0),c=Xr(i[n+348>>2],e),i[n+348>>2]=c,p=1&r,wA(e,c,a[0|(l=A+h|0)],n+224|0,p),!(A=o[n+224|0])){e:if((A=tr(i[n+348>>2]))&&(i[n+348>>2]=16383&A,4&r)){A:switch(1073741823&(A>>=14)){case 0:case 3:break e}Et(e,A=i[131232+(A<<2)>>2],n+304|0),o[n+304|0]||(a[n+306|0]=pn(84744),f=A,A=n+304|3,Et(i[47194],f,A),o[n+307|0]&&(s[n+304>>1]=5385,A=jt(A)+(n+304|0)|0,a[A+5|0]=0,a[A+4|0]=u,a[A+3|0]=21))}wA(e,i[n+348>>2],a[0|l],n+224|0,p),A=o[n+224|0]}e:{A:{if(A&=255){if(21!=(0|A))break A;rt(t,n+224|0),h=0;break e}if(A=1632,!((0|(c=i[n+348>>2]))<1632)){for(d=103360;;){if((0|c)>=(A+10|0)){if(!(A=i[(d=d+4|0)>>2]))break A;if((0|A)<=(0|c))continue;break A}break}(0|(A=48+(c-A|0)|0))<=0||wA(e,A,0,n+224|0,p)}}A:{t:{r:{n:{if(A=aA(i[n+348>>2])){if(c=i[A+4>>2],!A|1&(d=i[A+16>>2])||(g=i[47192],i[g+600>>2]==(0|c)|i[g+188>>2]==(0|c)|i[g+184>>2]==(0|c)||(a[n+144|0]=0,Et(g,i[A>>2],n- -64|0)?(0|(g=i[47192]))!=(0|e)&&(u=i[e+292>>2],rt(n+144|0,n- -64|0),a[n+66|0]=i[g+292>>2]):(a[n+66|0]=pn(84744),Et(i[47194],i[A>>2],n+144|0)),o[n+144|0]&&(s[n+64>>1]=5385,rt(3|(g=n- -64|0),f=n+144|0),g=jt(f)+g|0,a[g+5|0]=0,a[g+4|0]=u,a[g+3|0]=21))),o[n+224|0])break A;if(!c)break n;if(u=i[47192],i[u+188>>2]!=(0|c))break n;A=i[u+192>>2];break t}if(o[n+224|0])break A;d=0,c=0;break r}if((A=i[A+12>>2])&&!(2&d))break t}A=25966}if((i[e+212>>2]==(0|A)&27503!=(0|A)||(a[n+226|0]=pn(kr(n+47|0,A)),(A=i[47194])&&((0|(u=i[n+348>>2]))>55215||(0|(g=u-44032|0))<0?wA(A,u,a[0|l],n+224|3,p):(a[n+52|0]=32,A=f=n+53|0,u-50500>>>0>=588&&(A=Ft(4352+((g>>>0)/588|0)|0,f)+f|0),Ft(4449+(((u=(g>>>0)/28|0)>>>0)%21|0)|0,A),Ft(4519+(g-C(u,28)|0)|0,A+3|0),a[A+6|0]=32,a[A+7|0]=0,a[n+227|0]=0,A=n+224|3,Ce(i[47194],f,A,77,0,0,0),ie(i[47194],A,0,-1,0)),A=n+224|3,21==o[n+227|0]&&(a[n+226|0]=pn(n+224|4),wA(i[47194],i[n+348>>2],a[0|l],A,p)),qr(i[i[32972]+60>>2]),o[n+227|0]&&(s[n+224>>1]=5385,A=jt(A)+(n+224|0)|0,a[A+3|0]=21,p=i[e+292>>2],a[A+5|0]=0,a[A+4|0]=p)),!o[n+224|0]))&&(16&d||(yr(i[n+348>>2])&&Et(i[47192],85683,n+224|0),o[n+224|0]||(er(i[n+348>>2])||Et(i[47192],85778,n+224|0),o[n+224|0]||Ue(85992,n+224|0,0))),!(8&d)||4&r)){if(A=i[n+348>>2],10240!=(0|c)?(i[n+32>>2]=A,Bt(n+52|0,86013,n+32|0)):(c=n+52|0,1&A&&(a[n+52|0]=49,c=n+53|0),2&A&&(a[0|c]=50,c=c+1|0),4&A&&(a[0|c]=51,c=c+1|0,A=i[n+348>>2]),8&A&&(a[0|c]=52,c=c+1|0,A=i[n+348>>2]),16&A&&(a[0|c]=53,c=c+1|0,A=i[n+348>>2]),32&A&&(a[0|c]=54,c=c+1|0,A=i[n+348>>2]),64&A&&(a[0|c]=55,c=c+1|0,A=i[n+348>>2]),128&A&&(a[0|c]=56,c=c+1|0),a[0|c]=0),A=n+224|0,d=o[n+52|0])for(c=n+52|0;A=jt(A)+A|0,a[0|A]=23,A=A+1|0,wA(i[47192],d<<24>>24,0,A,1),(r=o[0|A])&&21!=(0|r)||(0|(r=a[0|c]))<97||Ue(i[130860+((255&r)<<2)>>2],A,0),d=o[0|(c=c+1|0)];);A=jt(A)+A|0,a[0|A]=9,a[A+1|0]=0}}A=jt(t),2&o[e+144|0]?(i[n+16>>2]=255,i[n+28>>2]=n+304,i[n+24>>2]=n+224,i[n+20>>2]=n- -64,Bt(n+144|0,86210,n+16|0)):(i[n>>2]=255,i[n+12>>2]=n+224,i[n+8>>2]=n+304,i[n+4>>2]=n- -64,Bt(n+144|0,86210,n)),jt(n+144|0)+A>>>0>199||rt(A+t|0,n+144|0)}return W=n+352|0,h}function ke(e,A,t,r,n,l,c){var g,u=0,f=0,p=0,m=0,b=0,I=0,w=0,k=0,x=0,v=0,B=0,y=0,E=0,M=0,G=0,Q=0,T=0,P=0,z=0,F=0,S=0,N=0;W=g=W-528|0,v=c?i[c>>2]:0,Q=i[n+4>>2];e:{A:{if(i[e+220>>2]>0){fn(f=g+352|0,A,160),W=I=W-176|0,k=1-(w=i[e+220>>2])|0,x=i[e+224>>2],B=i[e+216>>2],m=f;t:{r:{for(;;){if(y=VA(I+172|0,m),u=i[I+172>>2]){if((0|u)<(0|w)|(0|u)>(0|B))break r;if(x){if((0|(u=a[x+(u-w|0)|0]))<=0)break r}else u=u+k|0;if(m=m+y|0,a[b+I|0]=u,u=160,160!=(0|(b=b+1|0)))continue}else u=b;break}if(x=0,a[u+I|0]=0,k=a[0|I],i[I+172>>2]=k,k){for(T=2+(B-w|0)|0,w=u=I;;){B=u+1|0;n:{if((y=i[e+8180>>2])&&(b=0,!((0|(m=s[y>>1]))>(0|(M=(a[0|B]<<8)+k|0)))))for(;;){if((0|m)==(0|M)){k=b+T|0,i[I+172>>2]=k,u=u+2|0;break n}if(!((0|M)>=(0|(m=s[y+((b=b+1|0)<<1)>>1]))))break}u=B}if(E=63&k|E<<6,(0|(b=x+6|0))<8?x=b:(x=x-2|0,a[0|w]=E>>x,w=w+1|0),k=a[0|u],i[I+172>>2]=k,!k)break}(0|x)<=0||(a[0|w]=E<<8-x,w=w+1|0)}else w=I;a[0|w]=0,_e(f,I,u=w-I|0),w=64|u;break t}w=jt(f)}W=I+176|0,I=f}else w=jt(A),I=A;if(f=o[0|I]){for(u=0,b=I;p=1023&(p=(p<<3)+f|0)^p>>>8,u=u+1|0,f=o[0|(b=b+1|0)];);u=u+p&1023}else u=0;if(p=i[692+((u<<2)+e|0)>>2]){if(u=o[0|p])break A;u=0;break e}if(u=0,!n)break e;i[n>>2]=0;break e}for(y=1073741824&Q,M=2048&l,Q=512&v,T=65536&v,P=1&v,z=2&v,v=8&l,F=1024&l,B=4&l,S=63&w,N=e+8233|0;;){l=(255&u)+p|0;A:{t:if((127&(u=o[p+1|0]))==(0|w)&&!Dt(I,p+2|0,S)){p=2+((63&u)+p|0)|0;r:{if(u<<24>>24<0)x=0,a[0|r]=0;else{if((0|(x=jt(p)))>=160)break r;rt(r,p),p=1+(p+x|0)|0}if(f=0,l>>>0<=p>>>0)u=t,m=0;else{b=0,m=0;n:{for(;;){p=(u=p)+1|0;a:if((u=o[0|u])>>>0>=100){if(k=i[e+320>>2],u>>>0>=132){b|=k>>>u-132&1;break a}b|=!(k>>>u-100&1)}else{if(u>>>0>=81){k=u-80|0,E=l-p|0;s:if(c)for(u=0;;){if(G=C(u,12)+c|0,!o[G+10|0])break s;if(b=!!(12&o[G+1|0])|b,G=(0|u)!=(0|k),u=u+1|0,!G)break}if(qt(t,p,E)|1&b)break t;i[33264]=k,u=t+E|0,m|=128,p=l;break n}u>>>0>=65?(m=15&u|-16&m,m=12&~u?m:512|m):u>>>0>=32?f|=1<<u-32:m|=1<<u}if(!(l>>>0>p>>>0))break}if(u=t,1&b)break A}if(65536&f&&!B)break A;if(F&&49152&f)break A}if(B){if(16384&f)break A;if(!v&&32768&f)break A}if((z?0:512&f)|(P?0:1024&f)|(T?0:33554432&m))break A;if(!(!(131072&f)|h[i[47192]+8204>>2]<=u>>>0|y)|(Q?0:262144&f)|(8&o[i[47192]+8242|0]?0:8192&f))break A;if(16&f){if(!i[e+8184>>2]&(!v|!i[e+8192>>2]))break A;if(!(!v|25966!=i[e+212>>2])&&2097152&i[e+8232>>2])break A}if((i[e+8188>>2]?0:64&f)|(!i[e+8196>>2]|M?32&f:0))break A;if(!(!(65536&m)|26741!=i[e+212>>2]|128&o[0|N])|(i[47192]!=(0|e)?524288&f:0))break A;n:{a:{s:{if(!n){if(!x)break s;break n}if(i[n+4>>2]=f,i[n>>2]=1073741824|m,x)break a}if(u=0,!(8&o[188788]))break e;ct(n,e=g+272|0),i[g>>2]=A,i[g+4>>2]=e,en(i[47195],89330,g);break e}i[n>>2]=-1073741824|m}if(8&o[188788]&&(QA(r,g- -64|0),o[i[47192]+172|0]==(m>>>29&1)&&(!c|!(128&m)?(i[g+48>>2]=A,en(i[47195],89426,g+48|0)):(_e(e=g+352|0,r=t,t=u-t|0),a[351+(t+g|0)|0]=0,i[g+32>>2]=A,i[g+36>>2]=e,en(i[47195],89397,g+32|0)),ct(n,e=g+272|0),A=i[47195],i[g+16>>2]=g- -64,i[g+20>>2]=e,en(A,89534,g+16|0))),o[VA(g- -64|0,I)+I|0]|!n)break e;if(dt(i[g+64>>2]))break e;i[n>>2]=134217728|i[n>>2];break e}D(89236,86634,2467,94846),d()}p=l}if(!(u=o[0|p]))break}u=0}return W=g+528|0,u}function xe(e,A,t,r,n){var s,l=0,c=0;W=s=W-304|0,a[s+278|0]=0;e:{if((0|A)>0){if(1&r){if(2&r&&(i[s+164>>2]=t,i[s+160>>2]=A,Bt(l=s+290|0,89701,s+160|0),l=Et(e,l,s+224|0)))break e;if(1&a[133096]&&(i[s+148>>2]=t,i[s+144>>2]=A,Bt(l=s+290|0,89757,s+144|0),l=Et(e,l,s+224|0)))break e;if(i[s+132>>2]=t,i[s+128>>2]=A,Bt(l=s+290|0,89894,s+128|0),l=Et(e,l,s+224|0))break e}if(i[s+116>>2]=t,i[s+112>>2]=A,Bt(l=s+290|0,89974,s+112|0),l=Et(e,l,s+224|0))break e}if((0|(c=(0|A)%100|0))>=20&&Et(e,90022,s+278|0),1&r){if(2&r){l=c-11|0;A:{t:{r:switch((448&i[i[47192]+108>>2])-64>>>6|0){case 0:if(l>>>0<9)break t;if(r=90418,1==(0|(l=(0|A)%10|0)))break A;if(l-2>>>0>=3)break t;r=90453;break A;case 1:if(A-2>>>0>=3)break t;r=90453;break A;case 2:if(l>>>0<9|((0|A)%10|0)-2>>>0>=3)break t;r=90453;break A;case 3:if(r=90508,l>>>0<9)break A;r=(r=(0|A)%10|0)?1==(0|r)?90453:90586:90508;break A;case 4:break r;default:break t}if(!(l>>>0<9)){if(r=90537,1==(0|(l=(0|A)%10|0)))break A;if(!(l-2>>>0>=3)){r=90453;break A}}}r=90586}if(i[s+100>>2]=t,i[s+96>>2]=r,Bt(r=s+290|0,90058,s+96|0),l=0,Et(e,r,s+224|0))break e}if(r=c-11|0,1&a[133096]){A:{t:{r:switch((448&i[i[47192]+108>>2])-64>>>6|0){case 0:if(r>>>0<9)break t;if(l=90418,1==(0|(c=(0|A)%10|0)))break A;if(c-2>>>0>=3)break t;l=90453;break A;case 1:if(A-2>>>0>=3)break t;l=90453;break A;case 2:if(r>>>0<9|((0|A)%10|0)-2>>>0>=3)break t;l=90453;break A;case 3:if(l=90508,r>>>0<9)break A;l=(l=(0|A)%10|0)?1==(0|l)?90453:90586:90508;break A;case 4:break r;default:break t}if(!(r>>>0<9)){if(l=90537,1==(0|(c=(0|A)%10|0)))break A;if(!(c-2>>>0>=3)){l=90453;break A}}}l=90586}if(i[s+84>>2]=t,i[s+80>>2]=l,Bt(c=s+290|0,90110,s+80|0),l=0,Et(e,c,s+224|0))break e}A:{t:{r:switch((448&i[i[47192]+108>>2])-64>>>6|0){case 0:if(r>>>0<9)break t;if(l=90418,1==(0|(c=(0|A)%10|0)))break A;if(c-2>>>0>=3)break t;l=90453;break A;case 1:if(A-2>>>0>=3)break t;l=90453;break A;case 2:if(r>>>0<9|((0|A)%10|0)-2>>>0>=3)break t;l=90453;break A;case 3:if(l=90508,r>>>0<9)break A;l=(l=(0|A)%10|0)?1==(0|l)?90453:90586:90508;break A;case 4:break r;default:break t}if(!(r>>>0<9)){if(l=90537,1==(0|(c=(0|A)%10|0)))break A;if(!(c-2>>>0>=3)){l=90453;break A}}}l=90586}if(i[s+68>>2]=t,i[s+64>>2]=l,Bt(c=s+290|0,90139,s- -64|0),l=0,Et(e,c,s+224|0))break e}else r=c-11|0;A:{t:{r:switch((448&i[i[47192]+108>>2])-64>>>6|0){case 0:if(r>>>0<9)break t;if(l=90418,1==(0|(r=(0|A)%10|0)))break A;if(r-2>>>0>=3)break t;l=90453;break A;case 1:if(A-2>>>0>=3)break t;l=90453;break A;case 2:if(r>>>0<9|((0|A)%10|0)-2>>>0>=3)break t;l=90453;break A;case 3:if(l=90508,r>>>0<9)break A;l=(r=(0|A)%10|0)?1==(0|r)?90453:90586:90508;break A;case 4:break r;default:break t}if(!(r>>>0<9)){if(l=90537,1==(0|(r=(0|A)%10|0)))break A;if(!(r-2>>>0>=3)){l=90453;break A}}}l=90586}i[s+52>>2]=t,i[s+48>>2]=l,Bt(r=s+290|0,90218,s+48|0),l=0,Et(e,r,s+224|0)||((0|t)<4||(i[s+32>>2]=t-1,Bt(r=s+290|0,89026,s+32|0),Et(e,r,s+176|0)||(Et(e,90273,s+224|0),i[33275]=3)),o[s+224|0]||(i[s+16>>2]=A,Bt(r=s+290|0,90303,s+16|0),(l=Et(e,r,s+224|0))||Et(e,90347,s+224|0),i[33275]=2))}return i[s+4>>2]=s+224,i[s>>2]=s+278,Bt(n,90368,s),W=s+304|0,!(1!=(0|A)|1!=(0|t))&&(A=1,32&o[e+106|0])||(A=l),A}function ve(e,A,t,r){var n,l=0,c=0,g=0,u=0,d=0,f=0,h=0;W=n=W+-64|0,s[n+48>>1]=0,i[n+40>>2]=0,i[n+44>>2]=0,i[n+32>>2]=0,i[n+36>>2]=0,i[n+24>>2]=0,i[n+28>>2]=0,i[n+16>>2]=0,i[n+20>>2]=0,i[n+8>>2]=0,i[n+12>>2]=0,i[n>>2]=0,i[n+4>>2]=0,l=A;e:{for(;;){A:{t:{if(69!=(0|(c=o[0|l]))){if(32!=(0|c))break t;if(r&&(a[_e(c=r,A,r=(0|(r=l-A|0))>=159?159:r)+r|0]=0),r=63&t)break A;break e}a[0|l]=101}l=l+1|0;continue}break}if(1&t){A:if((l=l-1|0)>>>0<A>>>0)c=r;else for(c=r;;){if(128!=(192&o[0|l]))break A;if(c=c+1|0,!((l=l-1|0)>>>0>=A>>>0))break}g=r-1|0}else g=r,c=r;if(1!=(0|r))for(;;){r=g;A:if(!((l=l-1|0)>>>0<A>>>0))for(;;){if(128!=(192&o[0|l]))break A;if(c=c+1|0,!((l=l-1|0)>>>0>=A>>>0))break}A:if(!((l=l-1|0)>>>0<A>>>0))for(;;){if(128!=(192&o[0|l]))break A;if(c=c+1|0,!((l=l-1|0)>>>0>=A>>>0))break}if(g=r-2|0,!((0|r)>2))break}if((0|c)<=0)g=0;else{if(u=3&(g=(r=(A=c-1|0)>>>0>=48?48:A)+1|0),A=0,c=0,r>>>0>=3)for(h=-4&g,r=0;d=l+c|0,a[c+n|0]=o[0|d],a[0|d]=32,d=(f=1|c)+l|0,a[n+f|0]=o[0|d],a[0|d]=32,d=(f=2|c)+l|0,a[n+f|0]=o[0|d],a[0|d]=32,d=(f=3|c)+l|0,a[n+f|0]=o[0|d],a[0|d]=32,c=c+4|0,(0|h)!=(0|(r=r+4|0)););if(u)for(;r=l+c|0,a[c+n|0]=o[0|r],a[0|r]=32,c=c+1|0,(0|u)!=(0|(A=A+1|0)););}}if(a[n+g|0]=0,u=65520&t,!(512&t)|105!=o[0|(r=l-1|0)]||(a[0|r]=121),c=4|u,256&t){e:{A:{t:{if(25966!=(0|(A=i[e+212>>2]))){if(28268!=(0|A))break t;if(a[0|r]<0)break e;if(128&(A=a[0|(g=l-2|0)]))break e;if(u=i[e+632>>2])A=!!(0|Pr(u,A));else{if((0|(u=i[e+600>>2]))>0&&(A=A-u|0)-1>>>0>254)break e;A=128&o[344+(e+A|0)|0]}if(!A)break e;if(A=a[0|r],u=i[e+612>>2])A=!!(0|Pr(u,A));else{r:{if((0|(u=i[e+600>>2]))>0){if((A=A-u|0)-1>>>0<255)break r;break e}if((0|A)<0)break e}A=4&o[344+(e+A|0)|0]}if(!A)break e;A=a[l-3|0];r:{if(u=i[e+632>>2])A=!!(0|Pr(u,A));else{n:{if((0|(u=i[e+600>>2]))>0){if((A=A-u|0)-1>>>0<255)break n;break r}if((0|A)<0)break r}A=128&o[344+(e+A|0)|0]}if(A)break e}a[0|l]=o[0|r],a[0|r]=o[0|g],a[l+1|0]=32;break e}if(g=a[l-2|0],A=i[e+632>>2])A=!!(0|Pr(A,g));else{r:{if((0|(A=i[e+600>>2]))>0){if((g=g-A|0)-1>>>0<255)break r;break A}if((0|g)<0)break A}A=128&o[344+(e+g|0)|0]}if(!A)break A;if(g=a[0|r],A=i[e+608>>2])A=!!(0|Pr(A,g));else{if((0|(A=i[e+600>>2]))>0){if((g=g-A|0)-1>>>0>=255)break A}else if((0|g)<0)break A;A=2&o[344+(e+g|0)|0]}if(!A)break A;c=Dt(87771,l-3|0,3)?20|u:c;break e}c=i[e+204>>2]?20|u:c;break e}(99==o[0|r]||(g=o[1+(A=l-2|0)|0]<<8,29554==(o[0|A]|g)|29289==(g|o[0|A])||29301==(o[0|(A=l-2|0)]|o[A+1|0]<<8)||!Dt(88115,l-3|0,3)||29550==(o[0|(A=l-2|0)]|o[A+1|0]<<8)|117==o[0|r]||!Dt(88384,l-5|0,5)||1735287154==(o[0|(A=l-4|0)]|o[A+1|0]<<8|o[A+2|0]<<16|o[A+3|0]<<24)||1735549292==(o[0|A]|o[A+1|0]<<8|o[A+2|0]<<16|o[A+3|0]<<24)))&&(c=20|u)}16&c&&(Ft(i[e+204>>2],l),8&o[188788]&&An(88683,6,i[47195]))}return i[e+8184>>2]|!(2048&t)||(i[e+8184>>2]=1),115!=p[n>>1]&&Dt(n,88850,3)||(c|=8),W=n- -64|0,39==o[0|n]?65531&c:c}function Be(e,A,t,r,n,a,s,o,l){var c,g=0,u=0,d=0,f=0,p=0,h=0,m=0,C=0,b=0,I=0;W=c=W-112|0,g=2147483647&l;e:{if(d=!(A|t),(r|(u=2147483647&n)?u-2147418112>>>0<2147549184:d)||!(!o&-2147418112==(0|(p=g-2147418112|0))?a|s:-2147418112==(0|p)&!!(0|o)|p>>>0>2147549184)){if(!(!r&2147418112==(0|u)?d:u>>>0<2147418112)){o=r,l=32768|n,a=A,s=t;break e}if(!(!o&2147418112==(0|g)?!(a|s):g>>>0<2147418112)){l|=32768;break e}if(!(A|r|2147418112^u|t)){f=r,o=(r=!(A^a|r^o|t^s|n^l^-2147483648))?0:f,l=r?2147450880:n,a=r?0:A,s=r?0:t;break e}if(!(a|o|2147418112^g|s))break e;if(!(A|r|t|u)){if(a|o|s|g)break e;a&=A,s&=t,o&=r,l&=n;break e}if(!(a|o|s|g)){a=A,s=t,o=r,l=n;break e}}u=(d=C=(f=(0|g)==(0|u))&(0|r)==(0|o)?(0|t)==(0|s)&A>>>0<a>>>0|t>>>0<s>>>0:f&r>>>0<o>>>0|g>>>0>u>>>0)?a:A,p=d?s:t,b=f=d?l:n,d=d?o:r,m=65535&f,r=C?r:o,I=n=C?n:l,f=n>>>16&32767,(h=b>>>16&32767)||(l=n=!(d|m),g=n?u:d,o=n<<=6,WA(c+96|0,u,p,d,m,(n=n+(32==(0|(l=w(l?p:m)))?w(g)+32|0:l)|0)-15|0),d=i[c+104>>2],m=i[c+108>>2],p=i[c+100>>2],h=16-n|0,u=i[c+96>>2]),a=C?A:a,s=C?t:s,o=r,l=65535&I,f||(n=A=!(o|l),g=A?a:o,t=A<<=6,WA(c+80|0,a,s,o,l,(A=A+(32==(0|(n=w(n?s:l)))?w(g)+32|0:n)|0)-15|0),f=16-A|0,o=i[c+88>>2],l=i[c+92>>2],s=i[c+84>>2],a=i[c+80>>2]),t=l<<3|o>>>29,A=o<<3|s>>>29,t|=524288,o=d<<3|p>>>29,l=m<<3|d>>>29,C=b^I,n=s<<3|a>>>29,r=a<<3,(0|f)!=(0|h)&&((a=h-f|0)>>>0>127?(A=0,t=0,n=0,r=1):(WA(c- -64|0,r,n,A,t,128-a|0),YA(c+48|0,r,n,A,t,a),A=i[c+56>>2],t=i[c+60>>2],n=i[c+52>>2],r=i[c+48>>2]|!!(i[c+64>>2]|i[c+72>>2]|i[c+68>>2]|i[c+76>>2]))),d=r,g=n,f=o,m=524288|l,n=p<<3|u>>>29,p=u<<3,u=n;A:if((0|C)<0){if(a=0,s=0,o=0,l=0,!(d^p|A^f|g^u|t^m))break e;if(r=p-d|0,n=u-((d>>>0>p>>>0)+g|0)|0,o=(a=f-A|0)-(s=(0|g)==(0|u)&d>>>0>p>>>0|g>>>0>u>>>0)|0,l=A=(m-((A>>>0>f>>>0)+t|0)|0)-(a>>>0<s>>>0)|0,A>>>0>524287)break A;a=A=!(o|l),s=A?r:o,t=A<<=6,WA(c+32|0,r,n,o,l,A=(A=A+(32==(0|(a=w(a?n:l)))?w(s)+32|0:a)|0)-12|0),h=h-A|0,o=i[c+40>>2],l=i[c+44>>2],r=i[c+32>>2],n=i[c+36>>2]}else n=g+u|0,a=(0|g)==(0|(n=(r=d+p|0)>>>0<p>>>0?n+1|0:n))&r>>>0<d>>>0|n>>>0<g>>>0,g=t+m|0,g=(A=A+f|0)>>>0<f>>>0?g+1|0:g,1048576&(l=(o=A+a|0)>>>0<A>>>0?g+1|0:g)&&(r=1&d|(1&n)<<31|r>>>1,n=o<<31|n>>>1,h=h+1|0,o=(1&l)<<31|o>>>1,l=l>>>1|0);if(t=0,u=-2147483648&b,(0|h)>=32767)o=t,l=2147418112|u,a=0,s=0;else if(f=0,(0|h)>0?f=h:(WA(c+16|0,r,n,o,l,h+127|0),YA(c,r,n,o,l,1-h|0),r=i[c>>2]|!!(i[c+16>>2]|i[c+24>>2]|i[c+20>>2]|i[c+28>>2]),n=i[c+4>>2],o=i[c+8>>2],l=i[c+12>>2]),p=7&r,r=(0|(A=o<<29|n>>>3))==(0|(s=(r=(7&n)<<29|r>>>3)>>>0>(a=(p>>>0>4)+r|0)>>>0?A+1|0:A))&r>>>0>a>>>0|A>>>0>s>>>0,A=t|(7&l)<<29|o>>>3,l=u|l>>>3&65535|f<<16,l=A>>>0>(o=r+A|0)>>>0?l+1|0:l,4!=(0|p)){if(!p)break e}else g=s+(A=0)|0,l=(A=(0|A)==(0|(s=(r=a)>>>0>(a=a+(t=1&a)|0)>>>0?g+1|0:g))&t>>>0>a>>>0|A>>>0>s>>>0)>>>0>(o=A+o|0)>>>0?l+1|0:l}i[e>>2]=a,i[e+4>>2]=s,i[e+8>>2]=o,i[e+12>>2]=l,W=c+112|0}function ye(e){var A=0,t=0,r=0,n=0,a=0,s=0,o=0;e:if(e|=0){a=(r=e-8|0)+(e=-8&(A=i[e-4>>2]))|0;A:if(!(1&A)){if(!(3&A))break e;if((r=r-(A=i[r>>2])|0)>>>0<h[57156])break e;if(e=e+A|0,i[57157]==(0|r)){if(!(3&~(A=i[a+4>>2])))return i[57154]=e,i[a+4>>2]=-2&A,i[r+4>>2]=1|e,void(i[e+r>>2]=e)}else{if(A>>>0<=255){if(n=i[r+8>>2],A=A>>>3|0,(0|(t=i[r+12>>2]))==(0|n)){i[57152]=i[57152]&Zr(-2,A);break A}i[n+12>>2]=t,i[t+8>>2]=n;break A}if(o=i[r+24>>2],(0|r)==(0|(A=i[r+12>>2])))if((t=i[(n=r+20|0)>>2])||(t=i[(n=r+16|0)>>2])){for(;s=n,(t=i[(n=(A=t)+20|0)>>2])||(n=A+16|0,t=i[A+16>>2]););i[s>>2]=0}else A=0;else t=i[r+8>>2],i[t+12>>2]=A,i[A+8>>2]=t;if(!o)break A;n=i[r+28>>2];t:{if(i[(t=228912+(n<<2)|0)>>2]==(0|r)){if(i[t>>2]=A,A)break t;i[57153]=i[57153]&Zr(-2,n);break A}if(i[o+(i[o+16>>2]==(0|r)?16:20)>>2]=A,!A)break A}if(i[A+24>>2]=o,(t=i[r+16>>2])&&(i[A+16>>2]=t,i[t+24>>2]=A),!(t=i[r+20>>2]))break A;i[A+20>>2]=t,i[t+24>>2]=A}}if(!(r>>>0>=a>>>0)&&1&(A=i[a+4>>2])){A:{if(!(2&A)){if(i[57158]==(0|a)){if(i[57158]=r,e=i[57155]+e|0,i[57155]=e,i[r+4>>2]=1|e,i[57157]!=(0|r))break e;return i[57154]=0,void(i[57157]=0)}if(i[57157]==(0|a))return i[57157]=r,e=i[57154]+e|0,i[57154]=e,i[r+4>>2]=1|e,void(i[e+r>>2]=e);e=(-8&A)+e|0;t:if(A>>>0<=255){if(n=i[a+8>>2],A=A>>>3|0,(0|(t=i[a+12>>2]))==(0|n)){i[57152]=i[57152]&Zr(-2,A);break t}i[n+12>>2]=t,i[t+8>>2]=n}else{if(o=i[a+24>>2],(0|a)==(0|(A=i[a+12>>2])))if((t=i[(n=a+20|0)>>2])||(t=i[(n=a+16|0)>>2])){for(;s=n,(t=i[(n=(A=t)+20|0)>>2])||(n=A+16|0,t=i[A+16>>2]););i[s>>2]=0}else A=0;else t=i[a+8>>2],i[t+12>>2]=A,i[A+8>>2]=t;if(o){n=i[a+28>>2];r:{if(i[(t=228912+(n<<2)|0)>>2]==(0|a)){if(i[t>>2]=A,A)break r;i[57153]=i[57153]&Zr(-2,n);break t}if(i[o+(i[o+16>>2]==(0|a)?16:20)>>2]=A,!A)break t}i[A+24>>2]=o,(t=i[a+16>>2])&&(i[A+16>>2]=t,i[t+24>>2]=A),(t=i[a+20>>2])&&(i[A+20>>2]=t,i[t+24>>2]=A)}}if(i[r+4>>2]=1|e,i[e+r>>2]=e,i[57157]!=(0|r))break A;return void(i[57154]=e)}i[a+4>>2]=-2&A,i[r+4>>2]=1|e,i[e+r>>2]=e}if(e>>>0<=255)return A=228648+(-8&e)|0,(t=i[57152])&(e=1<<(e>>>3))?e=i[A+8>>2]:(i[57152]=e|t,e=A),i[A+8>>2]=r,i[e+12>>2]=r,i[r+12>>2]=A,void(i[r+8>>2]=e);n=31,e>>>0<=16777215&&(n=62+((e>>>38-(A=w(e>>>8|0))&1)-(A<<1)|0)|0),i[r+28>>2]=n,i[r+16>>2]=0,i[r+20>>2]=0,s=228912+(n<<2)|0;A:{t:{if((t=i[57153])&(A=1<<n)){for(n=e<<(31!=(0|n)?25-(n>>>1|0):0),A=i[s>>2];;){if(t=A,(-8&i[A+4>>2])==(0|e))break t;if(A=n>>>29|0,n<<=1,!(A=i[16+(s=t+(4&A)|0)>>2]))break}i[s+16>>2]=r,i[r+24>>2]=t}else i[57153]=A|t,i[s>>2]=r,i[r+24>>2]=s;i[r+12>>2]=r,i[r+8>>2]=r;break A}e=i[t+8>>2],i[e+12>>2]=r,i[t+8>>2]=r,i[r+24>>2]=0,i[r+12>>2]=t,i[r+8>>2]=e}e=i[57160]-1|0,i[57160]=e||-1}}}function Ee(e,A,t){var r,n=0,l=0,c=0,g=0,u=0,d=0,f=0,p=0,h=0,m=0,b=0,I=0;W=r=W-176|0;e:{if(32&A)m=t-((0|t)>1)|0;else{l=NA(e,93302);A:{t:{r:{if(2!=(0|A)){if(l)break r;A=0;break e}if(m=t+1|0,p=56+(b=C(t,76)+133152|0)|0,h=NA(e,89360),c=NA(e,93318),g=NA(e,93426),u=NA(e,93499),l)break t;break A}m=t+1|0,p=56+(b=C(t,76)+133152|0)|0,u=0}for(e=0,d=34!=(0|(n=i[l-4>>2]))?39==(0|n)?n:0:n,I=C(t,76)+133208|0;;){if(n=e,!(e=i[l>>2]))break A;t:{if(!d){if(32==(0|e)|e-9>>>0<5)break A;if(47!=(0|e))break t;break A}if(92!=(0|n)&&(0|e)==(0|d))break A}if(l=l+4|0,!((0|(f=Ft(e,f+I|0)+f|0))<16))break}}d=0,a[f+p|0]=0,f=C(t,76)+133168|0,l=0;A:if(h)for(e=0,p=34!=(0|(n=i[h-4>>2]))?39==(0|n)?n:0:n;;){if(n=e,!(e=i[h>>2]))break A;t:{if(!p){if(32==(0|e)|e-9>>>0<5)break A;if(47!=(0|e))break t;break A}if(92!=(0|n)&&(0|e)==(0|p))break A}if(h=h+4|0,!((0|(l=Ft(e,l+f|0)+l|0))<36))break}if(a[l+f|0]=0,!(!c|i[c>>2]-48>>>0>=10)){for(;d=(i[c>>2]+C(d,10)|0)-48|0,i[(c=c+4|0)>>2]-48>>>0<10;);(0|d)<=0||(d=d-1|0)}if(n=C(t,76)+133152|0,i[n+4>>2]=d,e=0,l=0,!(!g|i[g>>2]-48>>>0>=10))for(;l=(i[g>>2]+C(l,10)|0)-48|0,i[(g=g+4|0)>>2]-48>>>0<10;);i[n+12>>2]=l,l=C(t,76)+133152|0;A:{t:if(u){for(;t=a[e+93099|0],(n=i[(e<<2)+u>>2])&&(e=e+1|0,(0|t)==(0|n)););r:{n:switch(n-34|0){case 0:case 5:break n;default:break r}if(!t){e=0;break A}}for(e=0;t=a[e+93116|0],(n=i[(e<<2)+u>>2])&&(e=e+1|0,(0|t)==(0|n)););r:{n:switch(n-34|0){case 0:case 5:break n;default:break r}if(!t){e=1;break A}}for(e=0;t=a[e+93197|0],(n=i[(e<<2)+u>>2])&&(e=e+1|0,(0|t)==(0|n)););r:switch(n-34|0){case 0:case 5:break r;default:break t}if(!t){e=2;break A}}e=3}i[l+8>>2]=i[131156+(e<<3)>>2],i[b>>2]=A}if(rt(137776,133168),t=rt(r+96|0,133208),a[r+157|0]=i[33291],a[r+156|0]=i[33290],e=i[33289],i[r+152>>2]=0,a[r+158|0]=e,(0|m)>0)for(c=0;;){if(g=1,A=C(c,76)+133152|0,o[0|(e=A+16|0)]&&TA(0,e)&&(rt(137776,e),g=0,a[0|t]=0,a[r+158|0]=0,s[r+156>>1]=0),o[0|(e=A+56|0)]){u=rt(t,e),n=i[33679];A:if(o[0|(e=n)])for(;;){if(!hr(e=e+1|0,u)){rt(u,n+1|0);break A}if(e=1+(jt(e)+e|0)|0,!o[0|e])break}g&&(a[137776]=0)}if((e=i[A+8>>2])&&(a[r+156|0]=e),(e=i[A+12>>2])&&(a[r+157|0]=e),(e=i[A+4>>2])&&(a[r+158|0]=e),(0|m)==(0|(c=c+1|0)))break}i[r+148>>2]=t,i[r+144>>2]=137776,(e=be(r+144|0,r+172|0))?cn(e,43)||(A=o[r+156|0],!o[134672]|((0|A)!=o[134724]?A:0)||(i[r>>2]=e,i[r+4>>2]=134672,Bt(A=r+16|0,93533,r),e=137776,fn(137776,A,40))):e=92003,A=0,hr(e,134784)&&(rt(134784,e),A=131072)}return W=r+176|0,A}function Me(e,A){var t,r=0,n=0,a=0,s=0,o=0;t=e+A|0;e:{A:if(!(1&(r=i[e+4>>2]))){if(!(3&r))break e;A=(r=i[e>>2])+A|0;t:{if((0|(e=e-r|0))!=i[57157]){if(r>>>0<=255){if(a=i[e+8>>2],r=r>>>3|0,(0|(n=i[e+12>>2]))!=(0|a))break t;i[57152]=i[57152]&Zr(-2,r);break A}if(o=i[e+24>>2],(0|(r=i[e+12>>2]))==(0|e))if((n=i[(a=e+20|0)>>2])||(n=i[(a=e+16|0)>>2])){for(;s=a,(n=i[(a=(r=n)+20|0)>>2])||(a=r+16|0,n=i[r+16>>2]););i[s>>2]=0}else r=0;else n=i[e+8>>2],i[n+12>>2]=r,i[r+8>>2]=n;if(!o)break A;a=i[e+28>>2];r:{if(i[(n=228912+(a<<2)|0)>>2]==(0|e)){if(i[n>>2]=r,r)break r;i[57153]=i[57153]&Zr(-2,a);break A}if(i[o+(i[o+16>>2]==(0|e)?16:20)>>2]=r,!r)break A}if(i[r+24>>2]=o,(n=i[e+16>>2])&&(i[r+16>>2]=n,i[n+24>>2]=r),!(n=i[e+20>>2]))break A;i[r+20>>2]=n,i[n+24>>2]=r;break A}if(3&~(r=i[t+4>>2]))break A;return i[57154]=A,i[t+4>>2]=-2&r,i[e+4>>2]=1|A,void(i[t>>2]=A)}i[a+12>>2]=n,i[n+8>>2]=a}A:{if(!(2&(r=i[t+4>>2]))){if(i[57158]==(0|t)){if(i[57158]=e,A=i[57155]+A|0,i[57155]=A,i[e+4>>2]=1|A,i[57157]!=(0|e))break e;return i[57154]=0,void(i[57157]=0)}if(i[57157]==(0|t))return i[57157]=e,A=i[57154]+A|0,i[57154]=A,i[e+4>>2]=1|A,void(i[e+A>>2]=A);A=(-8&r)+A|0;t:if(r>>>0<=255){if(a=i[t+8>>2],r=r>>>3|0,(0|(n=i[t+12>>2]))==(0|a)){i[57152]=i[57152]&Zr(-2,r);break t}i[a+12>>2]=n,i[n+8>>2]=a}else{if(o=i[t+24>>2],(0|t)==(0|(r=i[t+12>>2])))if((a=i[(n=t+20|0)>>2])||(a=i[(n=t+16|0)>>2])){for(;s=n,(a=i[(n=(r=a)+20|0)>>2])||(n=r+16|0,a=i[r+16>>2]););i[s>>2]=0}else r=0;else n=i[t+8>>2],i[n+12>>2]=r,i[r+8>>2]=n;if(o){a=i[t+28>>2];r:{if(i[(n=228912+(a<<2)|0)>>2]==(0|t)){if(i[n>>2]=r,r)break r;i[57153]=i[57153]&Zr(-2,a);break t}if(i[o+(i[o+16>>2]==(0|t)?16:20)>>2]=r,!r)break t}i[r+24>>2]=o,(n=i[t+16>>2])&&(i[r+16>>2]=n,i[n+24>>2]=r),(n=i[t+20>>2])&&(i[r+20>>2]=n,i[n+24>>2]=r)}}if(i[e+4>>2]=1|A,i[e+A>>2]=A,i[57157]!=(0|e))break A;return void(i[57154]=A)}i[t+4>>2]=-2&r,i[e+4>>2]=1|A,i[e+A>>2]=A}if(A>>>0<=255)return r=228648+(-8&A)|0,(n=i[57152])&(A=1<<(A>>>3))?A=i[r+8>>2]:(i[57152]=A|n,A=r),i[r+8>>2]=e,i[A+12>>2]=e,i[e+12>>2]=r,void(i[e+8>>2]=A);a=31,A>>>0<=16777215&&(a=62+((A>>>38-(r=w(A>>>8|0))&1)-(r<<1)|0)|0),i[e+28>>2]=a,i[e+16>>2]=0,i[e+20>>2]=0,s=228912+(a<<2)|0;A:{if((n=i[57153])&(r=1<<a)){for(a=A<<(31!=(0|a)?25-(a>>>1|0):0),r=i[s>>2];;){if(n=r,(-8&i[r+4>>2])==(0|A))break A;if(r=a>>>29|0,a<<=1,!(r=i[16+(s=n+(4&r)|0)>>2]))break}i[s+16>>2]=e,i[e+24>>2]=n}else i[57153]=r|n,i[s>>2]=e,i[e+24>>2]=s;return i[e+12>>2]=e,void(i[e+8>>2]=e)}A=i[n+8>>2],i[A+12>>2]=e,i[n+8>>2]=e,i[e+24>>2]=0,i[e+12>>2]=n,i[e+8>>2]=A}}function Ge(e){var A=0,t=0,r=0,n=0,s=0,l=0,c=0,g=0,u=0,d=0,f=0,p=0,h=0;if(!(A=a[88105]))return e;if(e=cn(e,A)){if(!o[88106])return e;if(o[e+1|0]){if(!o[88107]){n=!!(0|(t=o[e+1|0]));e:if(t&&(0|(A=t|o[0|e]<<8))!=(0|(c=o[88106]|o[88105]<<8)))for(t=e+1|0;;){if(n=!!(0|(r=o[(e=t)+1|0])),!r)break e;if(t=e+1|0,(0|c)==(0|(A=r|A<<8&65280)))break}return n?e:0}if(o[e+2|0]){if(!o[88108]){t=e+2|0,n=!!(0|(A=o[e+2|0]));e:if(A&&(0|(A=o[e+1|0]<<16|o[0|e]<<24|A<<8))!=(0|(c=o[88106]<<16|o[88105]<<24|o[88107]<<8)))for(;;){if(e=t+1|0,n=!!(0|(r=o[t+1|0])),!r)break e;if(t=e,(0|c)==(0|(A=(A|r)<<8)))break}else e=t;return n?e-2|0:0}if(o[e+3|0]){if(!o[88109]){t=e+3|0,n=!!(0|(A=o[e+3|0]));e:if(A&&(0|(A=A|o[e+1|0]<<16|o[0|e]<<24|o[e+2|0]<<8))!=(0|(c=(e=o[88105]|o[88106]<<8|o[88107]<<16|o[88108]<<24)<<24|(65280&e)<<8|e>>>8&65280|e>>>24)))for(;;){if(e=t+1|0,n=!!(0|(r=o[t+1|0])),!r)break e;if(t=e,(0|c)==(0|(A=r|A<<8)))break}else e=t;return n?e-3|0:0}c=e,W=g=W-1056|0,i[(e=g+1048|0)>>2]=0,i[e+4>>2]=0,i[(e=g+1040|0)>>2]=0,i[e+4>>2]=0,i[g+1032>>2]=0,i[g+1036>>2]=0,i[g+1024>>2]=0,i[g+1028>>2]=0;e:{A:{t:{r:{if(A=o[88105]){for(;;){if(!o[s+c|0])break A;if(s=s+1|0,i[((255&A)<<2)+g>>2]=s,i[(e=(g+1024|0)+(A>>>3&28)|0)>>2]=i[e>>2]|1<<A,!(A=o[s+88105|0]))break}if(e=1,u=-1,s>>>0>1)break r}else u=-1,e=1;l=-1,t=1;break t}for(r=1,A=1;;){r:if((0|(l=o[88105+(A+u|0)|0]))!=(0|(n=o[e+88105|0])))n>>>0<l>>>0?(r=e-u|0,t=e,A=1):(u=t,t=t+1|0,r=1,A=1);else{if((0|A)==(0|r)){t=t+r|0,A=1;break r}A=A+1|0}if(!(s>>>0>(e=t+A|0)>>>0))break}if(t=1,l=-1,s>>>0<=1)e=r;else{for(e=0,n=1,A=1;;){r:if((0|(f=o[88105+(A+l|0)|0]))!=(0|(d=o[t+88105|0])))d>>>0>f>>>0?(n=t-l|0,e=t,A=1):(l=e,e=e+1|0,n=1,A=1);else{if((0|A)==(0|n)){e=e+n|0,A=1;break r}A=A+1|0}if(!(s>>>0>(t=e+A|0)>>>0))break}e=r,t=n}}for(A=e,Dt(88105,(r=(e=l+1>>>0>u+1>>>0)?t:A)+88105|0,f=(d=e?l:u)+1|0)?(r=((e=~d+s|0)>>>0<d>>>0?d:e)+1|0,n=0):n=s-r|0,h=s-1|0,p=63|s,l=0,e=c;;){if(!(c-e>>>0>=s>>>0))if(t=JA(c,0,p)){if(c=t,t-e>>>0<s>>>0)break A}else c=c+p|0;t=o[e+h|0],A=s;t:{if(i[(g+1024|0)+(t>>>3&28)>>2]>>>t&1)if((0|(t=i[(t<<2)+g>>2]))==(0|s)){r:{if(u=o[(t=(A=f)>>>0>l>>>0?A:l)+88105|0])for(;;){if(o[e+t|0]!=(255&u))break r;if(!(u=o[88105+(t=t+1|0)|0]))break}for(;;){if(A>>>0<=l>>>0)break e;if(o[88105+(A=A-1|0)|0]!=o[e+A|0])break}A=r,l=n;break t}A=t-d|0}else A=(t=s-t|0)>>>0>l>>>0?t:l;l=0}e=e+A|0}}e=0}W=g+1056|0,t=e}}}}return t}function De(e,A,t,r,n,s){var l,c,g,u,d=0,f=0,p=0;if(W=l=W-560|0,a[l+448|0]=0,a[l+144|0]=0,a[l+120|0]=0,g=34&s,c=A-C(f=(0|A)/100|0,100)|0,1&(u=64&o[e+106|0]?(0|A)>999|s:0)|(0|A)>99){e:{A:{t:{if(!(!g|c)){if(!Et(e,90606,l+304|0))break t;break e}if(c)break A}if(Et(e,90691,l+304|0))break e}Et(e,90725,l+304|0)}d=s,(0|A)<1e3||(d=s,!(8&o[e+105|0])|A-2e3>>>0<4294967196&&(a[l+208|0]=0,xe(e,d=(f>>>0)/10|0,r=16384&i[e+108>>2]?0:n+1|0,!((A>>>0)%1e3|0)|g,l+272|0)||Ie(e,d,n,28012==i[e+212>>2]?520:(0|r)<4?(i[e+108>>2]>>>r&1)<<3:0,l+208|0),2&o[e+109|0]?(i[l+108>>2]=15,i[l+100>>2]=15,i[l+104>>2]=l+208,i[l+96>>2]=l+272,Bt(l+144|0,90761,l+96|0)):(i[l+92>>2]=15,i[l+84>>2]=15,i[l+88>>2]=l+272,i[l+80>>2]=l+208,Bt(l+144|0,90761,l+80|0)),r=1,1&(!!(0|(f=f-C(d,10)|0))|u)||(a[l+304|0]=0),d=1|s)),a[l+208|0]=0;e:if(!(~u&(0|f)<=0))if(!(4&o[e+106|0])|!(1&d|o[l+144|0])||Et(e,90824,l+120|0),!g|(16&o[e+109|0]?0:c)||(i[l+64>>2]=f,Bt(r=l+548|0,90875,l- -64|0),p=Et(e,r,l+208|0),!(4096&i[e+108>>2])|(0|c)<=0||yn(l+208|0,133104)),r=1,1&(~u|!!(0|f))){A:{t:{r:{n:{if(!(131072&i[e+108>>2])||1&d|1!=(0|f)){if(c|p||(i[l+48>>2]=f,Bt(r=l+548|0,90985,l+48|0),p=Et(e,r,l+208|0)),p)break n;if(i[l+32>>2]=f,Bt(r=l+548|0,91027,l+32|0),Et(e,r,l+208|0))break n;if(1!=(0|f))break t;break r}if(!p)break r}a[l+304|0]=0;break A}if(r=1,4&o[e+105|0])break e}Ie(e,f,n,0,l+208|0)}r=1}else Et(e,88875,l+208|0);i[l+28>>2]=l+304,i[l+24>>2]=l+208,i[l+20>>2]=l+120,i[l+16>>2]=l+144,Bt(l+448|0,91059,l+16|0)}else d=s;a[l+132|0]=0;e:{A:{if((0|c)>0)16&o[e+109|0]&&2&d||(!(1&d)|n&&(0|A)<=100||!(64&(r=i[e+104>>2]))&(!(8388608&r)|c>>>0>9)||Et(e,90824,l+132|0),!(1&d|o[l+144|0])|!(524288&i[e+104>>2])|f||Et(e,90824,l+132|0)),a[l+336|0]=0;else if(a[l+336|0]=0,!c&r)break A;if(n?(s=i[e+108>>2],A=(0|n)<4?(s>>>n&1)<<3:0):(r=g?3:2,A=32&s|((0|A)<100?1&d?r:4|r:r),s=i[e+108>>2]),A=1==(0|n)&&28012==i[e+212>>2]?520|A:A,1048576&s&&(r=16|A,A=(0|f)>0||1&d?r:A),!Ie(e,c,n,256&d|A,l+336|0)|!(128&o[e+104|0]))break e;a[l+132|0]=0;break e}o[133104]&&((0|(e=jt(l+448|0)))<=0||10==o[447+(e=e+l|0)|0]&&(a[e+447|0]=0),rt(l+336|0,133104))}i[l+8>>2]=15,i[l+12>>2]=l+336,i[l+4>>2]=l+132,i[l>>2]=l+448,Bt(t,91101,l),W=l+560|0}function Qe(e){var A,t,r,n=0,l=0,c=0,g=0,u=0,d=0,f=0,p=0,h=0,b=0,I=0,w=0;for(n=i[32972],i[n+64>>2]=290816,i[n+68>>2]=4104,i[n+96>>2]=0,i[n+100>>2]=0,i[n+120>>2]=90,i[n+124>>2]=100,i[n+112>>2]=64,i[n+116>>2]=256,i[n+104>>2]=5,i[n+108>>2]=0,i[n+84>>2]=100,i[n+88>>2]=64,l=i[50754],i[n+132>>2]=0,i[n+136>>2]=0,i[n+128>>2]=l,i[n+140>>2]=0,i[n+144>>2]=0,i[n+148>>2]=0,i[n+152>>2]=0,i[n+156>>2]=0,i[n+160>>2]=0,i[36435]=450,i[n+92>>2]=2,i[50870]=0,i[50871]=0,i[50872]=0,i[50873]=0,i[50880]=0,i[50881]=0,i[50882]=0,i[50883]=0,i[50890]=0,i[50891]=0,i[50892]=0,i[50893]=0,c=-3.141592653589793/+i[50754],m[25429]=c,u=-2*c,m[25430]=u,A=(c=$e(200*c))*-c,m[25434]=A,m[25439]=A,m[25444]=A,c=(u=c*nt(2e3*u))+u,m[25433]=c,m[25438]=c,m[25443]=c,u=1-c-A,m[25432]=u,m[25437]=u,m[25442]=u,i[50902]=0,i[50903]=0,i[50900]=0,i[50901]=0,m[25449]=A,m[25448]=c,i[50912]=0,i[50913]=0,m[25447]=u,i[50910]=0,i[50911]=0,m[25454]=A,m[25453]=c,i[50922]=0,i[50923]=0,m[25452]=u,i[50920]=0,i[50921]=0,m[25459]=A,m[25458]=c,i[50932]=0,i[50933]=0,m[25457]=u,i[50930]=0,i[50931]=0,m[25464]=A,m[25463]=c,m[25462]=u,i[50942]=0,i[50943]=0,i[50940]=0,i[50941]=0,m[25469]=A,m[25468]=c,m[25467]=u,i[50952]=0,i[50953]=0,i[50950]=0,i[50951]=0,m[25474]=A,m[25473]=c,m[25472]=u,t=i[32972],l=0;s[236+(d=(l<<1)+t|0)>>1]=256,s[d+164>>1]=256,n=o[l+105376|0]<<1,s[d+254>>1]=n,s[d+182>>1]=n,s[d+200>>1]=o[l+105385|0]<<1,i[308+(n=(g=l<<2)+t|0)>>2]=i[g+105408>>2],i[n+272>>2]=0,s[d+218>>1]=0,i[g+200944>>2]=(0|C(i[g+105456>>2],22050))/i[50754],9!=(0|(l=l+1|0)););for(b=i[32961],l=0,r=t+344|0;;){if(n=f,p=b,d=l,-1==(0|(f=i[(l=131840+(g=l<<2)|0)>>2]))&&(f=8e3,i[l>>2]=8e3,d&&(i[131840+(4|g)>>2]=i[g+131836>>2])),b=i[131840+(4|g)>>2],!((0|n)>=(0|(f=(0|f)/8|0))||(0|(h=f-n|0))<=0||(g=n+1|0,l=n,1&h&&(a[344+(n+t|0)|0]=(0|p)>=255?255:p,l=g),(0|g)==(0|f))))for(I=b-p|0;g=((0|C(l-n|0,I))/(0|h)|0)+p|0,a[l+r|0]=(0|g)>=255?255:g,w=((0|C((g=l+1|0)-n|0,I))/(0|h)|0)+p|0,a[g+r|0]=(0|w)>=255?255:w,(0|f)!=(0|(l=l+2|0)););if(l=d+2|0,!(d>>>0<10))break}l=i[32972],i[l+80>>2]=232,i[l+72>>2]=256,i[l+76>>2]=238,e||(i[49848]=0),s[l+200>>1]=(0|C(s[l+200>>1],105))/100}function Te(e,A,t){var r,n=0,s=0,l=0,c=0,g=0,u=0,d=0,f=0;W=r=W-288|0,132848!=(0|A)&&zA(132848,A,40),(0|(n=e+228|0))!=(0|A)&&zA(n,A,40),i[r+88>>2]=A,i[r+84>>2]=47,i[r+80>>2]=137584,Bt(n=r+96|0,84089,r+80|0),s=sr(n),(n=i[e+688>>2])&&(ye(n),i[e+688>>2]=0),n=eA(r+96|0,84577);e:if((0|s)>0&&n)if(t=se(s),i[e+688>>2]=t,t)if(u=It(t,s,n),cr(n),u>>>0<=1032)i[r+16>>2]=r+96,en(i[30450],85164,r+16|0),t=2;else if(n=i[e+688>>2],t=i[n+4>>2],!(1024!=(0|(s=i[n>>2]))|(0|t)<=0)&(0|t)<134217729){n=t+n|0,i[e+684>>2]=n,f=kA(e+5168|0,0,1024),kA(e+7664|0,0,260),kA(e+7924|0,255,256),kA(e+4788|0,0,380),kA(e+6192|0,0,512);A:if(7!=(0|(t=o[0|n])))for(;;){if(6!=(0|(s=255&t))){if(!s)break A;s=i[e+684>>2],i[r+72>>2]=t<<24>>24,i[r+64>>2]=132848,i[r+68>>2]=n-s,en(i[30450],88950,r- -64|0);break}t:{r:{n:{a:{s:switch((s=o[0|(t=n+1|0)])-18|0){case 0:break a;case 2:break s;default:break n}for(t=4+(-4&t)|0,i[e+180>>2]=t;t=(n=t)+1|0,!sn(n););for(;s=o[0|n],t=n,n=n+1|0,7!=(0|s););break t}if(t=n+3|0,(0|(n=((0|(n=a[n+2|0]))<65?191:-65)+n|0))>94)break r;i[4788+((n<<2)+e|0)>>2]=t;break r}t=1+((c=jt(t))+t|0)|0;n:switch(0|c){case 1:i[5168+((s<<2)+e|0)>>2]=t;break r;case 0:i[f>>2]=t;break r}c=o[n+2|0],1!=(0|s)?(n=i[e+7664>>2],255==o[0|(d=7924+(l=e+s|0)|0)]&&(a[0|d]=n),a[0|(l=l+7668|0)]=o[0|l]+1,i[6704+(l=(n<<2)+e|0)>>2]=t,i[e+7664>>2]=n+1,i[l+7184>>2]=s|c<<8):i[6188+((c<<2)+e|0)>>2]=t}if(7!=o[0|t])for(;t=1+(jt(t)+t|0)|0,7!=o[0|t];);}t=o[0|(n=t+1|0)]}for(n=i[e+688>>2]+8|0;;){for(i[692+((t=g<<2)+e|0)>>2]=n;s=o[0|n];)n=n+s|0;for(n=n+1|0,i[692+((4|t)+e|0)>>2]=n;t=o[0|n];)n=t+n|0;if(n=n+1|0,1024==(0|(g=g+2|0)))break}t=0,(0|(e=i[e+324>>2]))<=0|e>>>0<=u>>>0||(i[r+48>>2]=A,en(i[30450],85519,r+48|0))}else i[r+40>>2]=t,i[r+36>>2]=s,i[r+32>>2]=r+96,en(i[30450],85349,r+32|0),t=2;else cr(n),t=3;else{if(t||(i[r>>2]=r+96,en(i[30450],84963,r)),t=1,!n)break e;cr(n)}return W=r+288|0,t}function Pe(e){var A,t=0,r=0;for(A=kA(e+344|0,0,256),a[e+364|0]=1,a[e+356|0]=1,a[e+357|0]=1,a[e+358|0]=1,a[e+359|0]=1,a[e+360|0]=1,a[e+361|0]=1,a[e+362|0]=1,a[e+363|0]=1,a[e+348|0]=1,a[e+349|0]=1,a[e+350|0]=1,a[e+351|0]=1,a[e+352|0]=1,a[e+353|0]=1,a[e+354|0]=1,a[e+355|0]=1,a[e+431|0]=3,a[e+429|0]=3,a[e+430|0]=3,a[e+406|0]=3,a[e+407|0]=3,a[e+408|0]=3,a[e+409|0]=3,a[e+410|0]=3,a[e+411|0]=3,a[e+412|0]=3,a[e+413|0]=3,a[e+414|0]=3,a[e+415|0]=3,a[e+416|0]=3,a[e+417|0]=3,a[e+418|0]=3,a[e+419|0]=3,a[e+420|0]=3,a[e+421|0]=3,a[e+440|0]=3,a[e+441|0]=3,a[e+442|0]=3,a[e+443|0]=3,r=21;a[344+(t=e+r|0)|0]=4|o[t+344|0],58!=(0|(t=r+1|0));)a[0|(t=t+A|0)]=4|o[0|t],a[2+(t=r+A|0)|0]=4|o[t+2|0],a[t+3|0]=4|o[t+3|0],r=r+4|0;a[e+346|0]=4|o[e+346|0],a[e+347|0]=4|o[e+347|0],a[e+432|0]=4|o[e+432|0],a[e+433|0]=4|o[e+433|0],a[e+434|0]=4|o[e+434|0],a[e+435|0]=4|o[e+435|0],a[e+436|0]=4|o[e+436|0],a[e+437|0]=4|o[e+437|0],a[e+438|0]=4|o[e+438|0],a[e+439|0]=4|o[e+439|0],a[e+467|0]=4|o[e+467|0],a[e+468|0]=4|o[e+468|0],a[e+470|0]=4|o[e+470|0],a[e+471|0]=4|o[e+471|0],a[e+348|0]=64|o[e+348|0],a[e+349|0]=64|o[e+349|0],a[e+350|0]=64|o[e+350|0],a[e+351|0]=64|o[e+351|0],a[e+352|0]=64|o[e+352|0],a[e+353|0]=64|o[e+353|0],a[e+354|0]=64|o[e+354|0],a[e+355|0]=64|o[e+355|0],a[e+356|0]=64|o[e+356|0],a[e+357|0]=64|o[e+357|0],a[e+358|0]=64|o[e+358|0],a[e+359|0]=64|o[e+359|0],a[e+360|0]=64|o[e+360|0],a[e+361|0]=64|o[e+361|0],a[e+362|0]=64|o[e+362|0],a[e+363|0]=64|o[e+363|0],a[e+364|0]=64|o[e+364|0],a[e+406|0]=64|o[e+406|0],a[e+407|0]=64|o[e+407|0],a[e+408|0]=64|o[e+408|0],a[e+409|0]=64|o[e+409|0],a[e+410|0]=64|o[e+410|0],a[e+411|0]=64|o[e+411|0],a[e+412|0]=64|o[e+412|0],a[e+413|0]=64|o[e+413|0],a[e+414|0]=64|o[e+414|0],a[e+415|0]=64|o[e+415|0],a[e+416|0]=64|o[e+416|0],a[e+417|0]=64|o[e+417|0],a[e+418|0]=64|o[e+418|0],a[e+419|0]=64|o[e+419|0],a[e+420|0]=64|o[e+420|0],a[e+440|0]=64|o[e+440|0],a[e+441|0]=64|o[e+441|0],a[e+429|0]=64|o[e+429|0],a[e+430|0]=64|o[e+430|0],a[e+431|0]=64|o[e+431|0],a[e+442|0]=64|o[e+442|0],a[e+443|0]=64|o[e+443|0],i[e+40>>2]=1,i[e+204>>2]=i[e+600>>2]+77}function ze(e,A,t,r,n,a,s,o,l){var c,g=0,u=0,d=0,f=0,p=0,h=0,m=0,C=0,b=0,I=0;W=c=W-128|0;e:{A:{if(DA(a,s,o,l,0,0,0,0)){u=65535&l;t:r:{if(32767!=(0|(f=l>>>16&32767))){if(g=4,f)break r;g=a|o|s|u?3:2;break t}g=!(a|o|s|u)}if(32767!=(0|(p=32767&(b=n>>>16|0)))&&g)break A}me(c+16|0,A,t,r,n,a,s,o,l),oe(c,A=i[c+16>>2],r=i[c+20>>2],n=i[c+24>>2],t=i[c+28>>2],A,r,n,t),r=i[c+8>>2],n=i[c+12>>2],o=i[c>>2],l=i[c+4>>2];break e}if(f=o,(0|DA(A,t,g=r,h=2147483647&n,a,s,o,d=2147483647&l))<=0){if(DA(A,t,g,h,a,s,f,d)){o=A,l=t;break e}me(c+112|0,A,t,r,n,0,0,0,0),r=i[c+120>>2],n=i[c+124>>2],o=i[c+112>>2],l=i[c+116>>2]}else{if(m=l>>>16&32767,p?(l=t,o=A):(me(c+96|0,A,t,g,h,0,0,0,1081540608),g=i[c+104>>2],h=o=i[c+108>>2],p=(o>>>16|0)-120|0,l=i[c+100>>2],o=i[c+96>>2]),m||(me(c+80|0,a,s,f,d,0,0,0,1081540608),f=i[c+88>>2],d=a=i[c+92>>2],m=(a>>>16|0)-120|0,s=i[c+84>>2],a=i[c+80>>2]),C=f,I=65535&d|65536,h=65535&h|65536,(0|p)>(0|m)){for(;;){if(f=(d=g-C|0)-(u=(0|s)==(0|l)&a>>>0>o>>>0|s>>>0>l>>>0)|0,(0|(u=(h-((g>>>0<C>>>0)+I|0)|0)-(u>>>0>d>>>0)|0))>0|(0|u)>=0){if(g=o,!((o=o-a|0)|f|(l=l-((a>>>0>g>>>0)+s|0)|0)|u)){me(c+32|0,A,t,r,n,0,0,0,0),r=i[c+40>>2],n=i[c+44>>2],o=i[c+32>>2],l=i[c+36>>2];break e}u=u<<1|f>>>31,g=f<<1|l>>>31}else u=h<<1|g>>>31,g=g<<1|l>>>31;if(h=u,u=l<<1|o>>>31,o<<=1,l=u,!((0|(p=p-1|0))>(0|m)))break}p=m}if(f=(d=g-C|0)-(u=(0|s)==(0|l)&a>>>0>o>>>0|s>>>0>l>>>0)|0,d=u=(h-((g>>>0<C>>>0)+I|0)|0)-(u>>>0>d>>>0)|0,(0|u)<0)f=g,d=h;else if(g=o,!((o=o-a|0)|f|(l=l-((a>>>0>g>>>0)+s|0)|0)|d)){me(c+48|0,A,t,r,n,0,0,0,0),r=i[c+56>>2],n=i[c+60>>2],o=i[c+48>>2],l=i[c+52>>2];break e}if(65535==(0|d)|d>>>0<65535)for(;A=l>>>31|0,p=p-1|0,h=l<<1|o>>>31,o<<=1,l=h,t=A,A=d<<1|f>>>31,f=t|f<<1,d=A,A>>>0<65536;);A=32768&b,(0|p)<=0?(me(c- -64|0,o,l,f,65535&d|(A|p+120)<<16,0,0,0,1065811968),r=i[c+72>>2],n=i[c+76>>2],o=i[c+64>>2],l=i[c+68>>2]):(r=f,n=65535&d|(A|p)<<16)}}i[e>>2]=o,i[e+4>>2]=l,i[e+8>>2]=r,i[e+12>>2]=n,W=c+128|0}function Fe(e,A,t){var r,n,s=0,l=0,c=0,g=0,u=0,d=0,f=0,p=0,h=0;if(W=r=W-1040|0,(0|(l=Xt(e,589824,0)))>=0&&((s=Mr(1,2072))?i[s+8>>2]=l:(B(0|l),s=0)),n=s,s){e:if(s=St(n))for(h=i[30450],p=(r+96|0)+A|0;;){if((0|(l=i[50303]))>=348){i[r+4>>2]=350,i[r>>2]=l+1,en(h,91860,r);break e}if(46!=o[s+19|0])if(i[r+88>>2]=s+19,i[r+84>>2]=47,i[r+80>>2]=e,Bt(s=r+96|0,91924,r+80|0),-31!=(0|(s=sr(s)))){if(!((0|s)<=0)&&(f=eA(r+96|0,85712))){c=0,a[r+832|0]=0,a[r+752|0]=0,i[r+360>>2]=0,i[r+356>>2]=4,u=0;A:for(;;){for(d=299-u|0;vA(r+912|0,120,f);){s=r+912|0;t:{if(35!=o[r+912|0]){r:if(!((0|(s=jt(r+912|0)-1|0))<=0))for(;;){if(!(32==(0|(l=a[0|(g=(r+912|0)+s|0)]))|l-9>>>0<5))break r;if(a[0|g]=0,!((0|(s=s-1|0))>0))break}if(!(s=Ge(r+912|0)))break t}a[0|s]=0}s=r+912|0;t:if(l=o[r+912|0])for(;;){if(er(l<<24>>24))break t;if(!(l=o[0|(s=s+1|0)]))break}if(a[0|s]=0,o[r+912|0]){s=s+1|0;t:switch(Qr(131904,r+912|0)-1|0){case 0:for(;l=s,s=s+1|0,32==(0|(g=a[0|l]))|g-9>>>0<5;);fn(r+832|0,l,80);continue;case 1:if(a[r+672|0]=0,i[r+364>>2]=5,l=r+672|0,i[r+16>>2]=l,i[r+20>>2]=r+364,ae(s,86237,r+16|0),(l=jt(l)+2|0)>>>0>=d>>>0)continue;a[0|(s=(r+368|0)+u|0)]=i[r+364>>2],rt(s+1|0,r+672|0),c=c+1|0,u=l+u|0;continue A;case 2:if(i[r+52>>2]=r+360,i[r+48>>2]=r+752,ae(s,86237,r+48|0),!t)continue;i[r+32>>2]=p,en(h,92042,r+32|0);continue;case 5:break t;default:continue}i[r+64>>2]=r+356,ae(s,87268,r- -64|0)}}break}a[(r+368|0)+u|0]=0,l=Qr(132112,r+752|0),c?(g=jt(p)+u|0,d=_e((c=Mr(28+(jt(r+832|0)+g|0)|0,1))+24|0,r+368|0,s=u+1|0),i[c+4>>2]=d,s=rt(s+d|0,p),i[c>>2]=s,i[c+8>>2]=s,o[r+832|0]&&(i[c>>2]=rt(2+(g+d|0)|0,r+832|0)),s=i[r+360>>2],a[c+14|0]=0,a[c+12|0]=l,a[c+13|0]=s,a[c+15|0]=i[r+356>>2],cr(f),s=i[50303],i[50303]=s+1,i[201216+(s<<2)>>2]=c):cr(f)}}else Fe(r+96|0,A,t);if(!(s=St(n)))break}on(i[n+8>>2]),ye(n)}W=r+1040|0}function Se(e,A){var t,r=0,n=0,l=0,c=0,g=0,u=0,d=0,f=0,p=0;W=t=W-352|0;e:if(e||(e=i[136284+(A<<4)>>2])){47!=o[0|e]&&(i[t+12>>2]=e,i[t+4>>2]=47,i[t+8>>2]=47,i[t>>2]=137584,Bt(e=t+16|0,84114,t)),a[t+240|0]=0;A:{t:{if(r=eA(e,84577)){if(-1==(0|Wr(r,20)))break A;if(l=jr(r),n=jr(r),g=jr(r),!(65537!=(0|l)|(0|n)!=i[50754])&(0|g)==n<<1)break t;cr(r),s[t+256>>1]=o[84864]|o[84865]<<8,e=o[84852]|o[84853]<<8|o[84854]<<16|o[84855]<<24,i[t+240>>2]=o[84848]|o[84849]<<8|o[84850]<<16|o[84851]<<24,i[t+244>>2]=e,e=o[84860]|o[84861]<<8|o[84862]<<16|o[84863]<<24,i[t+248>>2]=o[84856]|o[84857]<<8|o[84858]<<16|o[84859]<<24,i[t+252>>2]=e,W=l=W-16|0;r:{if((r=jt(e=t+240|0))>>>0>=6&&!Dt(g=(e+r|0)-6|0,84274,6)){for(d=100;;){for(u=0,W=r=W-16|0,o[227196]||(a[227197]=T(),a[227196]=1),p=+G(),I(c=p/1e3)<0x8000000000000000?(f=I(c)>=1?~~(c>0?k(x(2.3283064365386963e-10*c),4294967295):v(2.3283064365386963e-10*(c-+(~~c>>>0>>>0))))>>>0:0,n=~~c>>>0):(f=-2147483648,n=0),i[r>>2]=n,i[r+4>>2]=f,c=1e3*(p-(+(rr(n,f,1e3,0)>>>0)+4294967296*+(0|Z)))*1e3,n=I(c)<2147483648?~~c:-2147483648,i[r+8>>2]=n,n=g+(r>>>4|0)^C(i[r+8>>2],65537);a[g+u|0]=65+(15&n|n<<1&32),n=n>>>5|0,6!=(0|(u=u+1|0)););if(W=r+16|0,i[l>>2]=384,(0|(r=Xt(e,194,l)))>=0)break r;if(d=d-1|0,20!=i[56798]||!d)break}_e(g,84274,6)}else i[56798]=28;r=-1}W=l+16|0,(0|r)<0||on(r)}if(!(r=eA(e,84577))){e=lr(0,i[56798],e);break e}}if((0|(l=sr(e)))<0){cr(r),e=lr(0,0-l|0,e);break e}if(-1==(0|Wr(r,0))){A=i[56798],cr(r),e=lr(0,A,e);break e}if(!(n=Oe(i[(g=136280+(A<<4)|0)>>2],l))){cr(r),e=48;break e}if((0|It(n,l,r))!=(0|l)){A=i[56798],cr(r),o[t+240|0]&&Hr(t+240|0),ye(n),e=lr(0,A,e);break e}cr(r),o[t+240|0]&&Hr(t+240|0),i[136276+(A<<4)>>2]=(o[n+40|0]|o[n+41|0]<<8|o[n+42|0]<<16|o[n+43|0]<<24)/2,i[g>>2]=n,e=0;break e}A=i[56798],cr(r),e=lr(0,A,e)}else e=28;return W=t+352|0,e}function Ne(e,A,t,r,n,s){var l,c=0,g=0,u=0,d=0,f=0,h=0,m=0,C=0,b=0,I=0,w=0,k=0,x=0,v=0;for(a[0|t]=1,l=1&s,x=1,b=-1,I=-1,d=1,s=A;;){v=k-2|0,w=f,m=I;e:{A:{for(;;){if(!(h=o[0|s])){I=m,f=w;break e}if(s=s+1|0,C=i[144464+(h<<2)>>2]){t:{if(1!=(0|(c=o[C+11|0]))){if(16&o[C+6|0]|2!=(0|c))break t;a[0|(f=t+d|0)]=b,c=(0|b)<4|(0|m)>(0|b),!(2&o[C+4|0])|!l|(0|b)>=0||(a[0|f]=1),f=c?w:d,I=c?m:b,b=-1,d=d+1|0;break A}if(!p[C+8>>1]){c=0,u=d;r:if(8!=(0|h))c=o[C+14|0],i[n>>2]&&c>>>0>=4||(m=(0|c)<(0|m)?m:c,b=c);else{for(;;){if(h=c,u=u-1|0,i[n>>2]|(0|u)<=0)break r;if((0|(C=a[0|(g=t+u|0)]))>3)break r;if(c=h+1|0,!(C>>>0<2))break}if(a[0|g]=4,w=(0|m)<4?u:w,m=(0|m)<=4?4:m,u>>>0<2)break r;if(C=3&(u=~h+k|0),c=1,v-h>>>0>=3)for(h=-4&u,u=0;4==o[0|(g=t+c|0)]&&(a[0|g]=3),4==o[g+1|0]&&(a[g+1|0]=3),4==o[g+2|0]&&(a[g+2|0]=3),4==o[g+3|0]&&(a[g+3|0]=3),c=c+4|0,(0|h)!=(0|(u=u+4|0)););if(g=0,!C)break r;for(;4==o[0|(h=t+c|0)]&&(a[0|h]=3),c=c+1|0,(0|C)!=(0|(g=g+1|0)););}if(x)continue;break e}}break}}I=m,f=w,20==(0|h)&&(a[t+d|0]=l&&(0|b)<0?1:b,d=d+1|0)}if(a[0|A]=h,k=d-1|0,A=A+1|0,x=(0|d)<99)continue}break}a[t+d|0]=1,a[0|A]=0;e:if((0|(A=i[n>>2]))>0)I=4,(0|A)>=(0|d)&&(i[n>>2]=k,A=k),a[A+t|0]=4,f=i[n>>2];else if(5==(0|I)&&(I=4,!((0|d)<2))){if(s=1,m=1&(A=d-1|0),2!=(0|d))for(w=-2&A,u=0;;){g=4;A:{t:{r:switch(o[0|(A=(c=s)+t|0)]-4|0){case 1:break t;case 0:break r;default:break A}g=2&o[e+14|0]?1:3,c=f}a[0|A]=g,f=c}g=4;A:{t:{r:switch(o[0|(A=(c=s+1|0)+t|0)]-4|0){case 1:break t;case 0:break r;default:break A}g=2&o[e+14|0]?1:3,c=f}a[0|A]=g,f=c}if(s=s+2|0,(0|w)==(0|(u=u+2|0)))break}if(m){g=4;A:{t:switch(o[0|(A=t+s|0)]-4|0){case 1:break A;case 0:break t;default:break e}g=2&o[e+14|0]?1:3,s=f}a[0|A]=g,f=s}}return i[n>>2]=f,i[r>>2]=d,I}function Oe(e,A){var t,r,n=0,a=0,s=0,o=0,l=0,c=0,g=0,u=0,d=0;if(!e)return se(A);if(A>>>0>=4294967232)return i[56798]=48,0;t=A>>>0<11?16:A+11&-8,s=-8&(r=i[4+(o=e-8|0)>>2]);e:if(3&r){l=s+o|0;A:if(s>>>0>=t>>>0){if((a=s-t|0)>>>0<16)break A;i[o+4>>2]=1&r|t|2,i[4+(n=o+t|0)>>2]=3|a,i[l+4>>2]=1|i[l+4>>2],Me(n,a)}else if(i[57158]!=(0|l))if(i[57157]!=(0|l)){if(2&(a=i[l+4>>2]))break e;if((g=s+(-8&a)|0)>>>0<t>>>0)break e;d=g-t|0;t:if(a>>>0<=255){if(s=i[l+8>>2],n=a>>>3|0,(0|(a=i[l+12>>2]))==(0|s)){i[57152]=i[57152]&Zr(-2,n);break t}i[s+12>>2]=a,i[a+8>>2]=s}else{if(u=i[l+24>>2],(0|(c=i[l+12>>2]))==(0|l))if((n=i[(s=l+20|0)>>2])||(n=i[(s=l+16|0)>>2])){for(;a=s,c=n,(n=i[(s=n+20|0)>>2])||(s=c+16|0,n=i[c+16>>2]););i[a>>2]=0}else c=0;else n=i[l+8>>2],i[n+12>>2]=c,i[c+8>>2]=n;if(u){a=i[l+28>>2];r:{if(i[(n=228912+(a<<2)|0)>>2]==(0|l)){if(i[n>>2]=c,c)break r;i[57153]=i[57153]&Zr(-2,a);break t}if(i[(i[u+16>>2]==(0|l)?16:20)+u>>2]=c,!c)break t}i[c+24>>2]=u,(n=i[l+16>>2])&&(i[c+16>>2]=n,i[n+24>>2]=c),(n=i[l+20>>2])&&(i[c+20>>2]=n,i[n+24>>2]=c)}}d>>>0<=15?(i[o+4>>2]=1&r|g|2,i[4+(n=o+g|0)>>2]=1|i[n+4>>2]):(i[o+4>>2]=1&r|t|2,i[4+(a=o+t|0)>>2]=3|d,i[4+(n=o+g|0)>>2]=1|i[n+4>>2],Me(a,d))}else{if((a=s+i[57154]|0)>>>0<t>>>0)break e;(n=a-t|0)>>>0>=16?(i[o+4>>2]=1&r|t|2,i[4+(s=o+t|0)>>2]=1|n,i[(a=a+o|0)>>2]=n,i[a+4>>2]=-2&i[a+4>>2]):(i[o+4>>2]=a|1&r|2,i[4+(n=a+o|0)>>2]=1|i[n+4>>2],n=0,s=0),i[57157]=s,i[57154]=n}else{if((s=s+i[57155]|0)>>>0<=t>>>0)break e;i[o+4>>2]=1&r|t|2,n=s-t|0,i[4+(a=o+t|0)>>2]=1|n,i[57155]=n,i[57158]=a}n=o}else{if(t>>>0<256)break e;if(s>>>0>=t+4>>>0&&(n=o,s-t>>>0<=i[57272]<<1>>>0))break e;n=0}return n?n+8|0:(o=se(A))?(_e(o,e,A>>>0>(n=(3&(n=i[e-4>>2])?-4:-8)+(-8&n)|0)>>>0?n:A),ye(e),o):0}function Le(){var e,A,t=0,r=0;return e=Nr(12),i[e>>2]=22050,A=Nr(432),i[(r=A)+4>>2]=0,i[r+8>>2]=0,i[r>>2]=132304,i[r+32>>2]=0,i[r+12>>2]=0,i[r+16>>2]=0,i[r+20>>2]=0,i[r+24>>2]=0,kA(r+40|0,0,376),i[r+420>>2]=0,i[r+424>>2]=-1,a[r+416|0]=1,t=kA(Nr(408),0,408),i[r+28>>2]=t,a[t+8|0]=1,i[e+4>>2]=r,t=Nr(1096),i[t+8>>2]=22050,i[t+4>>2]=22050,i[t>>2]=132352,i[t+64>>2]=22050,i[t+56>>2]=0,i[t+60>>2]=0,i[t+32>>2]=0,i[t+36>>2]=0,i[t+24>>2]=22050,i[t+16>>2]=0,i[t+20>>2]=0,i[t+40>>2]=0,i[t+44>>2]=0,a[t+48|0]=0,i[t+128>>2]=0,i[t+132>>2]=0,s[t+96>>1]=0,i[t+72>>2]=22050,i[t+136>>2]=0,i[t+140>>2]=0,s[t+168>>1]=0,i[t+144>>2]=22050,i[t+200>>2]=0,i[t+204>>2]=0,i[t+208>>2]=0,i[t+212>>2]=0,i[t+216>>2]=22050,s[t+240>>1]=0,i[t+280>>2]=0,i[t+284>>2]=0,i[t+272>>2]=0,i[t+276>>2]=0,i[t+288>>2]=22050,s[t+312>>1]=0,i[t+344>>2]=0,i[t+348>>2]=0,i[t+352>>2]=0,i[t+356>>2]=0,i[t+360>>2]=22050,s[t+384>>1]=0,i[t+416>>2]=0,i[t+420>>2]=0,i[t+424>>2]=0,i[t+428>>2]=0,i[t+432>>2]=22050,s[t+456>>1]=0,i[t+488>>2]=0,i[t+492>>2]=0,i[t+496>>2]=0,i[t+500>>2]=0,i[t+504>>2]=22050,s[t+528>>1]=1,i[t+560>>2]=0,i[t+564>>2]=0,i[t+568>>2]=0,i[t+572>>2]=0,s[t+600>>1]=0,i[t+576>>2]=22050,i[t+640>>2]=0,i[t+644>>2]=0,i[t+632>>2]=0,i[t+636>>2]=0,s[t+680>>1]=0,i[t+656>>2]=22050,i[t+648>>2]=22050,i[t+720>>2]=0,i[t+724>>2]=0,i[t+712>>2]=0,i[t+716>>2]=0,s[t+752>>1]=0,i[t+728>>2]=22050,i[t+792>>2]=0,i[t+796>>2]=0,i[t+784>>2]=0,i[t+788>>2]=0,s[t+824>>1]=0,i[t+800>>2]=22050,i[t+864>>2]=0,i[t+868>>2]=0,i[t+856>>2]=0,i[t+860>>2]=0,i[t+872>>2]=22050,s[t+896>>1]=0,i[t+936>>2]=0,i[t+940>>2]=0,i[t+928>>2]=0,i[t+932>>2]=0,s[t+968>>1]=0,i[t+944>>2]=22050,i[t+1008>>2]=0,i[t+1012>>2]=0,i[t+1e3>>2]=0,i[t+1004>>2]=0,s[t+1040>>1]=0,i[t+1016>>2]=22050,i[t+1088>>2]=0,i[(r=t+1080|0)>>2]=0,i[r+4>>2]=0,i[(r=t+1072|0)>>2]=0,i[r+4>>2]=0,i[e+8>>2]=t,Tn[i[i[t>>2]+4>>2]](t,A),e}function Ye(e,A,t){var r=0,n=0,a=0,s=0,l=0,c=0,g=0,u=0,d=0,f=0,p=0;e:if(d=i[50759]){if(r=i[50980],n=C(r,80)+222176|0,(0|(c=(0|(n=(0|(n=(i[n+12>>2]+i[n>>2]|0)/(0|e)|0))<(0|(u=((0|C(i[50754],19))/40<<16)/(0|e)|0))?n:u))>=399?399:n))>=0&&(kA(A,0,4+(c<<2)|0),r=i[50980]),(0|r)>=0)for(f=i[50801];;){if(a=C(s,80)+222176|0,i[a+4>>2]&&(l=i[a>>2])){if(p=l+i[a+12>>2]|0,r=1+((l-i[a+8>>2]|0)/(0|e)|0)|0,(0|l)>(0|(r=C(n=(0|r)<=1?1:r,e))))for(;i[(g=(n<<2)+A|0)>>2]=i[g>>2]+C(i[a+4>>2],o[((l-r|0)/(i[a+8>>2]>>8)|0)+f|0]),n=n+1|0,(0|l)>(0|(r=e+r|0)););if(!((0|r)>=(0|p)))for(;i[(g=(n<<2)+A|0)>>2]=i[g>>2]+C(i[a+4>>2],o[((r-l|0)/(i[a+12>>2]>>8)|0)+f|0]),n=n+1|0,(0|p)>(0|(r=e+r|0)););}if(!((0|(s=s+1|0))<=i[50980]))break}if(n=1,!((0|(a=65536e3/(0|e)|0))<=0||(0|(r=C(i[55565],10)))<=0))for(a=(0|r)/(0|a)|0;i[(l=(n<<2)+A|0)>>2]=i[l>>2]+r,n=n+1|0,(0|(r=r-a|0))>0;);if((0|s)<=8)for(;n=203216+(r=s<<2)|0,a=C(s,80)+222176|0,l=i[a+4>>2]>>14,i[n>>2]=(0|C(C(l,l),5))/2,t?r=i[r+203264>>2]:(l=r+203264|0,r=i[a>>2]/(0|e)|0,i[l>>2]=r),(0|r)>=(0|u)&&(i[n>>2]=0),9!=(0|(s=s+1|0)););if(n=0,(0|c)>=0)for(r=0;a=i[(s=(r<<2)+A|0)>>2]>>15,a=C(a,a)>>8,i[s>>2]=a,(0|n)<=524287999&&(i[s>>2]=C(a,o[344+((n>>19)+d|0)|0])>>13),n=e+n|0,s=(0|r)!=(0|c),r=r+1|0,s;);if(i[A+4>>2]=(0|C(i[A+4>>2],o[203300]?6:10))/8,1&t)for(e=i[50826],r=1;;){if(i[203312+(t=r<<2)>>2]=i[A+t>>2]-i[e+t>>2]>>3,30==(0|(t=r+1|0)))break e;i[203312+(t<<=2)>>2]=i[A+t>>2]-i[e+t>>2]>>3,r=r+2|0}}else c=1;return c}function He(e,A,t,r){var n,l=0,c=0;W=n=W-176|0,a[0|e]=0,s[n+80>>1]=24320,i[n+104>>2]=0,i[n+108>>2]=0,a[82+(Ft(t,l=n+80|2)+n|0)|0]=0;e:{A:{if(!r){if(r=n+80|1,i[n+12>>2]=r,Ve(A,n+12|0,n+16|0,n+104|0,0,0)||(i[n+12>>2]=l,Ve(A,n+12|0,n+16|0,n+104|0,0,0)||(a[n+81|0]=32,Ce(A,l,n+16|0,60,0,0,0))),(t=o[n+16|0])&&21!=(0|t))break A;t:{if(25966!=i[A+212>>2]){if(Mt(85719,188772,189296),a[n+81|0]=95,i[n+12>>2]=r,Ve(i[47193],n+12|0,n+16|0,n+104|0,0,0)||(i[n+12>>2]=l,Ve(i[47193],n+12|0,n+16|0,n+104|0,0,0)),o[n+16|0])break t;qr(i[i[32972]+60>>2]),t=o[n+16|0]}if(255&t)break A;A=o[87124]|o[87125]<<8|o[87126]<<16|o[87127]<<24,t=o[87120]|o[87121]<<8|o[87122]<<16|o[87123]<<24,a[0|e]=t,a[e+1|0]=t>>>8,a[e+2|0]=t>>>16,a[e+3|0]=t>>>24,a[e+4|0]=A,a[e+5|0]=A>>>8,a[e+6|0]=A>>>16,a[e+7|0]=A>>>24,a[e+16|0]=o[87136],A=o[87132]|o[87133]<<8|o[87134]<<16|o[87135]<<24,t=o[87128]|o[87129]<<8|o[87130]<<16|o[87131]<<24,a[e+8|0]=t,a[e+9|0]=t>>>8,a[e+10|0]=t>>>16,a[e+11|0]=t>>>24,a[e+12|0]=A,a[e+13|0]=A>>>8,a[e+14|0]=A>>>16,a[e+15|0]=A>>>24;break e}r=n+16|0,l=n+104|0,W=t=W-112|0,(c=i[47193])?(ie(c,r,l,-1,0),QA(l=r,r=t+48|0),A=i[A+212>>2],a[t+43|0]=A>>>24,a[0|(c=(l=t+43|0)+(A>>>0>16777215)|0)]=A>>>16,a[0|(c=c+!!(16711680&A)|0)]=A>>>8,a[0|(c=c+!!(65280&A)|0)]=A,a[c+!!(255&A)|0]=0,i[t+16>>2]=85719,i[t+24>>2]=l,i[t+20>>2]=r,Bt(e,85662,t+16|0)):(ie(A,r,l,-1,0),QA(r,A=t+48|0),i[t>>2]=A,Bt(e,85451,t)),W=t+112|0,qr(i[i[32972]+60>>2]);break e}if(i[n+12>>2]=l,Ve(A,n+12|0,n+16|0,n+104|0,0,0),!o[n+16|0])break e}ie(t=A,A=n+16|0,n+104|0,-1,0),QA(t=A,A=n+112|0),i[n>>2]=A,Bt(e,85451,n)}return W=n+176|0,e}function Re(e,A){var t,r=0,n=0,s=0,o=0,l=0,c=0,g=0,u=0,d=0,f=0,p=0,h=0,m=0,C=0,b=0,I=0,w=0,k=0;if(W=t=W-112|0,i[t+72>>2]=-1,i[(r=t- -64|0)>>2]=-1,i[r+4>>2]=-1,i[t+56>>2]=-1,i[t+60>>2]=-1,i[t+48>>2]=-1,i[t+52>>2]=-1,i[t+40>>2]=-1,i[t+44>>2]=-1,i[t+32>>2]=-1,i[t+36>>2]=-1,i[t+24>>2]=-1,i[t+28>>2]=-1,i[t+16>>2]=-1,i[t+20>>2]=-1,(0|A)>0){for(s=i[t+72>>2],o=i[t+68>>2],l=i[t+64>>2],c=i[t+60>>2],g=i[t+56>>2],u=i[t+52>>2],d=i[t+48>>2],f=i[t+44>>2],p=i[t+40>>2],h=i[t+36>>2],m=i[t+32>>2],C=i[t+28>>2],b=i[t+24>>2],I=i[t+20>>2],w=i[t+16>>2];n=s,s=(0|(s=i[60+(r=134912+(k<<6)|0)>>2]))<0?n:s,n=o,o=(0|(o=i[r+56>>2]))<0?n:o,n=l,l=(0|(l=i[r+52>>2]))<0?n:l,n=c,c=(0|(c=i[r+48>>2]))<0?n:c,n=g,g=(0|(g=i[r+44>>2]))<0?n:g,n=u,u=(0|(u=i[r+40>>2]))<0?n:u,n=d,d=(0|(d=i[r+36>>2]))<0?n:d,n=f,f=(0|(f=i[r+32>>2]))<0?n:f,n=p,p=(0|(p=i[r+28>>2]))<0?n:p,n=h,h=(0|(h=i[r+24>>2]))<0?n:h,n=m,m=(0|(m=i[r+20>>2]))<0?n:m,n=C,C=(0|(C=i[r+16>>2]))<0?n:C,n=b,b=(0|(b=i[r+12>>2]))<0?n:b,n=I,I=(0|(I=i[r+8>>2]))<0?n:I,w=(0|(r=i[r+4>>2]))<0?w:r,(0|(k=k+1|0))!=(0|A););i[t+72>>2]=s,i[t+68>>2]=o,i[t+64>>2]=l,i[t+60>>2]=c,i[t+56>>2]=g,i[t+52>>2]=u,i[t+48>>2]=d,i[t+44>>2]=f,i[t+40>>2]=p,i[t+36>>2]=h,i[t+32>>2]=m,i[t+28>>2]=C,i[t+24>>2]=b,i[t+20>>2]=I,i[t+16>>2]=w}for(A=0;;){if((0|(r=i[(s=A<<2)+(t+16|0)>>2]))!=i[(s=s+134848|0)>>2]){a[t+80|0]=0;e:{A:switch(A-1|0){case 4:i[47201]=r-1;break e;case 5:i[47200]=r;break e;case 0:case 1:case 2:case 3:case 11:break A;default:break e}i[t+4>>2]=r,i[t>>2]=1,i[t+8>>2]=a[A+102812|0],Bt(t+80|0,91942,t)}i[s>>2]=r,r=t+80|0,rt(i[e>>2]+189424|0,r),i[e>>2]=i[e>>2]+jt(r)}if(15==(0|(A=A+1|0)))break}W=t+112|0}function je(e){var A,t,r,n=0,s=0,l=0,c=0;for(n=17,i[e+328>>2]=17,i[e+224>>2]=0,i[e+216>>2]=1105,i[e+220>>2]=1072,i[e+600>>2]=1056,i[e+8180>>2]=105296,l=kA(e+344|0,0,256),a[e+393|0]=1,a[e+365|0]=1,a[e+360|0]=1,a[e+545|0]=1,a[e+529|0]=1,a[e+391|0]=1,a[e+379|0]=1,a[e+374|0]=1,a[e+489|0]=1,a[e+487|0]=1,a[e+398|0]=1,a[e+387|0]=1,a[e+388|0]=2,a[e+389|0]=1,a[e+390|0]=1,a[e+385|0]=2,a[e+383|0]=2,a[e+368|0]=1,a[e+369|0]=2,s=104224;a[0|(n=n+l|0)]=4|o[0|n],n=l+o[s+1|0]|0,a[0|n]=4|o[0|n],n=l+o[s+2|0]|0,a[0|n]=4|o[0|n],n=o[0|(s=s+3|0)],104251!=(0|s););a[e+386|0]=8|o[e+386|0],a[e+382|0]=8|o[e+382|0],a[e+384|0]=8|o[e+384|0],a[e+369|0]=16|o[e+369|0],a[e+370|0]=16|o[e+370|0],a[e+371|0]=16|o[e+371|0],s=o[e+361|0],l=o[e+362|0],n=o[e+363|0],c=o[e+364|0],A=o[e+366|0],t=o[e+367|0],a[e+372|0]=16|o[e+372|0],a[e+373|0]=16|o[e+373|0],a[e+375|0]=16|o[e+375|0],a[e+376|0]=16|o[e+376|0],a[e+377|0]=16|o[e+377|0],a[e+378|0]=16|o[e+378|0],a[e+380|0]=16|o[e+380|0],a[e+381|0]=16|o[e+381|0],a[e+383|0]=16|o[e+383|0],a[e+385|0]=16|o[e+385|0],r=o[e+388|0],a[e+367|0]=48|t,a[e+366|0]=40|A,a[e+364|0]=48|c,a[e+363|0]=48|n,a[e+362|0]=48|l,a[e+361|0]=48|s,a[e+388|0]=80|r,s=o[e+390|0],l=o[e+391|0],n=o[e+393|0],a[e+360|0]=128|o[e+360|0],c=o[e+365|0],a[e+393|0]=192|n,a[e+365|0]=128|c,a[e+368|0]=128|o[e+368|0],a[e+374|0]=128|o[e+374|0],a[e+379|0]=128|o[e+379|0],a[e+387|0]=128|o[e+387|0],n=o[e+389|0],a[e+391|0]=192|l,a[e+390|0]=192|s,a[e+389|0]=128|n,a[e+529|0]=128|o[e+529|0],a[e+545|0]=128|o[e+545|0],a[e+489|0]=128|o[e+489|0],a[e+487|0]=128|o[e+487|0],a[e+398|0]=128|o[e+398|0]}function Ve(e,A,t,r,n,l){var c,g=0,u=0,d=0,f=0,p=0,h=0;W=c=W-192|0,g=p=i[A>>2];e:{A:{for(;u=1,(0|(d=a[0|g]))>=0||(u=2,d>>>0<4294967264||(u=d>>>0<4294967280?3:4)),!(32!=o[0|(d=u+g|0)]|46!=o[d+1|0]);){if(f-160>>>0<4294967135)break A;_e((h=c+32|0)+f|0,g,u),a[(u=u+f|0)+h|0]=46,g=d+3|0,f=u+1|0}if(f){for(u=0;d=u,u=u+1|0,223&o[g+d|0];);if(!(1+(h=d+f|0)>>>0>160)&&(_e((u=c+32|0)+f|0,g,d),a[u+h|0]=0,ke(e,u,g,t,r,n,l))){i[r>>2]=128|i[r>>2],i[33264]=f,e=1;break e}}}for(g=0;;){if(p=(u=p)+1|0,223&(u=o[0|u]))if(!g|46!=(0|u)|a[31+(g+c|0)|0]-48>>>0>=10){if(a[(c+32|0)+g|0]=u,u=159,159!=(0|(g=g+1|0)))continue}else u=g;else u=g;break}a[(g=c+32|0)+u|0]=0,g=ke(e,g,p,t,r,n,l);A:if(8&o[r+3|0]){if(!hr(t,d=e+268|0)){if(d=i[e+288>>2]+1|0,i[e+288>>2]=d,(0|d)<4)break A;a[0|t]=0;break A}fn(d,t,20),i[e+288>>2]=1}else i[e+288>>2]=0;A:{if(!g){if(g=0,8&o[r+5|0]&&(d=VA(c+28|0,g=c+32|95==o[c+32|0]),sA(e,i[c+28>>2],t),g=g+d|0),!(u>>>0<2|g)){if(a[0|t]=0,!(16&n&&101==o[0|(g=31+(u+c|0)|0)])){if(!(4096&n))break A;if(o[0|(g=(u=(c+32|0)+u|0)-1|0)]!=o[u-2|0])break A}a[0|g]=0,g=ke(e,c+32|0,p,t,r,n,l)}if(!g)break A}if(f=i[r>>2],o[e+172|0]&&(f^=536870912,i[r>>2]=f),e=1,!(536870912&f))break e;2&n&&(s[66448]=8192,i[c+16>>2]=t,Bt(132898,87470,c+16|0),e=i[A>>2],i[A>>2]=132898,8&o[188788]&&(_e(A=c+32|0,r=e,e=g-e|0),a[e+A|0]=0,i[c+4>>2]=132898,e=i[47195],i[c>>2]=A,en(e,87652,c)))}a[0|t]=0,e=0}return W=c+192|0,e}function We(e,A){var t=0,r=0,n=0;t=31&e;e:{A:{t:{if(96==(0|(e&=96)))e=-1;else{if(64!=(0|e))break t;e=1}if(t>>>0>=15)break e;A=i[203136+(t<<2)>>2]+C(e,A)|0;break A}if(t>>>0>=15)break e}e=i[105616+(r=t<<2)>>2],i[r+203136>>2]=(0|A)>=0?(0|e)>(0|A)?A:e:0}e:{A:{t:{r:{n:switch(t-1|0){case 5:if(!(e=i[50759]))break A;i[54728]=i[50982],A=i[50979],t=i[50978],kA(205184,0,11e3),i[51293]=0,A=(t=(n=(0|(r=i[50789]))>0)?130:(0|t)>=5499?5499:t)?n?r:(0|A)>=100?100:A:0,i[50755]=A,t=(0|C(t,i[50754]))/1e3|0,i[51292]=t,i[54729]=(0|A)>20?t<<1:A?t:0,i[33037]=(0|C(500-A|0,(0|C(o[i[50797]+105596|0],(0|C(i[50787],55))/100|0))/16|0))/500;break r;case 0:break n;case 2:case 12:break e;case 4:break t;default:break A}if(!(e=i[50759]))break A}return A=256,(0|(t=(0|(t=i[50785]))>=101?101:t))>=51&&(A=256+(((C(t,25)-1250&65535)>>>0)/50|0)|0),s[e+164>>1]=(0|C(s[e+236>>1],A))/256,s[e+166>>1]=(0|C(s[e+238>>1],A))/256,s[e+168>>1]=(0|C(s[e+240>>1],A))/256,s[e+170>>1]=(0|C(s[e+242>>1],A))/256,s[e+172>>1]=(0|C(s[e+244>>1],A))/256,s[e+174>>1]=(0|C(s[e+246>>1],A))/256,e=i[50790],s[102e3]=(0|C(s[102036],C(e,-3)+256|0))/256,void(s[101999]=(0|C(s[102035],C(e,-6)+256|0))/256)}i[50759]&&(i[54728]=i[50982],e=i[50979],A=i[50978],kA(205184,0,11e3),i[51293]=0,e=(A=(r=(0|(t=i[50789]))>0)?130:(0|A)>=5499?5499:A)?r?t:(0|e)>=100?100:e:0,i[50755]=e,A=(0|C(A,i[50754]))/1e3|0,i[51292]=A,i[54729]=(0|e)>20?A<<1:e?A:0,i[33037]=(0|C(500-e|0,(0|C(o[i[50797]+105596|0],(0|C(i[50787],55))/100|0))/16|0))/500)}return}i[33037]=(0|C(o[i[50797]+105596|0],(0|C(i[50787],55))/100|0))/16}function Ue(e,A,t){var r=0,n=0,s=0,l=0,c=0,g=0,u=0,d=0,f=0,p=0;t&&(i[t>>2]=0);e:{A:if(!((0|(r=a[0|e]))<0)){for(;;){if(32==(0|(s=255&r))|s-9>>>0<5){if((0|(r=a[0|(e=e+1|0)]))>=0)continue;break A}break}if(!(255&r))break e}for(;;){if(32==(0|(r=g=255&r))|r-9>>>0<5)break e;if(124!=(0|g)||124==(0|(r=o[0|(s=e+1|0)]))){A:{if((0|(f=i[36115]))>=2){for(r=1,s=-1,u=0;;){t:if(!(!(d=i[144464+(r<<2)>>2])|15==o[d+11|0])){c=i[d>>2];r:{n:{if(g>>>0>=33){if(p=0,l=0,(255&c)==(0|g)&&(l=1,(n=o[e+1|0])>>>0<33|(0|n)!=(c>>>8&255)||(l=2,(n=o[e+2|0])>>>0<33|(0|n)!=(c>>>16&255)||(l=(n=(n=o[e+3|0])>>>0>32&(0|n)==(c>>>24|0))?4:3,p=0-n|0))),(0|s)>=(0|l))break t;if(n=4,!(1&p))break n;break r}if(l=0,(0|s)>=0)break t}if(c>>>((n=l)<<3)&255)break t}u=o[d+10|0],s=n}if((0|f)==(0|(r=r+1|0)))break}if(u)break A}return t&&VA(t,e),void(a[0|A]=0)}a[0|A]=u,e=((0|s)<=1?1:s)+e|0,A=s=A+1|0;A:if(21==(0|u)){t:if(32==(0|(n=o[0|e]))|n-9>>>0<5)r=s;else if(r=s,n)for(;;){if(a[0|r]=nr(n),r=r+1|0,32==(0|(n=o[0|(e=e+1|0)]))|n-9>>>0<5)break t;if(!n)break}if(a[0|r]=0,!n){if(A=r,hr(s,85593))break A;return void(a[0|s]=0)}a[0|r]=124,A=r+1|0}r=o[0|e]}else e=s;if(!(255&r))break}}a[0|A]=0}function Ke(e,A){var t=0,r=0,n=0,a=0,s=0;e:{A:{t:{r:{n:switch((0|(t=i[e+4>>2]))==i[e+104>>2]?t=hA(e):(i[e+4>>2]=t+1,t=o[0|t]),t-43|0){case 0:case 2:break n;default:break r}if(a=45==(0|t),s=!A,(0|(t=i[e+4>>2]))==i[e+104>>2]?t=hA(e):(i[e+4>>2]=t+1,t=o[0|t]),s|(A=t-58|0)>>>0>4294967285)break t;if(i[e+116>>2]<0)break A;i[e+4>>2]=i[e+4>>2]-1;break A}A=t-58|0}if(!(A>>>0<4294967286)){if((A=t-48|0)>>>0<10){for(;n=(0|(r=(r=C(r,10)+t|0)-48|0))<214748364,(0|(A=i[e+4>>2]))==i[e+104>>2]?t=hA(e):(i[e+4>>2]=A+1,t=o[0|A]),n&(A=t-48|0)>>>0<=9;);n=r>>31}t:if(!(A>>>0>=10))for(;;){if(A=(r=rr(r,n,10,0))+t|0,t=Z,t=A>>>0<r>>>0?t+1|0:t,r=A-48|0,n=t-(A>>>0<48)|0,(0|(A=i[e+4>>2]))==i[e+104>>2]?t=hA(e):(i[e+4>>2]=A+1,t=o[0|A]),(A=t-48|0)>>>0>9)break t;if(!(r>>>0<2061584302&(0|n)<=21474836|(0|n)<21474836))break}if(A>>>0<10)for(;(0|(A=i[e+4>>2]))==i[e+104>>2]?A=hA(e):(i[e+4>>2]=A+1,A=o[0|A]),A-48>>>0<10;);(0|(A=i[e+116>>2]))>0|(0|A)>=0&&(i[e+4>>2]=i[e+4>>2]-1),e=r,r=a?0-e|0:e,n=a?0-(!!(0|e)+n|0)|0:n;break e}}if(n=-2147483648,!(i[e+116>>2]<0))return i[e+4>>2]=i[e+4>>2]-1,Z=-2147483648,0}return Z=n,r}function Ze(e){var A=0,t=0,r=0,n=0;if(i[36432]=110,i[36433]=100,i[36434]=450,i[36430]=5,A=i[203136+(2==(0|e)?32:8)>>2],r=i[32972],(0|(t=i[r+84>>2]))>0&&(A=(0|C(A,t))/100|0),t=(0|A)>=359?359:A,t=(0|(A=(0|A)>=450?450:A))>399?6:(0|A)>379?7:o[((0|t)<=80?80:t)+101856|0],1&e&&(i[32526]=(0|C(t,i[r+72>>2]))/256,i[32527]=(0|C(t,i[r+76>>2]))/256,i[32528]=(0|C(t,i[r+80>>2]))/256,t>>>0>7||(n=t-1|0,i[32528]=n,i[32526]=t,i[32527]=n)),2&e){e=i[r+72>>2];e:{A:{t:{r:{n:{a:{s:{i:{if((0|A)>=351)r=A-350|0,i[36432]=85-(((255&r)>>>0)/3|0)&255,r=60-(r>>>3|0)|0;else{if((0|A)<251)break i;r=A-250|0,i[36432]=110-(r>>>2|0),r=110-(r>>>1|0)|0}if(i[36433]=r,e=(0|C(e,t))/256|0,i[36431]=110+((0|C(e,150))/128|0),A>>>0<=349)break s;if(t=A-350|0,i[36431]=o[t+102224|0],A>>>0<390)break n;if(i[36434]=450+((A+112<<24>>24)/-2<<24>>24),A>>>0<441)break a;i[36434]=860-A,e=12;break A}e=(0|C(e,t))/256|0,i[36431]=(0|A)>=170?110+((0|C(e,150))/128|0)|0:128+((e<<7)/130|0)|0}e=(e<<8)/115|0;break A}if(e=12,A>>>0>430)break A;if(e=13,A>>>0<=400)break r;break A}if(e=(e<<8)/115|0,i[36428]=e,A>>>0<375)break t}e=14;break A}if((0|A)<351)break e;e=o[t+102336|0]}i[36428]=e}i[36429]=(0|e)<=16?16:e}}function Xe(e,A,t){var r,n,a,l;r=.000244140625*+i[50767],m[t>>3]=r,m[t+40>>3]=.015625*+i[e+112>>2],m[t+48>>3]=.015625*+i[e+276>>2],m[t+56>>3]=.00390625*+(0|C(s[e+166>>1],s[A+4>>1]))+ +s[e+220>>1],m[t+64>>3]=.00390625*+(0|C(s[e+168>>1],s[A+6>>1]))+ +s[e+222>>1],m[t+72>>3]=.00390625*+(0|C(s[e+170>>1],s[A+8>>1]))+ +s[e+224>>1],m[t+80>>3]=.00390625*+(0|C(s[e+172>>1],s[A+10>>1]))+ +s[e+226>>1],m[t+88>>3]=.00390625*+(0|C(s[e+174>>1],s[A+12>>1]))+ +s[e+228>>1],n=s[e+230>>1],a=s[e+176>>1],l=s[A+14>>1],i[t+112>>2]=0,i[t+116>>2]=1080623104,i[t+104>>2]=0,i[t+108>>2]=1081032704,m[t+96>>3]=.00390625*+(0|C(a,l))+ +(0|n),o[A+40|0]?(i[t+184>>2]=0,i[t+188>>2]=1072693248,m[t+104>>3]=o[A+40|0]<<1):(i[t+184>>2]=0,i[t+188>>2]=0),m[t+120>>3]=.00390625*+s[e+202>>1]*+(o[A+35|0]<<1),m[t+128>>3]=.00390625*+s[e+204>>1]*+(o[A+36|0]<<1),m[t+136>>3]=.00390625*+s[e+206>>1]*+(o[A+37|0]<<1),A=o[A+38|0],e=s[e+208>>1],i[t+176>>2]=0,i[t+180>>2]=1079574528,i[t+160>>2]=0,i[t+164>>2]=1083129856,i[t+152>>2]=0,i[t+156>>2]=1083129856,i[t+352>>2]=0,i[t+356>>2]=1072693248,i[t+168>>2]=0,i[t+172>>2]=1079574528,m[t+144>>3]=.00390625*+(0|e)*+(A<<1),e=i[50779],m[t+368>>3]=r,m[t+360>>3]=+(0|e)/100*3}function qe(e){var A=0;q(e,UA(e));e:{A:{t:{r:{n:{a:{s:{i:{o:{l:{if((0|(e=-1048576&Z))<268435455|(0|e)<=268435455){c:{g:{if((0|e)<33554431|(0|e)<=33554431){if((0|e)<8388607|(0|e)<=8388607){if(A=524328,!0&-2147483648==(0|e))break e;if(0|-2143289344!=(0|e))break A;return 557096}if(!0&8388608==(0|e))break g;if(0|16777216!=(0|e))break A;return 524358}if((0|e)>71303167)break c;if(!0&33554432==(0|e))break t;if(0|67108864!=(0|e))break A}return 266270}if(!0&71303168==(0|e))break l;if(!0&134217728==(0|e))break r;if(0|138412032!=(0|e))break A;return 294942}if((0|e)<542113791|(0|e)<=542113791){if((0|e)<536870911|(0|e)<=536870911){if(!0&268435456==(0|e))break n;if(0|272629760!=(0|e))break A;return 299028}if(!0&536870912==(0|e))break s;if(!0&538968064==(0|e))break a;if(0|541065216!=(0|e))break A;return 569389}if((0|e)<1075838975|(0|e)<=1075838975){if(!0&542113792==(0|e))break l;if(0|1073741824!=(0|e))break A;return 532520}if(!0&1075838976==(0|e))break i;if(!0&1077936128==(0|e))break o;if(0|1078984704!=(0|e))break A}return 299038}return 565288}return 1581096}return 536621}return 1585197}return 266260}return 262174}return 2396190}A=16384}return A}function Je(e,A,t,r,n,a){var s,l,c=0,g=0,u=0,d=0;if(l=8388607&e,g=i[34456],c=o[0|(e=l+g|0)]|o[e+1|0]<<8){s=!(u=o[e+2|0]),e=i[36434]<<s,(0|t)<=0?t=c:(t=(0|C(i[50754],t))/1e3<<s,e=(0|e)<(0|(d=(0|C(t,e))/(0|c)|0))?d:e),n=(0|n)>0?(0|C(t,n))/256|0:t,t=(0|C(n,i[36431]))/256|0,t=(0|e)<(0|(t=(4&r)>>>2|0&&(0|t)>(0|n)?n:t))?t:e,u||(c=c>>>1|0,t=(0|t)/2|0);e:if(!((0|a)<0)){if(r=l+4|0,256&A)e=i[50758],i[36439]=e,i[(A=216192+(e<<4)|0)>>2]=7,i[A+8>>2]=r+g,i[A+4>>2]=c<<16|t,a=u|a<<8;else{if(e=i[50758],i[36439]=e,i[(e=216192+(e<<4)|0)>>2]=6,a=u|a<<8,i[e+12>>2]=a,i[e+8>>2]=r+g,g=e,e=C(A=c>>>2|0,3),n=(0|t)>(0|c),i[g+4>>2]=n?e:t,g=i[50758]+1|0,i[50758]=(0|g)<=169?g:0,(0|e)<(0|(t=n?t-e|0:0)))for(n=A<<1,u=r+(u?A:n)|0;A=i[50758],i[36439]=A,i[(A=216192+(A<<4)|0)>>2]=6,i[A+4>>2]=n,i[A+12>>2]=a,i[A+8>>2]=u+i[34456],A=i[50758]+1|0,i[50758]=(0|A)<=169?A:0,(0|e)<(0|(t=t-n|0)););if((0|t)<=0)break e;e=i[50758],i[36439]=e,i[(A=216192+(e<<4)|0)>>2]=6,i[A+4>>2]=t,i[A+8>>2]=i[34456]+(r+(c-t<<s)|0)}i[12+(216192+(e<<4)|0)>>2]=a,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0}}}function _e(e,A,t){var r,n=0,s=0;if(t>>>0>=512)return P(0|e,0|A,0|t),e;r=e+t|0;e:if(3&(e^A))if(r>>>0<4)t=e;else if((n=r-4|0)>>>0<e>>>0)t=e;else for(t=e;a[0|t]=o[0|A],a[t+1|0]=o[A+1|0],a[t+2|0]=o[A+2|0],a[t+3|0]=o[A+3|0],A=A+4|0,n>>>0>=(t=t+4|0)>>>0;);else{A:if(3&e)if(t)for(t=e;;){if(a[0|t]=o[0|A],A=A+1|0,!(3&(t=t+1|0)))break A;if(!(t>>>0<r>>>0))break}else t=e;else t=e;if(!((n=-4&r)>>>0<64||(s=n+-64|0)>>>0<t>>>0))for(;i[t>>2]=i[A>>2],i[t+4>>2]=i[A+4>>2],i[t+8>>2]=i[A+8>>2],i[t+12>>2]=i[A+12>>2],i[t+16>>2]=i[A+16>>2],i[t+20>>2]=i[A+20>>2],i[t+24>>2]=i[A+24>>2],i[t+28>>2]=i[A+28>>2],i[t+32>>2]=i[A+32>>2],i[t+36>>2]=i[A+36>>2],i[t+40>>2]=i[A+40>>2],i[t+44>>2]=i[A+44>>2],i[t+48>>2]=i[A+48>>2],i[t+52>>2]=i[A+52>>2],i[t+56>>2]=i[A+56>>2],i[t+60>>2]=i[A+60>>2],A=A- -64|0,s>>>0>=(t=t- -64|0)>>>0;);if(t>>>0>=n>>>0)break e;for(;i[t>>2]=i[A>>2],A=A+4|0,n>>>0>(t=t+4|0)>>>0;);}if(t>>>0<r>>>0)for(;a[0|t]=o[0|A],A=A+1|0,(0|r)!=(0|(t=t+1|0)););return e}function $e(e){var A=0,t=0,r=0,n=0,a=0,s=0,o=0,d=0;u(+e),A=0|l(1),l(0);e:{if((r=(A=A>>>20&2047)-969|0)>>>0<63)d=A;else{if((0|r)<0)return e+1;if(!(A>>>0<1033)){if(u(+e),r=0|l(1),t=0,!(0|l(0))&-1048576==(0|r))break e;return A>>>0>=2047?e+1:(0|r)<0?(m[8+(A=W-16|0)>>3]=12882297539194267e-247,12882297539194267e-247*m[A+8>>3]):(m[8+(A=W-16|0)>>3]=3105036184601418e216,3105036184601418e216*m[A+8>>3])}}if(t=m[14409],a=(t=(e=(t=(n=m[14408]*e+t)-t)*m[14411]+(t*m[14410]+e))*e)*t*(e*m[14415]+m[14414]),t*=e*m[14413]+m[14412],u(+n),l(1),o=0|l(0),e=a+(t+(m[115376+(r=o<<4&2032)>>3]+e)),s=i[(r=r+115384|0)>>2],A=(o<<13)+(A=i[r+4>>2])|0,A=(r=(r=s)+(s=0)|0)>>>0<s>>>0?A+1|0:A,!d)return-2147483648&o?(c(0,0|r),c(1,A+1071644672|0),(e=(n=(t=+g())*e)+t)<1&&(i[8+(A=W-16|0)>>2]=0,i[A+12>>2]=1048576,m[A+8>>3]=22250738585072014e-324*m[A+8>>3],e=0==(e=(a=e+1)+(n+(t-e)+(e+(1-a)))+-1)?0:e),e*=22250738585072014e-324):(c(0,0|r),c(1,A-1058013184|0),e=5486124068793689e288*((t=+g())*e+t)),e;c(0,0|r),c(1,0|A),t=(t=+g())*e+t}return t}function eA(e,A){var t,r=0,n=0,s=0,l=0;W=t=W-16|0;e:{if(cn(84270,a[0|A])){if(n=2,cn(A,43)||(n=114!=o[0|A]),n=cn(A,120)?128|n:n,s=n=cn(A,101)?524288|n:n,l=64|n,s=114==(0|(n=o[0|A]))?s:l,s=119==(0|n)?512|s:s,i[t>>2]=438,i[t+4>>2]=0,(e=0|M(-100,0|e,32768|(97==(0|n)?1024|s:s),0|t))>>>0>=4294963201&&(i[56798]=0-e,e=-1),(0|e)<0)break e;W=n=W-32|0;A:{t:{if(cn(84270,a[0|A])){if(r=se(1176))break t}else i[56798]=28;A=0;break A}kA(r,0,144),cn(A,43)||(i[r>>2]=114==o[0|A]?8:4),97==o[0|A]?(1024&(A=0|E(0|e,3,0))||(A|=1024,i[n+16>>2]=A,i[n+20>>2]=A>>31,E(0|e,4,n+16|0)),A=128|i[r>>2],i[r>>2]=A):A=i[r>>2],i[r+80>>2]=-1,i[r+48>>2]=1024,i[r+60>>2]=e,i[r+44>>2]=r+152,8&A||(i[n>>2]=n+24,i[n+4>>2]=0,0|Q(0|e,21523,0|n)||(i[r+80>>2]=10)),i[r+40>>2]=10,i[r+36>>2]=11,i[r+32>>2]=12,i[r+12>>2]=13,o[227205]||(i[r+76>>2]=-1),i[r+56>>2]=i[56816],(A=i[56816])&&(i[A+52>>2]=r),i[56816]=r,A=r}if(W=n+32|0,r=A)break e;B(0|e)}else i[56798]=28;r=0}return W=t+16|0,r}function AA(e,A,t){var r,n=0,a=0,s=0,o=0,l=0;if(s=e,W=r=W-208|0,i[r+8>>2]=1,i[r+12>>2]=0,o=A<<2){for(i[r+16>>2]=4,i[r+20>>2]=4,A=4,n=4,a=2;e=A,A=(n+4|0)+A|0,i[(r+16|0)+(a<<2)>>2]=A,a=a+1|0,n=e,A>>>0<o>>>0;);if((e=(s+o|0)-4|0)>>>0<=s>>>0)a=0,A=1,e=0;else{for(a=1,A=1;3&~a?(h[(r+16|0)+((n=A-1|0)<<2)>>2]>=e-s>>>0?FA(s,t,r+8|0,A,0,r+16|0):vt(s,t,A,r+16|0),1!=(0|A)?(Fr(r+8|0,n),A=1):(Fr(r+8|0,1),A=0)):(vt(s,t,A,r+16|0),Sr(r+8|0,2),A=A+2|0),a=1|(n=i[r+8>>2]),i[r+8>>2]=a,e>>>0>(s=s+4|0)>>>0;);a=n>>>0>1,e=0!=i[r+12>>2]}if(FA(s,t,r+8|0,A,0,r+16|0),a|1!=(0|A)|e)for(;(0|A)<=1?(Sr(n=r+8|0,e=vr(n)),a=i[r+8>>2],e=e+A|0):(Fr(n=r+8|0,2),i[r+8>>2]=7^i[r+8>>2],Sr(n,1),FA((l=s-4|0)-i[(o=r+16|0)+((e=A-2|0)<<2)>>2]|0,t,n,A-1|0,1,o),Fr(n,1),a=1|i[r+8>>2],i[r+8>>2]=a,FA(l,t,n,e,1,o)),A=e,s=s-4|0,i[r+12>>2]|1!=(0|A)|1!=(0|a););}W=r+208|0}function tA(e,A,t,r){var n,a=0,s=0,o=0;W=n=W-32|0,o=a=2147483647&r,s=a-1006698496|0;e:if(0|(a=a-1140785152|0)>>>0>s>>>0){if(a=t<<4|A>>>28,t=r<<4|t>>>28,134217728==(0|(A&=268435455))&!!(0|e)|A>>>0>134217728){s=t+1073741824|0,s=(a=a+1|0)?s:s+1|0;break e}if(s=t+1073741824|0,e|134217728!=(0|A))break e;s=(e=1&a)>>>0>(a=e+a|0)>>>0?s+1|0:s}else(!t&2147418112==(0|o)?!(e|A):o>>>0<2147418112)?(a=0,s=2146435072,o>>>0>1140785151||(s=0,(o=o>>>16|0)>>>0<15249||(WA(n+16|0,e,A,t,a=65535&r|65536,o-15233|0),YA(n,e,A,t,a,15361-o|0),a=(A=i[n+8>>2])<<4,A=i[n+12>>2]<<4|A>>>28,t=i[n>>2],o=s=i[n+4>>2],a|=s>>>28,s=A,134217728==(0|(e=268435455&o))&!!(0|(A=t|!!(i[n+16>>2]|i[n+24>>2]|i[n+20>>2]|i[n+28>>2])))|e>>>0>134217728?s=(a=a+1|0)?s:s+1|0:A|134217728!=(0|e)||(s=(e=a)>>>0>(a=a+(1&a)|0)>>>0?s+1|0:s)))):(a=t<<4|A>>>28,s=524287&(e=r<<4|t>>>28)|2146959360);return W=n+32|0,c(0,0|a),c(1,-2147483648&r|s),+g()}function rA(e){var A,t=0,r=0,n=0,a=0,s=0;if(u(+e),s=0|l(1),n=0|l(0),2047==(0|(a=s>>>20&2047)))return(e*=1)/e;if(!(r=n<<1)&2145386496==(0|(t=s<<1|n>>>31))|t>>>0<2145386496)return!r&2145386496==(0|t)?0*e:e;if(a)t=1048575&s|1048576;else{if(a=0,r=n<<12,(0|(t=s<<12|n>>>20))>0|(0|t)>=0)for(;a=a-1|0,t=t<<1|r>>>31,r<<=1,(0|t)>0|(0|t)>=0;);r=31&(t=1-a|0),(63&t)>>>0>=32?(t=n<<r,n=0):(t=(1<<r)-1&n>>>32-r|s<<r,n<<=r)}if(r=n,(0|a)>1023){for(;;){if(!((0|(n=t+-1048576|0))<0||(t=n)|r))return 0*e;if(t=t<<1|r>>>31,r<<=1,!((0|(a=a-1|0))>1023))break}a=1023}if(!((0|(n=t+-1048576|0))<0||(t=n)|r))return 0*e;if(1048575==(0|t)|t>>>0<1048575)for(;a=a-1|0,n=t>>>0<524288,t=t<<1|r>>>31,r<<=1,n;);return A=-2147483648&s,(0|a)>0?t=t+-1048576|a<<20:(n=1-a|0,s=t,a=r,r=31&n,(63&n)>>>0>=32?(t=0,r=s>>>r|0):(t=s>>>r|0,r=((1<<r)-1&s)<<32-r|a>>>r)),c(0,0|r),c(1,t|A),+g()}function nA(e,A,t,r,n){var s,l=0,c=0;W=s=W-160|0;e:{A:{t:{r:switch((l=o[A+10|0])-15|0){case 6:break t;case 0:break r;default:break A}a[0|e]=0;break e}i[s>>2]=C(o[t+7|0],44)+137856,Bt(e,86002,s),e=jt(e)+e|0;break e}if(r){if(a[s+140|0]=0,t?le(0,0,t,s+8|0,0):Jt(l,s+8|0),t=s+140|0,l=o[s+140|0]){if(32==(0|l)){a[0|e]=0;break e}224&(l=l<<24>>24)||(n&&(i[n>>2]=l),t=s+141|0)}if(!((0|(n=jt(t)))<=0)){e=rt(e,t)+n|0,a[0|e]=0;break e}}n=0;A:if(!(!(t=255&(l=i[A>>2]))|47==(0|t))){if(r){if(95==(0|(c=255&l)))break A;t:{r:{if(35==(0|c)){if(c=3,2!=o[A+11|0])break r;break A}if((c=t-32|0)>>>0>95)break t}t=p[93952+(c<<1)>>1]}n=Ft(t,e)}else a[0|e]=l,n=1;for(;;){if(!(t=255&(l>>=8))|47==(0|t))break A;if(r){if(35==(0|t)&2==o[A+11|0])break A;if(t-48>>>0<10)continue;(c=t-32|0)>>>0<=95&&(t=p[93952+(c<<1)>>1]),n=Ft(t,e+n|0)+n|0}else a[e+n|0]=l,n=n+1|0}}a[0|(e=e+n|0)]=0}return W=s+160|0,e}function aA(e){var A,t=0;A=e,t=131280;e:{A:{if(!((0|e)<=1023||(t=131300,e>>>0<1328||(t=131320,e>>>0<1424||(t=131340,e>>>0<1536||(t=131360,e>>>0<1792||(t=131380,e>>>0<1872||(t=131400,e>>>0<2432||(t=131420,e>>>0<2560||(t=131440,e>>>0<2688||(t=131460,e>>>0<2816||(t=131480,e>>>0<2944||(t=131500,e>>>0<3072||(t=131520,e>>>0<3200||(t=131540,e>>>0<3328||(t=131560,e>>>0<3456||(t=131580,e>>>0<3584||(t=131600,e>>>0<3712||(t=131620,e>>>0<3840||(t=131640,e>>>0<4096||(t=131660,e>>>0<4256||(t=131680,e>>>0<4352||(t=131700,e>>>0<4608||(t=131720,e>>>0<5024||(t=131740,e>>>0<10496||(t=131760,e>>>0<12544||(t=131780,e>>>0<40960))))))))))))))))))))))))))){if(e>>>0>=55296)break A;t=131800}if((0|A)>=p[(e=t)+8>>1])break e}e=0}return e}function sA(e,A,t){var r,n=0,o=0,l=0,c=0;W=r=W-208|0,a[r+80|0]=0;e:{if((n=A-224|0)>>>0<=158)A=101072+(n<<1)|0;else{if((A=A-592|0)>>>0>88)break e;A=101392+(A<<1)|0}if(A=p[A>>1]){if(l=A<<16>>16,c=(n=63&A)>>>0>37?n+59|0:s[101584+(n<<1)>>1],n=A>>>6|0,(0|l)<0)n=59+(63&n)|0,A=A>>>12&7;else{if(!(o=31&n))break e;n=0,A=A>>>11&15}(o=Et(e,i[129920+(o<<3)>>2],r+112|0))&&Ar(e,c,r+176|0)&&(A&&4096&Et(e,i[129920+(A<<3)>>2],r+80|0)&&(t=jt(A=rt(t,r+80|0)),a[r+80|0]=0,t=A+t|0),n?(Ar(A=e,n,e=r+144|0),i[r+68>>2]=r+80,i[r- -64>>2]=e,i[r+60>>2]=6,i[r+52>>2]=23,i[r+56>>2]=r+176,i[r+48>>2]=r+112,Bt(t,84101,r+48|0)):(0|l)<0?rt(t,r+176|0):1&i[e+144>>2]|4096&o?(i[r+36>>2]=23,i[r+40>>2]=6,i[r+44>>2]=r+176,i[r+32>>2]=r+112,Bt(t,84430,r+32|0)):(i[r+16>>2]=23,i[r+8>>2]=23,i[r>>2]=4,i[r+12>>2]=r+112,i[r+4>>2]=r+176,Bt(t,84802,r)))}}W=r+208|0}function iA(){Er(),i[55928]=0,i[55926]=0,i[55927]=0,i[55924]=0,i[56244]=0,i[56245]=0,i[56246]=0,i[56247]=0,i[56260]=0,i[56261]=0,i[56262]=0,i[56263]=0,i[56276]=0,i[56277]=0,i[56278]=0,i[56279]=0,i[55974]=0,i[55975]=0,i[55972]=0,i[55973]=0,i[55988]=0,i[55989]=0,i[55990]=0,i[55991]=0,i[56004]=0,i[56005]=0,i[56006]=0,i[56007]=0,i[56020]=0,i[56021]=0,i[56022]=0,i[56023]=0,i[56036]=0,i[56037]=0,i[56038]=0,i[56039]=0,i[56052]=0,i[56053]=0,i[56054]=0,i[56055]=0,i[56068]=0,i[56069]=0,i[56070]=0,i[56071]=0,i[56086]=0,i[56087]=0,i[56084]=0,i[56085]=0,i[56102]=0,i[56103]=0,i[56100]=0,i[56101]=0,i[56118]=0,i[56119]=0,i[56116]=0,i[56117]=0,i[56134]=0,i[56135]=0,i[56132]=0,i[56133]=0,i[56150]=0,i[56151]=0,i[56148]=0,i[56149]=0,i[56166]=0,i[56167]=0,i[56164]=0,i[56165]=0,i[56182]=0,i[56183]=0,i[56180]=0,i[56181]=0,i[56198]=0,i[56199]=0,i[56196]=0,i[56197]=0,i[56214]=0,i[56215]=0,i[56212]=0,i[56213]=0,i[56230]=0,i[56231]=0,i[56228]=0,i[56229]=0}function oA(e,A){var t=0,r=0,n=0,a=0,s=0,o=0,l=0,c=0,g=0,u=0;e:{if((0|(a=i[e+4>>2]))==i[e>>2])if((s=i[e+8>>2])>>>0<(t=i[e+12>>2])>>>0)t=(n=(1+(t-s>>2)|0)/2<<2)+s|0,(0|a)!=(0|s)&&(mA(t=t-(r=s-a|0)|0,a,r),a=i[e+8>>2]),i[e+4>>2]=t,i[e+8>>2]=n+a;else{if((r=(0|t)==(0|a)?1:t-a>>1)>>>0>=1073741824)break e;if(g=(l=Nr(t=r<<2))+t|0,o=t=(r+3&-4)+l|0,(0|a)!=(0|s)){if(u=-4&(s=s-a|0),n=t,r=a,s=1+((c=s-4|0)>>>2|0)&7)for(o=0;i[n>>2]=i[r>>2],r=r+4|0,n=n+4|0,(0|s)!=(0|(o=o+1|0)););if(o=t+u|0,!(c>>>0<28))for(;i[n>>2]=i[r>>2],i[n+4>>2]=i[r+4>>2],i[n+8>>2]=i[r+8>>2],i[n+12>>2]=i[r+12>>2],i[n+16>>2]=i[r+16>>2],i[n+20>>2]=i[r+20>>2],i[n+24>>2]=i[r+24>>2],i[n+28>>2]=i[r+28>>2],r=r+32|0,(0|o)!=(0|(n=n+32|0)););}i[e+12>>2]=g,i[e+8>>2]=o,i[e+4>>2]=t,i[e>>2]=l,a&&(ye(a),t=i[e+4>>2])}else t=a;return i[t-4>>2]=i[A>>2],void(i[e+4>>2]=i[e+4>>2]-4)}Rr(),d()}function lA(e,A,t){var r=0,n=0,a=0,s=0,i=0,o=0,l=0,c=0,g=0;e:{A:{t:{r:{n:{a:{s:{i:{o:{if(A){if(!t)break o;break i}return U=(A=e)-C(e=(e>>>0)/(t>>>0)|0,t)|0,K=0,Z=0,e}if(!e)break s;break a}if(!((r=t-1|0)&t))break n;a=0-(s=(w(t)+33|0)-w(A)|0)|0;break t}return U=0,K=A-C(e=(A>>>0)/0|0,0)|0,Z=0,e}if((r=32-w(A)|0)>>>0<31)break r;break A}if(U=e&r,K=0,1==(0|t))break e;return t=31&(r=un(t)),(63&r)>>>0>=32?e=A>>>t|0:(n=A>>>t|0,e=((1<<t)-1&A)<<32-t|e>>>t),Z=n,e}s=r+1|0,a=63-r|0}if(r=31&(n=63&s),n>>>0>=32?(n=0,i=A>>>r|0):(n=A>>>r|0,i=((1<<r)-1&A)<<32-r|e>>>r),r=31&(a&=63),a>>>0>=32?(A=e<<r,e=0):(A=(1<<r)-1&e>>>32-r|A<<r,e<<=r),s)for(c=-1==(0|(r=t-1|0))?-1:0;o=n<<1|i>>>31,i=(n=i<<1|A>>>31)-(l=t&(a=c-(o+(n>>>0>r>>>0)|0)>>31))|0,n=o-(n>>>0<l>>>0)|0,A=A<<1|e>>>31,e=g|e<<1,g=o=1&a,s=s-1|0;);return U=i,K=n,Z=A<<1|e>>>31,o|e<<1}U=e,K=A,e=0,A=0}return Z=A,e}function cA(e,A){var t=0,r=0,n=0,a=0,s=0,o=0,l=0,c=0,g=0,u=0;e:{if((0|(t=i[e+8>>2]))==i[e+12>>2])if((r=i[e+4>>2])>>>0>(s=i[e>>2])>>>0)n=mA((a=(1+(r-s>>2)|0)/-2<<2)+r|0,r,t=t-r|0)+t|0,i[e+8>>2]=n,i[e+4>>2]=a+i[e+4>>2];else{if((a=(0|t)==(0|s)?1:t-s>>1)>>>0>=1073741824)break e;if(g=(o=Nr(n=a<<2))+n|0,n=a=(-4&a)+o|0,(0|t)!=(0|r)){if(u=-4&(t=t-r|0),c=1+((l=t-4|0)>>>2|0)&7)for(n=0,t=a;i[t>>2]=i[r>>2],r=r+4|0,t=t+4|0,(0|c)!=(0|(n=n+1|0)););else t=a;if(n=a+u|0,!(l>>>0<28))for(;i[t>>2]=i[r>>2],i[t+4>>2]=i[r+4>>2],i[t+8>>2]=i[r+8>>2],i[t+12>>2]=i[r+12>>2],i[t+16>>2]=i[r+16>>2],i[t+20>>2]=i[r+20>>2],i[t+24>>2]=i[r+24>>2],i[t+28>>2]=i[r+28>>2],r=r+32|0,(0|n)!=(0|(t=t+32|0)););}i[e+12>>2]=g,i[e+8>>2]=n,i[e+4>>2]=a,i[e>>2]=o,s&&(ye(s),n=i[e+8>>2])}else n=t;return i[n>>2]=i[A>>2],void(i[e+8>>2]=i[e+8>>2]+4)}Rr(),d()}function gA(e,A){var t,r=0,n=0,s=0,l=0,c=0;n=189088,W=t=W-320|0,i[t+312>>2]=0,s=Ne(e,l=rt(t+112|0,189088),t,t+316|0,t+312|0,0),r=i[t+316>>2];e:if((0|A)<=3){if((0|r)<2)break e;if(s=3&(A=r-1|0),e=1,r-2>>>0>=3)for(c=-4&A,A=0;a[0|(r=e+t|0)]>=4&&(a[0|r]=3),a[1+(r=e+t|0)|0]>=4&&(a[r+1|0]=3),a[r+2|0]>=4&&(a[r+2|0]=3),a[r+3|0]>=4&&(a[r+3|0]=3),e=e+4|0,(0|c)!=(0|(A=A+4|0)););if(!s)break e;for(A=0;a[0|(r=e+t|0)]>=4&&(a[0|r]=3),e=e+1|0,(0|s)!=(0|(A=A+1|0)););}else if(e=1,!((0|r)<=1)){for(;;){if((0|s)>a[0|(c=e+t|0)]){if((0|r)!=(0|(e=e+1|0)))continue;break e}break}a[0|c]=A}if(e=o[0|l])for(A=1;r=i[144464+((255&e)<<2)>>2],2!=o[r+11|0]|16&o[r+6|0]||(s=255&(r=a[A+t|0]),(0|r)<2&&s||(a[0|n]=o[s+94151|0],n=n+1|0,e=o[0|l]),A=A+1|0),a[0|n]=e,n=n+1|0,e=o[0|(l=l+1|0)];);a[0|n]=0,W=t+320|0}function uA(e){var A=0,t=0,r=0,n=0,a=0,s=0;t=A=i[(e|=0)>>2],i[e>>2]=A+1;e:{A:{t:{r:{n:{a:{s:switch(((a=o[0|A])>>>4|0)-8|0){case 0:case 1:case 2:case 3:break A;case 7:break n;case 6:break a;case 4:case 5:break s;default:break e}if((r=A+2|0)>>>0>=(n=i[e+4>>2])>>>0)break r;if(i[e>>2]=r,128!=(192&(t=o[t+1|0])))break t;return 63&t|a<<6&1984}if((r=A+3|0)>>>0>=(n=i[e+4>>2])>>>0)break r;if(t=A+2|0,i[e>>2]=t,128!=(192&(A=o[A+1|0]))){r=t;break t}if(i[e>>2]=r,128!=(192&(t=o[0|t])))break t;return 63&t|(63&A|a<<6&960)<<6}if(!((n=i[e+4>>2])>>>0<=(t=A+4|0)>>>0)){if(r=A+2|0,i[e>>2]=r,128!=(192&(n=o[A+1|0])))break t;if(r=A+3|0,i[e>>2]=r,128!=(192&(s=o[A+2|0])))break t;if(i[e>>2]=t,A=o[0|r],r=t,128!=(192&A))break t;return 0|((e=63&A|s<<6&4032|(63&n|a<<6&960)<<12)>>>0>=1114112?65533:e)}}i[e>>2]=n;break A}i[e>>2]=r-1}a=65533}return 0|a}function dA(e,A,t,r){var n,l,c=0,g=0,u=0,d=0,f=0,p=0;if(W=n=W-432|0,!(!r|!(536870912&(l=te(e,A,t,r))))&&(s[n+48>>1]=8192,r=rt(n+48|2,r),o[0|r])){for(u=n+224|0,c=1,d=200;;){if(VA(n+44|0,r),A=gr(i[n+44>>2]),g=i[t>>2],A?(i[t>>2]=2|g,Ft(nr(i[n+44>>2]),r)):i[t>>2]=-3&g,p=i[33264],te(e,r,t,0),1&c?(i[n+16>>2]=189088,g=Ct(u,d,84130,n+16|0)):(i[n+32>>2]=15,i[n+36>>2]=189088,g=Ct(u,d,84434,n+32|0)),c=(A=i[33264])+1|0,i[33264]=c,A>>>0<=2147483646)for(;;)if(A=r,r=r+1|0,32==(0|(f=a[0|A]))|f-9>>>0<5){for(;A=(r=A)+1|0,32==(0|(f=a[0|r]))|f-9>>>0<5;);if(c=c-1|0,i[33264]=c,!((0|c)>0))break}if(u=u+g|0,i[33264]=p,!(o[0|r]&&(c=0,(0|(d=d-g|0))>1)))break}(n+224|0)!=(0|u)&&(i[n>>2]=n+224,Ct(189088,200,84130,n))}return W=n+432|0,l}function fA(e,A,t,r,n,l,c,g){var u,d;u=i[32972],d=i[u+116>>2],s[e+8>>1]=p[e+8>>1]+l,l=32&g?0-l|0:l,s[e+10>>1]=l+p[e+10>>1],s[e+12>>1]=l+p[e+12>>1],r=(0|r)>(0|(l=((l=(0|C(A,d))/256|0)-(A=s[e+6>>1])|0)/2|0))?l:r,s[e+6>>1]=((0|t)<(0|r)?r:t)+A;e:{A:switch(n-1|0){case 0:A=(0|(A=235-(t=s[e+4>>1])|0))<=-100?-100:A,s[e+4>>1]=((0|A)>=-60?-60:A)+t;break e;case 1:A=(0|(A=(0|(A=235-(t=s[e+4>>1])|0))<=-300?-300:A))>=-150?-150:A,s[e+4>>1]=A+t,s[e+2>>1]=A+p[e+2>>1];break e;case 2:break A;default:break e}A=(0|(A=(0|(A=100-(t=s[e+4>>1])|0))<=-400?-400:A))>-300?-400:A,s[e+4>>1]=A+t,s[e+2>>1]=A+p[e+2>>1]}i[u+132>>2]||(a[e+20|0]=(C(o[e+20|0],c)>>>0)/100,a[e+21|0]=(C(o[e+21|0],c)>>>0)/100,a[e+22|0]=(C(o[e+22|0],c)>>>0)/100,a[e+23|0]=(C(o[e+23|0],c)>>>0)/100,a[e+24|0]=(C(o[e+24|0],c)>>>0)/100,a[e+25|0]=(C(o[e+25|0],c)>>>0)/100)}function pA(e){var A,t=0,r=0,n=0,s=0;W=A=W-48|0;e:{if(e){o[0|e]||(e=Tt(84285),o[0|e]&&e||(e=Tt(121696),o[0|e]&&e||(e=Tt(84614),o[0|e]&&e||(e=84891))));A:{for(;;){if(!(!(r=o[e+t|0])|47==(0|r))){if(n=23,23!=(0|(t=t+1|0)))continue;break A}break}n=t}r=84891;A:{t:{if(t=o[0|e],(o[e+n|0]|46==(0|t)||(r=e,67==(0|t)))&&!o[r+1|0]||!hr(r,84891)||!hr(r,85136)){if(t=121652,46==o[r+1|0])break t;e=0;break A}if(t=i[56851])for(;;){if(!hr(r,t+8|0))break t;if(!(t=i[t+32>>2]))break}(e=se(36))&&(t=i[30414],i[e>>2]=i[30413],i[e+4>>2]=t,_e(t=e+8|0,r,n),a[t+n|0]=0,i[e+32>>2]=i[56851],i[56851]=e),t=e||121652}e=t}if(-1==(0|e))break e;i[56809]=e}else e=i[56809];s=e?e+8|0:84309}return W=A+48|0,s}function hA(e){var A=0,t=0,r=0,n=0,s=0,o=0,l=0,c=0,g=0;c=!!((A=i[e+112>>2])|(r=i[e+116>>2])),n=A,o=A=(s=i[e+4>>2])-(l=i[e+44>>2])|0,t=A+i[e+120>>2]|0,A=i[e+124>>2]+(A>>31)|0;e:{if(!(((0|(A=t>>>0<o>>>0?A+1|0:A))>=(0|r)&t>>>0>=n>>>0|(0|A)>(0|r))&c)){if((0|(c=Tr(e)))>=0)break e;s=i[e+4>>2],l=i[e+44>>2]}return i[e+112>>2]=-1,i[e+116>>2]=-1,i[e+104>>2]=s,r=(o=t)+(t=l-s|0)|0,A=(t>>31)+A|0,i[e+120>>2]=r,i[e+124>>2]=t>>>0>r>>>0?A+1|0:A,-1}return A=(r=t+1|0)?A:A+1|0,s=i[e+4>>2],l=i[e+8>>2],o=n=i[e+116>>2],n|(t=i[e+112>>2])&&(n=t-r|0,(0|(t=o-(A+(t>>>0<r>>>0)|0)|0))>=(0|(o=(g=l-s|0)>>31))&n>>>0>=g>>>0|(0|t)>(0|o)||(l=n+s|0)),i[e+104>>2]=l,r=(n=(t=i[e+44>>2])-s|0)+r|0,A=(n>>31)+A|0,i[e+120>>2]=r,i[e+124>>2]=r>>>0<n>>>0?A+1|0:A,t>>>0>=s>>>0&&(a[s-1|0]=c),c}function mA(e,A,t){var r=0,n=0;e:if((0|e)!=(0|A)){if(A-(n=e+t|0)>>>0<=0-(t<<1)>>>0)return _e(e,A,t);if(r=3&(e^A),e>>>0<A>>>0){if(r)r=e;else{if(3&e)for(r=e;;){if(!t)break e;if(a[0|r]=o[0|A],A=A+1|0,t=t-1|0,!(3&(r=r+1|0)))break}else r=e;if(!(t>>>0<=3))for(;i[r>>2]=i[A>>2],A=A+4|0,r=r+4|0,(t=t-4|0)>>>0>3;);}if(t)for(;a[0|r]=o[0|A],r=r+1|0,A=A+1|0,t=t-1|0;);}else{if(!r){if(3&n)for(;;){if(!t)break e;if(a[0|(r=(t=t-1|0)+e|0)]=o[A+t|0],!(3&r))break}if(!(t>>>0<=3))for(;i[(t=t-4|0)+e>>2]=i[A+t>>2],t>>>0>3;);}if(!t)break e;for(;a[(t=t-1|0)+e|0]=o[A+t|0],t;);}}return e}function CA(e,A,t,r){e:switch(A-9|0){case 0:return A=i[t>>2],i[t>>2]=A+4,void(i[e>>2]=i[A>>2]);case 6:return A=i[t>>2],i[t>>2]=A+4,A=s[A>>1],i[e>>2]=A,void(i[e+4>>2]=A>>31);case 7:return A=i[t>>2],i[t>>2]=A+4,i[e>>2]=p[A>>1],void(i[e+4>>2]=0);case 8:return A=i[t>>2],i[t>>2]=A+4,A=a[0|A],i[e>>2]=A,void(i[e+4>>2]=A>>31);case 9:return A=i[t>>2],i[t>>2]=A+4,i[e>>2]=o[0|A],void(i[e+4>>2]=0);case 16:return A=i[t>>2]+7&-8,i[t>>2]=A+8,void(m[e>>3]=m[A>>3]);case 17:Tn[0|r](e,t);default:return;case 1:case 4:case 14:return A=i[t>>2],i[t>>2]=A+4,A=i[A>>2],i[e>>2]=A,void(i[e+4>>2]=A>>31);case 2:case 5:case 11:case 15:return A=i[t>>2],i[t>>2]=A+4,i[e>>2]=i[A>>2],void(i[e+4>>2]=0);case 3:case 10:case 12:case 13:}A=i[t>>2]+7&-8,i[t>>2]=A+8,t=i[A+4>>2],i[e>>2]=i[A>>2],i[e+4>>2]=t}function bA(e,A,t,r,n,a){var s;W=s=W-80|0;e:if((0|a)>=16384){if(me(s+32|0,A,t,r,n,0,0,0,2147352576),r=i[s+40>>2],n=i[s+44>>2],A=i[s+32>>2],t=i[s+36>>2],a>>>0<32767){a=a-16383|0;break e}me(s+16|0,A,t,r,n,0,0,0,2147352576),a=((0|a)>=49149?49149:a)-32766|0,r=i[s+24>>2],n=i[s+28>>2],A=i[s+16>>2],t=i[s+20>>2]}else(0|a)>-16383||(me(s- -64|0,A,t,r,n,0,0,0,7471104),r=i[s+72>>2],n=i[s+76>>2],A=i[s+64>>2],t=i[s+68>>2],a>>>0>4294934644?a=a+16269|0:(me(s+48|0,A,t,r,n,0,0,0,7471104),a=((0|a)<=-48920?-48920:a)+32538|0,r=i[s+56>>2],n=i[s+60>>2],A=i[s+48>>2],t=i[s+52>>2]));me(s,A,t,r,n,0,0,0,a+16383<<16),A=i[s+12>>2],i[e+8>>2]=i[s+8>>2],i[e+12>>2]=A,A=i[s+4>>2],i[e>>2]=i[s>>2],i[e+4>>2]=A,W=s+80|0}function IA(e,A){var t,r,n=0;W=t=W+-64|0,n=i[e>>2],r=i[n-4>>2],n=i[n-8>>2],i[t+32>>2]=0,i[t+36>>2]=0,i[t+40>>2]=0,i[t+44>>2]=0,i[t+48>>2]=0,i[t+52>>2]=0,a[t+55|0]=0,a[t+56|0]=0,a[t+57|0]=0,a[t+58|0]=0,a[t+59|0]=0,a[t+60|0]=0,a[t+61|0]=0,a[t+62|0]=0,i[t+24>>2]=0,i[t+28>>2]=0,i[t+20>>2]=0,i[t+16>>2]=125084,i[t+12>>2]=e,i[t+8>>2]=A,e=e+n|0,n=0;e:if(Yr(r,A,0))i[t+56>>2]=1,Tn[i[i[r>>2]+20>>2]](r,t+8|0,e,e,1,0),n=1==i[t+32>>2]?e:0;else{Tn[i[i[r>>2]+24>>2]](r,t+8|0,e,1,0);A:switch(i[t+44>>2]){case 0:n=1==i[t+48>>2]&&1==i[t+36>>2]&&1==i[t+40>>2]?i[t+28>>2]:0;break e;case 1:break A;default:break e}1!=i[t+32>>2]&&i[t+48>>2]|1!=i[t+36>>2]|1!=i[t+40>>2]||(n=i[t+24>>2])}return W=t- -64|0,n}function wA(e,A,t,r,n){var l,c,g=0;W=l=W-80|0,s[l+72>>1]=0,i[l+64>>2]=0,i[l+68>>2]=0,a[0|r]=0,g=Ft(A,c=2|(g=l- -64|0))+g|0,a[g+2|0]=32;e:if(-1!=(0|t))A>>>0>=33&&!er(A)?(a[g+3|0]=32==(0|t)?32:31,a[l+65|0]=95,Et(e,l- -64|1,l+16|0)||(a[l+65|0]=32,Et(e,c,l+16|0)||Ce(e,c,l+16|0,40,0,268435456,0)),o[l+16|0]||sA(e,A,l+16|0),A=rt(r,l+16|0),!(t=o[0|A])|21==(0|t)||(i[l+56>>2]=0,i[l+60>>2]=0,ie(e,A,l+56|0,-1,1&n))):(i[l>>2]=A,Bt(A=l- -64|1,85485,l),Et(e,A,r));else{if(Et(e,c,r))break e;if(a[l+65|0]=95,Et(e,l- -64|1,l+16|0)|25966==i[e+212>>2])break e;pn(85055),Et(i[47194],c,l+16|0)&&(a[0|r]=21,a[r+1|0]=0),qr(i[i[32972]+60>>2])}W=l+80|0}function kA(e,A,t){var r=0,n=0,s=0,o=0;if(t&&(a[0|e]=A,a[(r=e+t|0)-1|0]=A,!(t>>>0<3||(a[e+2|0]=A,a[e+1|0]=A,a[r-3|0]=A,a[r-2|0]=A,t>>>0<7||(a[e+3|0]=A,a[r-4|0]=A,t>>>0<9||(n=(r=0-e&3)+e|0,A=C(255&A,16843009),i[n>>2]=A,i[(t=(r=t-r&-4)+n|0)-4>>2]=A,r>>>0<9||(i[n+8>>2]=A,i[n+4>>2]=A,i[t-8>>2]=A,i[t-12>>2]=A,r>>>0<25||(i[n+24>>2]=A,i[n+20>>2]=A,i[n+16>>2]=A,i[n+12>>2]=A,i[t-16>>2]=A,i[t-20>>2]=A,i[t-24>>2]=A,i[t-28>>2]=A,(t=r-(o=4&n|24)|0)>>>0<32))))))))for(r=rr(A,0,1,1),s=Z,A=n+o|0;i[A+24>>2]=r,i[A+28>>2]=s,i[A+16>>2]=r,i[A+20>>2]=s,i[A+8>>2]=r,i[A+12>>2]=s,i[A>>2]=r,i[A+4>>2]=s,A=A+32|0,(t=t-32|0)>>>0>31;);return e}function xA(){var e,A=0,t=0,r=0,n=0,a=0;if(W=e=W-208|0,(0|(r=i[50303]))>0)for(;(n=i[(t=201216+(A<<2)|0)>>2])&&(ye(n),i[t>>2]=0),(0|r)!=(0|(A=A+1|0)););if(i[50303]=0,i[e+16>>2]=137584,i[e+20>>2]=47,Bt(A=e+32|0,87827,e+16|0),Fe(A,jt(A)+1|0,0),i[e+4>>2]=47,i[e>>2]=137584,Bt(A,87933,e),Fe(A,jt(A)+1|0,1),A=i[50303],i[201216+(t=A<<2)>>2]=0,t=Oe(r=i[50741],t+4|0)){if(i[50741]=t,AA(201216,A,7),r=i[50741],t=0,A=i[50304])for(n=0;a=i[A+4>>2],o[0|a]&&hr(a+1|0,86589)&&Dt(i[A+8>>2],88032,3)&&(i[(t<<2)+r>>2]=A,t=t+1|0),A=i[201216+((n=n+1|0)<<2)>>2];);i[(t<<2)+r>>2]=0}return W=e+208|0,r}function vA(e,A,t){var r=0,n=0,s=0,l=0;if(s=A-1|0,(0|A)>=2){A=e;e:{for(;;){A:{t:{if((0|(r=i[t+4>>2]))!=(0|(n=i[t+8>>2]))){if((l=JA(r,10,n-r|0))?n=1+(l-(r=i[t+4>>2])|0)|0:(r=i[t+4>>2],n=i[t+8>>2]-r|0),_e(A,r,r=n>>>0<s>>>0?n:s),n=r+i[t+4>>2]|0,i[t+4>>2]=n,A=A+r|0,l)break A;if(!(s=s-r|0))break A;if((0|n)!=i[t+8>>2]){i[t+4>>2]=n+1,r=o[0|n];break t}}if(!((0|(r=Tr(t)))>=0)){if(r=0,(0|e)==(0|A))break e;if(16&o[0|t])break A;break e}}if(a[0|A]=r,A=A+1|0,10!=(255&r)&&(s=s-1|0))continue}break}e?(a[0|A]=0,r=e):r=0}}else if(A=i[t+72>>2],i[t+72>>2]=A-1|A,!s)return a[0|e]=0,e;return r}function BA(e){var A=0,t=0,r=0,n=0,a=0,s=0,l=0,c=0;if(A=C(e,44),(0|(e=i[A+137896>>2]))>0&&BA(e-1|0),e=i[36115],!((0|(A=i[36+(t=A+137856|0)>>2]))<=0)){if(n=i[t+32>>2],l=1&A,1!=(0|A))for(c=-2&A,t=0;A=o[10+(a=(r=t<<4)+n|0)|0],i[144464+(A<<2)>>2]=a,(0|e)>=(0|A)?A=e:kA(144464+((e=e+1|0)<<2)|0,0,A-e<<2),e=o[10+(r=(16|r)+n|0)|0],i[144464+(e<<2)>>2]=r,(0|e)<=(0|A)?e=A:kA(144464+((A=A+1|0)<<2)|0,0,e-A<<2),t=t+2|0,(0|c)!=(0|(s=s+2|0)););else t=0;l&&(A=o[10+(t=(t<<4)+n|0)|0],i[144464+(A<<2)>>2]=t,(0|e)>=(0|A)||(kA(144464+((e=e+1|0)<<2)|0,0,A-e<<2),e=A))}i[36115]=e}function yA(e,A,t,r,n){var s,l=0,c=0,g=0;W=s=W-16|0;e:if(1&a[e+106|0]&&(l=o[0|t],!(!(1&a[r+2|0])&46!=(0|l)||256&(g=i[r+12>>2])|!(!(2&g)||n)||(VA(s+12|0,46!=(0|l)?t:t+2|0),!(l=o[0|t])|!o[t+1|0])))){if(!(!(g=i[s+12>>2])|2&o[r+2|0])){if(!dt(g))break e;l=o[0|t]}46==(0|l)&&(a[0|t]=32),c=2,26741!=i[e+212>>2]|n||(t=dt(i[s+12>>2])?dA(e,t+2|0,0,0):0,128&o[e+8233|0]&&(!(!(n=i[s+12>>2])|2&o[r+2|0])&n-48>>>0>=10||(c=0)),c=32768&t?0:c,131072&t&&(c=163840&i[e+8232>>2]?34:45!=o[A-2|0]?c:0))}return W=s+16|0,c}function EA(e,A,t,r,n){var a,s=0,o=0;if(W=a=W-208|0,i[a+204>>2]=t,kA(t=a+160|0,0,40),i[a+200>>2]=i[a+204>>2],(0|he(0,A,a+200|0,a+80|0,t,r,n))<0)n=-1;else{i[e+76>>2],s=i[e>>2],i[e+72>>2]<=0&&(i[e>>2]=-33&s);e:{A:{if(i[e+48>>2]){if(i[e+16>>2])break A}else i[e+48>>2]=80,i[e+28>>2]=0,i[e+16>>2]=0,i[e+20>>2]=0,o=i[e+44>>2],i[e+44>>2]=a;if(t=-1,dr(e))break e}t=he(e,A,a+200|0,a+80|0,a+160|0,r,n)}o&&(Tn[i[e+36>>2]](e,0,0),i[e+48>>2]=0,i[e+44>>2]=o,i[e+28>>2]=0,A=i[e+20>>2],i[e+16>>2]=0,i[e+20>>2]=0,t=A?t:-1),A=e,e=i[e>>2],i[A>>2]=e|32&s,n=32&e?-1:t}return W=a+208|0,n}function MA(e,A,t,r){var n,s=0,i=0,l=0,c=0,g=0,u=0,d=0;if(W=n=W-208|0,i=o[0|A])for(;a[s+n|0]=i,c=(6==(255&i)&21!=(0|l))+c|0,l=i<<24>>24,i=o[(s=s+1|0)+A|0];);if(a[s+n|0]=0,s=o[0|n])for(u=c-2|0,l=0,d=(0|r)<2,i=0;;){e:{A:if(6!=(255&s)|d|21==(0|i)){if(255==(0|(r=255&s))){if(!g|(0|t)<2)break e;r=t>>>0>2?11:(0|l)%3|0?23:11}i=r,r=l}else{if(s=l+1|0,o[e+169|0]){i=(0|s)>1?5:6,r=s;break A}if(i=6,r=c,(0|s)==(0|c))break A;i=(0|s)%3|0||(0|l)==(0|u)?5:6,r=s}l=r,a[0|A]=i,A=A+1|0}if(!(s=o[(g=g+1|0)+n|0]))break}(0|t)>=2&&(a[0|A]=11,A=A+1|0),a[0|A]=0,W=n+208|0}function GA(e,A){var t=0;t=0,e&&(t=i[50754],t=(e=(e=(0|C(i[145712+(A?12:((0|e)>199)<<2)>>2],e))/256|0)>>>0>(A=i[36430])>>>0?e:A)>>>0<=89999?(C(e,t)>>>0)/1e3|0:(C(e,(0|t)/25|0)>>>0)/40|0),(0|(e=i[36440]))<=0||(0|(A=i[36424]))<0||(i[4+(A=216192+(A<<4)|0)>>2]||(i[A+4>>2]=e),i[36440]=0),i[36426]=0,i[36439]=-1,i[36455]=i[50758],de(),i[36427]=-1,e=216192+(i[50758]<<4)|0,i[e>>2]=5,i[e+4>>2]=t,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0,i[36426]=0,i[36438]&&(i[36438]=0,e=216192+(i[50758]<<4)|0,i[e>>2]=14,i[e+4>>2]=0,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0)}function DA(e,A,t,r,n,a,s,i){var o,l=0,c=0,g=0;l=1,o=c=2147483647&r;e:if(!((g=2147418112==(0|c))&!t?e|A:g&!!(0|t)|c>>>0>2147418112)&&!((g=2147418112==(0|(c=2147483647&i)))&!s?n|a:g&!!(0|s)|c>>>0>2147418112)){if(!(e|n|t|s|A|a|c|o))return 0;if((0|(l=r&i))>0|(0|l)>=0){if(l=-1,(0|t)==(0|s)&(0|r)==(0|i)?(0|A)==(0|a)&e>>>0<n>>>0|A>>>0<a>>>0:t>>>0<s>>>0&(0|r)<=(0|i)|(0|r)<(0|i))break e;return!!(e^n|t^s|A^a|r^i)}l=-1,((0|t)==(0|s)&(0|r)==(0|i)?(0|A)==(0|a)&e>>>0>n>>>0|A>>>0>a>>>0:t>>>0>s>>>0&(0|r)>=(0|i)|(0|r)>(0|i))||(l=!!(e^n|t^s|A^a|r^i))}return l}function QA(e,A){var t=0,r=0,n=0,s=0;for(t=o[85836]|o[85837]<<8,a[0|A]=t,a[A+1|0]=t>>>8,a[A+2|0]=o[85838];;)if(n=o[0|e],e=t=e+1|0,255!=(0|n)){if(!n)break;if(!(r=i[144464+(n<<2)>>2]))continue;if(1==o[r+11|0]&&(s=o[r+14|0],!(p[r+8>>1]|s>>>0>4))){if(s>>>0<2)continue;a[0|A]=o[s+93943|0],A=A+1|0;continue}if(255&(e=i[r>>2]))for(;a[0|A]=e,A=A+1|0,r=65280&e,e=e>>>8|0,r;);if(e=t,21!=(0|n))continue;if((32|(t=a[0|e]))-97>>>0>=26)continue;for(;a[0|A]=t,A=A+1|0,(32|(t=a[0|(e=e+1|0)]))-97>>>0<26;);}a[0|A]=0}function TA(e,A){var t,r,n=0,a=0,s=0;W=t=W-112|0,e||(i[50303]||xA(),e=201216),fn(n=t+16|0,A,40),i[t>>2]=47,i[t+4>>2]=n,Bt(A=t- -64|0,87599,t),r=jt(A),s=-1;e:{A:{t:{if(a=i[e>>2]){A=0,n=-1;r:{for(;;){if(bt(t+16|0,i[a>>2])){if(bt(t+16|0,a=i[a+8>>2])?s=bt(t- -64|0,a+(jt(a)-r|0)|0)?s:A:n=A,a=i[((A=A+1|0)<<2)+e>>2])continue;break r}break}if((0|A)>=0)break A;A=(0|n)<0?s:n;break t}if((0|(A=n))>=0)break t}A=s}if(n=0,(0|A)<0)break e}n=i[(A<<2)+e>>2]}return W=t+112|0,n}function PA(e,A){var t,r,n=0,a=0,s=0,o=0,c=0;W=t=W-16|0,u(+A),r=0|l(1),a=0|l(0),2145386495==(0|(s=(n=2147483647&r)-1048576|0))|s>>>0<2145386495?(o=a<<28,s=n>>>4|0,n=(15&n)<<28|a>>>4,a=s+1006632960|0):2146435072==(0|n)|n>>>0>2146435072?(o=a<<28,n=(15&r)<<28|a>>>4,a=r>>>4|2147418112):n|a?(WA(t,a,s=n,0,0,(n=n?w(n):w(a)+32|0)+49|0),c=i[t>>2],o=i[t+4>>2],s=15372-n<<16,n=i[t+8>>2],a=s|65536^i[t+12>>2]):(n=0,a=0),i[e>>2]=c,i[e+4>>2]=o,i[e+8>>2]=n,i[e+12>>2]=-2147483648&r|a,W=t+16|0}function zA(e,A,t){var r=0,n=0;e:{A:{t:{if(!(3&((n=e)^A))){r=!!(0|t);r:if(!(!(3&A)|!t))for(;;){if(r=o[0|A],a[0|n]=r,!r)break e;if(n=n+1|0,r=!!(0|(t=t-1|0)),!(3&(A=A+1|0)))break r;if(!t)break}if(!r)break A;if(!o[0|A])break e;if(!(t>>>0<4))for(;;){if(~(r=i[A>>2])&r-16843009&-2139062144)break t;if(i[n>>2]=r,n=n+4|0,A=A+4|0,!((t=t-4|0)>>>0>3))break}}if(!t)break A}for(;;){if(r=o[0|A],a[0|n]=r,!r)break e;if(n=n+1|0,A=A+1|0,!(t=t-1|0))break}}t=0}return kA(n,0,t),e}function FA(e,A,t,r,n,a){var s,o=0,l=0,c=0;W=s=W-240|0,o=i[t>>2],i[s+232>>2]=o,t=i[t+4>>2],i[s>>2]=e,i[s+236>>2]=t,c=1;e:{A:{t:{if(t|1!=(0|o)){for(o=e;;){if((0|ln(t=o-i[(l=(r<<2)+a|0)>>2]|0,e,A))<=0){t=o;break t}r:{if(!((0|r)<2|n)){if(n=i[l-8>>2],(0|ln(l=o-4|0,t,A))>=0)break r;if((0|ln(l-n|0,t,A))>=0)break r}if(i[(c<<2)+s>>2]=t,Sr(o=s+232|0,n=vr(o)),c=c+1|0,r=r+n|0,n=0,o=t,i[s+236>>2]|1!=i[s+232>>2])continue;break A}break}t=o;break A}t=e}if(n)break e}yt(s,c),vt(t,A,r,a)}W=s+240|0}function SA(e,A){var t=0;i[4+(134912+(t=e<<2)|0)>>2]=A,i[t+136192>>2]=A,t=28;e:{A:{t:switch(e-1|0){case 0:i[50792]=A,i[50786]=A,Ze(3);break A;case 1:i[50787]=A,i[33037]=(0|C(o[i[50797]+105596|0],(0|C(i[50787],55))/100|0))/16;break A;case 2:e=(0|A)>=99?99:A,i[50785]=(0|e)>0?e:0;break A;case 3:i[50788]=(0|A)>=99?99:A;break A;case 12:i[47268]=A;break A;case 6:i[47205]=A;break A;case 9:break A;case 8:break t;default:break e}(e=255&A)&&(i[i[47192]+152>>2]=e),i[47196]=A}t=0}return t}function NA(e,A){var t=0,r=0,n=0;e:if(i[e>>2])for(;;){if(er(i[e-4>>2])){if(r=0,(0|(t=a[0|A]))==i[e>>2])for(;(0|(t=a[(r=r+1|0)+A|0]))==i[(e=e+4|0)>>2];);if(!t){for(;A=e,e=e+4|0,er(i[A>>2]););for(n=A+((61==i[A>>2])<<2)|0;n=(e=n)+4|0,er(i[e>>2]););A:switch((A=i[e>>2])-34|0){case 0:case 5:break e}return er(A)||47==i[e>>2]?102808:e}}if(!i[(e=e+4|0)>>2])break}return n}function OA(e,A,t,r){var n,s,l=0,c=0,g=0;return!o[e+25|0]|m[e+8>>3]!=t|m[e+16>>3]!=r?(m[e+16>>3]=r,m[e+8>>3]=t,r=(l=$e(-3.141592653589793/(c=+i[e>>2])*r))*-l,m[e+48>>3]=r,l*=nt(-6.283185307179586/c*t),l+=l,m[e+40>>3]=l,c=1-l-r,m[e+32>>3]=c,!(g=o[e+24|0])|0==t||(c=1/c,m[e+32>>3]=c,r*=t=-c,m[e+48>>3]=r,l*=t,m[e+40>>3]=l,g=1)):(g=o[e+24|0],r=m[e+48>>3],l=m[e+40>>3],c=m[e+32>>3]),a[e+25|0]=1,t=m[e+64>>3],n=m[e+56>>3],m[e+64>>3]=n,s=A,A=r*t+(c*A+l*n),m[e+56>>3]=g?s:A,A}function LA(e,A,t,r,n){var a,s=0,o=0,l=0,c=0;if((a=i[34388])&&!((0|(o=i[34436]))>=(i[34393]-2|0))){if(i[34436]=o+1,s=C(o,36)+a|0,i[s>>2]=e,i[s+4>>2]=i[34437],c=i[34438],i[s+12>>2]=A>>>24,i[s+8>>2]=16777215&A,i[s+24>>2]=c,A=i[50754],n=i[34439]+((n-i[34392]|0)/2|0)|0,i[s+20>>2]=n,A=I(l=1e3*+(0|n)/+(0|A))<2147483648?~~l:-2147483648,i[s+16>>2]=A,e-3>>>0<=1)return void(i[28+(C(o,36)+a|0)>>2]=i[33282]+t);A=28+(C(o,36)+a|0)|0,i[A>>2]=t,7==(0|e)&&(i[A+4>>2]=r)}}function YA(e,A,t,r,n,a){var s=0,o=0,l=0,c=0;64&a?(A=31&(t=a+-64|0),(63&t)>>>0>=32?(t=0,A=n>>>A|0):(t=n>>>A|0,A=((1<<A)-1&n)<<32-A|r>>>A),r=0,n=0):a&&(l=r,s=31&(o=64-a|0),(63&o)>>>0>=32?(o=l<<s,c=0):(o=(1<<s)-1&l>>>32-s|n<<s,c=l<<s),l=A,A=31&a,(63&a)>>>0>=32?(s=0,A=t>>>A|0):(s=t>>>A|0,A=((1<<A)-1&t)<<32-A|l>>>A),A|=c,t=s|o,s=r,r=31&a,(63&a)>>>0>=32?(o=0,r=n>>>r|0):(o=n>>>r|0,r=((1<<r)-1&n)<<32-r|s>>>r),n=o),i[e>>2]=A,i[e+4>>2]=t,i[e+8>>2]=r,i[e+12>>2]=n}function HA(e){var A=0,t=0;if(!e){if(i[33174]&&(A=HA(i[33174])),i[33136]&&(A=HA(i[33136])|A),e=i[56816])for(;i[e+20>>2]!=i[e+28>>2]&&(A=HA(e)|A),e=i[e+56>>2];);return A}return i[e+76>>2],i[e+20>>2]==i[e+28>>2]||(Tn[i[e+36>>2]](e,0,0),i[e+20>>2])?((0|(A=i[e+8>>2]))!=(0|(t=i[e+4>>2]))&&(A=t-A|0,Tn[i[e+40>>2]](e,A,A>>31,1)),A=0,i[e+28>>2]=0,i[e+16>>2]=0,i[e+20>>2]=0,i[e+4>>2]=0,i[e+8>>2]=0):A=-1,A}function RA(e,A){var t=0,r=0,n=0,a=0,s=0;if(128==(192&(t=o[0|A])))for(;128==(192&(t=o[0|(A=A-1|0)])););e:if(128&(t=t<<24>>24)){if(r=1,192!=(0|(n=224&t)))if(224!=(240&t)){if(r=3,240!=(248&t)){t&=255,r=0;break e}}else r=2,s=1;t=o[r+93846|0]&t,(a=o[A+1|0])?(t=63&a|t<<6,192!=(0|n)&&((n=o[A+2|0])?(t=63&n|t<<6,s||((A=o[A+3|0])?t=63&A|t<<6:r=2)):r=1)):r=0}return i[e>>2]=t,r+1|0}function jA(e,A,t,r){var n,a=0,s=0;return W=n=W-224|0,e?(i[n>>2]=137584,i[n+4>>2]=47,i[n+8>>2]=A,Bt(A=n+16|0,85430,n),(0|(a=sr(A)))<0?A=lr(r,0-a|0,n+16|0):(A=eA(n+16|0,85659))?((s=i[e>>2])&&ye(s),a?(s=se(a),i[e>>2]=s,s?(0|It(s,a,A))==(0|a)?(cr(A),A=0,t&&(i[t>>2]=a)):(t=i[56798],cr(A),ye(i[e>>2]),i[e>>2]=0,A=lr(r,t,n+16|0)):(cr(A),A=48)):(A=0,i[e>>2]=0)):A=lr(r,i[56798],n+16|0)):A=28,W=n+224|0,A}function VA(e,A){var t=0,r=0,n=0,a=0,s=0;if(128==(192&(t=o[0|A])))for(;128==(192&(t=o[0|(A=A+1|0)])););e:if(128&(t=t<<24>>24)){if(r=1,192!=(0|(n=224&t)))if(224!=(240&t)){if(r=3,240!=(248&t)){t&=255,r=0;break e}}else r=2,s=1;t=o[r+93846|0]&t,(a=o[A+1|0])?(t=63&a|t<<6,192!=(0|n)&&((n=o[A+2|0])?(t=63&n|t<<6,s||((A=o[A+3|0])?t=63&A|t<<6:r=2)):r=1)):r=0}return i[e>>2]=t,r+1|0}function WA(e,A,t,r,n,a){var s=0,o=0,l=0;64&a?(r=A,A=31&(n=a+-64|0),(63&n)>>>0>=32?(n=r<<A,r=0):(n=(1<<A)-1&r>>>32-A|t<<A,r<<=A),A=0,t=0):a&&(s=r,r=31&a,(63&a)>>>0>=32?(o=s<<r,l=0):(o=(1<<r)-1&s>>>32-r|n<<r,l=s<<r),s=A,r=31&(n=64-a|0),(63&n)>>>0>=32?(n=0,A=t>>>r|0):(n=t>>>r|0,A=((1<<r)-1&t)<<32-r|s>>>r),r=l|A,n|=o,A=31&a,(63&a)>>>0>=32?(o=s<<A,A=0):(o=(1<<A)-1&s>>>32-A|t<<A,A=s<<A),t=o),i[e>>2]=A,i[e+4>>2]=t,i[e+8>>2]=r,i[e+12>>2]=n}function UA(e){var A=0;return e>>>0<=55295?A=o[i[125552+(e>>>6&67108860)>>2]+(255&e)|0]:(A=4,e>>>0<57344||(e>>>0<63488?A=3:e>>>0<=195327?A=o[i[126416+(e-63488>>>6&67108860)>>2]+(255&e)|0]:(A=2,e>>>0<917504||(e>>>0<=918015?A=o[i[128476+(e-917504>>>6&67108860)>>2]+(255&e)|0]:e>>>0<983040||(e>>>0<1048574?A=3:e>>>0<1048576||(A=3,e>>>0<1114110||(A=e>>>0<1114112?2:5))))))),255&A}function KA(e,A){var t=0,r=0,n=0,a=0,s=0,o=0,l=0,c=0,g=0;if(!((0|(t=i[33709]))<=0)){if(n=(0|e)>31?e-32|0:e,e=0,t>>>0>=4)for(g=-4&t;o=2|e,l=1|e,r=i[134912+((s=3|e)<<6)>>2]==(0|n)?s:i[134912+(o<<6)>>2]==(0|n)?o:i[134912+(l<<6)>>2]==(0|n)?l:i[134912+(e<<6)>>2]==(0|n)?e:r,e=e+4|0,(0|g)!=(0|(a=a+4|0)););if(a=3&t)for(;r=i[134912+(e<<6)>>2]==(0|n)?e:r,e=e+1|0,(0|a)!=(0|(c=c+1|0)););(0|r)<=0||(i[33709]=r,t=r)}Re(A,t)}function ZA(e){var A,t=0,r=0,n=0;for(W=A=W-96|0,fn(A,e,60),et(A,1);n=nr(a[0|(r=A+t|0)]),a[0|r]=n,t=t+1|0,255&n;);i[A+92>>2]=0,i[A+84>>2]=0,i[A+88>>2]=0,i[A+76>>2]=0,i[A+80>>2]=0,i[A+72>>2]=e;e:{A:{t:{if(ne(A,1)){if(o[202976])break t;break A}if(i[50303]||xA(),t=268437247,!(e=TA(201216,A)))break e;if(!ne(i[e+8>>2],0))break e;if(!o[202976])break A}ne(202976,2)}Dr(i[32972]),i[A+76>>2]=i[32972]+40,ft(A+72|0,202976),t=0}return W=A+96|0,t}function XA(e,A){if(!e)return 0;e:{A:{if(e){if(A>>>0<=127)break A;if(i[i[56841]>>2]){if(A>>>0<=2047){a[e+1|0]=63&A|128,a[0|e]=A>>>6|192,e=2;break e}if(!(57344!=(-8192&A)&A>>>0>=55296)){a[e+2|0]=63&A|128,a[0|e]=A>>>12|224,a[e+1|0]=A>>>6&63|128,e=3;break e}if(A-65536>>>0<=1048575){a[e+3|0]=63&A|128,a[0|e]=A>>>18|240,a[e+2|0]=A>>>6&63|128,a[e+1|0]=A>>>12&63|128,e=4;break e}}else if(57216==(-128&A))break A;i[56798]=25,e=-1}else e=1;break e}a[0|e]=A,e=1}return e}function qA(e){var A=0,t=0,r=0,n=0;if(i[e+20>>2]=0,(r=(t=i[e+8>>2])-(A=i[e+4>>2])|0)>>>0>=9)for(;ye(i[A>>2]),A=i[e+4>>2]+4|0,i[e+4>>2]=A,(r=(t=i[e+8>>2])-A|0)>>>0>8;);n=512;e:switch((r>>>2|0)-1|0){case 1:n=1024;case 0:i[e+16>>2]=n}if((0|A)!=(0|t)){for(;ye(i[A>>2]),(0|t)!=(0|(A=A+4|0)););(0|(A=i[e+8>>2]))!=(0|(t=i[e+4>>2]))&&(i[e+8>>2]=A+(3+(t-A|0)&-4))}(e=i[e>>2])&&ye(e)}function JA(e,A,t){var r=0,n=0;r=!!(0|t);e:{A:{t:if(!(!(3&e)|!t))for(n=255&A;;){if((0|n)==o[0|e])break A;if(r=!!(0|(t=t-1|0)),!(3&(e=e+1|0)))break t;if(!t)break}if(!r)break e;if(!(o[0|e]==(255&A)|t>>>0<4))for(r=C(255&A,16843009);;){if(~(n=r^i[e>>2])&n-16843009&-2139062144)break A;if(e=e+4|0,!((t=t-4|0)>>>0>3))break}if(!t)break e}for(A&=255;;){if((0|A)==o[0|e])return e;if(e=e+1|0,!(t=t-1|0))break}}return 0}function _A(e,A){var t=0,r=0;e:{if(r=255&A){if(3&e)for(;;){if(!(t=o[0|e])|(0|t)==(255&A))break e;if(!(3&(e=e+1|0)))break}A:if(!(~(t=i[e>>2])&t-16843009&-2139062144))for(r=C(r,16843009);;){if(~(t^=r)&t-16843009&-2139062144)break A;if(t=i[e+4>>2],e=e+4|0,t-16843009&~t&-2139062144)break}for(;(r=o[0|(t=e)])&&(e=t+1|0,(0|r)!=(255&A)););return t}return jt(e)+e|0}return e}function $A(e,A,t,r,n){var a,s=0,i=0;i=-1;e:if(!(((s=2147418112==(0|(a=2147483647&r)))&!t?e|A:s&!!(0|t)|a>>>0>2147418112)||(s=2147483647&n)>>>0>2147418112&2147418112!=(0|s))){if(!(e|t|s|a|A))return 0;if((0|(s=r&n))>0|(0|s)>=0){if((!!(0|t)|(0|r)!=(0|n))&(0|r)<(0|n))break e;return!!(e|t|r^n|A)}(!t&(0|r)==(0|n)?e|A:!!(0|t)&(0|r)>=(0|n)|(0|r)>(0|n))||(i=!!(e|t|r^n|A))}return i}function et(e,A){var t,r=0;W=t=W+-64|0,a[202976]=0,i[t+48>>2]=47,Bt(t+59|0,91351,t+48|0),A||(a[t+59|0]=0);e:{A:{if(e&&(e=cn(e,43))){if(a[0|e]=0,a[0|(e=e+1|0)]-48>>>0>=10)break A;r=wt(e)}if((0|r)<=0)break e;if(r>>>0<=9){i[t+4>>2]=r,i[t>>2]=t+59,Bt(202976,91378,t);break e}i[t+20>>2]=r-10,i[t+16>>2]=t+59,Bt(202976,91503,t+16|0);break e}i[t+36>>2]=e,i[t+32>>2]=t+59,Bt(202976,85425,t+32|0)}W=t- -64|0}function At(e){var A,t=0,r=0,n=0;W=A=W-80|0,t=be(e,A+12|0),i[A+12>>2]?(fn(r=A+16|0,t,60),t=0,et(r,1),!ne(r,0)|!o[202976]||ne(202976,2),Dr(i[32972]),ft(e,86012)):t=268437247,W=A+80|0;e:{A:{t:{r:{if((0|t)<=268437502){if(!t)break e;if(268436479==(0|t))break A;if(268437247!=(0|t))break r;return 2}if(268437503==(0|t)|268437759==(0|t))break t;if(268439295==(0|t))break e}return-1}return 2}n=1}return n}function tt(e,A,t,r,n,a,s,o,l){var c,g,u;l=rr(A,t,o,l),o=Z,n=rr(r,n,a,s),r=Z+o|0,o=n>>>0>(l=n+l|0)>>>0?r+1|0:r,c=s,g=t,s=(t=rr(s,n=0,t,r=0))+l|0,l=Z+o|0,u=s,t=t>>>0>s>>>0?l+1|0:l,s=rr(a,0,A,0),o=Z,r=rr(a,l=0,g,r),a=Z+l|0,a=r>>>0>(o=o+r|0)>>>0?a+1|0:a,r=t,a=a>>>0>(l=a+u|0)>>>0?r+1|0:r,t=rr(A,0,c,n)+o|0,n=Z,o=(n=t>>>0<o>>>0?n+1|0:n)+l|0,l=a,i[e+8>>2]=o,i[e+12>>2]=n>>>0>o>>>0?l+1|0:l,i[e>>2]=s,i[e+4>>2]=t}function rt(e,A){var t=0,r=0;e:{if(3&((r=e)^A))t=o[0|A];else{if(3&A)for(;;){if(t=o[0|A],a[0|r]=t,!t)break e;if(r=r+1|0,!(3&(A=A+1|0)))break}if(!(~(t=i[A>>2])&t-16843009&-2139062144))for(;i[r>>2]=t,t=i[A+4>>2],r=r+4|0,A=A+4|0,!(t-16843009&~t&-2139062144););}if(a[0|r]=t,255&t)for(;t=o[A+1|0],a[r+1|0]=t,r=r+1|0,A=A+1|0,t;);}return e}function nt(e){var A,t=0,r=0;W=A=W-16|0,u(+e),r=0|l(1),l(0);e:if((r&=2147483647)>>>0<=1072243195){if(t=1,r>>>0<1044816030)break e;t=Ut(e,0)}else if(t=e-e,!(r>>>0>=2146435072)){A:switch(3&fe(e,A)){case 0:t=Ut(m[A>>3],m[A+8>>3]);break e;case 1:t=-Ot(m[A>>3],m[A+8>>3],1);break e;case 2:t=-Ut(m[A>>3],m[A+8>>3]);break e}t=Ot(m[A>>3],m[A+8>>3],1)}return W=A+16|0,t}function at(e,A,t,r){var n=0,a=0,s=0;if(!((jt(r)+jt(A)|0)>=(0|t))){for(s=i[36115],t=r;n=o[0|t];)if(t=t+1|0,!((0|n)>=(0|s))){e:{A:switch(n=i[144464+(n<<2)>>2],o[n+11|0]-1|0){case 1:break e;case 0:break A;default:continue}a=o[n+14|0]<4|a;continue}1&(o[n+4|0]>>>1|a)||(i[e+8212>>2]=i[e+8212>>2]+1),i[e+8208>>2]=i[e+8208>>2]+1,a=0}A&&yn(A,r)}}function st(e){var A,t=0;W=A=W-16|0,u(+e),t=0|l(1),l(0);e:if((t&=2147483647)>>>0<=1072243195){if(t>>>0<1045430272)break e;e=Ot(e,0,0)}else if(t>>>0>=2146435072)e-=e;else{A:switch(3&fe(e,A)){case 0:e=Ot(m[A>>3],m[A+8>>3],1);break e;case 1:e=Ut(m[A>>3],m[A+8>>3]);break e;case 2:e=-Ot(m[A>>3],m[A+8>>3],1);break e}e=-Ut(m[A>>3],m[A+8>>3])}return W=A+16|0,e}function it(e){var A=0;i[e+296>>2]=303173648,i[e+300>>2]=370677780,A=i[26341],i[e+304>>2]=i[26340],i[e+308>>2]=A,A=i[26343],i[e+312>>2]=i[26342],i[e+316>>2]=A,je(e),i[e+56>>2]=2,i[e+36>>2]=3,i[e+40>>2]=1074,a[e+168|0]=5,i[e+132>>2]=32,i[e+104>>2]=1032,i[e+108>>2]=66,i[e+8>>2]=5,i[e+12>>2]=32,a[e+365|0]=64|o[e+365|0],a[e+368|0]=64|o[e+368|0],a[e+396|0]=64|o[e+396|0],a[e+399|0]=64|o[e+399|0]}function ot(e,A,t){var r=0,n=0,a=0;e:{if(!(r=i[t+16>>2])){if(dr(t))break e;r=i[t+16>>2]}if(r-(a=i[t+20>>2])>>>0<A>>>0)return 0|Tn[i[t+36>>2]](t,e,A);A:if(i[t+80>>2]<0)r=0;else{for(n=A;;){if(!(r=n)){r=0;break A}if(10==o[(n=r-1|0)+e|0])break}if((n=0|Tn[i[t+36>>2]](t,e,r))>>>0<r>>>0)break e;e=e+r|0,A=A-r|0,a=i[t+20>>2]}_e(a,e,A),i[t+20>>2]=i[t+20>>2]+A,n=A+r|0}return n}function lt(e){var A,t=0,r=0;e:{if((0|(A=i[34064]))>0)for(;;){if((r=i[136284+(t<<4)>>2])&&!hr(e,r)){if(i[136276+(t<<4)>>2])return t;if(r=-1,Se(0,t))break e;return t}if((0|A)==(0|(t=t+1|0)))break}r=-1,Se(e,A)||(t=Oe(i[12+(136272+(i[34064]<<4)|0)>>2],jt(e)+1|0),r=i[34064],i[12+(136272+(r<<4)|0)>>2]=t,rt(t,e),i[34064]=r+1)}return r}function ct(e,A){var t,r=0,n=0,s=0,o=0;for(W=t=W-16|0,a[0|A]=0,(r=15&i[e>>2])&&(A=(n=jt(A=rt(A,mr(128496,64|r))))+A|0),r=8;;){e:{A:{if(r>>>0<=29){if(i[e>>2]>>>r&1)break A;break e}if(!(i[e+4>>2]>>>r-32&1)|r>>>0<32)break e}(0|(n=(o=jt(s=mr(128496,r))+1|0)+n|0))>=80||(i[t>>2]=s,Bt(A,84439,t),A=A+o|0)}if(64==(0|(r=r+1|0)))break}W=t+16|0}function gt(e,A,t){var r,n=0,s=0,l=0;if(W=r=W-16|0,o[0|e])for(l=i[30450];;)if(s=e,e=e+1|0,!(32==(0|(n=a[0|s]))|n-9>>>0<5)){for((0|(n=wt(s)))>0&&((0|n)<32?i[A>>2]=i[A>>2]|1<<n:(s=mr(129568,t),i[r+4>>2]=n,i[r>>2]=s,en(l,84902,r)),s=e);s=(e=s)+1|0,(n=a[0|e])-48>>>0<10|(32|n)-97>>>0<26;);if(!n)break}W=r+16|0}function ut(e,A,t){var r=0,n=0,s=0,o=0;e:if(A&&!((0|(n=t-4|0))<=0))for(s=34!=(0|(t=i[A-4>>2]))?39==(0|t)?t:0:t,t=0;;){if(o=t,!(t=i[A>>2]))break e;A:{if(!s){if(32==(0|t)|t-9>>>0<5)break e;if(47!=(0|t))break A;break e}if(92!=(0|o)&&(0|t)==(0|s))break e}if(A=A+4|0,!((0|n)>(0|(r=Ft(t,e+r|0)+r|0))))break}return a[e+r|0]=0,r}function dt(e){var A=0;e:if(!yr(e)){A=0;A:if(!(e>>>0<768)){if(e-2305>>>0<=1270){if((124&e)>>>0<100)break e;if(A=1,zr(93850,e))break A;return e-3450>>>0<6}if(1541==(0|e)|e-1456>>>0<19|1648==(0|e))break e;if(10240==(0|(A=-256&e))|4352==(0|A)|e-3904>>>0<125|e>>>0<880)break e;A=1,e-1611>>>0<20||(A=e-12353>>>0<30400)}return A}return 1}function ft(e,A){var t=0;e?((t=i[e+4>>2])&&rt(133208,t),(t=i[e>>2])&&fn(133168,t,40),i[33289]=o[e+14|0],i[33291]=o[e+13|0],i[33290]=o[e+12|0],fn(134672,33!=o[0|A]|118!=o[A+1|0]?A:(47==o[A+2|0]?3:0)+A|0,40),e=i[50298],i[33678]=i[50297],i[33679]=e,e=i[50302],i[33682]=i[50301],i[33683]=e,e=i[50300],i[33680]=i[50299],i[33681]=e):kA(133152,0,76)}function pt(e,A,t,r){a[e+53|0]=1;e:if(i[e+4>>2]==(0|t)){a[e+52|0]=1;A:{if(!(t=i[e+16>>2])){if(i[e+36>>2]=1,i[e+24>>2]=r,i[e+16>>2]=A,1!=(0|r))break e;if(1==i[e+48>>2])break A;break e}if((0|A)==(0|t)){if(2==(0|(t=i[e+24>>2]))&&(i[e+24>>2]=r,t=r),1!=i[e+48>>2])break e;if(1==(0|t))break A;break e}i[e+36>>2]=i[e+36>>2]+1}a[e+54|0]=1}}function ht(e,A){var t=0,r=0,n=0,s=0,o=0;e:if(t=i[A>>2])for(;;){r=0;A:if(e){for(;o=a[r+t|0],(n=i[(r<<2)+e>>2])&&(r=r+1|0,(0|o)==(0|n)););t:switch(n-34|0){case 0:case 5:break t;default:break A}if(!o)break e}if(!(t=i[((s=s+1|0)<<3)+A>>2]))break}return i[4+((s<<3)+A|0)>>2]}function mt(e,A){e:if((0|A)>=1024){if(e*=898846567431158e293,A>>>0<2047){A=A-1023|0;break e}e*=898846567431158e293,A=((0|A)>=3069?3069:A)-2046|0}else(0|A)>-1023||(e*=2004168360008973e-307,A>>>0>4294965304?A=A+969|0:(e*=2004168360008973e-307,A=((0|A)<=-2960?-2960:A)+1938|0));return c(0,0),c(1,A+1023<<20),e*+g()}function Ct(e,A,t,r){var n,s,o,l=0;return W=s=W-16|0,i[s+12>>2]=r,W=n=W-160|0,o=A?e:n+158|0,i[n+144>>2]=o,l=-1,e=A-1|0,i[n+148>>2]=e>>>0<=A>>>0?e:0,e=kA(n,0,144),i[e+76>>2]=-1,i[e+36>>2]=17,i[e+80>>2]=-1,i[e+44>>2]=e+159,i[e+84>>2]=e+144,(0|A)<0?i[56798]=61:(a[0|o]=0,l=EA(e,t,r,15,16)),W=e+160|0,W=s+16|0,l}function bt(e,A){var t=0,r=0,n=0;e:if(t=o[0|e])for(;;){if(!(r=o[0|A])){n=t;break e}if((0|t)!=(0|r)&&(0|(r=t-65>>>0<26?32|t:t))!=(0|((t=o[0|A])-65>>>0<26?32|t:t))){n=o[0|e];break e}if(A=A+1|0,t=o[e+1|0],e=e+1|0,!t)break}return(n=(e=255&n)-65>>>0<26?32|e:e)-((e=o[0|A])-65>>>0<26?32|e:e)|0}function It(e,A,t){var r=0,n=0;if(r=i[t+72>>2],i[t+72>>2]=r-1|r,(0|(r=i[t+4>>2]))==(0|(n=i[t+8>>2]))?r=A:(_e(e,r,r=A>>>0>(r=n-r|0)>>>0?r:A),i[t+4>>2]=r+i[t+4>>2],e=e+r|0,r=A-r|0),r)for(;;){if(Ht(t)||!(n=0|Tn[i[t+32>>2]](t,e,r)))return A-r|0;if(e=e+n|0,!(r=r-n|0))break}return A}function wt(e){for(var A=0,t=0,r=0,n=0;e=(A=e)+1|0,32==(0|(t=a[0|A]))|t-9>>>0<5;);e:{A:{t:switch((t=a[0|A])-43|0){case 0:break A;case 2:break t;default:break e}n=1}t=a[0|e],A=e}if(t-48>>>0<10)for(;r=48+(C(r,10)-a[0|A]|0)|0,e=a[A+1|0],A=A+1|0,e-48>>>0<10;);return n?r:0-r|0}function kt(e,A){var t,r,n,a=0;return W=t=W-32|0,i[A>>2]=0,i[A+4>>2]=0,i[(a=r=A+24|0)>>2]=0,i[a+4>>2]=0,i[(a=n=A+16|0)>>2]=0,i[a+4>>2]=0,i[(a=A+8|0)>>2]=0,i[a+4>>2]=0,i[t+28>>2]=A+28,i[t+24>>2]=r,i[t+20>>2]=A+20,i[t+16>>2]=n,i[t+12>>2]=A+12,i[t+8>>2]=a,i[t+4>>2]=A+4,i[t>>2]=A,e=ae(e,84553,t),W=t+32|0,e}function xt(e){var A=0,t=0,r=0;if((A=o[0|e])&&((t=o[e+1|0])?(t=A|t<<8,(A=o[e+2|0])&&(t|=A<<16,(e=o[e+3|0])&&(t|=e<<24))):t=A),(0|(A=i[36115]))>0)for(e=0;;){if(!(!(r=i[144464+(e<<2)>>2])|i[r>>2]!=(0|t)))return o[r+10|0];if((0|A)==(0|(e=e+1|0)))break}return 0}function vt(e,A,t,r){var n,a=0,s=0,o=0,l=0,c=0;W=n=W-240|0,i[n>>2]=e,o=1;e:if(!((0|t)<2))for(a=e;;){if((0|ln(e,s=(a=a-4|0)-i[((l=t-2|0)<<2)+r>>2]|0,A))>=0&&(0|ln(e,a,A))>=0)break e;if(c=s,a=(s=(0|ln(s,a,A))>=0)?c:a,i[(o<<2)+n>>2]=a,o=o+1|0,!((0|(t=s?t-1|0:l))>1))break}yt(n,o),W=n+240|0}function Bt(e,A,t){var r,n,s,o=0;return W=n=W-16|0,i[n+12>>2]=t,W=r=W-160|0,_e(s=r+8|0,124528,144),i[r+52>>2]=e,i[r+28>>2]=e,o=(o=-2-e|0)>>>0>2147483647?2147483647:o,i[r+56>>2]=o,e=e+o|0,i[r+36>>2]=e,i[r+24>>2]=e,e=mn(s,A,t),o&&(A=i[r+28>>2],a[A-((0|A)==i[r+24>>2])|0]=0),W=r+160|0,W=n+16|0,e}function yt(e,A){var t,r=0,n=0,a=0,s=0,o=0;if(r=4,W=t=W-256|0,(0|A)>=2)for(i[(o=(A<<2)+e|0)>>2]=t;;){for(a=r>>>0>=256?256:r,_e(i[o>>2],i[e>>2],a),n=0;s=(n<<2)+e|0,n=n+1|0,_e(i[s>>2],i[(n<<2)+e>>2],a),i[s>>2]=i[s>>2]+a,(0|A)!=(0|n););if(!(r=r-a|0))break}W=t+256|0}function Et(e,A,t){var r,n=0;return W=r=W-96|0,i[r+88>>2]=0,i[r+92>>2]=1073741824,i[r+84>>2]=A,A=Ve(e,r+84|0,t,r+88|0,2,0),536870912&(n=i[r+88>>2])?(A=i[47202],i[47202]=0,a[r+2|0]=32,s[r>>1]=8192,fn(n=3|r,i[r+84>>2],77),e=dA(e,n,0,0),rt(t,189088),i[47202]=A):e=A?n:0,W=r+96|0,e}function Mt(e,A,t){var r=0,n=0,s=0;n=Pt(e),r=i[A>>2];e:{A:if((0|n)>=0){if(r){if(!hr(e,t))break A;(s=i[r+688>>2])&&ye(s),ye(r),i[A>>2]=0}i[A>>2]=J(e),e=rt(t,e),Te(t=i[A>>2],t+228|0,0)&&(qr(i[i[32972]+60>>2]),a[0|e]=0,n=-1),r=i[A>>2],i[r+292>>2]=n}else if(!r)break e;a[r+268|0]=0}return n}function Gt(e){var A=0,t=0;return(0|(A=i[e+76>>2]))>=0&(!A|i[56823]!=(-1073741825&A))?(t=i[(A=e+76|0)>>2],i[A>>2]=t||1073741823,(0|(t=i[e+4>>2]))==i[e+8>>2]?e=Tr(e):(i[e+4>>2]=t+1,e=o[0|t]),i[A>>2]=0,e):(0|(A=i[e+4>>2]))!=i[e+8>>2]?(i[e+4>>2]=A+1,o[0|A]):Tr(e)}function Dt(e,A,t){var r=0,n=0;e:{A:{if(t>>>0>=4){if(3&(e|A))break A;for(;;){if(i[e>>2]!=i[A>>2])break A;if(A=A+4|0,e=e+4|0,!((t=t-4|0)>>>0>3))break}}if(!t)break e}for(;;){if((0|(r=o[0|e]))==(0|(n=o[0|A]))){if(A=A+1|0,e=e+1|0,t=t-1|0)continue;break e}break}return r-n|0}return 0}function Qt(e,A){var t,r=0,n=0,a=0;W=t=W-16|0,A?(WA(t,n=((r=A>>31)^A)-r|0,0,0,0,(r=w(n))+81|0),n=0+i[t+8>>2]|0,r=(65536^i[t+12>>2])+(16414-r<<16)|0,a=-2147483648&A|(r=n>>>0<a>>>0?r+1|0:r),r=i[t+4>>2],A=i[t>>2]):A=0,i[e>>2]=A,i[e+4>>2]=r,i[e+8>>2]=n,i[e+12>>2]=a,W=t+16|0}function Tt(e){var A,t=0,r=0,n=0;if((0|(t=_A(e,61)))==(0|e))return 0;e:if(!o[(A=t-e|0)+e|0]&&(t=i[56800])&&(r=i[t>>2])){for(;;){if(qt(e,r,A)||(r=i[t>>2]+A|0,61!=o[0|r])){if(r=i[t+4>>2],t=t+4|0,r)continue;break e}break}n=r+1|0}return n}function Pt(e){var A=0,t=0;e:if(!((0|(t=i[34461]))<=0)){for(;;){if(!hr(e,C(A,44)+137856|0)){i[34457]=A;break e}if((0|t)==(0|(A=A+1|0)))break}return-1}return(e=(0|A)==(0|t))?-1:((0|(e=e?-1:A))!=i[36114]&&(i[36115]=0,BA(e),i[36114]=e,i[36115]=i[36115]+1),A)}function zt(e,A,t,r){var n=0,a=0;e:if(32!=(32|o[0|A])){if(n=((0|r)>2)<<1,a=we(e,A,t,n=(0|r)>1?4|n:n),21!=o[0|t])for(n|=1,A=A+a|0,a=1;;){if(32==(32|o[0|A]))break e;if(A=we(e,A,t,n)+A|0,a=a+1|0,21==o[0|t])break}return rt(189088,t),0}return MA(e,t,r,a),A}function Ft(e,A){var t,r=0,n=0,s=0;if(e>>>0<=127)return a[0|A]=e,1;if(e>>>0>=1114112)return a[0|A]=32,1;for(r=C(t=e>>>0<2048?1:e>>>0<65536?2:3,6),a[0|A]=o[t+93842|0]|e>>>r;r=r-6|0,a[(n=n+1|0)+A|0]=e>>>r&63|128,(0|(s=s+1|0))!=(0|t););return t+1|0}function St(e){var A=0,t=0;e:{if((0|(A=i[e+12>>2]))>=i[e+16>>2]){if(A=0,(0|(t=0|Y(i[e+8>>2],e+24|0,2048)))<=0){if(!t|-44==(0|t))break e;return i[56798]=0-t,0}i[e+16>>2]=t}t=A,A=e+A|0,i[e+12>>2]=t+p[A+40>>1],t=i[A+36>>2],i[e>>2]=i[A+32>>2],i[e+4>>2]=t,A=A+24|0}return A}function Nt(e,A){var t,r=0;if(r=i[e+632>>2])return!!(0|Pr(r,A));e:{A:{if((0|(t=i[e+600>>2]))>0){if(r=0,(A=A-t|0)-1>>>0<255)break A;break e}if((r=A-192|0)>>>0<=413)return 128&o[344+(o[r+94240|0]+e|0)|0];if(r=0,A>>>0>255)break e}r=128&o[344+(e+A|0)|0]}return r}function Ot(e,A,t){var r,n,a;return a=(r=e*e)*(r*r)*(1.58969099521155e-10*r-2.5050760253406863e-8)+(r*(27557313707070068e-22*r-.0001984126982985795)+.00833333333332249),n=r*e,t?e-(r*(.5*A-a*n)-A+.16666666666666632*n):n*(r*a-.16666666666666632)+e}function Lt(e,A){var t,r=0,n=0,a=0;W=t=W-16|0,A?(WA(t,r=A,0,0,0,(A=w(A))+81|0),r=0+i[t+8>>2]|0,A=(65536^i[t+12>>2])+(16414-A<<16)|0,a=n>>>0>r>>>0?A+1|0:A,n=i[t+4>>2],A=i[t>>2]):A=0,i[e>>2]=A,i[e+4>>2]=n,i[e+8>>2]=r,i[e+12>>2]=a,W=t+16|0}function Yt(e){var A,t=0;W=A=W-16|0,a[A+15|0]=10;e:{if(!(t=i[e+16>>2])){if(dr(e))break e;t=i[e+16>>2]}(0|t)==(0|(t=i[e+20>>2]))|10==i[e+80>>2]?Tn[i[e+36>>2]](e,A+15|0,1):(i[e+20>>2]=t+1,a[0|t]=10)}W=A+16|0}function Ht(e){var A,t=0;return t=i[e+72>>2],i[e+72>>2]=t-1|t,i[e+20>>2]!=i[e+28>>2]&&Tn[i[e+36>>2]](e,0,0),i[e+28>>2]=0,i[e+16>>2]=0,i[e+20>>2]=0,4&(t=i[e>>2])?(i[e>>2]=32|t,-1):(A=i[e+44>>2]+i[e+48>>2]|0,i[e+8>>2]=A,i[e+4>>2]=A,t<<27>>31)}function Rt(e){var A=0;e:{A:{t:{r:{if((0|(e=ZA(e)))<=268437502){if(!e)break e;if(268436479==(0|e))break A;if(268437247!=(0|e))break r;return 2}if(268437503==(0|e)|268437759==(0|e))break t;if(268439295==(0|e))break e}return-1}return 2}A=1}return A}function jt(e){var A=0,t=0,r=0;e:{if(3&(A=e))for(;;){if(!o[0|A])break e;if(!(3&(A=A+1|0)))break}for(;t=A,A=A+4|0,!(~(r=i[t>>2])&r-16843009&-2139062144););for(;t=(A=t)+1|0,o[0|A];);}return A-e|0}function Vt(e,A,t){var r,n=0,a=0,s=0;i[e+112>>2]=A,i[e+116>>2]=t,r=i[e+4>>2],n=i[e+44>>2]-r|0,i[e+120>>2]=n,i[e+124>>2]=n>>31,n=i[e+8>>2],A|t&&((0|t)>=(0|(s=(a=n-r|0)>>31))&A>>>0>=a>>>0|(0|t)>(0|s)||(n=A+r|0)),i[e+104>>2]=n}function Wt(e,A){var t,r,n=0;if(u(+e),t=0|l(1),r=0|l(0),2047!=(0|(n=t>>>20&2047))){if(!n)return 0==e?n=0:(e=Wt(0x10000000000000000*e,A),n=i[A>>2]+-64|0),i[A>>2]=n,e;i[A>>2]=n-1022,c(0,0|r),c(1,-2146435073&t|1071644672),e=+g()}return e}function Ut(e,A){var t,r,n=0;return(r=1-(n=.5*(t=e*e)))+(1-r-n+(t*(t*(t*(2480158728947673e-20*t-.001388888888887411)+.0416666666666666)+(n=t*t)*n*(t*(-11359647557788195e-27*t+2.087572321298175e-9)-2.7557314351390663e-7))-e*A))}function Kt(e,A,t){var r=0,n=0;if(A)for(;t=t-1|0,n=e,e=vn(e,A,10),r=Z,a[0|t]=n-rr(e,r,10,0)|48,n=A>>>0>9,A=r,n;);if(e)for(;A=(e>>>0)/10|0,a[0|(t=t-1|0)]=e-C(A,10)|48,r=e>>>0>9,e=A,r;);return t}function Zt(e,A){var t=0,r=0,n=0;e:if(e){for(;n=a[A+t|0],(r=i[(t<<2)+e>>2])&&(t=t+1|0,(0|n)==(0|r)););A:switch(r-34|0){case 0:case 5:break A;default:break e}if(!n)return 0}return 1}function Xt(e,A,t){var r,n=0;return W=r=W-16|0,!(64&A)&&(n=0,4259840&~A)||(i[r+12>>2]=t+4,n=i[t>>2]),i[r>>2]=n,i[r+4>>2]=0,(e=0|M(-100,0|e,32768|A,0|r))>>>0>=4294963201&&(i[56798]=0-e,e=-1),W=r+16|0,e}function qt(e,A,t){var r=0,n=0,a=0;if(!t)return 0;e:if(r=o[0|e]){for(;;){if((n=o[0|A])&&!(!(t=t-1|0)|(0|r)!=(0|n))){if(A=A+1|0,r=o[e+1|0],e=e+1|0,r)continue;break e}break}a=r}return(255&a)-o[0|A]|0}function Jt(e,A){var t,r=0;W=r=W-128|0,r=kA(r,0,128),a[r+98|0]=9,a[r+66|0]=9,a[r+34|0]=e,s[r+68>>1]=1,t=i[36125],i[r+104>>2]=t,i[r+72>>2]=t,i[r+40>>2]=i[144464+(e<<2)>>2],a[r+2|0]=9,i[r+8>>2]=t,le(0,0,r+32|0,A,0),W=r+128|0}function _t(e){var A=0,t=0,r=0;if(a[i[e>>2]]-48>>>0>=10)return 0;for(;r=i[e>>2],t=-1,A>>>0<=214748364&&(t=(0|(t=a[0|r]-48|0))>(2147483647^(A=C(A,10)))?-1:t+A|0),i[e>>2]=r+1,A=t,a[r+1|0]-48>>>0<10;);return A}function $t(e,A){var t=0;if(!(!e|i[e>>2]-48>>>0>=10)){if(i[e>>2]-48>>>0<10)for(;t=(i[e>>2]+C(t,10)|0)-48|0,i[(e=e+4|0)>>2]-48>>>0<10;);1==(0|A)&&(t=115==(0|nr(i[e>>2]))?C(t,1e3):t)}return t}function er(e){var A=0;A=1;e:{A:switch(0|UA(e)){case 30:if(A=0,160==(0|e)|8199==(0|e)|8239==(0|e))break e;return 1;case 0:if(e-9>>>0<5)return 1;if(133==(0|e))break e;break;case 28:case 29:break e}A=0}return A}function Ar(e,A,t){var r,n=0;return W=r=W-16|0,a[r+6|0]=0,a[r+7|0]=95,n=Ft(n=A,A=r+8|0)+r|0,a[n+8|0]=32,a[n+9|0]=0,Et(e,r+7|0,t)||(a[r+7|0]=32,Et(e,A,t)||Ce(e,A,t,20,0,0,0)),W=r+16|0,a[0|t]}function tr(e){var A=0,t=0;t=170;e:if(!((0|e)<170))for(;;){if((0|e)==(0|t))return p[101616+(A<<1|2)>>1];if(124==(2147483646&(A=A+2|0)))break e;if(!((0|(t=p[101616+(A<<1)>>1]))<=(0|e)))break}return 0}function rr(e,A,t,r){var n,a,s,i,o=0,l=0;return i=C(o=t>>>16|0,l=e>>>16|0),o=(65535&(l=((s=C(n=65535&t,a=65535&e))>>>16|0)+C(l,n)|0))+C(o,a)|0,Z=(C(A,t)+i|0)+C(e,r)+(l>>>16)+(o>>>16)|0,65535&s|o<<16}function nr(e){var A=0,t=0,r=0,n=0;for(A=2778;;){if((0|(t=i[1040+((r=(A+n|0)/2|0)<<4)>>2]))==(0|e))return(A=i[1048+(r<<4)>>2])||e;if(!((0|(n=(t=e>>>0>t>>>0)?r+1|0:n))<=(0|(A=t?A:r-1|0))))break}return e}function ar(e){var A=0,t=0,r=0,n=0;for(A=2778;;){if((0|(t=i[1040+((r=(A+n|0)/2|0)<<4)>>2]))==(0|e))return(A=i[1044+(r<<4)>>2])||e;if(!((0|(n=(t=e>>>0>t>>>0)?r+1|0:n))<=(0|(A=t?A:r-1|0))))break}return e}function sr(e){var A,t=0;return W=A=W-112|0,(e=0|N(0|e,0|A))>>>0>=4294963201&&(i[56798]=0-e,e=-1),t=0-i[56798]|0,e||(t=-31,16384!=(61440&i[A+12>>2])&&(t=i[A+40>>2])),W=A+112|0,t}function ir(e,A,t){var r;if(!(r=i[e+16>>2]))return i[e+36>>2]=1,i[e+24>>2]=t,void(i[e+16>>2]=A);e:{if((0|A)==(0|r)){if(2!=i[e+24>>2])break e;return void(i[e+24>>2]=t)}a[e+54|0]=1,i[e+24>>2]=2,i[e+36>>2]=i[e+36>>2]+1}}function or(e,A,t,r,n){var a;if(W=a=W-256|0,!(73728&n|(0|t)<=(0|r))){if(kA(a,255&A,(t=(r=t-r|0)>>>0<256)?r:256),!t)for(;dn(e,a,256),(r=r-256|0)>>>0>255;);dn(e,a,r)}W=a+256|0}function lr(e,A,t){var r=0;e:{if(e){if(r=i[e>>2]){ye(i[r+4>>2]),r=i[e>>2];break e}if(r=se(16),i[e>>2]=r,r)break e;A=48}return A}return i[r>>2]=0,i[r+4>>2]=_r(t),e=i[e>>2],i[e+8>>2]=0,i[e+12>>2]=0,A}function cr(e){var A=0,t=0;HA(e),Tn[i[e+12>>2]](e),1&a[0|e]||((A=i[e+52>>2])&&(i[A+56>>2]=i[e+56>>2]),(t=i[e+56>>2])&&(i[t+52>>2]=A),i[56816]==(0|e)&&(i[56816]=t),ye(i[e+96>>2]),ye(e))}function gr(e){var A=0,t=0;A=1;e:{A:{t:{r:switch((t=UA(e))-9|0){case 1:break e;case 6:case 18:break t;case 0:break r;default:break A}return(0|nr(e))!=(0|e)}return q(e,t)>>>15&1}A=0}return A}function ur(e){var A,t,r,n=0,a=0;if(r=jt(e)+1|0,n=i[33282],(0|(t=(A=i[33287])+r|0))>=i[33286]){if(!(n=Oe(n,a=t+1e3|0)))return-1;i[33286]=a,i[33282]=n}return _e(n+A|0,e,r),i[33287]=t,A}function dr(e){var A=0;return A=i[e+72>>2],i[e+72>>2]=A-1|A,8&(A=i[e>>2])?(i[e>>2]=32|A,-1):(i[e+4>>2]=0,i[e+8>>2]=0,A=i[e+44>>2],i[e+28>>2]=A,i[e+20>>2]=A,i[e+16>>2]=A+i[e+48>>2],0)}function fr(e,A,t,r){e:if(e){A:switch(A+2|0){case 0:return void(a[0|e]=t);case 1:return void(s[e>>1]=t);case 2:case 3:return void(i[e>>2]=t);case 5:break A;default:break e}i[e>>2]=t,i[e+4>>2]=r}}function pr(e,A,t,r,n,a,s,o,l){var c;W=c=W-16|0,Be(c,A,t,r,n,a,s,o,-2147483648^l),r=i[c>>2],t=i[c+4>>2],A=i[c+12>>2],i[e+8>>2]=i[c+8>>2],i[e+12>>2]=A,i[e>>2]=r,i[e+4>>2]=t,W=c+16|0}function hr(e,A){var t=0,r=0;e:if(!(!(t=o[0|e])|(0|t)!=(0|(r=o[0|A]))))for(;;){if(r=o[A+1|0],!(t=o[e+1|0]))break e;if(A=A+1|0,e=e+1|0,(0|t)!=(0|r))break}return t-r|0}function mr(e,A){var t=0,r=0,n=0;if(!(t=i[e>>2]))return 84399;if(i[e+4>>2]!=(0|A))for(;;){if(!(t=i[(r=e+8|0)>>2]))return 84399;if(n=e,e=r,i[n+12>>2]==(0|A))break}return t}function Cr(e,A,t){var r=0,n=0,a=0;e:if(t){for(;;){if(!(!(r=i[A>>2])|!(n=i[e>>2])|(0|r)!=(0|n))){if(A=A+4|0,e=e+4|0,t=t-1|0)continue;break e}break}a=n-r|0}return a}function br(e){var A,t=0,r=0;if((0|(A=i[36115]))>0)for(;;){if(!(!(r=i[144464+(t<<2)>>2])|i[r>>2]!=(0|e)))return o[r+10|0];if((0|A)==(0|(t=t+1|0)))break}return 0}function Ir(e){var A,t;return(e=(A=i[33175])+(t=e+7&-8)|0)>>>0<=A>>>0&&t||e>>>0>r.byteLength/65536<<16>>>0&&!(0|S(0|e))?(i[56798]=48,-1):(i[33175]=e,A)}function wr(e){var A=0;e:if(!((A=UA(e))>>>0>27)){if(!(1<<A&134259072)){if(6==(0|A))return 1;if(9!=(0|A))break e;return(0|ar(e))!=(0|e)}return q(e,A)>>>14&1}return 0}function kr(e,A){var t=0;return a[0|e]=A>>>24,a[0|(t=(A>>>0>16777215)+e|0)]=A>>>16,a[0|(t=t+!!(16711680&A)|0)]=A>>>8,a[0|(t=t+!!(65280&A)|0)]=A,a[t+!!(255&A)|0]=0,e}function xr(e,A){e:if((0|(e=SA(e,A)))<=268437502){if(!e|268436479==(0|e)|268437247!=(0|e))break e;return}}function vr(e){var A=0;return A=i[e>>2]-1|0,(A=a[121600+(C(0-A&A,124511785)>>>27|0)|0])||(e=i[e+4>>2],A=(e=a[121600+(C(0-e&e,124511785)>>>27|0)|0])?e+32|0:0),A}function Br(e){var A=0,t=0,r=0;e:{if(!((A=UA(e))>>>0>27)){if(t=1,116672&(r=1<<A))break e;if(134227968&r)return q(e,A)>>>10&1}t=0}return t}function yr(e){var A=0,t=0,r=0;e:{if(!((A=UA(e))>>>0>27)){if(t=1,34752&(r=1<<A))break e;if(134227968&r)return q(e,A)>>>10&1}t=0}return t}function Er(){var e,A=0;(e=i[56797])&&((A=i[e+8>>2])&&Tn[i[i[A>>2]+12>>2]](A),(A=i[e+4>>2])&&Tn[i[i[A>>2]+16>>2]](A),ye(e)),i[56797]=0,i[56797]=Le()}function Mr(e,A){var t=0;return e&&(t=rr(e,0,A,0),(e|A)>>>0<65536||(t=Z?-1:t)),!(e=se(t))|!(3&o[e-4|0])||kA(e,0,t),e}function Gr(e,A){var t,r;r=i[130128+(A-C(t=(0|A)/100|0,100)<<2)>>2],i[e+100>>2]=r,i[e+96>>2]=r,A+99>>>0>=199&&(i[e+100>>2]=i[130128+(t<<2)>>2])}function Dr(e){var A=0;(A=se(1344))&&(e=_e(A,e,1344),A=216192+(i[50758]<<4)|0,i[A>>2]=11,i[A+8>>2]=e,e=i[50758]+1|0,i[50758]=(0|e)<=169?e:0)}function Qr(e,A){var t=0;e:if(t=i[e>>2])for(;;){if(A&&!hr(A,t))break e;if(!(t=i[(e=e+8|0)>>2]))break}return i[e+4>>2]}function Tr(e){var A,t=0;return W=A=W-16|0,t=-1,Ht(e)||1==(0|Tn[i[e+32>>2]](e,A+15|0,1))&&(t=o[A+15|0]),W=A+16|0,t}function Pr(e,A){var t=0,r=0;if(A){for(;r=e,(t=i[e>>2])&&(e=r+4|0,(0|A)!=(0|t)););return t?r:0}return(Ur(e)<<2)+e|0}function zr(e,A){var t=0,r=0;if(t=p[e>>1])for(;;){if(r=r+1|0,(0|A)==(0|t))return r;if(!(t=p[(r<<1)+e>>1]))break}return 0}function Fr(e,A){var t=0,r=0;A>>>0<=31?(r=i[e>>2],t=e+4|0):(A=A-32|0,t=e),t=i[t>>2],i[e>>2]=r<<A,i[e+4>>2]=t<<A|r>>>32-A}function Sr(e,A){var t=0,r=0;t=i[e+4>>2],A>>>0<=31?r=i[e>>2]:(A=A-32|0,r=t,t=0),i[e+4>>2]=t>>>A,i[e>>2]=t<<32-A|r>>>A}function Nr(e){var A=0;e=e||1;e:{for(;;){if(A=se(e))break e;if(!(A=i[57276]))break;Tn[0|A]()}F(),d()}return A}function Or(e){return e>>>0<=131071?o[117424+(e>>>3&31|o[117424+(e>>>8|0)|0]<<5)|0]>>>(7&e)&1:e>>>0<196606}function Lr(e,A,t,r,n,a,s,o,l){i[e>>2]=A,i[e+4>>2]=t,i[e+8>>2]=r,i[e+12>>2]=65535&n|(l>>>16&32768|n>>>16&32767)<<16}function Yr(e,A,t){return t?(0|e)==(0|A)?1:!hr(i[e+4>>2],i[A+4>>2]):i[e+4>>2]==i[A+4>>2]}function Hr(e){var A=0;-31==(0|(A=0|L(-100,0|e,0)))&&(A=0|O(0|e)),A>>>0>=4294963201&&(i[56798]=0-A)}function Rr(){var e;e=se(84)+80|0,i[e>>2]=125420,i[e>>2]=125380,i[e>>2]=125400,V(0|e,125512,9),d()}function jr(e){var A,t;return A=Gt(e),t=Gt(e),Gt(e)<<16&16711680|t<<8&65280|255&A|Gt(e)<<24}function Vr(e){var A=0;return e?(A=1,e-9472>>>0<160|e-65529>>>0<7||(A=er(e)),A):0}function Wr(e,A){var t;return t=A>>31,i[e+76>>2],function(e,A,t){return i[e+20>>2]!=i[e+28>>2]&&(Tn[i[e+36>>2]](e,0,0),!i[e+20>>2])||(i[e+28>>2]=0,i[e+16>>2]=0,i[e+20>>2]=0,Tn[i[e+40>>2]](e,A,t,0),(0|Z)<0)?-1:(i[e+4>>2]=0,i[e+8>>2]=0,i[e>>2]=-17&i[e>>2],0)}(e,A,t)}function Ur(e){var A=0,t=0;for(t=e;t=(A=t)+4|0,i[A>>2];);return A-e>>2}function Kr(e,A){return a[0|e]=A,a[e+4|0]=0,a[e+3|0]=A>>>24,a[e+2|0]=A>>>16,a[e+1|0]=A>>>8,e}function Zr(e,A){var t=0;return(-1>>>(t=31&A)&e)<<t|((t=e)&-1<<(e=0-A&31))>>>e}function Xr(e,A){var t=0;return 73==(0|e)&&(t=305,o[A+173|0])||(t=nr(e)),t}function qr(e){i[36114]!=(0|e)&&(i[36115]=0,BA(e),i[36114]=e,i[36115]=i[36115]+1)}function Jr(e){return e?i[34460]+e|0:(An(85328,20,i[30450]),i[32320])}function _r(e){var A,t;return(t=se(A=jt(e)+1|0))?_e(t,e,A):0}function $r(){var e;i[33287]=0,(e=i[33282])&&(ye(e),i[33286]=0,i[33282]=0)}function en(e,A,t){var r;W=r=W-16|0,i[r+12>>2]=t,mn(e,A,t),W=r+16|0}function An(e,A,t){i[t+76>>2],e=ot(e,A,t)}function tn(e,A){return A?e<<24|(65280&e)<<8|e>>>8&65280|e>>>24:e}function rn(e){return e-8212>>>0>=12?zr(93856,e):1}function nn(e){var A=0;e&&((A=i[e+688>>2])&&ye(A),ye(e))}function an(e){return(0|e)<=127?cn(87712,e):0}function sn(e){return!(e=o[0|e]?1:Dt(e,e+1|0,3))}function on(e){(e=27!=(0|(e=0|B(0|e)))?e:0)&&(i[56798]=e)}function ln(e,A,t){return e|=0,A|=0,0|Tn[0|(t|=0)](e,A)}function cn(e,A){return e=_A(e,A),o[0|e]==(255&A)?e:0}function gn(e,A){return lA(e,A,2147483647),Z=K,U}function un(e){return e?31-w(e-1^e)|0:32}function dn(e,A,t){32&o[0|e]||ot(A,t,e)}function fn(e,A,t){a[(zA(e,A,t)+t|0)-1|0]=0}function pn(e){return Mt(e,188776,189328)}function hn(e,A){A|=0,i[8+(e|=0)>>2]=A}function mn(e,A,t){return EA(e,A,t,0,0)}function Cn(e){return i[12+(e|=0)>>2]}function bn(e){return i[16+(e|=0)>>2]}function In(e){return i[20+(e|=0)>>2]}function wn(e){return i[8+(e|=0)>>2]}function kn(e){return i[4+(e|=0)>>2]}function xn(e){return i[(e|=0)>>2]}function vn(e,A,t){return lA(e,A,t)}function Bn(e){(e|=0)&&ye(e)}function yn(e,A){rt(jt(e)+e|0,A)}function En(e){return 0|e}function Mn(e){return 0}function Gn(e){ye(e|=0)}function Dn(e){}n(A=o,1024,""),n(A,45536,"HhYWFhgWFhYXExYaFhIWFg4ODg4ODg4ODg4WFhoaGhYWCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoXFhMZERkGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBhcaExo="),n(A,45664,""),n(A,81428,"ggAAAAAAAAIAAAAAAAAAAgAAAAAAAAAC"),n(A,81475,"AgAAAAAAACAAAAAAAAAAIA=="),n(A,81506,"IA=="),n(A,81522,"IAAAAAAAAAAg"),n(A,81618,"IA=="),n(A,81634,"IA=="),n(A,81650,"IAAAAAAAAAAg"),n(A,81682,"IAAAAAAAAAAgAAAAAAAAACAAAAAAAIAAAAAAAAAAgA=="),n(A,81728,"gAAAAAAAAACAAAAAAAAAAIA="),n(A,81760,"gAAAAAAAAACA"),n(A,81904,"gAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAAU"),n(A,81961,"FAAAAAAAAAAU"),n(A,81985,"FAAAAAAAAAAE"),n(A,82009,"BAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA="),n(A,82097,"EAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA="),n(A,82169,"EAAAAAAAAAAQAAAAAAAAABAAAAAAAACA"),n(A,82224,"gAAAAAAAAACA"),n(A,82272,"gAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),n(A,82353,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),n(A,82393,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAQAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAABAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),n(A,82625,"BAAAAAAAAAAE"),n(A,82649,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAQAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),n(A,83033,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),n(A,83097,"BAAAAAAAAAAE"),n(A,83121,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAQAAAEAAAAAFAAAAQAAAAgEAAABAAAAAQQAAAAAAAACBAAAAAAAAAgEAAAAAAAAAAQAAAAAAAAABAAAAQAAAAgEAAAAAAAAAQQAAAAAAAAARAAAAAAAAAAEAAAAAAAAAAQA=="),n(A,83288,"QA=="),n(A,83303,"AkAAAAAAAAAQQAAAEAAAAIBAAAAAAAAACEA="),n(A,83352,"QAAAAAAAABBAAAAQAAAAgAAg"),n(A,83379,"gAAAAABAAACQggAAIEAAAJAAAAAAAAAAgAAAAABAAACQggAAIEAAAJCCAAAgAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAQAAAkIIAACBAAACQggAAIEAAAJCCAAAgQAAAkAAAAEBAAACQAAAAYEAAAJCCAABgQAAAkIIAACBAAACQggAAIEAAAJCCAAAgQAAAkIIAACBAAACQggAAIAAAAIAAAAAEAAAAAAAAAIAAAAAAAAAACAAAAAAAAAAEAAAAAAAAACAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAAkAAAAAAAAAQQAAAEAAAAIBAAAAAAAAABEAAAAAAAAAIAAAAgIIAAAAAAACAgAAAAAAAAIAAAAAAAAAAgIYAAAAAAACAhgAAAAAAAICAAAAAAAAAgIAAAAAAAACAggAAAAAAAICAAAAAAAAAgIAAAAAAAACAgAAAAAAAAICAAAAAAAAAgJIAAACAAACAggAAAIAAAICCAAAAAAAAgIIAAAAAAACAggAAAIAAAICCAAAAAAAAgIIAAAAAAACAggAAAAAAAICAAAAAAAAAgIAAAAAAAACAggAAAAAAAICGAAAAAAAAgIIAAAAAAACAhgAAAAAAAICCAAAAAAAAgIIAAAAAAACAggAAAAAAAICCAAAAAAAAgIAAAAAAAACAggAAAAAAAICAAAAAAAAAgIIAAAAAAACAggAAAAAAAICCAAAAAAAAgIAAAAAAAACAggAAAAAAAICGAAAAAAAAgJIAAAAAAACAhgAAAAAAAICAAAAAAAAAgIAAAAAAAACAhg=="),n(A,83999,""),n(A,93904,"ICAgICAgICAgICYlKyNTRFpBTCEgQD9KTktWP1RYP1dBQkNIRkdZPT0sLCcqICAAIAAhACIAsAIkACUA5gDIAigAKQB+AisAzAItAC4ALwBSAjEAMgBcAjQANQA2ADcAdQI5ANACsgI8AD0APgCUAlkCUQKyA+cA8ABbAkYAYgInAWoCXwJLAGsCcQJLAVQCpgNjAoACgwK4A4oCjAJTAccD+ACSAioDXABdAF4AXwBgAGEAYgBjAGQAZQBmAGECaABpAGoAawBsAG0AbgBvAHAAcQByAHMAdAB1AHYAdwB4AHkAegB7AHwAfQADA38APT0sLCcnAAMCBAUGBxoAAAAAAQECAwMEBQYHBwgJCgsAAAEBAgIDAwQFBgcHCAkKAAABAgMDAwQFBgcHBwgJClNldFdvcmRTdHJlc3MA5ADrAO8A9gD8AP8AAAAAAAAAYWFhYWFhYWNlZWVlaWlpaWRub29vb28Ab3V1dXV5dHNhYWFhYWFhY2VlZWVpaWlpZG5vb29vbwBvdXV1dXl0eWFhYWFhYWNjY2NjY2NjZGRkZGVlZWVlZWVlZWVnZ2dnZ2dnZ2hoaGhpaWlpaWlpaWlpaWlqamtra2xsbGxsbGxsbGxubm5ubm5ubm5vb29vb29vb3JycnJycnNzc3Nzc3NzdHR0dHR0dXV1dXV1dXV1dXV1d3d5eXl6enp6enpzYmJiYgAAb2NjZGRkZGRlZWVmZmdnaGlpa2tsbG1ubm9vb29vcHB5AABzc3R0dHR1dXV2eXl6enp6enp6AAAAd3R0dGtkZGRsbGxubm5hYWlpb291dXV1dXV1dXV1ZWFhYWFhYWdnZ2dra29vb296empkZGRnZ3d3bm5hYWFhb29hYWFhZWVlZWlpaWlvb29vcnJycnV1dXVzc3R0eXloaG5kb296emFhZWVvb29vb29vb3l5bG50amRxYWNjbHRzegAAYnV2ZWVqanFxcnJ5eWFhYWJvY2RkZWVlZWVl"),n(A,94846,"TG9va3VwRGljdDIAAAAAAAAAgACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAAoQCiAKMApAClAKYApwCoAKkAqgCrAKwArQCuAK8AsACxALIAswC0ALUAtgC3ALgAuQC6ALsAvAC9AL4AvwDAAMEAwgDDAMQAxQDGAMcAyADJAMoAywDMAM0AzgDPANAA0QDSANMA1ADVANYA1wDYANkA2gDbANwA3QDeAN8A4ADhAOIA4wDkAOUA5gDnAOgA6QDqAOsA7ADtAO4A7wDwAPEA8gDzAPQA9QD2APcA+AD5APoA+wD8AP0A/gD/AIAAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAAQB2AJBAaQAPQFaAacAqABgAV4BZAF5Aa0AfQF7AbAABQHbAkIBtAA+AVsBxwK4AGEBXwFlAXoB3QJ+AXwBVAHBAMIAAgHEADkBBgHHAAwByQAYAcsAGgHNAM4ADgEQAUMBRwHTANQAUAHWANcAWAFuAdoAcAHcAN0AYgHfAFUB4QDiAAMB5AA6AQcB5wANAekAGQHrABsB7QDuAA8BEQFEAUgB8wD0AFEB9gD3AFkBbwH6AHEB/AD9AGMB2QKAAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAAmAdgCowCkAP3/JAGnAKgAMAFeAR4BNAGtAP3/ewGwACcBsgCzALQAtQAlAbcAuAAxAV8BHwE1Ab0A/f98AcAAwQDCAP3/xAAKAQgBxwDIAMkAygDLAMwAzQDOAM8A/f/RANIA0wDUACAB1gDXABwB2QDaANsA3ABsAVwB3wDgAOEA4gD9/+QACwEJAecA6ADpAOoA6wDsAO0A7gDvAP3/8QDyAPMA9AAhAfYA9wAdAfkA+gD7APwAbQFdAdkCgACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAABAE4AVYBpAAoATsBpwCoAGABEgEiAWYBrQB9Aa8AsAAFAdsCVwG0ACkBPAHHArgAYQETASMBZwFKAX4BSwEAAcEAwgDDAMQAxQDGAC4BDAHJABgBywAWAc0AzgAqARABRQFMATYB1ADVANYA1wDYAHIB2gDbANwAaAFqAd8AAQHhAOIA4wDkAOUA5gAvAQ0B6QAZAesAFwHtAO4AKwERAUYBTQE3AfQA9QD2APcA+ABzAfoA+wD8AGkBawHZAoAAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAAEEAgQDBAQEBQQGBAcECAQJBAoECwQMBK0ADgQPBBAEEQQSBBMEFAQVBBYEFwQYBBkEGgQbBBwEHQQeBB8EIAQhBCIEIwQkBCUEJgQnBCgEKQQqBCsELAQtBC4ELwQwBDEEMgQzBDQENQQ2BDcEOAQ5BDoEOwQ8BD0EPgQ/BEAEQQRCBEMERARFBEYERwRIBEkESgRLBEwETQROBE8EFiFRBFIEUwRUBFUEVgRXBFgEWQRaBFsEXASnAF4EXwSAAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAD9//3//f+kAP3//f/9//3//f/9//3/DAatAP3//f/9//3//f/9//3//f/9//3//f/9//3/Gwb9//3//f8fBv3/IQYiBiMGJAYlBiYGJwYoBikGKgYrBiwGLQYuBi8GMAYxBjIGMwY0BjUGNgY3BjgGOQY6Bv3//f/9//3//f9ABkEGQgZDBkQGRQZGBkcGSAZJBkoGSwZMBk0GTgZPBlAGUQZSBv3//f/9//3//f/9//3//f/9//3//f/9//3/gACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAAGCAZIKMArCCvIKYApwCoAKkAegOrAKwArQD9/xUgsACxALIAswCEA4UDhgO3AIgDiQOKA7sAjAO9AI4DjwOQA5EDkgOTA5QDlQOWA5cDmAOZA5oDmwOcA50DngOfA6ADoQP9/6MDpAOlA6YDpwOoA6kDqgOrA6wDrQOuA68DsAOxA7IDswO0A7UDtgO3A7gDuQO6A7sDvAO9A74DvwPAA8EDwgPDA8QDxQPGA8cDyAPJA8oDywPMA80DzgP9/4AAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAP3/ogCjAKQApQCmAKcAqACpANcAqwCsAK0ArgCvALAAsQCyALMAtAC1ALYAtwC4ALkA9wC7ALwAvQC+AP3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f8XINAF0QXSBdMF1AXVBdYF1wXYBdkF2gXbBdwF3QXeBd8F4AXhBeIF4wXkBeUF5gXnBegF6QXqBf3//f8OIA8g/f+AAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAChAKIAowCkAKUApgCnAKgAqQCqAKsArACtAK4ArwCwALEAsgCzALQAtQC2ALcAuAC5ALoAuwC8AL0AvgC/AMAAwQDCAMMAxADFAMYAxwDIAMkAygDLAMwAzQDOAM8AHgHRANIA0wDUANUA1gDXANgA2QDaANsA3AAwAV4B3wDgAOEA4gDjAOQA5QDmAOcA6ADpAOoA6wDsAO0A7gDvAB8B8QDyAPMA9AD1APYA9wD4APkA+gD7APwAMQFfAf8AgACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAABAESASIBKgEoATYBpwA7ARABYAFmAX0BrQBqAUoBsAAFARMBIwErASkBNwG3ADwBEQFhAWcBfgEVIGsBSwEAAcEAwgDDAMQAxQDGAC4BDAHJABgBywAWAc0AzgDPANAARQFMAdMA1ADVANYAaAHYAHIB2gDbANwA3QDeAN8AAQHhAOIA4wDkAOUA5gAvAQ0B6QAZAesAFwHtAO4A7wDwAEYBTQHzAPQA9QD2AGkB+ABzAfoA+wD8AP0A/gA4AYAAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAAEOAg4DDgQOBQ4GDgcOCA4JDgoOCw4MDg0ODg4PDhAOEQ4SDhMOFA4VDhYOFw4YDhkOGg4bDhwOHQ4eDh8OIA4hDiIOIw4kDiUOJg4nDigOKQ4qDisOLA4tDi4OLw4wDjEOMg4zDjQONQ42DjcOOA45DjoO/f/9//3//f8/DkAOQQ5CDkMORA5FDkYORw5IDkkOSg5LDkwOTQ5ODk8OUA5RDlIOUw5UDlUOVg5XDlgOWQ5aDlsO/f/9//3//f+AAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAAdIKIAowCkAB4gpgCnANgAqQBWAasArACtAK4AxgCwALEAsgCzABwgtQC2ALcA+AC5AFcBuwC8AL0AvgDmAAQBLgEAAQYBxADFABgBEgEMAckAeQEWASIBNgEqATsBYAFDAUUB0wBMAdUA1gDXAHIBQQFaAWoB3AB7AX0B3wAFAS8BAQEHAeQA5QAZARMBDQHpAHoBFwEjATcBKwE8AWEBRAFGAfMATQH1APYA9wBzAUIBWwFrAfwAfAF+ARkggACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAAAh4DHqMACgELAQoepwCAHqkAgh4LHvIerQCuAHgBHh4fHiABIQFAHkEetgBWHoEeVx6DHmAe8x6EHoUeYR7AAMEAwgDDAMQAxQDGAMcAyADJAMoAywDMAM0AzgDPAHQB0QDSANMA1ADVANYAah7YANkA2gDbANwA3QB2Ad8A4ADhAOIA4wDkAOUA5gDnAOgA6QDqAOsA7ADtAO4A7wB1AfEA8gDzAPQA9QD2AGse+AD5APoA+wD8AP0AdwH/AIAAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAKEAogCjAKwgpQBgAacAYQGpAKoAqwCsAK0ArgCvALAAsQCyALMAfQG1ALYAtwB+AbkAugC7AFIBUwF4Ab8AwADBAMIAwwDEAMUAxgDHAMgAyQDKAMsAzADNAM4AzwDQANEA0gDTANQA1QDWANcA2ADZANoA2wDcAN0A3gDfAOAA4QDiAOMA5ADlAOYA5wDoAOkA6gDrAOwA7QDuAO8A8ADxAPIA8wD0APUA9gD3APgA+QD6APsA/AD9AP4A/wCAAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAAEAQUBQQGsIB4gYAGnAGEBqQAYAqsAeQGtAHoBewGwALEADAFCAX0BHSC2ALcAfgENARkCuwBSAVMBeAF8AcAAwQDCAAIBxAAGAcYAxwDIAMkAygDLAMwAzQDOAM8AEAFDAdIA0wDUAFAB1gBaAXAB2QDaANsA3AAYARoC3wDgAOEA4gADAeQABwHmAOcA6ADpAOoA6wDsAO0A7gDvABEBRAHyAPMA9ABRAfYAWwFxAfkA+gD7APwAGQEbAv8AgACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAABAEFAUEBrCAeIGABpwBhAakAGAKrAHkBrQB6AXsBsACxAAwBQgF9AR0gtgC3AH4BDQEZArsAUgFTAXgBfAHAAMEAwgACAcQABgHGAMcAyADJAMoAywDMAM0AzgDPABABQwHSANMA1ABQAdYAWgFwAdkA2gDbANwAGAEaAt8A4ADhAOIAAwHkAAcB5gDnAOgA6QDqAOsA7ADtAO4A7wARAUQB8gDzAPQAUQH2AFsBcQH5APoA+wD8ABkBGwL/AP3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9/wEJAgkDCQUJBgkHCQgJCQkKCQsJDgkPCRAJDQkSCRMJFAkRCRUJFgkXCRgJGQkaCRsJHAkdCR4JHwkgCSEJIgkjCSQJJQkmCScJKAkpCSoJKwksCS0JLgkvCV8JMAkxCTIJMwk0CTUJNgk3CTgJOQkgAD4JPwlACUEJQglDCUYJRwlICUUJSglLCUwJSQlNCTwJZAn9//3//f/9//3/IAAwADEAMgAzADQANQA2ADcAOAA5AP3//f/9//3//f8CAAAAAAAAAAEAAAADAAAA//36+Pb08vDu7Oro5uTi4N7c2tjW1NLQzszKyMbEwsC+vLq4trSysK6sqqimpKKgnpyamJaUkpCOjIqIhoSCgH58enh2dHJwbmxqaGZkYmBeXFpYVlRSUE5MSkhGREJAPjw6ODY0MjAuLCooJiQiIB4cGhgWFBIQDgwKCAYEAgAAAgQGCAoMDhASFBYYGhweICIkJigqLC4wMjQ2ODo8PkBCREZISkxOUFJUVlhaXF5gYmRmaGpsbnBydHZ4enx+gIKEhoiKjI6QkpSWmJqcnqCipKaoqqyusLK0tri6vL7AwsTGyMrMztDS1NbY2tze4OLk5ujq7O7w8vT2+Pr9///06uDWzMO6saifl4+Hf3hxamNcVlBKRD85NC8rJiIeGhcTEA0LCAYEAgEAAAAAAAAAAQIDBAUHCAoMDhATFRcaHR8iJSgsLjAyNDY5Oz1AQkVHSkxPUVRXWl1fYmVoa25xdHh7foGFiIuPkpaZnaCkqKyvs7e7v8PHy8/T19vgz8zJxsPAvbm0sKunopyXkoyGgXt1b2ljXVdQSkQ+ODMtJyIcFxINCAQCAgEAAAAAAAEBAgMEBQcICgwNDxIUFhkbHiEkJyotMDQ2ODo8P0FDRkhLTVBSVVhaXWBjZmlsb3J1eHt+gYWIi4+SlpmdoKSorK+zt7u/w8fLz9PX2+D/+fTu6eTf2tXQy8bBvbizr6qmoZ2ZlZCMiISAfXl1cW5qZ2NgXVlWU1BNSkdEQT48OTc0Mi8tKygmJCIgHhwaGRcVFBIRDw4NDAoJCAcGBQUEAwICAQE="),n(A,99845,"AQECAgMEBAUGBwgJCgsMDg8QEhMVFxgaHB4g0M7NzMrIx8XDwcC9u7i1s7CtqqejoJ2ZlpKPi4eEgHx4dHBtaWVhXVlVUU1KRkI+Ozc0MS8tKigmJCIgHhwaGRcVFBIRDw4NDAoJCAcGBQUEAwICAQE="),n(A,99973,"AQECAgMEBAUGBwgJCgsMDg8QEhMVFxgaHB4gmJmZmpydn6Gkp6mssLO2ur7BxcnN0dTY3N/j5urt8PL19/n7/P3+/v////////79+/r49vPx7uzp5uTg3drX09DMyMTAvLi0sKyno5+alpGNiIR/e3ZybWllYFxYVFBMSERAPDk1Mi8rKCYjIB0aFxUSDw0KCAcFAwIBAAAAAAD+///////+/fz6+Pb08e7r6OXh3trW0s3JxL+6trCrpqGclpGLhoB7dW9qZF9ZVE9JRD86NTArJiIdGRURDQoHBAMBAAAAAAAAAAABAQIEBQcJCw0QEhUYGx4iJSktMTU6PkNITFFXW15iZWhrbnF0dnh7fH6AgYKDg4SEg4OCgXJycXFwb21samhmZGFfXFpXVFFOS0hFQj87ODUyLywpJiMgHRsYFhQSEA4MCwoJCAcHBwcHBgUFBQUFBQUFBQYHBwgJCgwNDxASFBYYGx0gIyYpLC8zNzs/Q0dMUVZbYGVqb3R5f4SJj5Wboaets7rAx87V3OPq8fX3+vz9/v///v79/fz7+/r6+fj49/f29vX09PPz8vLx8PDv7u7t7Ovq6uno5+bl5OPi4eDe3dzb2djW1dPS0M7My8nHxcPAvry5t7Wyr62qp6ShnpqXlJCNiYWBfXl1cW1oZGFeW1dUUU1KRkNAPDk1Mi4qJyMfHBgUEQ0LCQcFBAMCAQAAAAAAAAAAAQEBAgIDAwQEBQYGBwgICQoLDAwNDg8QERITFBYXGBkbHB0fICIjJSYoKSstLzAyNDY4Ojw+QEJER0lLTlBSVVdaXV9iZWdqbXBzdnl8f4KGiYyQk5aanaCjpqmsr7K1uLu+wcTHys3Q09bZ3N/i5Ofp7O7w8vT2+Pr7/X9/f4CBg4SHiYyPkpaZnaGlqq6yt7vAxcnN0tba3uLm6u3w8/X4+vv8/f7+/fz7+ff08Ozn4tzVzsa9tKmekoiCfXdybGZgWlROSUI8NzItKCQfGxgUEQ4MCQcGBQQEBAQFBggKDRAUGB0jKS83PkdQWmRwfIOFiIqMjo+RkpOTAEAIAEYSAAAAAAAAGAwAAARQEgZOFgAAAAAAACI0AAAEWBYGUhYAAAAAAAAiQAAAAFwIAFxQAAAAAAAATAgBAABWBABeQgAAAAAAACIKAAAAPgoAPhQAAAAAAAAcEAAABEQSBkQWAAAAAAAAHiwAAAZAEABCIAAAAAAAACASAAACRC4AKiAAAAAAAAAuOgAABE4YBkgWAAAAAAAAKjQAAARYIgBAIAAAAAAAAC5SAAAAOAwAOBQAAAAAAAAYDAAAAEYSAEYYAAAAAAAAIBQAAAkAAAAJAAAAEAAAABAAAAAQAAAAFwAAADcAAAAgAAAAACgYCAAKNCAUCgYmGA4EAAYAAAAHAAAACQAAAAkAAAAUAAAAFAAAABQAAAAZAAAA5iAUCA=="),n(A,101072,"ZgNmAWYCpgSmAiYEpoooAmoDagFqAqoCbgNuAW4CrgIpALMEdAN0AXQCtAS0AgAAdAR6A3oBegK6An4BOQC+AgAApgMAAKYBAADmAwAAaAEAAGgCAAAoAwAA6AEAAOkBAABpBAAAqgMAAKoBAAAqAwAA6gMAAOoBAABsAgAArAEAACwDAAAsAgAAbQIAAG0EAACuBAAArgMAAK4BAADuAwAALgAAAO6LAABvAgAAMAIwAAAAcQEAADECAADxAQAAMQMAAHEEAABzAQAAMwIAAPMBMwAAADMAAAC0AwAAtAEAAPQCAAC0igAAdwEAADcCAAD3AQAAeAEAAHgCAAA4AgAA+AEAADkCAAD5AQAAeQQAALoEAAC6AwAAugEAADoEAAD6AgAA+gMAAHwCAAB+AgAAAAB/AQAAPwMAAP8BOACmAAEAgQBnBQAAKAEpBWkF6gAAAEIFAADDAEMdAADvBGwFLABsAAQAAACtAG0FAADuBAUAbgCxBPEEMQXxj7IAAAByBQAAMwVzAPQEtJoAAAgAtwCOADcVAAA3BQAAzQB3ALcIOAUAAG8FyQAJAbkAOQX6BAoAewW7ALwAvgB+AD8FPwEAAAsBAADMAIwAAAAAAGcAAABsDW0ALwGwAHEAdgVMBEwc6Y8AAOnPOY4AADnO"),n(A,101586,"sQNZAlsCswO5A1MByQPGA4MCxQOSApQCfgJ8AgAAqgBhgLIAMoCzADOAuQAxgLoAb4CwAmiAsQJmgrICaoCzAnKAtAJ5grUCe4K2AoGCtwJ3gLgCeYDAApSCwQKVguACY4LhAmyA4gJzgOMCeIBwIDCAcSBpgHQgNIB1IDWAdiA2gHcgN4B4IDiAeSA5gHogK4B7IC2AfCA9gH0gKIB+ICmAfyBugIAgMECBIDFAgiAyQIMgM0CEIDRAhSA1QIYgNkCHIDdAiCA4QIkgOUCKICtAiyAtQIwgPUCNIChAjiApQJAgYUCRIGVAkiBvQJMgeECUIFlClSBoQJYga0CXIGxAmCBtQJkgbkCaIHBAmyBzQJwgdEAAAAAAaXhjbXZsZA=="),n(A,101888,"AQAAAAoAAABkAAAA6AMAAAUAAAAyAAAA9AEAAAAXCgkYExgY"),n(A,101936,"///////9+fXy7uvo5OHe2tjV0s/MycbEwb+8ure1s7CurKmopaOhn56bmZiWlJKRj42LiYiHhYOCgX9+fHt6eHd2dXNycXBvbm1ramloZ2ZlZGNiYWBfXl1cW1pZWVhXVlVUU1JSUVBQT05NTExLS0pJSEdHRkVFRENDQkJBQEA/Pj49PTw7Ozo6OTk4ODc2NjU1NDQ0MzIyMTEwMC8vLi4uLS0sLCwrKyopKCgoJycnJiYmJSUlJCQjIyMjIiIiISEhICAfHx8eHh4dHR0dHBwbGxsbGhoaGhkZGRgYGBgXFxcXFhYWFRUVFRQUFBQTExMSEhERERAQEBAQEA8PDw8ODg4NDQ0MDAwMCwsLCwoKCgkJCQgICAAAAAAAAAAAeHl4d3d2dnV0dHNycXBwb29ubWxrampoZ2dmZmZlZWNiYmFgYF9eXVtaW1pZWFZVVlVVVFJRUE9NTk5MTUtLSklHSEZFRUVDQUA/Pz89PTs7Ozo4OTo4NjU0NDU0NDIwLy8tLi0="),n(A,102336,"FhYWFhYWFhUVFRUUFBMTEhEQDw8PDw8PDwAAAAAAAABkeGRpZG5uZF9kaXhpbn2Ch3N9ZGl4S2RLaXhVS2RpeFVpX3N4ZF9kbnhfaWRzeGRkZGl4ZGlfc3huX2RpeGRpaXp9bmlkaXhkaWl6fW5pZGl4X2lkc3huZGRkeGRkZGRkZGRk"),n(A,102480,"ZJZkaW5zbm5uZGmWaW59h4xzh2RpllppWnqHZFpkaZZkaWR6h2RkZGmWZGlpc4duaWRplmRpaXqCeH1kaZZkaW56fXNuZGmWZGlpeod4aWRplmRpaXOHbmlkZGRkZGRkZGRkZA=="),n(A,102592,"bnhkbm5ubm5ubm54ZG5ubm5ubm5ueGRuZG5ubmRubnhkbm5ubm5ubm54ZG5ubm5ubm5ueGRubm5ubm5ubnhkbm5ubm5ubm54ZG5ubm5ubm5ueGRubm5ubm5ubnhkbm5ubm5ubg=="),n(A,102708,"rwAAAGQAAAAyAAAAMg=="),n(A,102744,"ZA=="),n(A,102764,"MjIoRlpkZGRGboeWZGRLZHiWAAAAAAAABwAAAA4AAAAVAAAAKAAAAFAAAAAAAAAAAFNBUFIAQwAAAAAARgAAAAAAAAABAAAAAgAAAAQAAAAPAAAAAAEAAAEBAAEBAgQAAAAAAPMAEAEAAQABAAEAAQAB8ADwAPA="),n(A,102898,"QABaAG4AgACPAJwAqQC1AMAAygDUAN0A5gDvAPcAAAEHAQ8BFgEeASUBLAEyATkBQAFGAUwBUgFYAV4BZAFqAW8BdQF6AYABhQGKAY8BlAGZAZ4BowGoAa0BsgG2AbsBwAHEAckBzQHRAdYB2gHeAeMB5wHrAe8B8wH3AfsBAAIDAgcCCwIPAhMCFwIbAh8CIgImAioCLQIxAjUCOAI8AkACQwJHAkoCTgJRAlQCWAJbAl8CYgJlAmkCbAJvAnMCdgJ5AnwCgAKDAoYCiQKMAo8CkgKWApkCnAKfAqICpQKoAqsCrgKxArQCtwK6Ar0CwALCAsUCyALLAs4C0QLUAtYC2QLcAt8C4gLkAucC6gLtAu8C8gL1AvcC+gL9AgADAgMFAwcDCgMNAw8DEgMVAxcDGgMcAx8DIQMkAycDKQMsAy4DMQMzAzYDOAM7Az0DQANCA0QDRwNJA0wDTgNRA1MDVQNYA1oDXQNfA2EDZANmA2gDawNtA28DcgN0A3YDeQN7A30DgAOCA4QDhgMAAAGqAqytAwQFsLGys7S0tgYHCLkJCrwMDQ4PEBESYWJjZGVmZ2hpamtsbW5vcHFyc3R1"),n(A,103360,"YAYAAPAGAABmCQAA5gkAAGYKAADmCgAAZgsAAOYLAABmDAAA5gwAAGYNAABQDgAA0A4AACAPAABAEAAAkBA="),n(A,103440,"5gDmAOYA5gAAAAAA5gDmAL4AqgC+AMgAAAAAAL4A8AC+AL4A0gDSAAAAAADSANIAyADIANIA0gAAAAAA5gDmAOYA5gDwAPAAAAAAAAQBBAGqAIwA3ADcAAAAAAD6AA4BoACMAMgAjAAAAAAA8ACgALQAtADSANIAAAAAAOYA8ACqANwAtAC0AAAAAAD6AA4BlgCCAMgAyAAAAAAADgEOAbYAjADcANwAAAAAAPgAEwGbALQA0gDSAAAAAAAOASwBwwMAAAAAAABsAAAAAAAAAKAAkQCbAJYAAAAAAMgA9QAnAAAAtwAAAAAAAADCugAAyADIAMgAyAAAAAAA0gDmAAABAgMEBQYHCAkKCwwNDg8QERITFBUWFxgZGgAAAAAAABscHR4fICEiIyQlJicoKSorAAAs"),n(A,103790,"LQAAAAAAAAAu"),n(A,103816,"Lw=="),n(A,103833,"MAAAAAAAMQ=="),n(A,103856,"Mg=="),n(A,103868,"MwAAAK0AAQBABgEADCAtAAAAAAC+AL4A0gDSAAAAAADmAPoAoACWAMgAyAAAAAAA+gAEAbkAwwDDAL4AAAAAANIA3AD6AMgA+gD6AAAAAAD6APoAMjM0Njk6PD0+P0BBQkNERkdJSktMTU5PUFFSU1RWAACWAIwAtAC0AAAAAADIAMgAbA=="),n(A,104016,"oADIALQAtAAAAAAA3ADwALQAoADIAMgAAAAAAPAA+gBjAAAAZgAAAGgAAABrAAAAcAAAAHQAAAB4AAAA/g=="),n(A,104096,"oACMAJYApQAAAAAA2gAxAZEAkQCqAKAAAAAAAEoBXgEuAAAALAAAACcAAADIAg=="),n(A,104160,"MTIzNTY3OTo7PD4/QEFCREVGR0hJSktMTU5PUFFSU1RW"),n(A,104208,"vgC0AOYA5gAAAAAA+gD6ABESExQWFxkaGxwdHyAhIiQlJicoKSosc3uDmwAAAAAAtAC0AL4AtAAAAAAA5gDwALQAtAC0AKAAAAAAAOYAtABABAAAMAQAADUEAAA4BAAAOQQAAD4EAABDBAAASwQAAE0EAABOBAAATwQAAFAEAABRBAAAVgQAAFcEAABdBAAAXgQ="),n(A,104368,"tACgAMgAyAAAAAAA3ADmAKAAhwDSANIAAAAAAAQBGAGgAIwAyADIAAAAAADcAOYAyADIAMgAyAAAAAAAyADIAKAAvgCvAK8AAAAAAMgA0gCqAHMA0gDwAAAAAAAEARgBqgCqALQAtAAAAAAA8AAEAZYAtADIAMgAAAAAANIA+gCWAJYAtAC0AAAAAAAsASwBoACHANwA3AAAAAAA+gAYAaAAqgDIAMgAAAAAAEABVAG0AKAA8ADwAAAAAAAEAQQBvgC0AMgA5gAAAAAA8AD6AJYAlgC0ALQA0gDmAOYA8ABhAAAA4AAAAOEAAACjHgAA4wAAAKEeAAADAQAAsR4AAK8eAACzHgAAtR4AALceAADiAAAApx4AAKUeAACpHgAAqx4AAK0eAABlAAAA6AAAAOkAAAC7HgAAvR4AALkeAADqAAAAwR4AAL8eAADDHgAAxR4AAMceAABpAAAA7AAAAO0AAADJHgAAKQEAAMseAABvAAAA8gAAAPMAAADPHgAA9QAAAM0eAAD0AAAA0x4AANEeAADVHgAA1x4AANkeAAChAQAA3R4AANseAADfHgAA4R4AAOMeAAB1AAAA+QAAAPoAAADnHgAAaQEAAOUeAACwAQAA6x4AAOkeAADtHgAA7x4AAPEeAAB5AAAA8x4AAP0AAAD3HgAA+R4AAPUe"),n(A,104896,"5gCWAOYA5gDmAAAA8AD6AAAAAAAnAAAAAAAAAAABAgM="),n(A,104945,"AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRo="),n(A,105072,"GxwdAAAeHyAhIiMkACUmAAAAACcAACgAKQAqACsAAAAAAAAsAC0ALgAAAAAALwAAADAAAAAAAAAAMQ=="),n(A,105170,"MgAz"),n(A,105195,"NAAAAAAANQA2"),n(A,105226,"NwA4ADkArQABAAwgAQ=="),n(A,105249,"AQIDAAQAAQIDAAQFBgIDAAQFBwEDAAQICQoDAAAICAoDAAALCwsLAAAMDAwMAAAMAQ4BEwEBAw8DDgYRBgMJAQsPCwEMCQwBDgYOCQ4ODg8OHA4DDxEPEg8PEBEQAREGEQkRDxETEiAS/38AAAAAlgCMANwA3AAAAAAABAEYAYKAeHRkZICAgIyAgKCrq4CAgA=="),n(A,105412,"yAAAAMgAAACQAQAAkAEAAJABAABYAgAAWAIAAFgC"),n(A,105456,"8AAAAKoAAACqAAAAqgAAAKoAAACqAAAAqgAAAKoAAACqAAAAAQIMAw0EDgULAAAAAQIDBAUGAAAAAAAACwwNDg=="),n(A,105540,"MgAAAK8AAABkAAAAMg=="),n(A,105568,"rw=="),n(A,105596,"EBAKEBY="),n(A,105620,"/38AANAHAAAsAQAAYwAAAGMAAABjAAAAAAAAANAH"),n(A,105668,"BA=="),n(A,105680,"QEFCQ0RFRkdISUpLTE1OT1BRUlNUVldYWVtcXV5gYWJkZWdoaWtsbm9xc3R2d3l7fH6AgoSFh4mLjY+Rk5WXmZueoKKkp6mrrrCztbi6vb/CxcfKzdDT1tnc3+Ll6Ozv8vb5/P7/"),n(A,105792,"//7+/v7+/v7+/v39/f38/Pz7+/v6+vn5+Pj39/b19fTz8/Lx7+3r6efl4+Hf3drY1dPQzcvIxcK/u7i1sq6rp6OgnJiUkIyIhH97d3JuaWRgXltYVlNRTkxKR0VCQD48OTc1MzEvLCooJiQiIB4dGxkXFRMSEA4MCwkHBgQDAQ=="),n(A,106064,"//7+/v7+/f38+/v6+fj39vX08vHv7uzq6efl4+Hf3NrY1dPRz83LycfFw8G/vbu5t7SysK2rqaakoZ+cmpeUko+MioeEgX57eHZzcGxpZmNgX11bWlhWVVNSUE9NTEpJSEZFRENCQD8+PTw7Ojk4Nzc2NTQ0MzIyMTAwLy8uLi4tLS0sLCwsLCwsKysrKywrKiopKCgnJiYlJCQjIyIhISAgHx4eHR0cHBsaGhkZGBgXFxYWFRUUFBMTEhISEREQEA8PDw4ODQ0NDAwLCwsKCgoJCQkICAgHBwcHBgYGBQUFBQQEBAQEAwMDAwICAgICAgEBAQEBAQ=="),n(A,106341,"RvIpAC8ALwBF8ikALwAuAEXyKAAuAC0ANPIoAC0tLAA08igAKysrADTyKAAqKioANPIoACkpKQA08igAAOf/zv+1/5z/g/9q/1H/N/8e/wX/7P7T/rr+of6I/m/+Vf48/iP+Cv7x/dj9v/2m/Y39dP1b/UL9Kf0Q/ff83vzF/Kz8k/x6/GH8SPwv/Bb8/fvk+8v7svuZ+4D7Z/tP+zb7HfsE++v60vq6+qH6iPpv+lf6Pvol+g369Pnb+cP5qvmR+Xn5YPlH+S/5Fvn++OX4zfi0+Jz4g/hr+FP4Ovgi+Ar48ffZ98H3qPeQ93j3YPdH9y/3F/f/9uf2z/a39p/2h/Zv9lf2P/Yn9g/29/Xf9cf1sPWY9YD1aPVR9Tn1IfUK9fL02/TD9Kz0lPR99GX0TvQ29B/0CPTw89nzwvOr85TzfPNl807zN/Mg8wnz8vLb8sTyrvKX8oDyafJS8jzyJfIO8vjx4fHL8bTxnvGH8XHxW/FE8S7xGPEB8evw1fC/8Knwk/B98GfwUfA78CXwEPD67+Tvzu+576Pvje9472LvTe847yLvDe/47uLuze647qPuju557mTuT+467iXuEO777eft0u297antlO2A7WvtV+1C7S7tGu0F7fHs3ezJ7LXsoeyN7HnsZexR7D3sKuwW7ALs7+vb68jrtOuh643reutn61TrQest6xrrB+v06uLqz+q86qnqluqE6nHqX+pM6jrqJ+oV6gPq8One6czpuumo6ZbphOly6WHpT+k96SzpGukI6ffo5ujU6MPosuig6I/ofuht6FzoS+g76CroGegI6Pjn5+fX58bntuel55Xnhed152XnVedF5zXnJecV5wXn9ubm5tfmx+a45qjmmeaK5nvma+Zc5k3mPuYw5iHmEuYD5vXl5uXY5cnlu+Wt5Z7lkOWC5XTlZuVY5UrlPOUv5SHlE+UG5fjk6+Te5NDkw+S25KnknOSP5ILkdeRo5FzkT+RD5DbkKuQd5BHkBeT54+3j4ePV48njveOx46XjmuOO44Pjd+Ns42HjVuNL4z/jNOMq4x/jFOMJ4//i9OLq4t/i1eLK4sDituKs4qLimOKO4oTie+Jx4mfiXuJU4kviQuI54i/iJuId4hTiDOID4vrh8eHp4eDh2OHQ4cfhv+G34a/hp+Gf4Zfhj+GI4YDheOFx4WrhYuFb4VThTeFG4T/hOOEx4SrhJOEd4RbhEOEK4QPh/eD34PHg6+Dl4N/g2eDU4M7gyeDD4L7guOCz4K7gqeCk4J/gmuCV4JHgjOCH4IPgfuB64HbgcuBu4GrgZuBi4F7gWuBX4FPgT+BM4EngReBC4D/gPOA54DbgM+Ax4C7gK+Ap4CfgJOAi4CDgHuAc4BrgGOAW4BTgEuAR4A/gDuAN4AvgCuAJ4AjgB+AG4AXgBeAE4APgA+AC4ALgAuAC4ALgAeAC4ALgAuAC4ALgA+AD4ATgBeAF4AbgB+AI4AngCuAL4A3gDuAP4BHgEuAU4BbgGOAa4BzgHuAg4CLgJOAn4CngK+Au4DHgM+A24DngPOA/4ELgReBJ4EzgT+BT4FfgWuBe4GLgZuBq4G7gcuB24HrgfuCD4IfgjOCR4JXgmuCf4KTgqeCu4LPguOC+4MPgyeDO4NTg2eDf4OXg6+Dx4Pfg/eAD4QrhEOEW4R3hJOEq4THhOOE/4UbhTeFU4VvhYuFq4XHheOGA4Yjhj+GX4Z/hp+Gv4bfhv+HH4dDh2OHg4enh8eH64QPiDOIU4h3iJuIv4jniQuJL4lTiXuJn4nHie+KE4o7imOKi4qzituLA4sri1eLf4uri9OL/4gnjFOMf4yrjNOM/40vjVuNh42zjd+OD447jmuOl47HjvePJ49Xj4ePt4/njBeQR5B3kKuQ25EPkT+Rc5GjkdeSC5I/knOSp5Lbkw+TQ5N7k6+T45AblE+Uh5S/lPOVK5VjlZuV05YLlkOWe5a3lu+XJ5djl5uX15QPmEuYh5jDmPuZN5lzma+Z75ormmeao5rjmx+bX5ubm9uYF5xXnJec150XnVedl53XnheeV56XntufG59fn5+f45wjoGegq6DvoS+hc6G3ofuiP6KDosujD6NTo5uj36AjpGuks6T3pT+lh6XLphOmW6ajpuunM6d7p8OkD6hXqJ+o66kzqX+px6oTqluqp6rzqz+ri6vTqB+sa6y3rQetU62freuuN66HrtOvI69vr7+sC7BbsKuw97FHsZex57I3soey17Mns3ezx7AXtGu0u7ULtV+1r7YDtlO2p7b3t0u3n7fvtEO4l7jruT+5k7nnuju6j7rjuze7i7vjuDe8i7zjvTe9i73jvje+j77nvzu/k7/rvEPAl8DvwUfBn8H3wk/Cp8L/w1fDr8AHxGPEu8UTxW/Fx8YfxnvG08cvx4fH48Q7yJfI88lLyafKA8pfyrvLE8tvy8vIJ8yDzN/NO82XzfPOU86vzwvPZ8/DzCPQf9Db0TvRl9H30lPSs9MP02/Ty9Ar1IfU59VH1aPWA9Zj1sPXH9d/19/UP9if2P/ZX9m/2h/af9rf2z/bn9v/2F/cv90f3YPd495D3qPfB99n38fcK+CL4OvhT+Gv4g/ic+LT4zfjl+P74Fvkv+Uf5YPl5+ZH5qvnD+dv59PkN+iX6PvpX+m/6iPqh+rr60vrr+gT7Hfs2+0/7Z/uA+5n7svvL++T7/fsW/C/8SPxh/Hr8k/ys/MX83vz3/BD9Kf1C/Vv9dP2N/ab9v/3Y/fH9Cv4j/jz+Vf5v/oj+of66/tP+7P4F/x7/N/9R/2r/g/+c/7X/zv/n/wAAGQAyAEsAZAB9AJYArwDJAOIA+wAUAS0BRgFfAXgBkQGrAcQB3QH2AQ8CKAJBAloCcwKMAqUCvgLXAvACCQMiAzsDVANtA4YDnwO4A9ED6gMDBBwENQROBGcEgASZBLEEygTjBPwEFQUuBUYFXwV4BZEFqQXCBdsF8wUMBiUGPQZWBm8GhwagBrkG0QbqBgIHGwczB0wHZAd9B5UHrQfGB94H9gcPCCcIPwhYCHAIiAigCLkI0QjpCAEJGQkxCUkJYQl5CZEJqQnBCdkJ8QkJCiEKOQpQCmgKgAqYCq8KxwrfCvYKDgslCz0LVAtsC4MLmwuyC8oL4Qv4CxAMJww+DFUMbAyEDJsMsgzJDOAM9wwODSUNPA1SDWkNgA2XDa4NxA3bDfINCA4fDjUOTA5iDnkOjw6lDrwO0g7oDv8OFQ8rD0EPVw9tD4MPmQ+vD8UP2w/wDwYQHBAyEEcQXRBzEIgQnhCzEMgQ3hDzEAgRHhEzEUgRXRFyEYcRnBGxEcYR2xHwEQUSGRIuEkMSVxJsEoASlRKpEr4S0hLmEvsSDxMjEzcTSxNfE3MThxObE68TwxPWE+oT/hMRFCUUOBRMFF8UcxSGFJkUrBS/FNMU5hT5FAwVHhUxFUQVVxVqFXwVjxWhFbQVxhXZFesV/RUQFiIWNBZGFlgWahZ8Fo4WnxaxFsMW1BbmFvgWCRcaFywXPRdOF2AXcReCF5MXpBe1F8UX1hfnF/gXCBgZGCkYOhhKGFsYaxh7GIsYmxirGLsYyxjbGOsY+xgKGRoZKRk5GUgZWBlnGXYZhRmVGaQZsxnCGdAZ3xnuGf0ZCxoaGigaNxpFGlMaYhpwGn4ajBqaGqgathrEGtEa3xrtGvoaCBsVGyIbMBs9G0obVxtkG3EbfhuLG5gbpBuxG70byhvWG+Mb7xv7GwccExwfHCscNxxDHE8cWxxmHHIcfRyJHJQcnxyqHLUcwRzMHNYc4RzsHPccAR0MHRYdIR0rHTYdQB1KHVQdXh1oHXIdfB2FHY8dmR2iHawdtR2+Hccd0R3aHeMd7B30Hf0dBh4PHhceIB4oHjAeOR5BHkkeUR5ZHmEeaR5xHngegB6IHo8elh6eHqUerB6zHroewR7IHs8e1h7cHuMe6h7wHvYe/R4DHwkfDx8VHxsfIR8nHywfMh83Hz0fQh9IH00fUh9XH1wfYR9mH2sfbx90H3kffR+CH4Yfih+OH5Iflh+aH54foh+mH6kfrR+xH7Qftx+7H74fwR/EH8cfyh/NH88f0h/VH9cf2R/cH94f4B/iH+Qf5h/oH+of7B/uH+8f8R/yH/Mf9R/2H/cf+B/5H/of+x/7H/wf/R/9H/4f/h/+H/4f/h//H/4f/h/+H/4f/h/9H/0f/B/7H/sf+h/5H/gf9x/2H/Uf8x/yH/Ef7x/uH+wf6h/oH+Yf5B/iH+Af3h/cH9kf1x/VH9Ifzx/NH8ofxx/EH8Efvh+7H7cftB+xH60fqR+mH6Ifnh+aH5Yfkh+OH4ofhh+CH30feR90H28fax9mH2EfXB9XH1IfTR9IH0IfPR83HzIfLB8nHyEfGx8VHw8fCR8DH/0e9h7wHuoe4x7cHtYezx7IHsEeuh6zHqwepR6eHpYejx6IHoAeeB5xHmkeYR5ZHlEeSR5BHjkeMB4oHiAeFx4PHgYe/R30Hewd4x3aHdEdxx2+HbUdrB2iHZkdjx2FHXwdch1oHV4dVB1KHUAdNh0rHSEdFh0MHQEd9xzsHOEc1hzMHMEctRyqHJ8clByJHH0cchxmHFscTxxDHDccKxwfHBMcBxz7G+8b4xvWG8obvRuxG6QbmBuLG34bcRtkG1cbShs9GzAbIhsVGwgb+hrtGt8a0RrEGrYaqBqaGowafhpwGmIaUxpFGjcaKBoaGgsa/RnuGd8Z0BnCGbMZpBmVGYUZdhlnGVgZSBk5GSkZGhkKGfsY6xjbGMsYuxirGJsYixh7GGsYWxhKGDoYKRgZGAgY+BfnF9YXxRe1F6QXkxeCF3EXYBdOFz0XLBcaFwkX+BbmFtQWwxaxFp8WjhZ8FmoWWBZGFjQWIhYQFv0V6xXZFcYVtBWhFY8VfBVqFVcVRBUxFR4VDBX5FOYU0xS/FKwUmRSGFHMUXxRMFDgUJRQRFP4T6hPWE8MTrxObE4cTcxNfE0sTNxMjEw8T+xLmEtISvhKpEpUSgBJsElcSQxIuEhkSBRLwEdsRxhGxEZwRhxFyEV0RSBEzER4RCBHzEN4QyBCzEJ4QiBBzEF0QRxAyEBwQBhDwD9sPxQ+vD5kPgw9tD1cPQQ8rDxUP/w7oDtIOvA6lDo8OeQ5iDkwONQ4fDggO8g3bDcQNrg2XDYANaQ1SDTwNJQ0ODfcM4AzJDLIMmwyEDGwMVQw+DCcMEAz4C+ELyguyC5sLgwtsC1QLPQslCw4L9grfCscKrwqYCoAKaApQCjkKIQoJCvEJ2QnBCakJkQl5CWEJSQkxCRkJAQnpCNEIuQigCIgIcAhYCD8IJwgPCPYH3gfGB60HlQd9B2QHTAczBxsHAgfqBtEGuQagBocGbwZWBj0GJQYMBvMF2wXCBakFkQV4BV8FRgUuBRUF/ATjBMoEsQSZBIAEZwROBDUEHAQDBOoD0QO4A58DhgNtA1QDOwMiAwkD8ALXAr4CpQKMAnMCWgJBAigCDwL2Ad0BxAGrAZEBeAFfAUYBLQEUAfsA4gDJAK8AlgB9AGQASwAyABkAMAAAADAAAABAAAAAUAAAAJAAAACgAAAAsAAAAMAAAACAm7XL3Ojt7Obczr+wo5iQjIuMj5KUlZKMg3hpWUk8MSopLTZEVml9j5+qsbKtpJaHeGlcU09PVV5reoiWoquwsa6ooJiRi4iJjZSdqLK7wMG9tKWSfGNKMh4OBQIFDx4wRFltf4yWnJ+fnZuZmZyhqbO/ytXc4N7YzLumj3dgSzouKCkvOkhZanqGkJSVkYmAdWtiXFpcYWl0gIqUmp6dmJCGfHFoYmBja3iIm6/C0t/m5+LXxrKchG9bS0A5Nzg9Q0pQVFZVUk1IQj8+QUlWZ3yTq8PZ6vb8+/Tn1cCqlIBxZF1aXGFocHd9f397dGthV05IRkhOWWZ1hJOfp6uqpJmLe2pbTkZDRU1aa3+SprjFz9PSzcS5raGWjomHh4qNkZKRjIR4aFVBLhwOBQEFDx80TWiBmrDBzdPT0Mi/taukn5ydoKWqrrGwq6OWh3ZjUUI2Ly0xOkhZa36OnKaqqaOYintsXVJKSEpQWmd1gi0AAAAmAAAALQAAAC0AAAA3AAAALQ=="),n(A,110928,"yv5w/hICZAHgAFkAFwD2/8b/8P/NAVcCGAK9AgIDXQLxAc0BMAKUAW4A4ACDAGgAn/+bABYBZv9z+6r94QJ9ALD9KQALAAn/9v9BAFwAUADQ/kcApwD//3oA6QChANX/FgHfAeUBlwEKAYoChgBQAOwARAAEAQ0BswA1AIwAEwElASgBaAABAZgANwG2AAcB9QB9ADoBjAAsAMsA5gAV/+L+FwBrAFwApf8mANABuwGwAGIA8Pxv9p346/vA+Ur6mPoT+0v8Jv0="),n(A,111162,"BgAHAAgACQAKAAsADQAOABAAEgAUABYAGQAcACAAIwAoAC0AMwA5AEAARwBQAFoAZQByAIAAjgCfALMAygDjAAABHAE+AWcBlQHHAQACOAJ+As8CcQOPAwAEcQT8BJ4FVgYfBwAI4Qj4CTsLrAw9DgAQwxHwE3cWWBl7HAAghSPfJ+4ssDL2OABArkekUIVbZmYzc/9/"),n(A,111324,"qMtoQQAAAACoy2jBAAAAAAAAAAAXCtQJkglQCQ8JzgiPCE8IEwjVB5oHYgcoB/MGvgaLBloGKwb9BdMFqQWBBVwFOAUWBfcE1wS7BKAEhgRuBFcEQQQtBBkEBwT1A+QD1APFA7YDqAOZA40DfwNxA2UDVwNLAz4DMgMkAxgDCwP+AvIC5ALYAssCvgKxAqQClwKLAn0CcgJkAlkCTAJAAjQCKAIcAhICBQL7AfAB5QHbAdABxgG7AbIBqAGeAZQBigGBAXcBbgFjAVsBUAFIAT0BNAErASABGAENAQQB+gDwAOcA3ADUAMgAwAC1AKwAoQCYAI4AhQB7AHEAaQBeAFYATABDADkAMQAnAB4AFgALAAQA+//y/+n/4P/X/87/xP+7/7L/qf+g/5X/jf+C/3r/cP9m/1z/Uv9J/z//Nf8r/yL/F/8O/wT/+v7x/uf+3f7T/sr+wP62/q3+o/6b/pD+h/59/nP+av5f/lb+TP5C/jj+Lf4j/hn+Df4D/vf97P3h/dX9yf29/bH9pf2Y/Yz9f/1z/Wb9Wf1M/T/9M/0k/Rn9Cv3//PH85fzY/Mz8vvyz/KT8mPyL/H78cfxi/FX8Rfw4/Cb8GfwG/Pb74vvQ+7r7pfuO+3b7XPtB+yT7Bvvl+sT6n/p5+lP6KPr++dD5oflw+Tz5CfnR+Jr4YPgm+Oj3q/ds9yz36/aq9mj2Jvbj9bAEdgRABA4E3wO0A4sDZQNBAx8DAAPiAsYCqwKSAnoCZAJOAjoCJwIVAgMC8wHjAdQBxgG4AasBnwGTAYcBfAFyAWgBXgFVAUwBQwE7ATMBLAEkAR0BFgEQAQkBAwH9APcA8gDtAOcA4gDdANkA1ADQAMwAxwDDAMAAvAC4ALQAsQCuAKoApwCkAKEAngCbAJkAlgCTAJEAjgCMAIkAhwCFAIMAgAB+AHwAegB4AHcAdQBzAHEAbwBuAGwAagBpAGcAZgBkAGMAYQBgAF8AXQBcAFsAWgBYAFcAVgBVAFQAUwBSAFAATwBOAE0ATABLAEsASgBJAEgARwBGAEUARABEAEMAQgBBAEAAQAA/AD4APQA9ADwAOwA7ADoAOQA5ADgAOAA3ADcANgA2ADUANQA0ADQAMwAzADIAMgAxADEAMAAwAC8ALwAuAC4ALQAtACwALAArACsAKgAqACkAKQApACkAKAAoACcAJwAmACYAJgAmACUAJQAkACQAJAAkACMAIwAjACMAIgAiACEAIQAhACEAIAAgACAAIAAfAB8AHwAfAB4AHgAeAB4AHQAdAB0AHQAcABwAHAAcABsAGwAxNkZyYW1lTWFuYWdlckltcGwAMTJGcmFtZU1hbmFnZXIAMjNTcGVlY2hXYXZlR2VuZXJhdG9ySW1wbAAxOVNwZWVjaFdhdmVHZW5lcmF0b3IAMTNXYXZlR2VuZXJhdG9y"),n(A,112416,"AwAAAAQAAAAEAAAABgAAAIP5ogBETm4A/CkVANFXJwDdNPUAYtvAADyZlQBBkEMAY1H+ALveqwC3YcUAOm4kANJNQgBJBuAACeouAByS0QDrHf4AKbEcAOg+pwD1NYIARLsuAJzphAC0JnAAQX5fANaROQBTgzkAnPQ5AItfhAAo+b0A+B87AN7/lwAPmAUAES/vAApaiwBtH20Az342AAnLJwBGT7cAnmY/AC3qXwC6J3UA5evHAD178QD3OQcAklKKAPtr6gAfsV8ACF2NADADVgB7/EYA8KtrACC8zwA29JoA46kdAF5hkQAIG+YAhZllAKAUXwCNQGgAgNj/ACdzTQAGBjEAylYVAMmocwB74mAAa4zAABnERwDNZ8MACejcAFmDKgCLdsQAphyWAESv3QAZV9EApT4FAAUH/wAzfj8AwjLoAJhP3gC7fTIAJj3DAB5r7wCf+F4ANR86AH/yygDxhx0AfJAhAGokfADVbvoAMC13ABU7QwC1FMYAwxmdAK3EwgAsTUEADABdAIZ9RgDjcS0Am8aaADNiAAC00nwAtKeXADdV1QDXPvYAoxAYAE12/ABknSoAcNerAGN8+AB6sFcAFxXnAMBJVgA71tkAp4Q4ACQjywDWincAWlQjAAAfuQDxChsAGc7fAJ8x/wBmHmoAmVdhAKz7RwB+f9gAImW3ADLoiQDmv2AA78TNAGw2CQBdP9QAFt7XAFg73gDem5IA0iIoACiG6ADiWE0AxsoyAAjjFgDgfcsAF8BQAPMdpwAY4FsALhM0AIMSYgCDSAEA9Y5bAK2wfwAe6fIASEpDABBn0wCq3dgArl9CAGphzgAKKKQA05m0AAam8gBcd38Ao8KDAGE8iACKc3gAr4xaAG/XvQAtpmMA9L/LAI2B7wAmwWcAVcpFAMrZNgAoqNIAwmGNABLJdwAEJhQAEkabAMRZxADIxUQATbKRAAAX8wDUQ60AKUnlAP3VEAAAvvwAHpTMAHDO7gATPvUA7PGAALPnwwDH+CgAkwWUAMFxPgAuCbMAC0XzAIgSnACrIHsALrWfAEeSwgB7Mi8ADFVtAHKnkABr5x8AMcuWAHkWSgBBeeIA9N+JAOiUlwDi5oQAmTGXAIjtawBfXzYAu/0OAEiatABnpGwAcXJCAI1dMgCfFbgAvOUJAI0xJQD3dDkAMAUcAA0MAQBLCGgALO5YAEeqkAB05wIAvdYkAPd9pgBuSHIAnxbvAI6UpgC0kfYA0VNRAM8K8gAgmDMA9Ut+ALJjaADdPl8AQF0DAIWJfwBVUikAN2TAAG3YEAAySDIAW0x1AE5x1ABFVG4ACwnBACr1aQAUZtUAJwedAF0EUAC0O9sA6nbFAIf5FwBJa30AHSe6AJZpKQDGzKwArRRUAJDiagCI2YkALHJQAASkvgB3B5QA8zBwAAD8JwDqcagAZsJJAGTgPQCX3YMAoz+XAEOU/QANhowAMUHeAJI5nQDdcIwAF7fnAAjfOwAVNysAXICgAFqAkwAQEZIAD+jYAGyArwDb/0sAOJAPAFkYdgBipRUAYcu7AMeJuQAQQL0A0vIEAEl1JwDrtvYA2yK7AAoUqgCJJi8AZIN2AAk7MwAOlBoAUTqqAB2jwgCv7a4AXCYSAG3CTQAtepwAwFaXAAM/gwAJ8PYAK0CMAG0xmQA5tAcADCAVANjDWwD1ksQAxq1LAE7KpQCnN80A5qk2AKuSlADdQmgAGWPeAHaM7wBoi1IA/Ns3AK6hqwDfFTEAAK6hAAz72gBkTWYA7QW3ACllMABXVr8AR/86AGr5uQB1vvMAKJPfAKuAMABmjPYABMsVAPoiBgDZ5B0APbOkAFcbjwA2zQkATkLpABO+pAAzI7UA8KoaAE9lqADSwaUACz8PAFt4zQAj+XYAe4sEAIkXcgDGplMAb27iAO/rAACbSlgAxNq3AKpmugB2z88A0QIdALHxLQCMmcEAw613AIZI2gD3XaAAxoD0AKzwLwDd7JoAP1y8ANDebQCQxx8AKtu2AKMlOgAAr5oArVOTALZXBAApLbQAS4B+ANoHpwB2qg4Ae1mhABYSKgDcty0A+uX9AInb/gCJvv0A5HZsAAap/AA+gHAAhW4VAP2H/wAoPgcAYWczACoYhgBNveoAs+evAI9tbgCVZzkAMb9bAITXSAAw3xYAxy1DACVhNQDJcM4AMMu4AL9s/QCkAKIABWzkAFrdoAAhb0cAYhLSALlchABwYUkAa1bgAJlSAQBQVTcAHtW3ADPxxAATbl8AXTDkAIUuqQAdssMAoTI2AAi3pADqsdQAFvchAI9p5AAn/3cADAOAAI1ALQBPzaAAIKWZALOi0wAvXQoAtPlCABHaywB9vtAAm9vBAKsXvQDKooEACGpcAC5VFwAnAFUAfxTwAOEHhgAUC2QAlkGNAIe+3gDa/SoAayW2AHuJNAAF8/4Aub+eAGhqTwBKKqgAT8RaAC34vADXWpgA9MeVAA1NjQAgOqYApFdfABQ/sQCAOJUAzCABAHHdhgDJ3rYAv2D1AE1lEQABB2sAjLCsALLA0ABRVUgAHvsOAJVywwCjBjsAwEA1AAbcewDgRcwATin6ANbKyADo80EAfGTeAJtk2ADZvjEApJfDAHdY1ABp48UA8NoTALo6PABGGEYAVXVfANK99QBuksYArC5dAA5E7QAcPkIAYcSHACn96QDn1vMAInzKAG+RNQAI4MUA/9eNAG5q4gCw/cYAkwjBAHxddABrrbIAzW6dAD5yewDGEWoA98+pAClz3wC1yboAtwBRAOKyDQB0uiQA5X1gAHTYigANFSwAgRgMAH5mlAABKRYAn3p2AP39vgBWRe8A2X42AOzZEwCLurkAxJf8ADGoJwDxbsMAlMU2ANioVgC0qLUAz8wOABKJLQBvVzQALFaJAJnO4wDWILkAa16qAD4qnAARX8wA/QtKAOH0+wCOO20A4oYsAOnUhAD8tKkA7+7RAC41yQAvOWEAOCFEABvZyACB/AoA+0pqAC8c2ABTtIQATpmMAFQizAAqVdwAwMbWAAsZlgAacLgAaZVkACZaYAA/Uu4AfxEPAPS1EQD8y/UANLwtADS87gDoXcwA3V5gAGeOmwCSM+8AyRe4AGFYmwDhV7wAUYPGANg+EADdcUgALRzdAK8YoQAhLEYAWfPXANl6mACeVMAAT4b6AFYG/ADlea4AiSI2ADitIgBnk9wAVeiqAIImOADK55sAUQ2kAJkzsQCp1w4AaQVIAGWy8AB/iKcAiEyXAPnRNgAhkrMAe4JKAJjPIQBAn9wA3EdVAOF0OgBn60IA/p3fAF7UXwB7Z6QAuqx6AFX2ogAriCMAQbpVAFluCAAhKoYAOUeDAInj5gDlntQASftAAP9W6QAcD8oAxVmKAJT6KwDTwcUAD8XPANtargBHxYYAhUNiACGGOwAseZQAEGGHACpMewCALBoAQ78SAIgmkAB4PIkAqMTkAOXbewDEOsIAJvTqAPdnigANkr8AZaMrAD2TsQC9fAsApFHcACfdYwBp4d0AmpQZAKgplQBozigACe20AESfIABOmMoAcIJjAH58IwAPuTIAp/WOABRW5wAh8QgAtZ0qAG9+TQClGVEAtfmrAILf1gCW3WEAFjYCAMQ6nwCDoqEAcu1tADmNegCCuKkAazJcAEYnWwAANO0A0gB3APz0VQABWU0A4HGA"),n(A,115203,"QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNf6CK2VHFWdAAAAAAAAAOEMAAPr+Qi52vzo7nrya9wy9vf3/////3z88VFVVVVXFP5ErF89VVaU/F9CkZxERgT8AAAAAAADIQu85+v5CLuY/JMSC/72/zj+19AzXCGusP8xQRtKrsoM/hDpOm+DXVT8="),n(A,115390,"8D9uv4gaTzubPDUz+6k99u8/XdzYnBNgcbxhgHc+muzvP9FmhxB6XpC8hX9u6BXj7z8T9mc1UtKMPHSFFdOw2e8/+o75I4DOi7ze9t0pa9DvP2HI5mFO92A8yJt1GEXH7z+Z0zNb5KOQPIPzxso+vu8/bXuDXaaalzwPiflsWLXvP/zv/ZIatY4890dyK5Ks7z/RnC9wPb4+PKLR0zLso+8/C26QiTQDarwb0/6vZpvvPw69LypSVpW8UVsS0AGT7z9V6k6M74BQvMwxbMC9iu8/FvTVuSPJkbzgLamumoLvP69VXOnj04A8UY6lyJh67z9Ik6XqFRuAvHtRfTy4cu8/PTLeVfAfj7zqjYw4+WrvP79TEz+MiYs8dctv61tj7z8m6xF2nNmWvNRcBITgW+8/YC86PvfsmjyquWgxh1TvP504hsuC54+8Hdn8IlBN7z+Nw6ZEQW+KPNaMYog7Ru8/fQTksAV6gDyW3H2RST/vP5SoqOP9jpY8OGJ1bno47z99SHTyGF6HPD+msk/OMe8/8ucfmCtHgDzdfOJlRSvvP14IcT97uJa8gWP14d8k7z8xqwlt4feCPOHeH/WdHu8/+r9vGpshPbyQ2drQfxjvP7QKDHKCN4s8CwPkpoUS7z+Py86JkhRuPFYvPqmvDO8/tquwTXVNgzwVtzEK/gbvP0x0rOIBQoY8MdhM/HAB7z9K+NNdOd2PPP8WZLII/O4/BFuOO4Cjhrzxn5JfxfbuP2hQS8ztSpK8y6k6N6fx7j+OLVEb+AeZvGbYBW2u7O4/0jaUPujRcbz3n+U02+fuPxUbzrMZGZm85agTwy3j7j9tTCqnSJ+FPCI0Ekym3u4/imkoemASk7wcgKwERdruP1uJF0iPp1i8Ki73IQrW7j8bmklnmyx8vJeoUNn10e4/EazCYO1jQzwtiWFgCM7uP+9kBjsJZpY8VwAd7UHK7j95A6Ha4cxuPNA8wbWixu4/MBIPP47/kzze09fwKsPuP7CvervOkHY8Jyo21dq/7j934FTrvR2TPA3d/ZmyvO4/jqNxADSUj7ynLJ12srnuP0mjk9zM3oe8QmbPotq27j9fOA+9xt54vIJPnVYrtO4/9lx77EYShrwPkl3KpLHuP47X/RgFNZM82ie1Nkev7j8Fm4ovt5h7PP3Hl9QSre4/CVQc4uFjkDwpVEjdB6vuP+rGGVCFxzQ8t0ZZiiap7j81wGQr5jKUPEghrRVvp+4/n3aZYUrkjLwJ3Ha54aXuP6hN7zvFM4y8hVU6sH6k7j+u6SuJeFOEvCDDzDRGo+4/WFhWeN3Ok7wlIlWCOKLuP2QZfoCqEFc8c6lM1FWh7j8oIl6/77OTvM07f2aeoO4/grk0h60Sary/2gt1EqDuP+6pbbjvZ2O8LxplPLKf7j9RiOBUPdyAvISUUfl9n+4/zz5afmQfeLx0X+zodZ/uP7B9i8BK7oa8dIGlSJqf7j+K5lUeMhmGvMlnQlbrn+4/09QJXsuckDw/Xd5PaaDuPx2lTbncMnu8hwHrcxSh7j9rwGdU/eyUPDLBMAHtoe4/VWzWq+HrZTxiTs8286LuP0LPsy/FoYi8Eho+VCek7j80NzvxtmmTvBPOTJmJpe4/Hv8ZOoRegLytxyNGGqfuP25XcthQ1JS87ZJEm9mo7j8Aig5bZ62QPJlmitnHqu4/tOrwwS+3jTzboCpC5azuP//nxZxgtmW8jES1FjKv7j9EX/NZg/Z7PDZ3FZmuse4/gz0epx8Jk7zG/5ELW7TuPykebIu4qV285cXNsDe37j9ZuZB8+SNsvA9SyMtEuu4/qvn0IkNDkrxQTt6fgr3uP0uOZtdsyoW8ugfKcPHA7j8nzpEr/K9xPJDwo4KRxO4/u3MK4TXSbTwjI+MZY8juP2MiYiIExYe8ZeVde2bM7j/VMeLjhhyLPDMtSuyb0O4/Fbu809G7kbxdJT6yA9XuP9Ix7pwxzJA8WLMwE57Z7j+zWnNuhGmEPL/9eVVr3u4/tJ2Ol83fgrx689O/a+PuP4czy5J3Gow8rdNamZ/o7j/62dFKj3uQvGa2jSkH7u4/uq7cVtnDVbz7FU+4ovPuP0D2pj0OpJC8OlnljXL57j80k6049NZovEde+/J2/+4/NYpYa+LukbxKBqEwsAXvP83dXwrX/3Q80sFLkB4M7z+smJL6+72RvAke11vCEu8/swyvMK5uczycUoXdmxnvP5T9n1wy4448etD/X6sg7z+sWQnRj+CEPEvRVy7xJ+8/ZxpOOK/NYzy15waUbS/vP2gZkmwsa2c8aZDv3CA37z/StcyDGIqAvPrDXVULP+8/b/r/P12tj7x8iQdKLUfvP0mpdTiuDZC88okNCIdP7z+nBz2mhaN0PIek+9wYWO8/DyJAIJ6RgryYg8kW42DvP6ySwdVQWo48hTLbA+Zp7z9LawGsWTqEPGC0AfMhc+8/Hz60ByHVgrxfm3szl3zvP8kNRzu5Kom8KaH1FEaG7z/TiDpgBLZ0PPY/i+cukO8/cXKdUezFgzyDTMf7UZrvP/CR048S94+82pCkoq+k7z99dCPimK6NvPFnji1Ir+8/CCCqQbzDjjwnWmHuG7rvPzLrqcOUK4Q8l7prNyvF7z/uhdExqWSKPEBFblt20O8/7eM75Lo3jrwUvpyt/dvvP53NkU07iXc82JCegcHn7z+JzGBBwQVTPPFxjyvC8+8/EhETFBUWFxgZGhscHR4fICERIiMkESUmJygpKissES0uLxAQMBAQEBAQEBAxMjMQNDUQEBERERERERERERERERERERERERERERERERE2ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERNxERERE4ETk6Ozw9PhERERERERERERERERERERERERERERERERERERERERERERERERERERERERE/EBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEUBBEUJDREVGR0hJShFLTE1OT1BREFJTVFVWV1hZWltcXRBeX2AQERERYWJjEBAQEBAQEBAQEBERERFkEBAQEBAQEBAQEBAQEBAQERFlEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQERFmZxAQaGkREREREREREREREREREREREREREREREWoREWsQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEWxtEBAQEBAQEBAQbhAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQb3BxchAQEBAQEBAQc3R1EBAQEBB2dxAQEBB4EBB5EBAQEBAQEBAQEBAQEBA="),n(A,117968,"//////////////////////////////////////////8AAAAAAAAAAP7//wf+//8HAAAAAAAEIAT//3////9//////////////////////////////////8P/AwAfUA=="),n(A,118072,"IAAAAAAA37xA1///+////////////7///////////////////////wP8///////////////////////////+////fwL//////wEAAAAA/7+2AP///4cHAAAA/wf//////////v/D////////////////7x/+4f+fAAD///////8A4P///////////////wMA//////8HMAT////8/x8AAP///wH/BwAAAAAAAP//3z8AAPD/+AP////////////v/9/h/8///v/vn/n///3F459ZgLDP/wMQ7of5///9bcOHGQJewP8/AO6/+////e3jvxsBAM//AB7un/n///3t458ZwLDP/wIA7Mc91hjH/8PHHYEAwP8AAO/f/f///f/j3x1gB8//AADv3/3///3v498dYEDP/wYA79/9/////+ffXfCAz/8A/Oz/f/z///svf4Bf/8D/DAD+/////3//Bz8g/wMAAAAA1vf//6///ztfIP/zAAAAAAEAAAD/AwAA//7///8f/v8D///+////HwAAAAAAAAAA////////f/n/A////////////z//////vyD///////f///////////89fz3//////z3/////PX89/3//////////Pf//////////BwAAAAD//wAA/////////////z8//v//////////////////////////////////////////////////////////n////v//B////////////8f/Af/fDwD//w8A//8PAP/fDQD////////P//8BgBD/AwAAAAD/A///////////////Af//////B///////////PwD///9//w//AcD/////Px8A//////8P////A/8DAAAAAP///w//////////f/7/HwD/A/8DgA=="),n(A,118768,"////////7//vD/8DAAAAAP//////8////////7//AwD///////9/AP/j//////8//wH//////+cAAAAAAN5vBP///////////////////////////////wAAAACA/x8A//8/P/////8/P/+q////P////////99f3B/PD/8f3B8="),n(A,118910,"AoAAAP8f"),n(A,118928,"hPwvPlC9//PgQwAA//////8B"),n(A,118982,"wP///////wMAAP//////f///////f/////////////////////8feAwA/////78g/////////4AAAP//fwB/f39/f39/f/////8AAAAAAIA="),n(A,119088,"4AAAAP4DPh/+////////////f+D+//////////////fg///////+/////////////38AAP///wcAAAAAAAD///////////////////////////////8/"),n(A,119184,"////////////////////////////////////////AAD//////////////////////x8AAAAAAAAAAP//////P/8f////DwAA//////9/8I///////////////////wAAAACA//z////////////////5////////fAAAAAAAgP+//////wAAAP///////w8A//////////8vAP8DAAD86P//////B/////8HAP///x/////////3/wCA/wP///9/////////fwD/P/8D//9//P////////9/BQAAOP//PAB+fn4Af3////////f/AP///////////////////wf/A///////////////////////////DwD//3/4//////8P/////////////////z//////////////////AwAAAAB/APjg//1/X9v/////////////////AwAAAPj///////////////8/AAD///////////z///////8AAAAAAP8P"),n(A,119582,"3/////////////////////8fAAD/A/7//wf+//8HwP////////////9//Pz8HAAAAAD/7///f///t/8//z8AAAAA////////////////////BwAAAAAAAAAA////////Hw=="),n(A,119712,"////H////////wEAAAAAAP////8A4P///wf//////wf///8//////w//PgAAAAAA/////////////////////////z//A/////8P/////w///////wD///////8P"),n(A,119824,"////////fwD//z8A/w=="),n(A,119856,"P/3/////v5H//z8A//9/AP///38AAAAAAAAAAP//NwD//z8A////AwAAAAAAAAAA/////////8AAAAAAAAAAAG/w7/7//z8AAAAAAP///x////8fAAAAAP/+//8fAAAA////////PwD//z8A//8HAP//Aw=="),n(A,119984,"////////////AQAAAAAAAP///////wcA////////BwD//////wD/Aw=="),n(A,120048,"////H4AA//8/"),n(A,120076,"//9/AP//////////PwAAAMD/AAD8////////AQAA////Af8D////////x/9wAP////9HAP//////////HgD/FwAAAAD///v///+fQAAAAAAAAAAAf73/v/8B/////////wH/A++f+f///e3jnxmB4A8="),n(A,120208,"//////////+7B/+DAAAAAP//////////swD/Aw=="),n(A,120256,"////////P38AAAA/AAAAAP////////9/EQD/AwAAAAD///////8/Af8DAAAAAAAA////5/8H/wM="),n(A,120336,"/////////wE="),n(A,120356,"////////////AwCA"),n(A,120388,"//z///////waAAAA////////538AAP///////////yAAAAAA/////////wH//f////9/fwEA/wMAAPz////8///+fw=="),n(A,120464,"f/v/////f7TLAP8Dv/3///9/ewH/Aw=="),n(A,120524,"//9/AP////////////////////////8D"),n(A,120560,"/////////////////38AAP///////////////////////////////w8="),n(A,120624,"//////9/"),n(A,120656,"//////////9/"),n(A,120688,"/////////wH///9//wM="),n(A,120714,"////PwAA////////AAAPAP8D+P//4P//"),n(A,120760,"//////////8="),n(A,120784,"////////////h/////////+A//8AAAAAAAAAAAsAAAD/////////////////////////////////////////AP///////////////////////////////////////wcA////fwAAAAAAAAcA8AD/////////////////////////////////////////////////////////////////D/////////////////8H/x//Af9D"),n(A,120976,"/////////////9///////////99k3v/r7/////////+/59/f////e1/8/f//////////////////////////////////////////////////////P/////3///f////3///f////3///f////3/////9/////f//98////////9////52wc="),n(A,121136,"//////8fgD//Qw=="),n(A,121192,"//////8P/wP///////////////////////////////8fAAAAAAAAAP//////////jwj/Aw=="),n(A,121264,"7////5b+9wqE6paqlvf3Xv/7/w/u+/8P"),n(A,121302,"////A////wP///8D"),n(A,121328,"/////////////////////////////////////////////////////////////////wABAgMEBQYHCAn/////////CgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiP///////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8="),n(A,121601,"ARcCHRgTAx4bGQsUCAQNHxYcEhoKBwwVEQkGEAUPDt4SBJUAAAAA////////////////INsBABQAAABDLlVURi04"),n(A,121696,"TENfQ1RZUEUAAAAATENfTlVNRVJJQwAATENfVElNRQAAAAAATENfQ09MTEFURQAATENfTU9ORVRBUlkATENfTUVTU0FHRVM="),n(A,121776,"Qy5VVEYtOA=="),n(A,121800,"MAUCAE5vIGVycm9yIGluZm9ybWF0aW9uAElsbGVnYWwgYnl0ZSBzZXF1ZW5jZQBEb21haW4gZXJyb3IAUmVzdWx0IG5vdCByZXByZXNlbnRhYmxlAE5vdCBhIHR0eQBQZXJtaXNzaW9uIGRlbmllZABPcGVyYXRpb24gbm90IHBlcm1pdHRlZABObyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5AE5vIHN1Y2ggcHJvY2VzcwBGaWxlIGV4aXN0cwBWYWx1ZSB0b28gbGFyZ2UgZm9yIGRhdGEgdHlwZQBObyBzcGFjZSBsZWZ0IG9uIGRldmljZQBPdXQgb2YgbWVtb3J5AFJlc291cmNlIGJ1c3kASW50ZXJydXB0ZWQgc3lzdGVtIGNhbGwAUmVzb3VyY2UgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGUASW52YWxpZCBzZWVrAENyb3NzLWRldmljZSBsaW5rAFJlYWQtb25seSBmaWxlIHN5c3RlbQBEaXJlY3Rvcnkgbm90IGVtcHR5AENvbm5lY3Rpb24gcmVzZXQgYnkgcGVlcgBPcGVyYXRpb24gdGltZWQgb3V0AENvbm5lY3Rpb24gcmVmdXNlZABIb3N0IGlzIGRvd24ASG9zdCBpcyB1bnJlYWNoYWJsZQBBZGRyZXNzIGluIHVzZQBCcm9rZW4gcGlwZQBJL08gZXJyb3IATm8gc3VjaCBkZXZpY2Ugb3IgYWRkcmVzcwBCbG9jayBkZXZpY2UgcmVxdWlyZWQATm8gc3VjaCBkZXZpY2UATm90IGEgZGlyZWN0b3J5AElzIGEgZGlyZWN0b3J5AFRleHQgZmlsZSBidXN5AEV4ZWMgZm9ybWF0IGVycm9yAEludmFsaWQgYXJndW1lbnQAQXJndW1lbnQgbGlzdCB0b28gbG9uZwBTeW1ib2xpYyBsaW5rIGxvb3AARmlsZW5hbWUgdG9vIGxvbmcAVG9vIG1hbnkgb3BlbiBmaWxlcyBpbiBzeXN0ZW0ATm8gZmlsZSBkZXNjcmlwdG9ycyBhdmFpbGFibGUAQmFkIGZpbGUgZGVzY3JpcHRvcgBObyBjaGlsZCBwcm9jZXNzAEJhZCBhZGRyZXNzAEZpbGUgdG9vIGxhcmdlAFRvbyBtYW55IGxpbmtzAE5vIGxvY2tzIGF2YWlsYWJsZQBSZXNvdXJjZSBkZWFkbG9jayB3b3VsZCBvY2N1cgBTdGF0ZSBub3QgcmVjb3ZlcmFibGUAUHJldmlvdXMgb3duZXIgZGllZABPcGVyYXRpb24gY2FuY2VsZWQARnVuY3Rpb24gbm90IGltcGxlbWVudGVkAE5vIG1lc3NhZ2Ugb2YgZGVzaXJlZCB0eXBlAElkZW50aWZpZXIgcmVtb3ZlZABEZXZpY2Ugbm90IGEgc3RyZWFtAE5vIGRhdGEgYXZhaWxhYmxlAERldmljZSB0aW1lb3V0AE91dCBvZiBzdHJlYW1zIHJlc291cmNlcwBMaW5rIGhhcyBiZWVuIHNldmVyZWQAUHJvdG9jb2wgZXJyb3IAQmFkIG1lc3NhZ2UARmlsZSBkZXNjcmlwdG9yIGluIGJhZCBzdGF0ZQBOb3QgYSBzb2NrZXQARGVzdGluYXRpb24gYWRkcmVzcyByZXF1aXJlZABNZXNzYWdlIHRvbyBsYXJnZQBQcm90b2NvbCB3cm9uZyB0eXBlIGZvciBzb2NrZXQAUHJvdG9jb2wgbm90IGF2YWlsYWJsZQBQcm90b2NvbCBub3Qgc3VwcG9ydGVkAFNvY2tldCB0eXBlIG5vdCBzdXBwb3J0ZWQATm90IHN1cHBvcnRlZABQcm90b2NvbCBmYW1pbHkgbm90IHN1cHBvcnRlZABBZGRyZXNzIGZhbWlseSBub3Qgc3VwcG9ydGVkIGJ5IHByb3RvY29sAEFkZHJlc3Mgbm90IGF2YWlsYWJsZQBOZXR3b3JrIGlzIGRvd24ATmV0d29yayB1bnJlYWNoYWJsZQBDb25uZWN0aW9uIHJlc2V0IGJ5IG5ldHdvcmsAQ29ubmVjdGlvbiBhYm9ydGVkAE5vIGJ1ZmZlciBzcGFjZSBhdmFpbGFibGUAU29ja2V0IGlzIGNvbm5lY3RlZABTb2NrZXQgbm90IGNvbm5lY3RlZABDYW5ub3Qgc2VuZCBhZnRlciBzb2NrZXQgc2h1dGRvd24AT3BlcmF0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3MAT3BlcmF0aW9uIGluIHByb2dyZXNzAFN0YWxlIGZpbGUgaGFuZGxlAFJlbW90ZSBJL08gZXJyb3IAUXVvdGEgZXhjZWVkZWQATm8gbWVkaXVtIGZvdW5kAFdyb25nIG1lZGl1bSB0eXBlAE11bHRpaG9wIGF0dGVtcHRlZABSZXF1aXJlZCBrZXkgbm90IGF2YWlsYWJsZQBLZXkgaGFzIGV4cGlyZWQAS2V5IGhhcyBiZWVuIHJldm9rZWQAS2V5IHdhcyByZWplY3RlZCBieSBzZXJ2aWNl"),n(A,123730,"pQJbAPABtQWMBSUBgwYdA5QE/wDHAzEDCwa8AY8BfwPKBCsA2gavAEIDTgPcAQ4EFQChBg0BlAILAjgGZAK8Av8CXQPnBAsHzwLLBe8F2wXhAh4GRQKFAIICbANvBPEA8wMYBdkA2gNMBlQCewGdA70EAABRABUCuwCzA20A/wGFBC8F+QQ4AGUBRgGfALcGqAFzAlMB"),n(A,123928,"IQQAAAAAAAAAAC8C"),n(A,123960,"NQRHBFYE"),n(A,123982,"oAQ="),n(A,124002,"RgVgBW4FYQYAAM8BAAAAAAAAAADJBukG+QYeBzkHSQdeBw=="),n(A,124048,"GQAKABkZGQAAAAAFAAAAAAAACQAAAAALAAAAAAAAAAAZABEKGRkZAwoHAAEACQsYAAAJBgsAAAsABhkAAAAZGRk="),n(A,124129,"DgAAAAAAAAAAGQAKDRkZGQANAAACAAkOAAAACQAOAAAO"),n(A,124187,"DA=="),n(A,124199,"EwAAAAATAAAAAAkMAAAAAAAMAAAM"),n(A,124245,"EA=="),n(A,124257,"DwAAAAQPAAAAAAkQAAAAAAAQAAAQ"),n(A,124303,"Eg=="),n(A,124315,"EQAAAAARAAAAAAkSAAAAAAASAAASAAAaAAAAGhoa"),n(A,124370,"GgAAABoaGgAAAAAAAAk="),n(A,124419,"FA=="),n(A,124431,"FwAAAAAXAAAAAAkUAAAAAAAUAAAU"),n(A,124477,"Fg=="),n(A,124489,"FQAAAAAVAAAAAAkWAAAAAAAWAAAWAAAwMTIzNDU2Nzg5QUJDREVG"),n(A,124564,"EQ=="),n(A,124604,"//////////8="),n(A,124672,"0XSeAFedvSqAcFIP//8+JwoAAABkAAAA6AMAABAnAACghgEAQEIPAICWmAAA4fUFGAAAADUAAABxAAAAa////877//+Sv///AAAAAAAAAAACAADAAwAAwAQAAMAFAADABgAAwAcAAMAIAADACQAAwAoAAMALAADADAAAwA0AAMAOAADADwAAwBAAAMARAADAEgAAwBMAAMAUAADAFQAAwBYAAMAXAADAGAAAwBkAAMAaAADAGwAAwBwAAMAdAADAHgAAwB8AAMAAAACzAQAAwwIAAMMDAADDBAAAwwUAAMMGAADDBwAAwwgAAMMJAADDCgAAwwsAAMMMAADDDQAA0w4AAMMPAADDAAAMuwEADMMCAAzDAwAMwwQADNsAAAAAIAAAAAkAAAAKAAAADQAAAAsAAAAMAAAAhQAAAAAgAAABIAAAAiAAAAMgAAAEIAAABSAAAAYgAAAIIAAACSAAAAogAAAoIAAAKSAAAF8gAAAAMAAAAAAAAE4xMF9fY3h4YWJpdjExNl9fc2hpbV90eXBlX2luZm9FAAAAAGjpAQB46AEAZOoBAE4xMF9fY3h4YWJpdjExN19fY2xhc3NfdHlwZV9pbmZvRQAAAGjpAQCo6AEAnOgBAE4xMF9fY3h4YWJpdjExN19fcGJhc2VfdHlwZV9pbmZvRQAAAGjpAQDY6AEAnOgBAE4xMF9fY3h4YWJpdjExOV9fcG9pbnRlcl90eXBlX2luZm9FAGjpAQAI6QEA/OgBAAAAAADM6AEAFAAAABUAAAAWAAAAFwAAABgAAAAZAAAAGgAAABsAAAAAAAAAsOkBABQAAAAcAAAAFgAAABcAAAAYAAAAHQAAAB4AAAAfAAAATjEwX19jeHhhYml2MTIwX19zaV9jbGFzc190eXBlX2luZm9FAAAAAGjpAQCI6QEAzOgBAAAAAAAg6gEACQAAACAAAAAhAAAAAAAAAEjqAQAJAAAAIgAAACMAAAAAAAAACOoBAAkAAAAkAAAAJQAAAFN0OWV4Y2VwdGlvbgAAAABA6QEA+OkBAFN0OWJhZF9hbGxvYwAAAABo6QEAEOoBAAjqAQBTdDIwYmFkX2FycmF5X25ld19sZW5ndGgAAAAAaOkBACzqAQAg6gEAU3Q5dHlwZV9pbmZvAAAAAEDpAQBU6gE="),n(A,125552,"wLEAAMCyAADAswAAwLQAAMC1AADAtgAAwLcAAMC4AADAuQAAwLoAAMC7AADAvAAAwL0AAMC+AADAvwAAwMAAAMDBAADAwgAAwMMAAMDEAADAxQAAwMIAAMDGAADAxwAAwMgAAMDJAADAygAAwMsAAMDMAADAzQAAwM4AAMDPAADA0AAAwNEAAMDSAADA0wAAwNQAAMDVAADA1gAAwNcAAMDYAADA2QAAwNIAAMDaAADA2wAAwNwAAMDdAADA3gAAwN8AAMDgAADA4QAAwNgAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADA4gAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwOMAAMDkAADAwgAAwMIAAMDCAADA5QAAwMIAAMDmAADA5wAAwOgAAMDpAADA6gAAwOsAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADA7AAAwO0AAMDCAADA7gAAwO8AAMDCAADA8AAAwPEAAMDyAADA8wAAwPQAAMD1AADA9gAAwPcAAMD4AADAwgAAwPkAAMD6AADA+wAAwPwAAMD9AADA/gAAwP8AAMAAAQDAAQEAwAIBAMADAQDABAEAwAUBAMAGAQDABwEAwAgBAMAJAQDACgEAwAsBAMAMAQDACwEAwA0BAMAOAQDADwEAwAsBAMDCAADAwgAAwMIAAMAQAQDAEQEAwBIBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDAwgAAwMIAAMDCAADAwgAAwBMBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMDCAADAwgAAwBQBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMDCAADAwgAAwBUBAMAWAQDACwEAwAsBAMAXAQDAGAEAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAGQEAwMIAAMDCAADAGgEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMDCAADAGwEAwBwBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMAdAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwB4BAMAfAQDAIAEAwCEBAMAiAQDAIwEAwCQBAMAlAQDA2AAAwNgAAMAmAQDACwEAwAsBAMALAQDACwEAwAsBAMAnAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwCgBAMApAQDACwEAwAsBAMAqAQDACwEAwCsBAMALAQDALAEAwC0BAMAuAQDALwEAwNgAAMDYAADAMAEAwDEBAMAyAQDAMwEAwDQBAMALAQDACwEAwAsBAMALAQDACwEAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMA1AQDAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwDYBAMA3AQDAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAOAEAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMA5AQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDAwgAAwMIAAMA6AQDAOwEAwDwB"),n(A,128496,"oVcBAEEAAADdVwEAQgAAACZYAQBDAAAAa1gBAEQAAADSWAEARQAAABNZAQBGAAAAfFkBAEcAAACEWQEASAAAADBaAQBJAAAAZ1oBAEoAAADuWgEASwAAAC5bAQBMAAAAcVsBAE0AAADZWwEATgAAAGtcAQBPAAAAh1wBAAgAAADcXAEACQAAAB9dAQAKAAAAZ10BAAsAAACVXQEADAAAAMpdAQANAAAAD14BAA4AAAAqXgEADwAAAIZeAQAPAAAAvV4BABAAAABDXwEAEQAAAH1fAQASAAAAq18BABMAAADZXwEAFAAAAAVgAQAVAAAAMGABABcAAABgYAEAGAAAAHlgAQAZAAAAtWABABsAAADdYAEAHAAAAPBgAQAdAAAAI2EBACAAAABEYQEAIQAAAG9hAQAiAAAAnWEBACMAAADRYQEAJAAAAPNhAQAlAAAAFWIBACYAAABZYgEAKAAAAH1iAQApAAAArmIBACoAAADoYgEAKwAAADVjAQAtAAAAb2MBAC4AAACnYwEALwAAAOZjAQAwAAAAeGQBADEAAACdZAEAMgAAAM9kAQAzAAAA/mQBAGQAAABgZQEAyAAAAN1lAQDJAAAAAAAAAP////8iZgEAAQAAAD5mAQACAAAABVUBAAMAAADNZgEAEQAAADRnAQASAAAAg2cBABMAAAD7ZwEAFAAAADtoAQAVAAAATGgBABYAAAB0aAEAEQAAALdoAQAhAAAAymgBACIAAAD+aAEAIwAAAEtpAQAkAAAAaWkBACUAAACfaQEAJgAAAOJpAQAhAAAAAAAAAP////8AAAAAAAAAACYAAAAAAAAAAQAAAJByAQABAAAAkHMBAAEAAACQdAEAAQAAAJB1AQABAAAAkHYBAAEAAACQdwEAAQAAAJB4AQABAAAAkHkBAAEAAACQegEAAQAAAJB7AQABAAAAkHwBAAEAAACQfQEAAQAAAJB+AQABAAAAkH8BAAEAAACQgAEAAQAAAJCBAQABAAAAkIIBAAUAAAAAAAAABg=="),n(A,129280,"oIMBAKCDAQAghAEAIIQBAKCEAQAghQEAoIUBACCGAQCghgEAoIYBACCHAQAghwEAoIcBAKCHAQAgiAEAIIgBAKCIAQCgiAEAIIkBACCJAQAuOU4ycIoBAAMHBQCQigEALjlOLnCKAQADBwUAkIoBAC45Ti5wigEAAwcFAJCKAQAuOVoycIoBAAMJBQCVigEALjlOMnCKAQADBwUAkIoBAC45SjdwigEABAcFAJqKAQAuOUo3cIoBAAQHBQCaigEALjlKN3CKAQAEBwUAmooBAC45TjJwigEAAwcFAJCKAQAuOU4ucIoBAAMHBQCQigEALjlOMnCKAQADBwUAkIoBACIpKSBwigEAAwcFAJqKAQAuOTcycIoBAAMHBQCaigEAo1MBABABAAAAVAEADAEAANJUAQARAQAAClUBACMAAAB/VQEAGwAAADRWAQAVAAAAxVYBAAABAAABVwEAAgEAAE1XAQADAQAAvVcBAAQBAAD7VwEABQEAAE5YAQATAAAAkVgBAB4AAADVWAEAFwAAAF9ZAQAaAAAAkVkBABkAAAD0WQEAGAAAADhaAQAdAAAAzloBABwAAAAPWwEAFgAAADdbAQAU"),n(A,129744,"Q1gBABABAACIWAEADAEAAPNYAQARAQAAM1kBACMAAACHWQEAGwAAAOBZAQAVAAAAQloBAAABAACcWgEAAgEAAABbAQADAQAAT1sBAAQBAACnWwEABQEAAEhcAQATAAAAc1wBAB4AAADEXAEAFwAAABVdAQAaAAAAXV0BABkAAACIXQEAGAAAANJdAQAdAAAABF4BABwAAAAvXgEAFgAAAF9eAQAU"),n(A,129920,"u08BAAEAAABcUAEAAAAAAM9QAQAAAAAAOFIBAAAAAABBUwEAAAAAAIFTAQAAAAAA+1MBAAAAAADnVAEAAAAAACVVAQAAAAAAiVUBAAAAAABUVgEAAAAAAPxWAQAAAAAADlcBAAAAAABIVwEAAAAAAKdXAQAAAAAA9lcBAAAAAAA3WAEAAAAAAKNYAQAAAAAA6FgBAAAAAAAuWQEAAAAAAH9ZAQAAAAAA61kBAAAAAAD/////g00BAIIAAAB5AAAAdg=="),n(A,130128,"4I8BAOCPAQBQkAEAwJABAMCQAQDAkAEAAQAAANQKAwCMCgMAROcC"),n(A,130176,"I0sBAAEAAAAAAAAA/////1dMAQABAAAA+0wBAAIAAADGTQEAAwAAAAAAAAD/////Vk4BAAAAAADSTgEAAQAAALJPAQACAAAAGFABABQAAAAAAAAA/////wAAAAAAAAAAt1ABABIAAABNUgEAFAAAAN5SAQAkAAAAhlMBAEAAAAARVAEAwQAAAAAAAAD/////q1QBAAEAAAAAAAAA/////1dMAQAAAAAAGVUBAAEAAACRVQEAAgAAAENWAQADAAAA31YBAAQAAAAgVwEABQAAAAAAAAD/////AAAAAAAAAABXTAEAAQAAAIlXAQACAAAAr1cBAAMAAADfVgEABAAAACBXAQAFAAAAAAAAAP////8AAAAAClgBADxYAQAYUAEAqFgB"),n(A,130480,"8l8BAAEAAAA5YAEAAgAAAFhgAQADAAAAgWABAAQAAACwYAEABQAAANNgAQAGAAAABWEBAAcAAAAqYQEACAAAAFFhAQAJAAAAdmEBAAoAAACQYQEACwAAAMNhAQAMAAAA+WEBAA0AAAAuYgEADgAAAE5iAQAPAAAAhmIBAA8AAADUYgEADwAAABljAQAPAAAAP2MBAA8AAACkYwEABwAAANpjAQAHAAAAO2QBAAcAAACEZAEABwAAAK9kAQAHAAAAw2QBAA4AAADnZAEADgAAAAplAQAQAAAA9GUBABAAAAArZgEAEAAAAN9WAQAQAAAAbmYBABAAAADBZgEAEA=="),n(A,130752,"f20BAD4AAACjbQEAPOAAAM1tAQAmAAAA1G0BACIAAAA6bgEAIAAAAHhuAQAnAAAAAAAAAP////8AAAAAAAAAAGNnAQBkAAAAxWcBAAAAAAAJaAEAHgAAAEJoAQBBAAAAQ1YBAGQAAACGaAEAlgAAAKVoAQDmAAAAAAAAAP////9jZwEAZAAAAL5oAQA8AAAA6WgBAFAAAABDVgEAZAAAABJpAQB9AAAAUmkBAKAAAAAAAAAA/////wAAAAAAAAAAY2cBAGQAAACUaQEARgAAAN5pAQBVAAAAQ1YBAGQAAAAoagEAbgAAAGdqAQB4AAAAAAAAAP////8AAAAAAAAAAGNnAQBkAAAAlGkBABQAAADeaQEAMgAAAENWAQBkAAAAKGoBAIwAAABnagEAtAAAAAAAAAD/////"),n(A,131076,"QP8BAAD/AQCA/wEAwP8B"),n(A,131104,"wmoBACDgAAALawEACeAAAEFrAQBf4AAAe2sBACI="),n(A,131152,"q2sBAAEAAAC8awEAAgAAAA1sAQAD"),n(A,131184,"+EwBAMJNAQBTTgEACU8BAOVPAQBkUAEA2lABAGdSAQDyUgEA1FMBAGFUAQ=="),n(A,131236,"iFIBADlTAQAAAAAAnlMBAGRUAQDwVAEAL1UBAJpVAQBQVgE="),n(A,131280,"Y1IBAIADAACAA/8DbGUAAAcAAAA0UwEAIAQAAAAELwUAAAAAAAAAAHNTAQAwBQAAMAWPBXloAAAEAAAAG1QBAJAFAACQBf8FAAAAAAAAAAC3VAEAAAYAAAAG/wYAAAAAAAAAACpVAQAABwAAAAdPBwAAAAAAAAAAllUBAAAJAAAACX8JaWgAAAQAAAA/VgEAgAkAAIAJ/wluYgAABAAAANZWAQAACgAAAAp/CmFwAAAEAAAAClcBAIAKAACACv8KdWcAAAQAAABfVwEAAAsAAAALfwsAAAAAAAAAAM5XAQCACwAAgAv/C2F0AAAEAAAAD1gBAAAMAAAADH8MZXQAAAAAAAAsWAEAgAwAAIAM/wxuawAABAAAAJ9YAQAADQAAAA1/DWxtAAAEAAAA5FgBAIANAACADf8NaXMAAAQAAAA8WQEAAA4AAAAOfw4AAAAAAAAAAJtZAQCADgAAgA7/DgAAAAAAAAAA8FkBAAAPAAAAD/8PAAAAAAAAAAA0WgEAABAAAAAQnxAAAAAAAAAAANlaAQCgEAAAoBD/EGFrAAAEAAAAGFsBAAARAAAAEf8Rb2sAAAQAAABKWwEAABIAAAASnxMAAAAAAAAAALlbAQAAKAAAACj/KAAAAAAQAAAAWlwBAEAwAABAMP8wAAAAAAgAAACDXAEAADEAAAAx/58AAAAACAAAABhbAQAApwAAAKf/129rAAAM"),n(A,131840,"WAIAAKoAAACwBAAAhwAAANAHAABuAAAAuAsAAG4AAAD/////"),n(A,131888,"qAsD"),n(A,131904,"mF4BAAEAAAA4XwEAAgAAAGFfAQADAAAAnV8BAAYAAADCXwEACQAAAPhfAQAKAAAAJ2ABAAQAAABNYAEABQAAAI1gAQAkAAAAq2ABAAsAAADVYAEADAAAAPZgAQANAAAAFmEBAA4AAABMYQEADwAAAGdhAQAQAAAAlmEBABEAAAC7YQEAEgAAAAJiAQAfAAAAG2IBACUAAABIYgEAIAAAAJJiAQAhAAAAzmIBACIAAADwYgEABwAAAC5jAQAI"),n(A,132112,"jmMBAAEAAAC8YwEAAgAAAAAAAAABAAAAFJwBACCcAQAsnAEAPAAAABo="),n(A,132163,"AgMFCAsOEhYbICUrMTc+RUxTWmJpcXmAiJCYn6autbzCyc/V2uDk6e3w9Pb5+/z9/f39/Pv59vTw7enk4NrVz8nCvLWupp+YkIiAeXFpYlpTTEU+NzErJSAbFhIOCwgFAwI="),n(A,132288,"QAAAAAABAAAAAAAA7AQCACcAAAAoAAAAKQAAACoAAAArAAAAQOkBAMO2AQBo6QEAsLYBAOQEAgAAAAAAJAUCACwAAAAtAAAALgAAAC8AAABA6QEAArcBAGjpAQDstgEAEAUCAGjpAQDStgEAGAUCAAU="),n(A,132412,"DQ=="),n(A,132436,"CwAAAAoAAADoeAM="),n(A,132460,"Ag=="),n(A,132476,"//////////8="),n(A,132544,"MAUCAAAAAAAF"),n(A,132564,"MA=="),n(A,132588,"CwAAADEAAAD4eAMAAAQ="),n(A,132612,"AQ=="),n(A,132628,"/////wo="),n(A,132696,"yAUCAAB/BA==");var Qn,Tn=(Qn=[null,function(e){var A,t=0;return t=i[(e|=0)>>2],i[e>>2]=t+1,t=255&(A=a[0|t]),(0|A)<0&&(t=p[(i[e+12>>2]+(t<<1)|0)-256>>1]),0|t},Mn,function(e){var A,t;return A=i[(e|=0)>>2],t=i[A>>2],i[e>>2]=A+4,0|t},function(e){var A=0,t=0;return A=i[(e|=0)>>2],65533==(0|(t=uA(e)))&&(i[e>>2]=A+1,i[e+8>>2]=1,t=255&(A=a[0|A]),(0|A)>=0||(t=p[(i[e+12>>2]+(t<<1)|0)-256>>1])),0|t},uA,function(e){var A,t,r=0;return(r=i[4+(e|=0)>>2])>>>0<=(t=(A=i[e>>2])+1|0)>>>0?(i[e>>2]=r,65533):(i[e>>2]=t,r=o[0|A],i[e>>2]=A+2,r|o[A+1|0]<<8)},function(e,A){var t,r,n;return A|=0,e=i[(e|=0)>>2],t=i[e+4>>2],r=i[A>>2],(A=hr(t+1|0,(n=i[r+4>>2])+1|0))||(A=a[0|t]-a[0|n]|0)||(A=hr(i[e>>2],i[r>>2])),0|A},function(e,A){var t;return e|=0,A=i[(A|=0)>>2],t=i[e>>2],(e=i[A+16>>2]-i[t+16>>2]|0)||(e=hr(i[t>>2],i[A>>2])),0|e},En,function(e,A,t,r){var n;return A|=0,t|=0,r|=0,W=n=W-16|0,(e=0|z(i[60+(e|=0)>>2],0|A,0|t,255&r,n+8|0))?(i[56798]=e,e=-1):e=0,W=n+16|0,Z=e?-1:i[n+12>>2],0|(e?-1:i[n+8>>2])},function(e,A,t){A|=0,t|=0;var r,n=0,a=0,s=0,o=0,l=0,c=0;W=r=W-32|0,n=i[28+(e|=0)>>2],i[r+16>>2]=n,s=i[e+20>>2],i[r+28>>2]=t,i[r+24>>2]=A,A=s-n|0,i[r+20>>2]=A,s=A+t|0,l=2;e:{A:{A=r+16|0,(n=0|y(i[e+60>>2],0|A,2,r+12|0))?(i[56798]=n,n=-1):n=0;t:{if(n)n=A;else for(;;){if((0|(a=i[r+12>>2]))==(0|s))break t;if((0|a)<0){n=A;break A}if(o=a-((c=(o=i[A+4>>2])>>>0<a>>>0)?o:0)|0,i[(n=(c<<3)+A|0)>>2]=o+i[n>>2],i[(A=(c?12:4)+A|0)>>2]=i[A>>2]-o,s=s-a|0,A=n,l=l-c|0,(a=0|y(i[e+60>>2],0|A,0|l,r+12|0))?(i[56798]=a,a=-1):a=0,a)break}if(-1!=(0|s))break A}A=i[e+44>>2],i[e+28>>2]=A,i[e+20>>2]=A,i[e+16>>2]=A+i[e+48>>2],e=t;break e}i[e+28>>2]=0,i[e+16>>2]=0,i[e+20>>2]=0,i[e>>2]=32|i[e>>2],e=0,2!=(0|l)&&(e=t-i[n+4>>2]|0)}return W=r+32|0,0|e},function(e,A,t){e|=0,A|=0,t|=0;var r,n=0,s=0,l=0;W=r=W-32|0,i[r+16>>2]=A,n=i[e+48>>2],i[r+20>>2]=t-!!(0|n),s=i[e+44>>2],i[r+28>>2]=n,i[r+24>>2]=s;e:{A:{if((n=0|j(i[e+60>>2],r+16|0,2,r+12|0))?(i[56798]=n,n=-1):n=0,n)A=32;else{if((0|(n=i[r+12>>2]))>0)break A;A=n?32:16}i[e>>2]=A|i[e>>2];break e}l=n,(s=i[r+20>>2])>>>0>=n>>>0||(n=i[e+44>>2],i[e+4>>2]=n,i[e+8>>2]=n+(l-s|0),i[e+48>>2]&&(i[e+4>>2]=n+1,a[(A+t|0)-1|0]=o[0|n]),l=t)}return W=r+32|0,0|l},function(e){return 0|B(i[60+(e|=0)>>2])},ln,function(e,A,t,r,n,s){e|=0,A=+A,t|=0,r|=0,n|=0,s|=0;var c,g=0,d=0,f=0,p=0,h=0,m=0,b=0,w=0,k=0,x=0,v=0,B=0,y=0,E=0,M=0,G=0,D=0,Q=0;W=c=W-560|0,i[c+44>>2]=0,u(+A),g=0|l(1),l(0),(0|g)<0?(B=1,D=84997,u(+(A=-A)),g=0|l(1),l(0)):2048&n?(B=1,D=85e3):(D=(B=1&n)?85003:84998,Q=!B);e:if(2146435072&~g){E=c+16|0;A:{t:{r:{if(A=Wt(A,c+44|0),0!=(A+=A)){if(g=i[c+44>>2],i[c+44>>2]=g-1,97!=(0|(M=32|s)))break r;break A}if(97==(0|(M=32|s)))break A;h=i[c+44>>2],m=(0|r)<0?6:r;break t}h=g-29|0,i[c+44>>2]=h,A*=268435456,m=(0|r)<0?6:r}for(d=x=(c+48|0)+((0|h)>=0?288:0)|0;r=A<4294967296&A>=0?~~A>>>0:0,i[d>>2]=r,d=d+4|0,0!=(A=1e9*(A-+(r>>>0))););if((0|h)<=0)r=h,g=d,f=x;else for(f=x,r=h;;){if(w=(0|r)>=29?29:r,!(f>>>0>(g=d-4|0)>>>0)){for(r=0;p=i[g>>2],G=r,r=31&w,(63&w)>>>0>=32?(b=p<<r,r=0):(b=(1<<r)-1&p>>>32-r,r=p<<r),p=b+k|0,r=vn(G=G+r|0,r>>>0>G>>>0?p+1|0:p,1e9),i[g>>2]=G-rr(r,Z,1e9,0),f>>>0<=(g=g-4|0)>>>0;);r&&(i[(f=f-4|0)>>2]=r)}for(;f>>>0<(g=d)>>>0&&!i[(d=g-4|0)>>2];);if(r=i[c+44>>2]-w|0,i[c+44>>2]=r,d=g,!((0|r)>0))break}if((0|r)<0)for(y=1+((m+25>>>0)/9|0)|0,k=102==(0|M);;){if(b=(0|(r=0-r|0))>=9?9:r,g>>>0<=f>>>0)d=i[f>>2];else{for(w=1e9>>>b|0,p=~(-1<<b),r=0,d=f;G=r,r=i[d>>2],i[d>>2]=G+(r>>>b|0),r=C(w,r&p),(d=d+4|0)>>>0<g>>>0;);d=i[f>>2],r&&(i[g>>2]=r,g=g+4|0)}if(r=b+i[c+44>>2]|0,i[c+44>>2]=r,f=(!d<<2)+f|0,g=g-(d=k?x:f)>>2>(0|y)?d+(y<<2)|0:g,!((0|r)<0))break}if(r=0,!(g>>>0<=f>>>0||(r=C(x-f>>2,9),d=10,(p=i[f>>2])>>>0<10)))for(;r=r+1|0,p>>>0>=(d=C(d,10))>>>0;);if((0|(d=(m-(102!=(0|M)?r:0)|0)-(103==(0|M)&!!(0|m))|0))<(C(g-x>>2,9)-9|0)){if(h=((((0|h)<0?4:292)+c|0)+((p=(0|(w=d+9216|0))/9|0)<<2)|0)-4048|0,d=10,(0|(b=w-C(p,9)|0))<=7)for(;d=C(d,10),8!=(0|(b=b+1|0)););if(!(!(k=(w=i[h>>2])-C(d,y=(w>>>0)/(d>>>0)|0)|0)&(0|(p=h+4|0))==(0|g))&&(!(1&y)&&(A=9007199254740992,!(1&a[h-4|0])|1e9!=(0|d)|f>>>0>=h>>>0)||(A=9007199254740994),v=(0|g)==(0|p)?1:1.5,v=(p=d>>>1|0)>>>0>k>>>0?.5:(0|p)==(0|k)?v:1.5,45!=o[0|D]|Q||(v=-v,A=-A),p=w-k|0,i[h>>2]=p,A+v!=A)){if(r=d+p|0,i[h>>2]=r,r>>>0>=1e9)for(;i[h>>2]=0,(h=h-4|0)>>>0<f>>>0&&(i[(f=f-4|0)>>2]=0),r=i[h>>2]+1|0,i[h>>2]=r,r>>>0>999999999;);if(r=C(x-f>>2,9),d=10,!((p=i[f>>2])>>>0<10))for(;r=r+1|0,p>>>0>=(d=C(d,10))>>>0;);}g=g>>>0>(d=h+4|0)>>>0?d:g}for(;p=g,!(w=g>>>0<=f>>>0)&&!i[(g=p-4|0)>>2];);if(103==(0|M)){if(m=((g=(0|(d=m||1))>(0|r)&(0|r)>-5)?~r:-1)+d|0,s=(g?-1:-2)+s|0,!(h=8&n)){if(g=-9,!w&&(h=i[p-4>>2])&&(b=10,g=0,!((h>>>0)%10|0))){for(;d=g,g=g+1|0,!((h>>>0)%((b=C(b,10))>>>0)|0););g=~d}d=C(p-x>>2,9),70!=(-33&s)?(h=0,m=(0|(g=(0|(g=((r+d|0)+g|0)-9|0))>0?g:0))>(0|m)?m:g):(h=0,m=(0|(g=(0|(g=(g+d|0)-9|0))>0?g:0))>(0|m)?m:g)}}else h=8&n;if(b=-1,(0|((w=h|m)?2147483645:2147483646))<(0|m))break e;if(k=1+(!!(0|w)+m|0)|0,70!=(0|(d=-33&s))){if((E-(g=Kt(((g=r>>31)^r)-g|0,0,E))|0)<=1)for(;a[0|(g=g-1|0)]=48,(E-g|0)<2;);if(a[0|(y=g-2|0)]=s,a[g-1|0]=(0|r)<0?45:43,(0|(g=E-y|0))>(2147483647^k))break e}else{if((2147483647^k)<(0|r))break e;g=(0|r)>0?r:0}if((0|(r=g+k|0))>(2147483647^B))break e;or(e,32,t,k=r+B|0,n),dn(e,D,B),or(e,48,t,k,65536^n);t:{r:{n:{if(70==(0|d)){for(r=8|(s=c+16|0),h=9|s,f=d=f>>>0>x>>>0?x:f;;){g=Kt(i[f>>2],0,h);a:if((0|d)==(0|f))(0|g)==(0|h)&&(a[c+24|0]=48,g=r);else{if(c+16>>>0>=g>>>0)break a;for(;a[0|(g=g-1|0)]=48,c+16>>>0<g>>>0;);}if(dn(e,g,h-g|0),!(x>>>0>=(f=f+4|0)>>>0))break}if(w&&dn(e,85998,1),(0|m)<=0|f>>>0>=p>>>0)break n;for(;;){if((g=Kt(i[f>>2],0,h))>>>0>c+16>>>0)for(;a[0|(g=g-1|0)]=48,c+16>>>0<g>>>0;);if(dn(e,g,(0|m)>=9?9:m),g=m-9|0,p>>>0<=(f=f+4|0)>>>0)break r;if(r=(0|m)>9,m=g,!r)break}break r}a:if(!((0|m)<0))for(x=f>>>0<p>>>0?p:f+4|0,r=8|(s=c+16|0),p=9|s,d=f;;){(0|p)==(0|(g=Kt(i[d>>2],0,p)))&&(a[c+24|0]=48,g=r);s:if((0|d)==(0|f))dn(e,g,1),g=g+1|0,h|m&&dn(e,85998,1);else{if(c+16>>>0>=g>>>0)break s;for(;a[0|(g=g-1|0)]=48,c+16>>>0<g>>>0;);}if(dn(e,g,(0|(s=p-g|0))>(0|m)?m:s),m=m-s|0,x>>>0<=(d=d+4|0)>>>0)break a;if(!((0|m)>=0))break}or(e,48,m+18|0,18,0),dn(e,y,E-y|0);break t}g=m}or(e,48,g+9|0,9,0)}or(e,32,t,k,8192^n),b=(0|t)<(0|k)?k:t;break e}if(h=(s<<26>>31&9)+D|0,!(r>>>0>11)){for(g=12-r|0,v=16;v*=16,g=g-1|0;);A=45!=o[0|h]?A+v-v:-(v+(-A-v))}for((0|E)==(0|(g=Kt(((g=i[c+44>>2])^(d=g>>31))-d|0,0,E)))&&(a[c+15|0]=48,g=c+15|0),x=2|B,f=32&s,d=i[c+44>>2],a[0|(m=g-2|0)]=s+15,a[g-1|0]=(0|d)<0?45:43,g=8&n,d=c+16|0;s=d,p=I(A)<2147483648?~~A:-2147483648,a[0|d]=f|o[p+124512|0],!((0|r)>0|g)&0==(A=16*(A-+(0|p)))|1!=((d=s+1|0)-(c+16|0)|0)||(a[s+1|0]=46,d=s+2|0),0!=A;);b=-1,(2147483645-(s=(g=E-m|0)+x|0)|0)<(0|r)||(or(e,32,t,s=(r=!r||((f=d-(c+16|0)|0)-2|0)>=(0|r)?f=d-(c+16|0)|0:r+2|0)+s|0,n),dn(e,h,x),or(e,48,t,s,65536^n),dn(e,c+16|0,f),or(e,48,r-f|0,0,0),dn(e,m,g),or(e,32,t,s,8192^n),b=(0|t)<(0|s)?s:t)}else or(e,32,t,g=B+3|0,-65537&n),dn(e,D,B),r=32&s,dn(e,A!=A?r?85596:85774:r?85247:85460,3),or(e,32,t,g,8192^n),b=(0|t)<(0|g)?g:t;return W=c+560|0,0|b},function(e,A){var t;e|=0,t=A|=0,A=i[A>>2]+7&-8,i[t>>2]=A+16,m[e>>3]=tA(i[A>>2],i[A+4>>2],i[A+8>>2],i[A+12>>2])},function(e,A,t){A|=0,t|=0;var r,n,s=0,o=0;return r=i[84+(e|=0)>>2],o=i[r+4>>2],n=i[e+28>>2],(s=(s=i[e+20>>2]-n|0)>>>0>o>>>0?o:s)&&(_e(i[r>>2],n,s),i[r>>2]=s+i[r>>2],o=i[r+4>>2]-s|0,i[r+4>>2]=o),s=i[r>>2],(o=t>>>0>o>>>0?o:t)&&(_e(s,A,o),s=o+i[r>>2]|0,i[r>>2]=s,i[r+4>>2]=i[r+4>>2]-o),a[0|s]=0,A=i[e+44>>2],i[e+28>>2]=A,i[e+20>>2]=A,0|t},function(e,A,t){t|=0;var r,n,a=0;return _e(A|=0,r=i[84+(e|=0)>>2],t=t>>>0>(a=(n=JA(r,0,a=t+256|0))?n-r|0:a)>>>0?a:t),A=r+a|0,i[e+84>>2]=A,i[e+8>>2]=A,i[e+4>>2]=t+r,0|t},function(e,A,t){A|=0,t|=0;var r,n=0,s=0,l=0;n=i[84+(e|=0)>>2],r=i[n>>2]?n:84412,n=0;e:if(i[e+48>>2])for(;;){if(!(s=i[(n<<2)+r>>2]))break e;if(a[i[e+44>>2]+n|0]=(0|s)>=128?64:s,!((n=n+1|0)>>>0<h[e+48>>2]))break}return s=i[e+44>>2],i[e+4>>2]=s,i[e+84>>2]=(n<<2)+r,i[e+8>>2]=n+s,!t|!n||(i[e+4>>2]=s+1,a[0|A]=o[0|s],l=1),0|l},En,Gn,Dn,Dn,function(e,A,t){t|=0;var r,n=0;return W=r=W+-64|0,n=1,Yr(e|=0,A|=0,0)||(n=0,A&&(n=0,(A=IA(A,125132))&&(kA(4|(n=r+8|0),0,52),i[r+56>>2]=1,i[r+20>>2]=-1,i[r+16>>2]=e,i[r+8>>2]=A,Tn[i[i[A>>2]+28>>2]](A,n,i[t>>2],1),1==(0|(e=i[r+32>>2]))&&(i[t>>2]=i[r+24>>2]),n=1==(0|e)))),W=r- -64|0,0|n},function(e,A,t,r,n,a){t|=0,r|=0,n|=0,a|=0,Yr(e|=0,i[8+(A|=0)>>2],a)&&pt(A,t,r,n)},function(e,A,t,r,n){if(t|=0,r|=0,n|=0,Yr(e|=0,i[8+(A|=0)>>2],n))1==i[A+28>>2]|i[A+4>>2]!=(0|t)||(i[A+28>>2]=r);else e:if(Yr(e,i[A>>2],n)){if(!(i[A+16>>2]!=(0|t)&i[A+20>>2]!=(0|t))){if(1!=(0|r))break e;return void(i[A+32>>2]=1)}i[A+20>>2]=t,i[A+32>>2]=r,i[A+40>>2]=i[A+40>>2]+1,1!=i[A+36>>2]|2!=i[A+24>>2]||(a[A+54|0]=1),i[A+44>>2]=4}},function(e,A,t,r){t|=0,r|=0,Yr(e|=0,i[8+(A|=0)>>2],0)&&ir(A,t,r)},Gn,function(e,A,t,r,n,a){t|=0,r|=0,n|=0,a|=0,Yr(e|=0,i[8+(A|=0)>>2],a)?pt(A,t,r,n):(e=i[e+8>>2],Tn[i[i[e>>2]+20>>2]](e,A,t,r,n,a))},function(e,A,t,r,n){if(t|=0,r|=0,n|=0,Yr(e|=0,i[8+(A|=0)>>2],n))1==i[A+28>>2]|i[A+4>>2]!=(0|t)||(i[A+28>>2]=r);else e:{if(Yr(e,i[A>>2],n)){if(!(i[A+16>>2]!=(0|t)&i[A+20>>2]!=(0|t))){if(1!=(0|r))break e;return void(i[A+32>>2]=1)}i[A+32>>2]=r;A:if(4!=i[A+44>>2]){if(s[A+52>>1]=0,e=i[e+8>>2],Tn[i[i[e>>2]+20>>2]](e,A,t,t,1,n),o[A+53|0]){if(i[A+44>>2]=3,!o[A+52|0])break A;break e}i[A+44>>2]=4}if(i[A+20>>2]=t,i[A+40>>2]=i[A+40>>2]+1,1!=i[A+36>>2]|2!=i[A+24>>2])break e;return void(a[A+54|0]=1)}e=i[e+8>>2],Tn[i[i[e>>2]+24>>2]](e,A,t,r,n)}},function(e,A,t,r){t|=0,r|=0,Yr(e|=0,i[8+(A|=0)>>2],0)?ir(A,t,r):(e=i[e+8>>2],Tn[i[i[e>>2]+28>>2]](e,A,t,r))},Gn,function(e){return 84787},Gn,function(e){return 85058},Gn,function(e){return 84147},function(e){var A;return A=e|=0,e=i[e>>2],i[A>>2]=e+1,0|((0|(e=a[0|e]))<0?65533:255&e)},function(e,A,t,r,n,s){e|=0,A|=0,t|=0,r|=0,n|=0,s|=0;var l,c=0,g=0,u=0,f=0,p=0,h=0,C=0,b=0;if(l=Nr(408),i[l+4>>2]=r,i[l>>2]=t,A?(_e(l+16|0,A,376),m[l+392>>3]=(m[A+368>>3]-m[A>>3])/+(t>>>0),A=0):A=1,i[l+400>>2]=n,a[l+8|0]=A,s){if(t=i[e+24>>2])for(A=i[e+20>>2],r=i[e+8>>2];(n=i[i[(A>>>8&16777212)+r>>2]+((1023&A)<<2)>>2])&&(ye(n),t=i[e+24>>2],r=i[e+8>>2],A=i[e+20>>2]),A=A+1|0,i[e+20>>2]=A,t=t-1|0,i[e+24>>2]=t,A>>>0>=2048&&(ye(i[r>>2]),r=i[e+8>>2]+4|0,i[e+8>>2]=r,A=i[e+20>>2]-1024|0,i[e+20>>2]=A,t=i[e+24>>2]),t;);A=i[e+28>>2],i[e+420>>2]=i[A>>2],(t=i[e+32>>2])&&(a[A+8|0]=o[t+8|0],_e(A+16|0,e+40|0,376),(A=i[e+32>>2])&&ye(A),i[e+32>>2]=0)}if(t=(r=i[e+24>>2])+i[e+20>>2]|0,n=i[e+12>>2],(0|t)==(0|((0|(A=i[e+8>>2]))!=(0|n)?(n-A<<8)-1:0))){W=c=W-32|0;e:{A:{t:{r:{if((A=i[16+(s=e+4|0)>>2])>>>0>=1024){if(i[s+16>>2]=A-1024,A=i[s+4>>2],h=i[A>>2],n=A+4|0,i[s+4>>2]=n,(0|(A=i[s+8>>2]))==i[s+12>>2])if((g=i[s>>2])>>>0<n>>>0)t=mA((r=(1+(n-g>>2)|0)/-2<<2)+n|0,n,A=A-n|0)+A|0,i[s+8>>2]=t,i[s+4>>2]=r+i[s+4>>2];else{if((t=(0|A)==(0|g)?1:A-g>>1)>>>0>=1073741824)break r;if(C=(r=t<<2)+(u=Nr(r))|0,t=r=u+(-4&t)|0,(0|A)!=(0|n)){if(b=-4&(A=A-n|0),p=1+((f=A-4|0)>>>2|0)&7)for(t=0,A=r;i[A>>2]=i[n>>2],n=n+4|0,A=A+4|0,(0|p)!=(0|(t=t+1|0)););else A=r;if(t=r+b|0,!(f>>>0<28))for(;i[A>>2]=i[n>>2],i[A+4>>2]=i[n+4>>2],i[A+8>>2]=i[n+8>>2],i[A+12>>2]=i[n+12>>2],i[A+16>>2]=i[n+16>>2],i[A+20>>2]=i[n+20>>2],i[A+24>>2]=i[n+24>>2],i[A+28>>2]=i[n+28>>2],n=n+32|0,(0|t)!=(0|(A=A+32|0)););}i[s+12>>2]=C,i[s+8>>2]=t,i[s+4>>2]=r,i[s>>2]=u,g&&(ye(g),t=i[s+8>>2])}else t=A;i[t>>2]=h,i[s+8>>2]=i[s+8>>2]+4;break e}if((g=(n=i[s+8>>2])-i[s+4>>2]>>2)>>>0<(r=(A=i[s+12>>2])-(t=i[s>>2])|0)>>2>>>0){if((0|A)!=(0|n)){i[c+8>>2]=Nr(4096),cA(s,c+8|0);break e}if(i[c+8>>2]=Nr(4096),oA(s,c+8|0),A=i[s+4>>2],h=i[A>>2],n=A+4|0,i[s+4>>2]=n,(0|(A=i[s+8>>2]))==i[s+12>>2])if((g=i[s>>2])>>>0<n>>>0)t=mA((r=(1+(n-g>>2)|0)/-2<<2)+n|0,n,A=A-n|0)+A|0,i[s+8>>2]=t,i[s+4>>2]=r+i[s+4>>2];else{if((t=(0|A)==(0|g)?1:A-g>>1)>>>0>=1073741824)break r;if(C=(r=t<<2)+(u=Nr(r))|0,t=r=u+(-4&t)|0,(0|A)!=(0|n)){if(b=-4&(A=A-n|0),p=1+((f=A-4|0)>>>2|0)&7)for(t=0,A=r;i[A>>2]=i[n>>2],n=n+4|0,A=A+4|0,(0|p)!=(0|(t=t+1|0)););else A=r;if(t=r+b|0,!(f>>>0<28))for(;i[A>>2]=i[n>>2],i[A+4>>2]=i[n+4>>2],i[A+8>>2]=i[n+8>>2],i[A+12>>2]=i[n+12>>2],i[A+16>>2]=i[n+16>>2],i[A+20>>2]=i[n+20>>2],i[A+24>>2]=i[n+24>>2],i[A+28>>2]=i[n+28>>2],n=n+32|0,(0|t)!=(0|(A=A+32|0)););}i[s+12>>2]=C,i[s+8>>2]=t,i[s+4>>2]=r,i[s>>2]=u,g&&(ye(g),t=i[s+8>>2])}else t=A;i[t>>2]=h,i[s+8>>2]=i[s+8>>2]+4;break e}if(i[c+24>>2]=s+12,!((A=(0|A)==(0|t)?1:r>>1)>>>0>=1073741824)){if(A=Nr(t=A<<2),i[c+8>>2]=A,r=A+(g<<2)|0,i[c+16>>2]=r,i[c+20>>2]=A+t,i[c+12>>2]=r,i[c+4>>2]=Nr(4096),cA(c+8|0,c+4|0),(0|(n=i[s+8>>2]))==i[s+4>>2]){A=n;break A}for(;oA(c+8|0,n=n-4|0),i[s+4>>2]!=(0|n););break t}}Rr(),d()}A=i[s+8>>2]}t=i[s>>2],i[s>>2]=i[c+8>>2],i[c+8>>2]=t,i[s+4>>2]=i[c+12>>2],i[c+12>>2]=n,i[s+8>>2]=i[c+16>>2],i[c+16>>2]=A,r=i[s+12>>2],i[s+12>>2]=i[c+20>>2],i[c+20>>2]=r,(0|A)!=(0|n)&&(i[c+16>>2]=A+(3+(n-A|0)&-4)),t&&ye(t)}W=c+32|0,t=(r=i[e+24>>2])+i[e+20>>2]|0,A=i[e+8>>2]}i[i[A+(t>>>8&16777212)>>2]+((1023&t)<<2)>>2]=l,i[e+24>>2]=r+1},function(e){var A=0,t=0,r=0,n=0,s=0,l=0,c=0,g=0,u=0;t=i[420+(e|=0)>>2]+1|0,i[e+420>>2]=t;e:{if(A=i[e+32>>2]){if(t>>>0>(c=i[A+4>>2])>>>0){(t=i[e+28>>2])&&(ye(t),A=i[e+32>>2]),i[e+32>>2]=0,i[e+28>>2]=A;break e}for(s=e+40|0,l=A+16|0,g=i[e+28>>2]+16|0,u=+(t>>>0)/+(c>>>0),A=0;;){if(r=m[(t=A<<3)+l>>3],n=m[t+g>>3],m[t+s>>3]=r==r?(r-n)*u+n:n,47==(0|(t=1|A)))break e;r=m[(t<<=3)+l>>3],n=m[t+g>>3],m[t+s>>3]=r==r?(r-n)*u+n:n,A=A+2|0}}if(A=i[e+28>>2],t>>>0>h[A>>2]){if(s=i[e+24>>2]){if(a[e+416|0]=0,l=i[e+8>>2],t=i[e+20>>2],A=i[i[l+(t>>>8&16777212)>>2]+((1023&t)<<2)>>2],i[e+32>>2]=A,i[e+24>>2]=s-1,t=t+1|0,i[e+20>>2]=t,t>>>0>=2048&&(ye(i[l>>2]),i[e+8>>2]=i[e+8>>2]+4,i[e+20>>2]=i[e+20>>2]-1024,A=i[e+32>>2]),o[A+8|0])_e(A+16|0,i[e+28>>2]+16|0,376),A=i[e+32>>2],i[A+368>>2]=0,i[A+372>>2]=0,r=m[e+40>>3],i[A+392>>2]=0,i[A+396>>2]=0,m[A+16>>3]=r;else if(t=i[e+28>>2],o[t+8|0]&&(_e(t+16|0,A+16|0,376),A=i[e+28>>2],i[A+368>>2]=0,i[A+372>>2]=0,!(A=i[e+32>>2])))break e;-1!=(0|(t=i[A+400>>2]))&&(i[e+424>>2]=t),i[e+420>>2]=0,m[A+16>>3]=m[A+392>>3]*+h[A+4>>2]+m[A+16>>3];break e}a[e+416|0]=1}else r=m[A+392>>3]+m[e+40>>3],m[e+40>>3]=r,m[A+16>>3]=r}return 0|(o[e+416|0]?0:e+40)},function(e){return i[424+(e|=0)>>2]},function(e){var A=0;return i[(e|=0)>>2]=132304,(A=i[e+28>>2])&&ye(A),(A=i[e+32>>2])&&ye(A),qA(e+4|0),0|e},function(e){var A=0;i[(e|=0)>>2]=132304,(A=i[e+28>>2])&&ye(A),(A=i[e+32>>2])&&ye(A),qA(e+4|0),ye(e)},function(e,A,t){A|=0,t|=0;var r=0,n=0,o=0,l=0,c=0,g=0,u=0,d=0,f=0,p=0,h=0,C=0,b=0,w=0,k=0,x=0,v=0,B=0,y=0;if(!i[1088+(e|=0)>>2])return 0;e:if(A){for(u=e+648|0,g=e- -64|0;;){if(r=i[e+1088>>2],!(r=0|Tn[i[i[r>>2]+4>>2]](r)))break e;if(n=rA(m[e+32>>3]+m[r+16>>3]/+i[e+24>>2]),m[e+32>>3]=n,n=st(6.283185307179586*n),n=rA(m[e+16>>3]+m[r>>3]*(.06*n*m[r+8>>3]+1)/+i[e+8>>2]),m[e+16>>3]=n,c=rr(i[56848],i[56849],1284865837,1481765933),o=Z,o=(c=c+1|0)?o:o+1|0,i[56848]=c,i[56849]=o,l=.75*m[e+40>>3]+ +(o>>>1|0)/2147483647,m[e+40>>3]=l,d=m[r+24>>3],o=n>=m[r+32>>3],a[e+48|0]=o,l=(p=d)*(d=.2*l),l=OA(g+512|0,OA(g+440|0,n=m[r+352>>3]*(d*m[r+48>>3]+m[r+40>>3]*(n+n+-1+(o?l:.01*l)))*.5,m[r+104>>3],m[r+168>>3]),m[r+112>>3],m[r+176>>3]),l=OA(g+8|0,OA(g+80|0,OA(g+152|0,OA(g+224|0,OA(g+296|0,OA(g+368|0,l==l?(l-n)*m[r+184>>3]+n:n,m[r+96>>3],m[r+160>>3]),m[r+88>>3],m[r+152>>3]),m[r+80>>3],m[r+144>>3]),m[r+72>>3],m[r+136>>3]),m[r+64>>3],m[r+128>>3]),m[r+56>>3],m[r+120>>3]),c=rr(i[56848],i[56849],1284865837,1481765933),o=Z,o=(c=c+1|0)?o:o+1|0,i[56848]=c,i[56849]=o,n=.75*m[e+56>>3]+ +(o>>>1|0)/2147483647,m[e+56>>3]=n,o=(f<<1)+t|0,d=OA(u+8|0,n=m[r+352>>3]*(m[r+192>>3]*(.3*n))*.5,m[r+200>>3],m[r+248>>3]),h=m[r+296>>3],C=OA(u+80|0,n,m[r+208>>3],m[r+256>>3]),b=m[r+304>>3],w=OA(u+152|0,n,m[r+216>>3],m[r+264>>3]),k=m[r+312>>3],x=OA(u+224|0,n,m[r+224>>3],m[r+272>>3]),v=m[r+320>>3],B=OA(u+296|0,n,m[r+232>>3],m[r+280>>3]),y=m[r+328>>3],p=l,l=(OA(u+368|0,n,m[r+240>>3],m[r+288>>3])-n)*m[r+336>>3]+(y*(B-n)+(v*(x-n)+(k*(w-n)+(b*(C-n)+(h*(d-n)+0))))),n=(p+(n==n?(n-l)*m[r+344>>3]+l:l))*m[r+360>>3]*4e3,r=(0|(r=I(n)<2147483648?~~n:-2147483648))>=32e3?32e3:r,s[o>>1]=(0|r)<=-32e3?-32e3:r,(0|(f=f+1|0))==(0|A))break}f=A}return 0|(A>>>0>f>>>0?f:A)},function(e,A){A|=0,i[1088+(e|=0)>>2]=A},En,Gn,Mn,function(e,A,t,r){return Z=0,0}],Qn.grow=function(e){var A=this.length;return this.length=this.length+e,A},Qn.set=function(e,A){this[e]=A},Qn.get=function(e){return this[e]},Qn);return{v:function(){var e,A=0;W=e=W-16|0,0|R(e+12|0,e+8|0)||(A=se(4+(i[e+12>>2]<<2)|0),i[56800]=A,A&&(!(A=se(i[e+8>>2]))||(i[i[56800]+(i[e+12>>2]<<2)>>2]=0,0|H(i[56800],0|A)))&&(i[56800]=0)),W=e+16|0,i[56841]=227236,i[56823]=42},w:Bn,x:xn,y:function(e,A){A|=0,i[(e|=0)>>2]=A},z:function(e,A){return A|=0,a[i[4+(e|=0)>>2]+A|0]},A:wn,B:hn,C:function(e){return o[12+(e|=0)|0]},D:function(e,A){A|=0,a[12+(e|=0)|0]=A},E:function(e){return o[13+(e|=0)|0]},F:function(e,A){A|=0,a[13+(e|=0)|0]=A},G:function(e){return o[14+(e|=0)|0]},H:function(e,A){A|=0,a[14+(e|=0)|0]=A},I:function(e){return o[15+(e|=0)|0]},J:function(e,A){A|=0,a[15+(e|=0)|0]=A},K:bn,L:function(e,A){A|=0,i[16+(e|=0)>>2]=A},M:In,N:function(e,A){A|=0,i[20+(e|=0)>>2]=A},O:Bn,P:xn,Q:kn,R:wn,S:Cn,T:bn,U:In,V:function(e){return i[24+(e|=0)>>2]},W:Bn,X:function(){var e,A=0,t=0,r=0,n=0,l=0,c=0,g=0,u=0,d=0,f=0,b=0,w=0,k=0,x=0,v=0,B=0,y=0,E=0,M=0,D=0,Q=0,T=0,P=0;if(e=Nr(20),i[e+16>>2]=0,i[e+8>>2]=175,i[e+12>>2]=50,!(A=i[33208])){W=A=(W=M=W-16|0)-80|0;e:{if(t=Tt(84292)){if(i[A+32>>2]=t,Ct(137584,160,85959,A+32|0),-31==(0|sr(137584)))break e;if(i[A+16>>2]=t,Ct(137584,160,86031,A+16|0),-31==(0|sr(137584)))break e}(t=Tt(84619))&&(i[A>>2]=t,Ct(137584,160,85959,A),-31==(0|sr(137584)))||(t=o[84826]|o[84827]<<8|o[84828]<<16|o[84829]<<24,i[34396]=o[84822]|o[84823]<<8|o[84824]<<16|o[84825]<<24,i[34397]=t,s[68804]=o[84846]|o[84847]<<8,t=o[84842]|o[84843]<<8|o[84844]<<16|o[84845]<<24,i[34400]=o[84838]|o[84839]<<8|o[84840]<<16|o[84841]<<24,i[34401]=t,t=o[84834]|o[84835]<<8|o[84836]<<16|o[84837]<<24,i[34398]=o[84830]|o[84831]<<8|o[84832]<<16|o[84833]<<24,i[34399]=t)}if(W=A+80|0,i[M+12>>2]=0,n=M+12|0,W=g=W-16|0,i[g+12>>2]=22050,pA(85144)||pA(85315)||pA(85473)||pA(85698),b=g+12|0,W=l=W-16|0,i[l+12>>2]=0,!((A=jA(137832,84262,0,n))||(A=jA(137836,84420,0,n))||(A=jA(137840,84813,0,n))||(A=jA(137820,85016,l+12|0,n))))if(i[34454]=h[l+12>>2]/68,t=i[34460],i[34456]=t,t&&83969==(0|(d=o[0|t]|o[t+1|0]<<8|o[t+2|0]<<16|o[t+3|0]<<24))){if(w=o[t+4|0]|o[t+5|0]<<8|o[t+6|0]<<16|o[t+7|0]<<24,t=i[34458],x=o[0|t],i[34461]=x,x)for(A=t+4|0,d=0;r=C(d,44)+137856|0,n=o[0|A],i[r+36>>2]=n,i[r+40>>2]=o[A+1|0],c=o[A+8|0]|o[A+9|0]<<8|o[A+10|0]<<16|o[A+11|0]<<24,t=o[A+4|0]|o[A+5|0]<<8|o[A+6|0]<<16|o[A+7|0]<<24,a[0|r]=t,a[r+1|0]=t>>>8,a[r+2|0]=t>>>16,a[r+3|0]=t>>>24,a[r+4|0]=c,a[r+5|0]=c>>>8,a[r+6|0]=c>>>16,a[r+7|0]=c>>>24,c=o[A+16|0]|o[A+17|0]<<8|o[A+18|0]<<16|o[A+19|0]<<24,t=o[A+12|0]|o[A+13|0]<<8|o[A+14|0]<<16|o[A+15|0]<<24,a[r+8|0]=t,a[r+9|0]=t>>>8,a[r+10|0]=t>>>16,a[r+11|0]=t>>>24,a[r+12|0]=c,a[r+13|0]=c>>>8,a[r+14|0]=c>>>16,a[r+15|0]=c>>>24,c=o[A+24|0]|o[A+25|0]<<8|o[A+26|0]<<16|o[A+27|0]<<24,t=o[A+20|0]|o[A+21|0]<<8|o[A+22|0]<<16|o[A+23|0]<<24,a[r+16|0]=t,a[r+17|0]=t>>>8,a[r+18|0]=t>>>16,a[r+19|0]=t>>>24,a[r+20|0]=c,a[r+21|0]=c>>>8,a[r+22|0]=c>>>16,a[r+23|0]=c>>>24,c=o[A+32|0]|o[A+33|0]<<8|o[A+34|0]<<16|o[A+35|0]<<24,t=o[A+28|0]|o[A+29|0]<<8|o[A+30|0]<<16|o[A+31|0]<<24,a[r+24|0]=t,a[r+25|0]=t>>>8,a[r+26|0]=t>>>16,a[r+27|0]=t>>>24,a[r+28|0]=c,a[r+29|0]=c>>>8,a[r+30|0]=c>>>16,a[r+31|0]=c>>>24,t=A+36|0,i[r+32>>2]=t,A=t+(n<<4)|0,(0|x)!=(0|(d=d+1|0)););(0|x)<=i[34457]&&(i[34457]=0),A=0,b&&(i[b>>2]=w)}else e:{A:{if(n){if(t=i[n>>2]){ye(i[t+4>>2]),A=i[n>>2];break A}if(A=se(16),i[n>>2]=A,A)break A;A=48}else A=268436223;break e}i[A>>2]=1,i[A+4>>2]=_r(137584),t=i[n>>2],i[t+12>>2]=83969,i[t+8>>2]=d,A=268436223}if(W=l+16|0,t=A,!A){if(b=i[g+12>>2],i[50754]=b,i[50759]=0,i[50760]=134217728/(0|b),i[50762]=0,i[50763]=0,i[50765]=2147483647,i[50781]=100,i[50779]=32,i[50761]=(b<<6)/(0|b),A=i[26385],i[50784]=i[26384],i[50785]=A,A=i[26387],i[50786]=i[26386],i[50787]=A,A=i[26389],i[50788]=i[26388],i[50789]=A,A=i[26391],i[50790]=i[26390],i[50791]=A,A=i[26393],i[50792]=i[26392],i[50793]=A,A=i[26395],i[50794]=i[26394],i[50795]=A,A=i[26397],i[50796]=i[26396],i[50797]=A,i[50798]=i[26398],w=(0|(A=(0|(n=C(b,60)))/12800|0))>=128?128:A,i[50799]=w,i[50800]=(0|w)/2,!(22050==(0|b)|(0|n)<12800)){if(b=1&(A=(0|w)<=1?1:w),y=+(0|w),d=0,(0|w)>=2)for(w=2147483646&A,A=0;v=d+132160|0,u=127*(1-nt(6.283185307179586*+(0|d)/y)),k=I(u)<2147483648?~~u:-2147483648,a[0|v]=k,v=132160+(n=1|d)|0,u=127*(1-nt(6.283185307179586*+(0|n)/y)),k=I(u)<2147483648?~~u:-2147483648,a[0|v]=k,d=d+2|0,(0|w)!=(0|(A=A+2|0)););b&&(A=d+132160|0,u=127*(1-nt(6.283185307179586*+(0|d)/y)),v=I(u)<2147483648?~~u:-2147483648,a[0|A]=v)}if(i[50801]=105792,i[56797]=Le(),i[55964]=38,i[55921]=1,i[55918]=22050,i[56606]=0,i[55960]=110928,i[55958]=0,i[55959]=1074266112,i[55956]=100,i[55922]=20,i[55923]=220,i[55916]=1,i[55917]=0,Er(),i[56244]=0,i[56245]=0,i[55928]=0,i[55926]=0,i[55927]=0,i[55924]=0,i[56246]=0,i[56247]=0,i[56260]=0,i[56261]=0,i[56262]=0,i[56263]=0,i[56276]=0,i[56277]=0,i[56278]=0,i[56279]=0,i[55974]=0,i[55975]=0,i[55972]=0,i[55973]=0,y=-3.141592653589793/+(0|(A=i[55918])),m[27967]=y,n=(0|C(A,630))/1e4|0,i[55920]=n,A=(0|C(A,950))/1e4|0,i[55919]=A,u=-2*y,m[27968]=u,y=(T=$e(y*+(0|n)))*-T,m[28129]=y,u=T*nt(u*+(0|A)),u+=u,m[28128]=u,m[28127]=1-u-y,i[55990]=0,i[55991]=0,i[55988]=0,i[55989]=0,i[56006]=0,i[56007]=0,i[56004]=0,i[56005]=0,i[56022]=0,i[56023]=0,i[56020]=0,i[56021]=0,i[56038]=0,i[56039]=0,i[56036]=0,i[56037]=0,i[56054]=0,i[56055]=0,i[56052]=0,i[56053]=0,i[56070]=0,i[56071]=0,i[56068]=0,i[56069]=0,i[56086]=0,i[56087]=0,i[56084]=0,i[56085]=0,i[56102]=0,i[56103]=0,i[56100]=0,i[56101]=0,i[56118]=0,i[56119]=0,i[56116]=0,i[56117]=0,i[56134]=0,i[56135]=0,i[56132]=0,i[56133]=0,i[56150]=0,i[56151]=0,i[56148]=0,i[56149]=0,i[56166]=0,i[56167]=0,i[56164]=0,i[56165]=0,i[56182]=0,i[56183]=0,i[56180]=0,i[56181]=0,i[56198]=0,i[56199]=0,i[56196]=0,i[56197]=0,i[56214]=0,i[56215]=0,i[56212]=0,i[56213]=0,i[56230]=0,i[56231]=0,i[56228]=0,i[56229]=0,i[56639]=59,i[56640]=59,i[56629]=0,i[56630]=59,i[56619]=89,i[56620]=160,i[56609]=280,i[56610]=688,i[56611]=1064,i[56621]=70,i[56631]=59,i[56612]=2806,i[56613]=3260,i[56622]=160,i[56623]=200,i[56632]=59,i[56633]=59,i[56641]=89,i[56642]=149,i[56643]=200,i[56644]=200,i[56634]=59,i[56635]=59,i[56624]=200,i[56625]=500,i[56614]=3700,i[56615]=6500,i[56645]=500,i[56646]=0,i[56616]=7e3,i[56626]=500,i[56636]=0,i[56647]=0,i[56637]=0,i[56627]=500,i[56617]=8e3,i[56669]=89,i[56648]=0,i[56638]=0,i[56628]=89,i[56618]=280,i[56657]=62,i[56655]=0,i[56656]=0,i[56653]=50,i[56654]=0,i[56651]=0,i[56652]=0,i[56649]=0,i[56650]=40,i[56607]=1e3,i[56608]=59,W=l=W-416|0,i[l+16>>2]=137584,i[l+20>>2]=47,i[l+24>>2]=85952,Bt(A=l+240|0,85699,l+16|0),c=eA(A,86034)){if(vA(l+240|0,170,c))for(b=5|(A=l+240|0),w=10|A;47!=o[l+240|0]&&(1701736308!=i[l+240>>2]?Dt(l+240|0,86614,9)||(i[l+4>>2]=l+32,i[l>>2]=l+239,2==(0|ae(w,86829,l))&&(n=i[34064],i[(x=136272+(n<<4)|0)>>2]=a[l+239|0],A=_r(l+32|0),i[34064]=n+1,i[x+12>>2]=A,i[x+4>>2]=0)):(W=A=W-48|0,i[32960]=-1,i[32961]=-1,i[32970]=-1,i[32971]=-1,i[32968]=-1,i[32969]=-1,i[32966]=-1,i[32967]=-1,i[32964]=-1,i[32965]=-1,i[32962]=-1,i[32963]=-1,i[A+36>>2]=131876,i[A+32>>2]=131872,i[A+28>>2]=131868,i[A+24>>2]=131864,i[A+20>>2]=131860,i[A+16>>2]=131856,i[A+12>>2]=131852,i[A+8>>2]=131848,i[A+4>>2]=131844,i[A>>2]=131840,ae(b,84222,A),W=A+48|0)),vA(l+240|0,170,c););cr(c)}W=l+416|0,i[50297]=0,i[50298]=0,i[50301]=0,i[50302]=0,i[50299]=0,i[50300]=0,ft(0,85698),i[36425]=0,i[36424]=0,i[36426]=0,i[36427]=-1,$r(),Qe(0),r=i[25690],i[34062]=r,f=i[25689],l=i[25688],i[34060]=l,i[34061]=f,B=i[25687],c=i[25686],i[34058]=c,i[34059]=B,E=i[25685],x=i[25684],i[34056]=x,i[34057]=E,D=i[25683],b=i[25682],i[34054]=b,i[34055]=D,Q=i[25681],w=i[25680],i[34052]=w,i[34053]=Q,k=i[25679],n=i[25678],i[34050]=n,i[34051]=k,v=i[25677],A=i[25676],i[34048]=A,i[34049]=v,i[33729]=A,i[33730]=v,i[33731]=n,i[33732]=k,i[33733]=w,i[33734]=Q,i[33735]=b,i[33736]=D,i[33737]=x,i[33738]=E,i[33739]=c,i[33740]=B,i[33741]=l,i[33742]=f,i[33743]=r,SA(1,175),SA(2,100),SA(6,i[47200]),SA(5,i[47201]),SA(7,0),i[47198]=0,i[47197]=0,u=+G()/1e3,n=rr(A=I(u)<0x8000000000000000?~~u>>>0:0,0,1103515245,0),A=Z,A=(n=n+12345|0)>>>0<12345?A+1|0:A,i[33209]=gn(n,A)}if(W=g+16|0,t){v=i[30450],D=i[M+12>>2],g=48+(f=W-560|0)|0,W=r=(W=f)-16|0;e:{A:switch(0|Zr(t-268435967|0,24)){case 0:fn(g,84133,512);break e;case 1:fn(g,84580,512);break e;case 2:fn(g,84747,512);break e;case 3:fn(g,85084,512);break e;case 4:fn(g,85251,512);break e;case 5:fn(g,85380,512);break e;case 6:fn(g,85607,512);break e;case 7:fn(g,85722,512);break e;case 8:fn(g,85913,512);break e;case 9:fn(g,86046,512);break e;case 10:fn(g,86153,512);break e;case 11:fn(g,86678,512);break e;case 12:fn(g,86773,512);break e;case 14:fn(g,86958,512);break e;case 15:fn(g,87071,512);break e}if(1879048192&t)i[r>>2]=t,Ct(g,512,87182,r);else{if(d=0,l=p[123728+((t>>>0<=153?t:0)<<1)>>1]+121804|0,t=i[i[56841]+20>>2]){Q=i[t+4>>2],B=i[t>>2],E=i[B>>2]+1794895138|0,k=tn(i[B+8>>2],E),n=tn(i[B+12>>2],E),A=tn(i[B+16>>2],E);A:if(!(Q>>>2>>>0<=k>>>0||3&(A|n)|(t=Q-(k<<2)|0)>>>0<=n>>>0|A>>>0>=t>>>0))for(b=A>>>2|0,w=n>>>2|0;;){if(x=tn(i[(t=((A=(n=(c=k>>>1|0)+P|0)<<1)+w<<2)+B|0)>>2],E),(t=tn(i[t+4>>2],E))>>>0>=Q>>>0|x>>>0>=Q-t>>>0|o[(t+x|0)+B|0])break A;if(!(t=hr(l,t+B|0))){if(A=tn(i[(t=(A+b<<2)+B|0)>>2],E),(t=tn(i[t+4>>2],E))>>>0>=Q>>>0|A>>>0>=Q-t>>>0)break A;d=o[(A+t|0)+B|0]?0:t+B|0;break A}if(1==(0|k))break A;k=(t=(0|t)<0)?c:k-c|0,P=t?P:n}}if((t=jt(A=d||l))>>>0>=512){_e(g,A,511),a[g+511|0]=0;break e}_e(g,A,t+1|0)}}W=r+16|0;e:if(D){A:switch(i[D>>2]){case 0:i[f+16>>2]=i[D+4>>2],i[f+20>>2]=f+48,en(v,87384,f+16|0);break e;case 1:break A;default:break e}A=i[D+12>>2],t=i[D+8>>2],i[f+36>>2]=i[D+4>>2],Z=t,i[f+40>>2]=A,i[f+44>>2]=Z,i[f+32>>2]=f+48,en(v,87521,f+32|0)}else i[f>>2]=f+48,en(v,87700,f);W=f+560|0,-12!=(0|M)&&(t=i[M+12>>2])&&(ye(i[t+4>>2]),ye(i[M+12>>2]),i[M+12>>2]=0)}t=i[24806],i[34389]=0,i[32538]=t,t=(1e3+((t=C(i[50754],100))-((0|t)%1e3|0)|0)|0)/500|0,i[34390]=t,t=Oe(i[34391],t),i[34392]=t,t&&(i[34391]=t,i[34393]=40,(t=Oe(i[34388],1440))&&(i[34388]=t)),i[47198]=0,W=M+16|0,A=i[50754],i[33208]=A}return i[e+4>>2]=A,i[e>>2]=xA(),0|e},Y:function(e,A,t){e|=0,A|=0,t|=0,i[34440]=t,xr(3,i[e+12>>2]),xr(1,i[e+8>>2]),(e=i[e+16>>2])?At(e):Rt(1024),_(A),i[34440]=0},Z:function(e,A,t){return e|=0,A|=0,t|=0,i[34440]=0,(e=eA(t,1032))?(i[47195]=e,i[47197]=130,e||(i[47195]=i[30450]),_(A),i[47195]=0,i[47197]=0,i[47195]=i[30450],cr(e),0):-1},_:function(e){return 36},$:function(e,A,t){var r;return e|=0,A|=0,W=r=W-32|0,(t|=0)?(i[r+24>>2]=0,i[r+28>>2]=0,i[r+16>>2]=0,i[r+20>>2]=0,i[r+12>>2]=t,i[r+8>>2]=A,a[r+21|0]=0,A=At(r+8|0)):A=Rt(A),i[e+16>>2]=201188,W=r+32|0,0|A},aa:function(e,A,t,r){var n;return e|=0,A|=0,W=n=W-32|0,(t|=0)|(r|=0)?(i[n+24>>2]=0,i[n+28>>2]=0,i[n+16>>2]=0,i[n+20>>2]=0,i[n+12>>2]=t,i[n+8>>2]=A,a[n+22|0]=0,a[n+20|0]=r,A=At(n+8|0)):A=Rt(A),i[e+16>>2]=201188,W=n+32|0,0|A},ba:function(e,A,t,r,n){var s;return e|=0,A|=0,W=s=W-32|0,(r|=0)|(n|=0)|(t|=0)?(i[s+24>>2]=0,i[s+28>>2]=0,i[s+16>>2]=0,i[s+20>>2]=0,i[s+12>>2]=t,i[s+8>>2]=A,a[s+21|0]=n,a[s+20|0]=r,A=At(s+8|0)):A=Rt(A),i[e+16>>2]=201188,W=s+32|0,0|A},ca:function(e,A,t,r,n,s){var o;return e|=0,A|=0,W=o=W-32|0,(r|=0)|(n|=0)|(s|=0)|(t|=0)?(i[o+24>>2]=0,i[o+28>>2]=0,i[o+16>>2]=0,i[o+20>>2]=0,i[o+12>>2]=t,i[o+8>>2]=A,a[o+22|0]=s,a[o+21|0]=n,a[o+20|0]=r,A=At(o+8|0)):A=Rt(A),i[e+16>>2]=201188,W=o+32|0,0|A},da:function(e,A){return A|=0,i[i[(e|=0)>>2]+(A<<2)>>2]},ea:function(e,A,t){A|=0,t|=0,i[i[(e|=0)>>2]+(A<<2)>>2]=t},fa:kn,ga:wn,ha:hn,ia:Cn,ja:function(e,A){A|=0,i[12+(e|=0)>>2]=A},ka:Bn,la:function(){return 0},ma:function(){return 1},na:function(){return 2},oa:function(){return 3},pa:function(){return 4},qa:function(){return 5},ra:function(){return 6},sa:function(){return 7},ta:function(){return 8},ua:Tn,va:function(){return 227192},wa:ye,xa:se,ya:function(e){return(e|=0)?0|!!(0|IA(e,125228)):0}}}(e)}(A)},instantiate:function(e,A){return{then:function(t){var r=new Au.Module(e);t({instance:new Au.Instance(r,A)})}}},RuntimeError:Error};"object"!=typeof Au&&Gu("no native wasm support detected");var tu=!1;function ru(e,A){e||Gu(A)}var nu,au,su,iu,ou,lu,cu,gu="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function uu(e,A,t){for(var r=A+t,n=A;e[n]&&!(n>=r);)++n;if(n-A>16&&e.buffer&&gu)return gu.decode(e.subarray(A,n));for(var a="";A<n;){var s=e[A++];if(128&s){var i=63&e[A++];if(192!=(224&s)){var o=63&e[A++];if((s=224==(240&s)?(15&s)<<12|i<<6|o:(7&s)<<18|i<<12|o<<6|63&e[A++])<65536)a+=String.fromCharCode(s);else{var l=s-65536;a+=String.fromCharCode(55296|l>>10,56320|1023&l)}}else a+=String.fromCharCode((31&s)<<6|i)}else a+=String.fromCharCode(s)}return a}function du(e,A){return e?uu(au,e,A):""}function fu(e,A,t,r){if(!(r>0))return 0;for(var n=t,a=t+r-1,s=0;s<e.length;++s){var i=e.charCodeAt(s);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++s)),i<=127){if(t>=a)break;A[t++]=i}else if(i<=2047){if(t+1>=a)break;A[t++]=192|i>>6,A[t++]=128|63&i}else if(i<=65535){if(t+2>=a)break;A[t++]=224|i>>12,A[t++]=128|i>>6&63,A[t++]=128|63&i}else{if(t+3>=a)break;A[t++]=240|i>>18,A[t++]=128|i>>12&63,A[t++]=128|i>>6&63,A[t++]=128|63&i}}return A[t]=0,t-n}function pu(e){for(var A=0,t=0;t<e.length;++t){var r=e.charCodeAt(t);r<=127?A++:r<=2047?A+=2:r>=55296&&r<=57343?(A+=4,++t):A+=3}return A}var hu,mu=Ug.INITIAL_MEMORY||16777216;hu=(eu=Ug.wasmMemory?Ug.wasmMemory:new Au.Memory({initial:mu/65536,maximum:mu/65536})).buffer,Ug.HEAP8=nu=new Int8Array(hu),Ug.HEAP16=su=new Int16Array(hu),Ug.HEAP32=iu=new Int32Array(hu),Ug.HEAPU8=au=new Uint8Array(hu),Ug.HEAPU16=new Uint16Array(hu),Ug.HEAPU32=ou=new Uint32Array(hu),Ug.HEAPF32=lu=new Float32Array(hu),Ug.HEAPF64=cu=new Float64Array(hu),mu=eu.buffer.byteLength;var Cu=[],bu=[],Iu=[],wu=!1;function ku(e){bu.unshift(e)}var xu,vu,Bu=0,yu=null;function Eu(e){Bu++,Ug.monitorRunDependencies&&Ug.monitorRunDependencies(Bu)}function Mu(e){if(Bu--,Ug.monitorRunDependencies&&Ug.monitorRunDependencies(Bu),0==Bu&&yu){var A=yu;yu=null,A()}}function Gu(e){throw Ug.onAbort&&Ug.onAbort(e),$g(e="Aborted("+e+")"),tu=!0,e+=". Build with -sASSERTIONS for more info.",new Au.RuntimeError(e)}function Du(e){this.name="ExitStatus",this.message="Program terminated with exit("+e+")",this.status=e}function Qu(e){for(;e.length>0;)e.shift()(Ug)}function Tu(e,A="i8"){switch(A.endsWith("*")&&(A="*"),A){case"i1":case"i8":return nu[0|e];case"i16":return su[e>>1];case"i32":case"i64":return iu[e>>2];case"float":return lu[e>>2];case"double":return cu[e>>3];case"*":return ou[e>>2];default:Gu("invalid type for getValue: "+A)}return null}function Pu(e){this.excPtr=e,this.ptr=e-24,this.set_type=function(e){ou[this.ptr+4>>2]=e},this.get_type=function(){return ou[this.ptr+4>>2]},this.set_destructor=function(e){ou[this.ptr+8>>2]=e},this.get_destructor=function(){return ou[this.ptr+8>>2]},this.set_refcount=function(e){iu[this.ptr>>2]=e},this.set_caught=function(e){e=e?1:0,nu[this.ptr+12|0]=e},this.get_caught=function(){return 0!=nu[this.ptr+12|0]},this.set_rethrown=function(e){e=e?1:0,nu[this.ptr+13|0]=e},this.get_rethrown=function(){return 0!=nu[this.ptr+13|0]},this.init=function(e,A){this.set_adjusted_ptr(0),this.set_type(e),this.set_destructor(A),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){var e=iu[this.ptr>>2];iu[this.ptr>>2]=e+1},this.release_ref=function(){var e=iu[this.ptr>>2];return iu[this.ptr>>2]=e-1,1===e},this.set_adjusted_ptr=function(e){ou[this.ptr+16>>2]=e},this.get_adjusted_ptr=function(){return ou[this.ptr+16>>2]},this.get_exception_ptr=function(){if(Ud(this.get_type()))return ou[this.excPtr>>2];var e=this.get_adjusted_ptr();return 0!==e?e:this.excPtr}}var zu={isAbs:e=>"/"===e.charAt(0),splitPath:e=>/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(e).slice(1),normalizeArray:(e,A)=>{for(var t=0,r=e.length-1;r>=0;r--){var n=e[r];"."===n?e.splice(r,1):".."===n?(e.splice(r,1),t++):t&&(e.splice(r,1),t--)}if(A)for(;t;t--)e.unshift("..");return e},normalize:e=>{var A=zu.isAbs(e),t="/"===e.substr(-1);return(e=zu.normalizeArray(e.split("/").filter((e=>!!e)),!A).join("/"))||A||(e="."),e&&t&&(e+="/"),(A?"/":"")+e},dirname:e=>{var A=zu.splitPath(e),t=A[0],r=A[1];return t||r?(r&&(r=r.substr(0,r.length-1)),t+r):"."},basename:e=>{if("/"===e)return"/";var A=(e=(e=zu.normalize(e)).replace(/\/$/,"")).lastIndexOf("/");return-1===A?e:e.substr(A+1)},join:function(){var e=Array.prototype.slice.call(arguments);return zu.normalize(e.join("/"))},join2:(e,A)=>zu.normalize(e+"/"+A)},Fu={resolve:function(){for(var e="",A=!1,t=arguments.length-1;t>=-1&&!A;t--){var r=t>=0?arguments[t]:Yu.cwd();if("string"!=typeof r)throw new TypeError("Arguments to path.resolve must be strings");if(!r)return"";e=r+"/"+e,A=zu.isAbs(r)}return(A?"/":"")+(e=zu.normalizeArray(e.split("/").filter((e=>!!e)),!A).join("/"))||"."},relative:(e,A)=>{function t(e){for(var A=0;A<e.length&&""===e[A];A++);for(var t=e.length-1;t>=0&&""===e[t];t--);return A>t?[]:e.slice(A,t-A+1)}e=Fu.resolve(e).substr(1),A=Fu.resolve(A).substr(1);for(var r=t(e.split("/")),n=t(A.split("/")),a=Math.min(r.length,n.length),s=a,i=0;i<a;i++)if(r[i]!==n[i]){s=i;break}var o=[];for(i=s;i<r.length;i++)o.push("..");return(o=o.concat(n.slice(s))).join("/")}};function Su(e,A,t){var r=pu(e)+1,n=new Array(r),a=fu(e,n,0,n.length);return A&&(n.length=a),n}var Nu={ttys:[],init:function(){},shutdown:function(){},register:function(e,A){Nu.ttys[e]={input:[],output:[],ops:A},Yu.registerDevice(e,Nu.stream_ops)},stream_ops:{open:function(e){var A=Nu.ttys[e.node.rdev];if(!A)throw new Yu.ErrnoError(43);e.tty=A,e.seekable=!1},close:function(e){e.tty.ops.fsync(e.tty)},fsync:function(e){e.tty.ops.fsync(e.tty)},read:function(e,A,t,r,n){if(!e.tty||!e.tty.ops.get_char)throw new Yu.ErrnoError(60);for(var a=0,s=0;s<r;s++){var i;try{i=e.tty.ops.get_char(e.tty)}catch(e){throw new Yu.ErrnoError(29)}if(void 0===i&&0===a)throw new Yu.ErrnoError(6);if(null==i)break;a++,A[t+s]=i}return a&&(e.node.timestamp=Date.now()),a},write:function(e,A,t,r,n){if(!e.tty||!e.tty.ops.put_char)throw new Yu.ErrnoError(60);try{for(var a=0;a<r;a++)e.tty.ops.put_char(e.tty,A[t+a])}catch(e){throw new Yu.ErrnoError(29)}return r&&(e.node.timestamp=Date.now()),a}},default_tty_ops:{put_char:function(e,A){null===A||10===A?(_g(uu(e.output,0)),e.output=[]):0!=A&&e.output.push(A)},fsync:function(e){e.output&&e.output.length>0&&(_g(uu(e.output,0)),e.output=[])}},default_tty1_ops:{put_char:function(e,A){null===A||10===A?($g(uu(e.output,0)),e.output=[]):0!=A&&e.output.push(A)},fsync:function(e){e.output&&e.output.length>0&&($g(uu(e.output,0)),e.output=[])}}};function Ou(e){Gu()}var Lu={ops_table:null,mount:function(e){return Lu.createNode(null,"/",16895,0)},createNode:function(e,A,t,r){if(Yu.isBlkdev(t)||Yu.isFIFO(t))throw new Yu.ErrnoError(63);Lu.ops_table||(Lu.ops_table={dir:{node:{getattr:Lu.node_ops.getattr,setattr:Lu.node_ops.setattr,lookup:Lu.node_ops.lookup,mknod:Lu.node_ops.mknod,rename:Lu.node_ops.rename,unlink:Lu.node_ops.unlink,rmdir:Lu.node_ops.rmdir,readdir:Lu.node_ops.readdir,symlink:Lu.node_ops.symlink},stream:{llseek:Lu.stream_ops.llseek}},file:{node:{getattr:Lu.node_ops.getattr,setattr:Lu.node_ops.setattr},stream:{llseek:Lu.stream_ops.llseek,read:Lu.stream_ops.read,write:Lu.stream_ops.write,allocate:Lu.stream_ops.allocate,mmap:Lu.stream_ops.mmap,msync:Lu.stream_ops.msync}},link:{node:{getattr:Lu.node_ops.getattr,setattr:Lu.node_ops.setattr,readlink:Lu.node_ops.readlink},stream:{}},chrdev:{node:{getattr:Lu.node_ops.getattr,setattr:Lu.node_ops.setattr},stream:Yu.chrdev_stream_ops}});var n=Yu.createNode(e,A,t,r);return Yu.isDir(n.mode)?(n.node_ops=Lu.ops_table.dir.node,n.stream_ops=Lu.ops_table.dir.stream,n.contents={}):Yu.isFile(n.mode)?(n.node_ops=Lu.ops_table.file.node,n.stream_ops=Lu.ops_table.file.stream,n.usedBytes=0,n.contents=null):Yu.isLink(n.mode)?(n.node_ops=Lu.ops_table.link.node,n.stream_ops=Lu.ops_table.link.stream):Yu.isChrdev(n.mode)&&(n.node_ops=Lu.ops_table.chrdev.node,n.stream_ops=Lu.ops_table.chrdev.stream),n.timestamp=Date.now(),e&&(e.contents[A]=n,e.timestamp=n.timestamp),n},getFileDataAsTypedArray:function(e){return e.contents?e.contents.subarray?e.contents.subarray(0,e.usedBytes):new Uint8Array(e.contents):new Uint8Array(0)},expandFileStorage:function(e,A){var t=e.contents?e.contents.length:0;if(!(t>=A)){A=Math.max(A,t*(t<1048576?2:1.125)>>>0),0!=t&&(A=Math.max(A,256));var r=e.contents;e.contents=new Uint8Array(A),e.usedBytes>0&&e.contents.set(r.subarray(0,e.usedBytes),0)}},resizeFileStorage:function(e,A){if(e.usedBytes!=A)if(0==A)e.contents=null,e.usedBytes=0;else{var t=e.contents;e.contents=new Uint8Array(A),t&&e.contents.set(t.subarray(0,Math.min(A,e.usedBytes))),e.usedBytes=A}},node_ops:{getattr:function(e){var A={};return A.dev=Yu.isChrdev(e.mode)?e.id:1,A.ino=e.id,A.mode=e.mode,A.nlink=1,A.uid=0,A.gid=0,A.rdev=e.rdev,Yu.isDir(e.mode)?A.size=4096:Yu.isFile(e.mode)?A.size=e.usedBytes:Yu.isLink(e.mode)?A.size=e.link.length:A.size=0,A.atime=new Date(e.timestamp),A.mtime=new Date(e.timestamp),A.ctime=new Date(e.timestamp),A.blksize=4096,A.blocks=Math.ceil(A.size/A.blksize),A},setattr:function(e,A){void 0!==A.mode&&(e.mode=A.mode),void 0!==A.timestamp&&(e.timestamp=A.timestamp),void 0!==A.size&&Lu.resizeFileStorage(e,A.size)},lookup:function(e,A){throw Yu.genericErrors[44]},mknod:function(e,A,t,r){return Lu.createNode(e,A,t,r)},rename:function(e,A,t){if(Yu.isDir(e.mode)){var r;try{r=Yu.lookupNode(A,t)}catch(e){}if(r)for(var n in r.contents)throw new Yu.ErrnoError(55)}delete e.parent.contents[e.name],e.parent.timestamp=Date.now(),e.name=t,A.contents[t]=e,A.timestamp=e.parent.timestamp,e.parent=A},unlink:function(e,A){delete e.contents[A],e.timestamp=Date.now()},rmdir:function(e,A){var t=Yu.lookupNode(e,A);for(var r in t.contents)throw new Yu.ErrnoError(55);delete e.contents[A],e.timestamp=Date.now()},readdir:function(e){var A=[".",".."];for(var t in e.contents)e.contents.hasOwnProperty(t)&&A.push(t);return A},symlink:function(e,A,t){var r=Lu.createNode(e,A,41471,0);return r.link=t,r},readlink:function(e){if(!Yu.isLink(e.mode))throw new Yu.ErrnoError(28);return e.link}},stream_ops:{read:function(e,A,t,r,n){var a=e.node.contents;if(n>=e.node.usedBytes)return 0;var s=Math.min(e.node.usedBytes-n,r);if(s>8&&a.subarray)A.set(a.subarray(n,n+s),t);else for(var i=0;i<s;i++)A[t+i]=a[n+i];return s},write:function(e,A,t,r,n,a){if(!r)return 0;var s=e.node;if(s.timestamp=Date.now(),A.subarray&&(!s.contents||s.contents.subarray)){if(a)return s.contents=A.subarray(t,t+r),s.usedBytes=r,r;if(0===s.usedBytes&&0===n)return s.contents=A.slice(t,t+r),s.usedBytes=r,r;if(n+r<=s.usedBytes)return s.contents.set(A.subarray(t,t+r),n),r}if(Lu.expandFileStorage(s,n+r),s.contents.subarray&&A.subarray)s.contents.set(A.subarray(t,t+r),n);else for(var i=0;i<r;i++)s.contents[n+i]=A[t+i];return s.usedBytes=Math.max(s.usedBytes,n+r),r},llseek:function(e,A,t){var r=A;if(1===t?r+=e.position:2===t&&Yu.isFile(e.node.mode)&&(r+=e.node.usedBytes),r<0)throw new Yu.ErrnoError(28);return r},allocate:function(e,A,t){Lu.expandFileStorage(e.node,A+t),e.node.usedBytes=Math.max(e.node.usedBytes,A+t)},mmap:function(e,A,t,r,n){if(!Yu.isFile(e.node.mode))throw new Yu.ErrnoError(43);var a,s,i=e.node.contents;if(2&n||i.buffer!==nu.buffer){if((t>0||t+A<i.length)&&(i=i.subarray?i.subarray(t,t+A):Array.prototype.slice.call(i,t,t+A)),s=!0,!(a=Ou()))throw new Yu.ErrnoError(48);nu.set(i,a)}else s=!1,a=i.byteOffset;return{ptr:a,allocated:s}},msync:function(e,A,t,r,n){return Lu.stream_ops.write(e,A,0,r,t,!1),0}}},Yu={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(e,A={})=>{if(!(e=Fu.resolve(e)))return{path:"",node:null};if((A=Object.assign({follow_mount:!0,recurse_count:0},A)).recurse_count>8)throw new Yu.ErrnoError(32);for(var t=e.split("/").filter((e=>!!e)),r=Yu.root,n="/",a=0;a<t.length;a++){var s=a===t.length-1;if(s&&A.parent)break;if(r=Yu.lookupNode(r,t[a]),n=zu.join2(n,t[a]),Yu.isMountpoint(r)&&(!s||s&&A.follow_mount)&&(r=r.mounted.root),!s||A.follow)for(var i=0;Yu.isLink(r.mode);){var o=Yu.readlink(n);if(n=Fu.resolve(zu.dirname(n),o),r=Yu.lookupPath(n,{recurse_count:A.recurse_count+1}).node,i++>40)throw new Yu.ErrnoError(32)}}return{path:n,node:r}},getPath:e=>{for(var A;;){if(Yu.isRoot(e)){var t=e.mount.mountpoint;return A?"/"!==t[t.length-1]?t+"/"+A:t+A:t}A=A?e.name+"/"+A:e.name,e=e.parent}},hashName:(e,A)=>{for(var t=0,r=0;r<A.length;r++)t=(t<<5)-t+A.charCodeAt(r)|0;return(e+t>>>0)%Yu.nameTable.length},hashAddNode:e=>{var A=Yu.hashName(e.parent.id,e.name);e.name_next=Yu.nameTable[A],Yu.nameTable[A]=e},hashRemoveNode:e=>{var A=Yu.hashName(e.parent.id,e.name);if(Yu.nameTable[A]===e)Yu.nameTable[A]=e.name_next;else for(var t=Yu.nameTable[A];t;){if(t.name_next===e){t.name_next=e.name_next;break}t=t.name_next}},lookupNode:(e,A)=>{var t=Yu.mayLookup(e);if(t)throw new Yu.ErrnoError(t,e);for(var r=Yu.hashName(e.id,A),n=Yu.nameTable[r];n;n=n.name_next){var a=n.name;if(n.parent.id===e.id&&a===A)return n}return Yu.lookup(e,A)},createNode:(e,A,t,r)=>{var n=new Yu.FSNode(e,A,t,r);return Yu.hashAddNode(n),n},destroyNode:e=>{Yu.hashRemoveNode(e)},isRoot:e=>e===e.parent,isMountpoint:e=>!!e.mounted,isFile:e=>32768==(61440&e),isDir:e=>16384==(61440&e),isLink:e=>40960==(61440&e),isChrdev:e=>8192==(61440&e),isBlkdev:e=>24576==(61440&e),isFIFO:e=>4096==(61440&e),isSocket:e=>!(49152&~e),flagModes:{r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090},modeStringToFlags:e=>{var A=Yu.flagModes[e];if(void 0===A)throw new Error("Unknown file open mode: "+e);return A},flagsToPermissionString:e=>{var A=["r","w","rw"][3&e];return 512&e&&(A+="w"),A},nodePermissions:(e,A)=>Yu.ignorePermissions||(!A.includes("r")||292&e.mode)&&(!A.includes("w")||146&e.mode)&&(!A.includes("x")||73&e.mode)?0:2,mayLookup:e=>Yu.nodePermissions(e,"x")||(e.node_ops.lookup?0:2),mayCreate:(e,A)=>{try{return Yu.lookupNode(e,A),20}catch(e){}return Yu.nodePermissions(e,"wx")},mayDelete:(e,A,t)=>{var r;try{r=Yu.lookupNode(e,A)}catch(e){return e.errno}var n=Yu.nodePermissions(e,"wx");if(n)return n;if(t){if(!Yu.isDir(r.mode))return 54;if(Yu.isRoot(r)||Yu.getPath(r)===Yu.cwd())return 10}else if(Yu.isDir(r.mode))return 31;return 0},mayOpen:(e,A)=>e?Yu.isLink(e.mode)?32:Yu.isDir(e.mode)&&("r"!==Yu.flagsToPermissionString(A)||512&A)?31:Yu.nodePermissions(e,Yu.flagsToPermissionString(A)):44,MAX_OPEN_FDS:4096,nextfd:(e=0,A=Yu.MAX_OPEN_FDS)=>{for(var t=e;t<=A;t++)if(!Yu.streams[t])return t;throw new Yu.ErrnoError(33)},getStream:e=>Yu.streams[e],createStream:(e,A,t)=>{Yu.FSStream||(Yu.FSStream=function(){this.shared={}},Yu.FSStream.prototype={},Object.defineProperties(Yu.FSStream.prototype,{object:{get:function(){return this.node},set:function(e){this.node=e}},isRead:{get:function(){return 1!=(2097155&this.flags)}},isWrite:{get:function(){return!!(2097155&this.flags)}},isAppend:{get:function(){return 1024&this.flags}},flags:{get:function(){return this.shared.flags},set:function(e){this.shared.flags=e}},position:{get:function(){return this.shared.position},set:function(e){this.shared.position=e}}})),e=Object.assign(new Yu.FSStream,e);var r=Yu.nextfd(A,t);return e.fd=r,Yu.streams[r]=e,e},closeStream:e=>{Yu.streams[e]=null},chrdev_stream_ops:{open:e=>{var A=Yu.getDevice(e.node.rdev);e.stream_ops=A.stream_ops,e.stream_ops.open&&e.stream_ops.open(e)},llseek:()=>{throw new Yu.ErrnoError(70)}},major:e=>e>>8,minor:e=>255&e,makedev:(e,A)=>e<<8|A,registerDevice:(e,A)=>{Yu.devices[e]={stream_ops:A}},getDevice:e=>Yu.devices[e],getMounts:e=>{for(var A=[],t=[e];t.length;){var r=t.pop();A.push(r),t.push.apply(t,r.mounts)}return A},syncfs:(e,A)=>{"function"==typeof e&&(A=e,e=!1),Yu.syncFSRequests++,Yu.syncFSRequests>1&&$g("warning: "+Yu.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");var t=Yu.getMounts(Yu.root.mount),r=0;function n(e){return Yu.syncFSRequests--,A(e)}function a(e){if(e)return a.errored?void 0:(a.errored=!0,n(e));++r>=t.length&&n(null)}t.forEach((A=>{if(!A.type.syncfs)return a(null);A.type.syncfs(A,e,a)}))},mount:(e,A,t)=>{var r,n="/"===t,a=!t;if(n&&Yu.root)throw new Yu.ErrnoError(10);if(!n&&!a){var s=Yu.lookupPath(t,{follow_mount:!1});if(t=s.path,r=s.node,Yu.isMountpoint(r))throw new Yu.ErrnoError(10);if(!Yu.isDir(r.mode))throw new Yu.ErrnoError(54)}var i={type:e,opts:A,mountpoint:t,mounts:[]},o=e.mount(i);return o.mount=i,i.root=o,n?Yu.root=o:r&&(r.mounted=i,r.mount&&r.mount.mounts.push(i)),o},unmount:e=>{var A=Yu.lookupPath(e,{follow_mount:!1});if(!Yu.isMountpoint(A.node))throw new Yu.ErrnoError(28);var t=A.node,r=t.mounted,n=Yu.getMounts(r);Object.keys(Yu.nameTable).forEach((e=>{for(var A=Yu.nameTable[e];A;){var t=A.name_next;n.includes(A.mount)&&Yu.destroyNode(A),A=t}})),t.mounted=null;var a=t.mount.mounts.indexOf(r);t.mount.mounts.splice(a,1)},lookup:(e,A)=>e.node_ops.lookup(e,A),mknod:(e,A,t)=>{var r=Yu.lookupPath(e,{parent:!0}).node,n=zu.basename(e);if(!n||"."===n||".."===n)throw new Yu.ErrnoError(28);var a=Yu.mayCreate(r,n);if(a)throw new Yu.ErrnoError(a);if(!r.node_ops.mknod)throw new Yu.ErrnoError(63);return r.node_ops.mknod(r,n,A,t)},create:(e,A)=>(A=void 0!==A?A:438,A&=4095,A|=32768,Yu.mknod(e,A,0)),mkdir:(e,A)=>(A=void 0!==A?A:511,A&=1023,A|=16384,Yu.mknod(e,A,0)),mkdirTree:(e,A)=>{for(var t=e.split("/"),r="",n=0;n<t.length;++n)if(t[n]){r+="/"+t[n];try{Yu.mkdir(r,A)}catch(e){if(20!=e.errno)throw e}}},mkdev:(e,A,t)=>(void 0===t&&(t=A,A=438),A|=8192,Yu.mknod(e,A,t)),symlink:(e,A)=>{if(!Fu.resolve(e))throw new Yu.ErrnoError(44);var t=Yu.lookupPath(A,{parent:!0}).node;if(!t)throw new Yu.ErrnoError(44);var r=zu.basename(A),n=Yu.mayCreate(t,r);if(n)throw new Yu.ErrnoError(n);if(!t.node_ops.symlink)throw new Yu.ErrnoError(63);return t.node_ops.symlink(t,r,e)},rename:(e,A)=>{var t,r,n=zu.dirname(e),a=zu.dirname(A),s=zu.basename(e),i=zu.basename(A);if(t=Yu.lookupPath(e,{parent:!0}).node,r=Yu.lookupPath(A,{parent:!0}).node,!t||!r)throw new Yu.ErrnoError(44);if(t.mount!==r.mount)throw new Yu.ErrnoError(75);var o,l=Yu.lookupNode(t,s),c=Fu.relative(e,a);if("."!==c.charAt(0))throw new Yu.ErrnoError(28);if("."!==(c=Fu.relative(A,n)).charAt(0))throw new Yu.ErrnoError(55);try{o=Yu.lookupNode(r,i)}catch(e){}if(l!==o){var g=Yu.isDir(l.mode),u=Yu.mayDelete(t,s,g);if(u)throw new Yu.ErrnoError(u);if(u=o?Yu.mayDelete(r,i,g):Yu.mayCreate(r,i))throw new Yu.ErrnoError(u);if(!t.node_ops.rename)throw new Yu.ErrnoError(63);if(Yu.isMountpoint(l)||o&&Yu.isMountpoint(o))throw new Yu.ErrnoError(10);if(r!==t&&(u=Yu.nodePermissions(t,"w")))throw new Yu.ErrnoError(u);Yu.hashRemoveNode(l);try{t.node_ops.rename(l,r,i)}catch(e){throw e}finally{Yu.hashAddNode(l)}}},rmdir:e=>{var A=Yu.lookupPath(e,{parent:!0}).node,t=zu.basename(e),r=Yu.lookupNode(A,t),n=Yu.mayDelete(A,t,!0);if(n)throw new Yu.ErrnoError(n);if(!A.node_ops.rmdir)throw new Yu.ErrnoError(63);if(Yu.isMountpoint(r))throw new Yu.ErrnoError(10);A.node_ops.rmdir(A,t),Yu.destroyNode(r)},readdir:e=>{var A=Yu.lookupPath(e,{follow:!0}).node;if(!A.node_ops.readdir)throw new Yu.ErrnoError(54);return A.node_ops.readdir(A)},unlink:e=>{var A=Yu.lookupPath(e,{parent:!0}).node;if(!A)throw new Yu.ErrnoError(44);var t=zu.basename(e),r=Yu.lookupNode(A,t),n=Yu.mayDelete(A,t,!1);if(n)throw new Yu.ErrnoError(n);if(!A.node_ops.unlink)throw new Yu.ErrnoError(63);if(Yu.isMountpoint(r))throw new Yu.ErrnoError(10);A.node_ops.unlink(A,t),Yu.destroyNode(r)},readlink:e=>{var A=Yu.lookupPath(e).node;if(!A)throw new Yu.ErrnoError(44);if(!A.node_ops.readlink)throw new Yu.ErrnoError(28);return Fu.resolve(Yu.getPath(A.parent),A.node_ops.readlink(A))},stat:(e,A)=>{var t=Yu.lookupPath(e,{follow:!A}).node;if(!t)throw new Yu.ErrnoError(44);if(!t.node_ops.getattr)throw new Yu.ErrnoError(63);return t.node_ops.getattr(t)},lstat:e=>Yu.stat(e,!0),chmod:(e,A,t)=>{var r;if(!(r="string"==typeof e?Yu.lookupPath(e,{follow:!t}).node:e).node_ops.setattr)throw new Yu.ErrnoError(63);r.node_ops.setattr(r,{mode:4095&A|-4096&r.mode,timestamp:Date.now()})},lchmod:(e,A)=>{Yu.chmod(e,A,!0)},fchmod:(e,A)=>{var t=Yu.getStream(e);if(!t)throw new Yu.ErrnoError(8);Yu.chmod(t.node,A)},chown:(e,A,t,r)=>{var n;if(!(n="string"==typeof e?Yu.lookupPath(e,{follow:!r}).node:e).node_ops.setattr)throw new Yu.ErrnoError(63);n.node_ops.setattr(n,{timestamp:Date.now()})},lchown:(e,A,t)=>{Yu.chown(e,A,t,!0)},fchown:(e,A,t)=>{var r=Yu.getStream(e);if(!r)throw new Yu.ErrnoError(8);Yu.chown(r.node,A,t)},truncate:(e,A)=>{if(A<0)throw new Yu.ErrnoError(28);var t;if(!(t="string"==typeof e?Yu.lookupPath(e,{follow:!0}).node:e).node_ops.setattr)throw new Yu.ErrnoError(63);if(Yu.isDir(t.mode))throw new Yu.ErrnoError(31);if(!Yu.isFile(t.mode))throw new Yu.ErrnoError(28);var r=Yu.nodePermissions(t,"w");if(r)throw new Yu.ErrnoError(r);t.node_ops.setattr(t,{size:A,timestamp:Date.now()})},ftruncate:(e,A)=>{var t=Yu.getStream(e);if(!t)throw new Yu.ErrnoError(8);if(!(2097155&t.flags))throw new Yu.ErrnoError(28);Yu.truncate(t.node,A)},utime:(e,A,t)=>{var r=Yu.lookupPath(e,{follow:!0}).node;r.node_ops.setattr(r,{timestamp:Math.max(A,t)})},open:(e,A,t)=>{if(""===e)throw new Yu.ErrnoError(44);var r;if(t=void 0===t?438:t,t=64&(A="string"==typeof A?Yu.modeStringToFlags(A):A)?4095&t|32768:0,"object"==typeof e)r=e;else{e=zu.normalize(e);try{r=Yu.lookupPath(e,{follow:!(131072&A)}).node}catch(e){}}var n=!1;if(64&A)if(r){if(128&A)throw new Yu.ErrnoError(20)}else r=Yu.mknod(e,t,0),n=!0;if(!r)throw new Yu.ErrnoError(44);if(Yu.isChrdev(r.mode)&&(A&=-513),65536&A&&!Yu.isDir(r.mode))throw new Yu.ErrnoError(54);if(!n){var a=Yu.mayOpen(r,A);if(a)throw new Yu.ErrnoError(a)}512&A&&!n&&Yu.truncate(r,0),A&=-131713;var s=Yu.createStream({node:r,path:Yu.getPath(r),flags:A,seekable:!0,position:0,stream_ops:r.stream_ops,ungotten:[],error:!1});return s.stream_ops.open&&s.stream_ops.open(s),!Ug.logReadFiles||1&A||(Yu.readFiles||(Yu.readFiles={}),e in Yu.readFiles||(Yu.readFiles[e]=1)),s},close:e=>{if(Yu.isClosed(e))throw new Yu.ErrnoError(8);e.getdents&&(e.getdents=null);try{e.stream_ops.close&&e.stream_ops.close(e)}catch(e){throw e}finally{Yu.closeStream(e.fd)}e.fd=null},isClosed:e=>null===e.fd,llseek:(e,A,t)=>{if(Yu.isClosed(e))throw new Yu.ErrnoError(8);if(!e.seekable||!e.stream_ops.llseek)throw new Yu.ErrnoError(70);if(0!=t&&1!=t&&2!=t)throw new Yu.ErrnoError(28);return e.position=e.stream_ops.llseek(e,A,t),e.ungotten=[],e.position},read:(e,A,t,r,n)=>{if(r<0||n<0)throw new Yu.ErrnoError(28);if(Yu.isClosed(e))throw new Yu.ErrnoError(8);if(1==(2097155&e.flags))throw new Yu.ErrnoError(8);if(Yu.isDir(e.node.mode))throw new Yu.ErrnoError(31);if(!e.stream_ops.read)throw new Yu.ErrnoError(28);var a=void 0!==n;if(a){if(!e.seekable)throw new Yu.ErrnoError(70)}else n=e.position;var s=e.stream_ops.read(e,A,t,r,n);return a||(e.position+=s),s},write:(e,A,t,r,n,a)=>{if(r<0||n<0)throw new Yu.ErrnoError(28);if(Yu.isClosed(e))throw new Yu.ErrnoError(8);if(!(2097155&e.flags))throw new Yu.ErrnoError(8);if(Yu.isDir(e.node.mode))throw new Yu.ErrnoError(31);if(!e.stream_ops.write)throw new Yu.ErrnoError(28);e.seekable&&1024&e.flags&&Yu.llseek(e,0,2);var s=void 0!==n;if(s){if(!e.seekable)throw new Yu.ErrnoError(70)}else n=e.position;var i=e.stream_ops.write(e,A,t,r,n,a);return s||(e.position+=i),i},allocate:(e,A,t)=>{if(Yu.isClosed(e))throw new Yu.ErrnoError(8);if(A<0||t<=0)throw new Yu.ErrnoError(28);if(!(2097155&e.flags))throw new Yu.ErrnoError(8);if(!Yu.isFile(e.node.mode)&&!Yu.isDir(e.node.mode))throw new Yu.ErrnoError(43);if(!e.stream_ops.allocate)throw new Yu.ErrnoError(138);e.stream_ops.allocate(e,A,t)},mmap:(e,A,t,r,n)=>{if(2&r&&!(2&n)&&2!=(2097155&e.flags))throw new Yu.ErrnoError(2);if(1==(2097155&e.flags))throw new Yu.ErrnoError(2);if(!e.stream_ops.mmap)throw new Yu.ErrnoError(43);return e.stream_ops.mmap(e,A,t,r,n)},msync:(e,A,t,r,n)=>e.stream_ops.msync?e.stream_ops.msync(e,A,t,r,n):0,munmap:e=>0,ioctl:(e,A,t)=>{if(!e.stream_ops.ioctl)throw new Yu.ErrnoError(59);return e.stream_ops.ioctl(e,A,t)},readFile:(e,A={})=>{if(A.flags=A.flags||0,A.encoding=A.encoding||"binary","utf8"!==A.encoding&&"binary"!==A.encoding)throw new Error('Invalid encoding type "'+A.encoding+'"');var t,r=Yu.open(e,A.flags),n=Yu.stat(e).size,a=new Uint8Array(n);return Yu.read(r,a,0,n,0),"utf8"===A.encoding?t=uu(a,0):"binary"===A.encoding&&(t=a),Yu.close(r),t},writeFile:(e,A,t={})=>{t.flags=t.flags||577;var r=Yu.open(e,t.flags,t.mode);if("string"==typeof A){var n=new Uint8Array(pu(A)+1),a=fu(A,n,0,n.length);Yu.write(r,n,0,a,void 0,t.canOwn)}else{if(!ArrayBuffer.isView(A))throw new Error("Unsupported data type");Yu.write(r,A,0,A.byteLength,void 0,t.canOwn)}Yu.close(r)},cwd:()=>Yu.currentPath,chdir:e=>{var A=Yu.lookupPath(e,{follow:!0});if(null===A.node)throw new Yu.ErrnoError(44);if(!Yu.isDir(A.node.mode))throw new Yu.ErrnoError(54);var t=Yu.nodePermissions(A.node,"x");if(t)throw new Yu.ErrnoError(t);Yu.currentPath=A.path},createDefaultDirectories:()=>{Yu.mkdir("/tmp"),Yu.mkdir("/home"),Yu.mkdir("/home/web_user")},createDefaultDevices:()=>{Yu.mkdir("/dev"),Yu.registerDevice(Yu.makedev(1,3),{read:()=>0,write:(e,A,t,r,n)=>r}),Yu.mkdev("/dev/null",Yu.makedev(1,3)),Nu.register(Yu.makedev(5,0),Nu.default_tty_ops),Nu.register(Yu.makedev(6,0),Nu.default_tty1_ops),Yu.mkdev("/dev/tty",Yu.makedev(5,0)),Yu.mkdev("/dev/tty1",Yu.makedev(6,0)),Yu.mkdir("/dev/shm"),Yu.mkdir("/dev/shm/tmp")},createSpecialDirectories:()=>{Yu.mkdir("/proc");var e=Yu.mkdir("/proc/self");Yu.mkdir("/proc/self/fd"),Yu.mount({mount:()=>{var A=Yu.createNode(e,"fd",16895,73);return A.node_ops={lookup:(e,A)=>{var t=+A,r=Yu.getStream(t);if(!r)throw new Yu.ErrnoError(8);var n={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>r.path}};return n.parent=n,n}},A}},{},"/proc/self/fd")},createStandardStreams:()=>{Ug.stdin?Yu.createDevice("/dev","stdin",Ug.stdin):Yu.symlink("/dev/tty","/dev/stdin"),Ug.stdout?Yu.createDevice("/dev","stdout",null,Ug.stdout):Yu.symlink("/dev/tty","/dev/stdout"),Ug.stderr?Yu.createDevice("/dev","stderr",null,Ug.stderr):Yu.symlink("/dev/tty1","/dev/stderr"),Yu.open("/dev/stdin",0),Yu.open("/dev/stdout",1),Yu.open("/dev/stderr",1)},ensureErrnoError:()=>{Yu.ErrnoError||(Yu.ErrnoError=function(e,A){this.node=A,this.setErrno=function(e){this.errno=e},this.setErrno(e),this.message="FS error"},Yu.ErrnoError.prototype=new Error,Yu.ErrnoError.prototype.constructor=Yu.ErrnoError,[44].forEach((e=>{Yu.genericErrors[e]=new Yu.ErrnoError(e),Yu.genericErrors[e].stack="<generic error, no stack>"})))},staticInit:()=>{Yu.ensureErrnoError(),Yu.nameTable=new Array(4096),Yu.mount(Lu,{},"/"),Yu.createDefaultDirectories(),Yu.createDefaultDevices(),Yu.createSpecialDirectories(),Yu.filesystems={MEMFS:Lu}},init:(e,A,t)=>{Yu.init.initialized=!0,Yu.ensureErrnoError(),Ug.stdin=e||Ug.stdin,Ug.stdout=A||Ug.stdout,Ug.stderr=t||Ug.stderr,Yu.createStandardStreams()},quit:()=>{Yu.init.initialized=!1;for(var e=0;e<Yu.streams.length;e++){var A=Yu.streams[e];A&&Yu.close(A)}},getMode:(e,A)=>{var t=0;return e&&(t|=365),A&&(t|=146),t},findObject:(e,A)=>{var t=Yu.analyzePath(e,A);return t.exists?t.object:null},analyzePath:(e,A)=>{try{e=(r=Yu.lookupPath(e,{follow:!A})).path}catch(e){}var t={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var r=Yu.lookupPath(e,{parent:!0});t.parentExists=!0,t.parentPath=r.path,t.parentObject=r.node,t.name=zu.basename(e),r=Yu.lookupPath(e,{follow:!A}),t.exists=!0,t.path=r.path,t.object=r.node,t.name=r.node.name,t.isRoot="/"===r.path}catch(e){t.error=e.errno}return t},createPath:(e,A,t,r)=>{e="string"==typeof e?e:Yu.getPath(e);for(var n=A.split("/").reverse();n.length;){var a=n.pop();if(a){var s=zu.join2(e,a);try{Yu.mkdir(s)}catch(e){}e=s}}return s},createFile:(e,A,t,r,n)=>{var a=zu.join2("string"==typeof e?e:Yu.getPath(e),A),s=Yu.getMode(r,n);return Yu.create(a,s)},createDataFile:(e,A,t,r,n,a)=>{var s=A;e&&(e="string"==typeof e?e:Yu.getPath(e),s=A?zu.join2(e,A):e);var i=Yu.getMode(r,n),o=Yu.create(s,i);if(t){if("string"==typeof t){for(var l=new Array(t.length),c=0,g=t.length;c<g;++c)l[c]=t.charCodeAt(c);t=l}Yu.chmod(o,146|i);var u=Yu.open(o,577);Yu.write(u,t,0,t.length,0,a),Yu.close(u),Yu.chmod(o,i)}return o},createDevice:(e,A,t,r)=>{var n=zu.join2("string"==typeof e?e:Yu.getPath(e),A),a=Yu.getMode(!!t,!!r);Yu.createDevice.major||(Yu.createDevice.major=64);var s=Yu.makedev(Yu.createDevice.major++,0);return Yu.registerDevice(s,{open:e=>{e.seekable=!1},close:e=>{r&&r.buffer&&r.buffer.length&&r(10)},read:(e,A,r,n,a)=>{for(var s=0,i=0;i<n;i++){var o;try{o=t()}catch(e){throw new Yu.ErrnoError(29)}if(void 0===o&&0===s)throw new Yu.ErrnoError(6);if(null==o)break;s++,A[r+i]=o}return s&&(e.node.timestamp=Date.now()),s},write:(e,A,t,n,a)=>{for(var s=0;s<n;s++)try{r(A[t+s])}catch(e){throw new Yu.ErrnoError(29)}return n&&(e.node.timestamp=Date.now()),s}}),Yu.mkdev(n,a,s)},forceLoadFile:e=>{if(e.isDevice||e.isFolder||e.link||e.contents)return!0;throw"undefined"!=typeof XMLHttpRequest?new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread."):new Error("Cannot load without read() or XMLHttpRequest.")},createLazyFile:(e,A,t,r,n)=>{function a(){this.lengthKnown=!1,this.chunks=[]}if(a.prototype.get=function(e){if(!(e>this.length-1||e<0)){var A=e%this.chunkSize,t=e/this.chunkSize|0;return this.getter(t)[A]}},a.prototype.setDataGetter=function(e){this.getter=e},a.prototype.cacheLength=function(){var e=new XMLHttpRequest;if(e.open("HEAD",t,!1),e.send(null),!(e.status>=200&&e.status<300||304===e.status))throw new Error("Couldn't load "+t+". Status: "+e.status);var A,r=Number(e.getResponseHeader("Content-length")),n=(A=e.getResponseHeader("Accept-Ranges"))&&"bytes"===A,a=(A=e.getResponseHeader("Content-Encoding"))&&"gzip"===A,s=1048576;n||(s=r);var i=this;i.setDataGetter((e=>{var A=e*s,n=(e+1)*s-1;if(n=Math.min(n,r-1),void 0===i.chunks[e]&&(i.chunks[e]=((e,A)=>{if(e>A)throw new Error("invalid range ("+e+", "+A+") or no bytes requested!");if(A>r-1)throw new Error("only "+r+" bytes available! programmer error!");var n=new XMLHttpRequest;if(n.open("GET",t,!1),r!==s&&n.setRequestHeader("Range","bytes="+e+"-"+A),n.responseType="arraybuffer",n.overrideMimeType&&n.overrideMimeType("text/plain; charset=x-user-defined"),n.send(null),!(n.status>=200&&n.status<300||304===n.status))throw new Error("Couldn't load "+t+". Status: "+n.status);return void 0!==n.response?new Uint8Array(n.response||[]):Su(n.responseText||"",!0)})(A,n)),void 0===i.chunks[e])throw new Error("doXHR failed!");return i.chunks[e]})),!a&&r||(s=r=1,r=this.getter(0).length,s=r,_g("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=r,this._chunkSize=s,this.lengthKnown=!0},"undefined"!=typeof XMLHttpRequest){if(!Kg)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var s=new a;Object.defineProperties(s,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}});var i={isDevice:!1,contents:s}}else i={isDevice:!1,url:t};var o=Yu.createFile(e,A,i,r,n);i.contents?o.contents=i.contents:i.url&&(o.contents=null,o.url=i.url),Object.defineProperties(o,{usedBytes:{get:function(){return this.contents.length}}});var l={};function c(e,A,t,r,n){var a=e.node.contents;if(n>=a.length)return 0;var s=Math.min(a.length-n,r);if(a.slice)for(var i=0;i<s;i++)A[t+i]=a[n+i];else for(i=0;i<s;i++)A[t+i]=a.get(n+i);return s}return Object.keys(o.stream_ops).forEach((e=>{var A=o.stream_ops[e];l[e]=function(){return Yu.forceLoadFile(o),A.apply(null,arguments)}})),l.read=(e,A,t,r,n)=>(Yu.forceLoadFile(o),c(e,A,t,r,n)),l.mmap=(e,A,t,r,n)=>{Yu.forceLoadFile(o);var a=Ou();if(!a)throw new Yu.ErrnoError(48);return c(e,nu,a,A,t),{ptr:a,allocated:!0}},o.stream_ops=l,o},indexedDB:()=>window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB,DB_NAME:()=>"EM_FS_"+window.location.pathname,DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:(e,A,t)=>{A=A||(()=>{}),t=t||(()=>{});var r=Yu.indexedDB();try{var n=r.open(Yu.DB_NAME(),Yu.DB_VERSION)}catch(e){return t(e)}n.onupgradeneeded=()=>{_g("creating db"),n.result.createObjectStore(Yu.DB_STORE_NAME)},n.onsuccess=()=>{var r=n.result.transaction([Yu.DB_STORE_NAME],"readwrite"),a=r.objectStore(Yu.DB_STORE_NAME),s=0,i=0,o=e.length;function l(){0==i?A():t()}e.forEach((e=>{var A=a.put(Yu.analyzePath(e).object.contents,e);A.onsuccess=()=>{++s+i==o&&l()},A.onerror=()=>{i++,s+i==o&&l()}})),r.onerror=t},n.onerror=t},loadFilesFromDB:(e,A,t)=>{A=A||(()=>{}),t=t||(()=>{});var r=Yu.indexedDB();try{var n=r.open(Yu.DB_NAME(),Yu.DB_VERSION)}catch(e){return t(e)}n.onupgradeneeded=t,n.onsuccess=()=>{var r=n.result;try{var a=r.transaction([Yu.DB_STORE_NAME],"readonly")}catch(e){return void t(e)}var s=a.objectStore(Yu.DB_STORE_NAME),i=0,o=0,l=e.length;function c(){0==o?A():t()}e.forEach((e=>{var A=s.get(e);A.onsuccess=()=>{Yu.analyzePath(e).exists&&Yu.unlink(e),Yu.createDataFile(zu.dirname(e),zu.basename(e),A.result,!0,!0,!0),++i+o==l&&c()},A.onerror=()=>{o++,i+o==l&&c()}})),a.onerror=t},n.onerror=t}},Hu={DEFAULT_POLLMASK:5,calculateAt:function(e,A,t){if(zu.isAbs(A))return A;var r;if(r=-100===e?Yu.cwd():Hu.getStreamFromFD(e).path,0==A.length){if(!t)throw new Yu.ErrnoError(44);return r}return zu.join2(r,A)},doStat:function(e,A,t){try{var r=e(A)}catch(e){if(e&&e.node&&zu.normalize(A)!==zu.normalize(Yu.getPath(e.node)))return-54;throw e}iu[t>>2]=r.dev,iu[t+8>>2]=r.ino,iu[t+12>>2]=r.mode,ou[t+16>>2]=r.nlink,iu[t+20>>2]=r.uid,iu[t+24>>2]=r.gid,iu[t+28>>2]=r.rdev,vu=[r.size>>>0,(xu=r.size,+Math.abs(xu)>=1?xu>0?(0|Math.min(+Math.floor(xu/4294967296),4294967295))>>>0:~~+Math.ceil((xu-+(~~xu>>>0))/4294967296)>>>0:0)],iu[t+40>>2]=vu[0],iu[t+44>>2]=vu[1],iu[t+48>>2]=4096,iu[t+52>>2]=r.blocks;var n=r.atime.getTime(),a=r.mtime.getTime(),s=r.ctime.getTime();return vu=[Math.floor(n/1e3)>>>0,(xu=Math.floor(n/1e3),+Math.abs(xu)>=1?xu>0?(0|Math.min(+Math.floor(xu/4294967296),4294967295))>>>0:~~+Math.ceil((xu-+(~~xu>>>0))/4294967296)>>>0:0)],iu[t+56>>2]=vu[0],iu[t+60>>2]=vu[1],ou[t+64>>2]=n%1e3*1e3,vu=[Math.floor(a/1e3)>>>0,(xu=Math.floor(a/1e3),+Math.abs(xu)>=1?xu>0?(0|Math.min(+Math.floor(xu/4294967296),4294967295))>>>0:~~+Math.ceil((xu-+(~~xu>>>0))/4294967296)>>>0:0)],iu[t+72>>2]=vu[0],iu[t+76>>2]=vu[1],ou[t+80>>2]=a%1e3*1e3,vu=[Math.floor(s/1e3)>>>0,(xu=Math.floor(s/1e3),+Math.abs(xu)>=1?xu>0?(0|Math.min(+Math.floor(xu/4294967296),4294967295))>>>0:~~+Math.ceil((xu-+(~~xu>>>0))/4294967296)>>>0:0)],iu[t+88>>2]=vu[0],iu[t+92>>2]=vu[1],ou[t+96>>2]=s%1e3*1e3,vu=[r.ino>>>0,(xu=r.ino,+Math.abs(xu)>=1?xu>0?(0|Math.min(+Math.floor(xu/4294967296),4294967295))>>>0:~~+Math.ceil((xu-+(~~xu>>>0))/4294967296)>>>0:0)],iu[t+104>>2]=vu[0],iu[t+108>>2]=vu[1],0},doMsync:function(e,A,t,r,n){if(!Yu.isFile(A.node.mode))throw new Yu.ErrnoError(43);if(2&r)return 0;var a=au.slice(e,e+t);Yu.msync(A,a,n,t,r)},varargs:void 0,get:function(){return Hu.varargs+=4,iu[Hu.varargs-4>>2]},getStr:function(e){return du(e)},getStreamFromFD:function(e){var A=Yu.getStream(e);if(!A)throw new Yu.ErrnoError(8);return A}},Ru={};function ju(){if(!ju.strings){var e={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:Jg||"./this.program"};for(var A in Ru)void 0===Ru[A]?delete e[A]:e[A]=Ru[A];var t=[];for(var A in e)t.push(A+"="+e[A]);ju.strings=t}return ju.strings}var Vu=function(e,A,t,r){e||(e=this),this.parent=e,this.mount=e.mount,this.mounted=null,this.id=Yu.nextInode++,this.name=A,this.mode=t,this.node_ops={},this.stream_ops={},this.rdev=r};Object.defineProperties(Vu.prototype,{read:{get:function(){return!(365&~this.mode)},set:function(e){e?this.mode|=365:this.mode&=-366}},write:{get:function(){return!(146&~this.mode)},set:function(e){e?this.mode|=146:this.mode&=-147}},isFolder:{get:function(){return Yu.isDir(this.mode)}},isDevice:{get:function(){return Yu.isChrdev(this.mode)}}}),Yu.FSNode=Vu,Yu.staticInit(),Ug.FS_createPath=Yu.createPath,Ug.FS_createDataFile=Yu.createDataFile,Ug.FS_unlink=Yu.unlink,Ug.FS_createLazyFile=Yu.createLazyFile,Ug.FS_createDevice=Yu.createDevice;var Wu={g:function(e,A,t,r){Gu("Assertion failed: "+du(e)+", at: "+[A?du(A):"unknown filename",t,r?du(r):"unknown function"])},u:function(e,A,t){throw new Pu(e).init(A,t),e},d:function(e,A,t){Hu.varargs=t;try{var r=Hu.getStreamFromFD(e);switch(A){case 0:return(n=Hu.get())<0?-28:Yu.createStream(r,n).fd;case 1:case 2:case 6:case 7:return 0;case 3:return r.flags;case 4:var n=Hu.get();return r.flags|=n,0;case 5:return n=Hu.get(),su[n+0>>1]=2,0;case 16:case 8:default:return-28;case 9:return iu[Vd()>>2]=28,-1}}catch(e){if(void 0===Yu||!(e instanceof Yu.ErrnoError))throw e;return-e.errno}},q:function(e,A,t){try{var r=Hu.getStreamFromFD(e);r.getdents||(r.getdents=Yu.readdir(r.path));for(var n=280,a=0,s=Yu.llseek(r,0,1),i=Math.floor(s/n);i<r.getdents.length&&a+n<=t;){var o,l,c=r.getdents[i];if("."===c)o=r.node.id,l=4;else if(".."===c)o=Yu.lookupPath(r.path,{parent:!0}).node.id,l=4;else{var g=Yu.lookupNode(r.node,c);o=g.id,l=Yu.isChrdev(g.mode)?2:Yu.isDir(g.mode)?4:Yu.isLink(g.mode)?10:8}vu=[o>>>0,(xu=o,+Math.abs(xu)>=1?xu>0?(0|Math.min(+Math.floor(xu/4294967296),4294967295))>>>0:~~+Math.ceil((xu-+(~~xu>>>0))/4294967296)>>>0:0)],iu[A+a>>2]=vu[0],iu[A+a+4>>2]=vu[1],vu=[(i+1)*n>>>0,(xu=(i+1)*n,+Math.abs(xu)>=1?xu>0?(0|Math.min(+Math.floor(xu/4294967296),4294967295))>>>0:~~+Math.ceil((xu-+(~~xu>>>0))/4294967296)>>>0:0)],iu[A+a+8>>2]=vu[0],iu[A+a+12>>2]=vu[1],su[A+a+16>>1]=280,nu[A+a+18|0]=l,fu(c,au,A+a+19,256),a+=n,i+=1}return Yu.llseek(r,i*n,0),a}catch(e){if(void 0===Yu||!(e instanceof Yu.ErrnoError))throw e;return-e.errno}},h:function(e,A,t){Hu.varargs=t;try{var r=Hu.getStreamFromFD(e);switch(A){case 21509:case 21505:case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:case 21523:case 21524:return r.tty?0:-59;case 21519:if(!r.tty)return-59;var n=Hu.get();return iu[n>>2]=0,0;case 21520:return r.tty?-28:-59;case 21531:return n=Hu.get(),Yu.ioctl(r,A,n);default:return-28}}catch(e){if(void 0===Yu||!(e instanceof Yu.ErrnoError))throw e;return-e.errno}},e:function(e,A,t,r){Hu.varargs=r;try{A=Hu.getStr(A),A=Hu.calculateAt(e,A);var n=r?Hu.get():0;return Yu.open(A,t,n).fd}catch(e){if(void 0===Yu||!(e instanceof Yu.ErrnoError))throw e;return-e.errno}},o:function(e){try{return e=Hu.getStr(e),Yu.rmdir(e),0}catch(e){if(void 0===Yu||!(e instanceof Yu.ErrnoError))throw e;return-e.errno}},n:function(e,A){try{return e=Hu.getStr(e),Hu.doStat(Yu.stat,e,A)}catch(e){if(void 0===Yu||!(e instanceof Yu.ErrnoError))throw e;return-e.errno}},p:function(e,A,t){try{return A=Hu.getStr(A),A=Hu.calculateAt(e,A),0===t?Yu.unlink(A):512===t?Yu.rmdir(A):Gu("Invalid flags passed to unlinkat"),0}catch(e){if(void 0===Yu||!(e instanceof Yu.ErrnoError))throw e;return-e.errno}},i:function(){return!0},l:function(){Gu("")},f:function(){return Date.now()},j:function(e,A,t){au.copyWithin(e,A,A+t)},m:function(e){au.length,Gu("OOM")},r:function(e,A){var t=0;return ju().forEach((function(r,n){var a=A+t;ou[e+4*n>>2]=a,function(e,A){for(var t=0;t<e.length;++t)nu[0|A++]=e.charCodeAt(t);nu[0|A]=0}(r,a),t+=r.length+1})),0},s:function(e,A){var t=ju();ou[e>>2]=t.length;var r=0;return t.forEach((function(e){r+=e.length+1})),ou[A>>2]=r,0},b:function(e){try{var A=Hu.getStreamFromFD(e);return Yu.close(A),0}catch(e){if(void 0===Yu||!(e instanceof Yu.ErrnoError))throw e;return e.errno}},t:function(e,A,t,r){try{var n=function(e,A,t){for(var r=0,n=0;n<t;n++){var a=ou[A>>2],s=ou[A+4>>2];A+=8;var i=Yu.read(e,nu,a,s,undefined);if(i<0)return-1;if(r+=i,i<s)break}return r}(Hu.getStreamFromFD(e),A,t);return ou[r>>2]=n,0}catch(e){if(void 0===Yu||!(e instanceof Yu.ErrnoError))throw e;return e.errno}},k:function(e,A,t,r,n){try{var a=(o=t)+2097152>>>0<4194305-!!(i=A)?(i>>>0)+4294967296*o:NaN;if(isNaN(a))return 61;var s=Hu.getStreamFromFD(e);return Yu.llseek(s,a,r),vu=[s.position>>>0,(xu=s.position,+Math.abs(xu)>=1?xu>0?(0|Math.min(+Math.floor(xu/4294967296),4294967295))>>>0:~~+Math.ceil((xu-+(~~xu>>>0))/4294967296)>>>0:0)],iu[n>>2]=vu[0],iu[n+4>>2]=vu[1],s.getdents&&0===a&&0===r&&(s.getdents=null),0}catch(e){if(void 0===Yu||!(e instanceof Yu.ErrnoError))throw e;return e.errno}var i,o},c:function(e,A,t,r){try{var n=function(e,A,t){for(var r=0,n=0;n<t;n++){var a=ou[A>>2],s=ou[A+4>>2];A+=8;var i=Yu.write(e,nu,a,s,undefined);if(i<0)return-1;r+=i}return r}(Hu.getStreamFromFD(e),A,t);return ou[r>>2]=n,0}catch(e){if(void 0===Yu||!(e instanceof Yu.ErrnoError))throw e;return e.errno}},a:eu};!function(){var e,A={a:Wu};function t(e,A){var t=e.exports;Ug.asm=t,Ug.asm.ua,ku(Ug.asm.v),Mu()}if(Eu(),Ug.instantiateWasm)try{return Ug.instantiateWasm(A,t)}catch(e){return $g("Module.instantiateWasm callback failed with error: "+e),!1}e=function(e){t(e.instance)},async function(){return[]}().then((function(e){return Au.instantiate(e,A)})).then((function(e){return e})).then(e,(function(e){$g("failed to asynchronously prepare wasm: "+e),Gu(e)}))}(),Ug.___wasm_call_ctors=function(){return(Ug.___wasm_call_ctors=Ug.asm.v).apply(null,arguments)};var Uu=Ug._emscripten_bind_VoidPtr___destroy___0=function(){return(Uu=Ug._emscripten_bind_VoidPtr___destroy___0=Ug.asm.w).apply(null,arguments)},Ku=Ug._emscripten_bind_espeak_VOICE_get_name_0=function(){return(Ku=Ug._emscripten_bind_espeak_VOICE_get_name_0=Ug.asm.x).apply(null,arguments)},Zu=Ug._emscripten_bind_espeak_VOICE_set_name_1=function(){return(Zu=Ug._emscripten_bind_espeak_VOICE_set_name_1=Ug.asm.y).apply(null,arguments)},Xu=Ug._emscripten_bind_espeak_VOICE_get_languages_1=function(){return(Xu=Ug._emscripten_bind_espeak_VOICE_get_languages_1=Ug.asm.z).apply(null,arguments)},qu=Ug._emscripten_bind_espeak_VOICE_get_identifier_0=function(){return(qu=Ug._emscripten_bind_espeak_VOICE_get_identifier_0=Ug.asm.A).apply(null,arguments)},Ju=Ug._emscripten_bind_espeak_VOICE_set_identifier_1=function(){return(Ju=Ug._emscripten_bind_espeak_VOICE_set_identifier_1=Ug.asm.B).apply(null,arguments)},_u=Ug._emscripten_bind_espeak_VOICE_get_gender_0=function(){return(_u=Ug._emscripten_bind_espeak_VOICE_get_gender_0=Ug.asm.C).apply(null,arguments)},$u=Ug._emscripten_bind_espeak_VOICE_set_gender_1=function(){return($u=Ug._emscripten_bind_espeak_VOICE_set_gender_1=Ug.asm.D).apply(null,arguments)},ed=Ug._emscripten_bind_espeak_VOICE_get_age_0=function(){return(ed=Ug._emscripten_bind_espeak_VOICE_get_age_0=Ug.asm.E).apply(null,arguments)},Ad=Ug._emscripten_bind_espeak_VOICE_set_age_1=function(){return(Ad=Ug._emscripten_bind_espeak_VOICE_set_age_1=Ug.asm.F).apply(null,arguments)},td=Ug._emscripten_bind_espeak_VOICE_get_variant_0=function(){return(td=Ug._emscripten_bind_espeak_VOICE_get_variant_0=Ug.asm.G).apply(null,arguments)},rd=Ug._emscripten_bind_espeak_VOICE_set_variant_1=function(){return(rd=Ug._emscripten_bind_espeak_VOICE_set_variant_1=Ug.asm.H).apply(null,arguments)},nd=Ug._emscripten_bind_espeak_VOICE_get_xx1_0=function(){return(nd=Ug._emscripten_bind_espeak_VOICE_get_xx1_0=Ug.asm.I).apply(null,arguments)},ad=Ug._emscripten_bind_espeak_VOICE_set_xx1_1=function(){return(ad=Ug._emscripten_bind_espeak_VOICE_set_xx1_1=Ug.asm.J).apply(null,arguments)},sd=Ug._emscripten_bind_espeak_VOICE_get_score_0=function(){return(sd=Ug._emscripten_bind_espeak_VOICE_get_score_0=Ug.asm.K).apply(null,arguments)},id=Ug._emscripten_bind_espeak_VOICE_set_score_1=function(){return(id=Ug._emscripten_bind_espeak_VOICE_set_score_1=Ug.asm.L).apply(null,arguments)},od=Ug._emscripten_bind_espeak_VOICE_get_spare_0=function(){return(od=Ug._emscripten_bind_espeak_VOICE_get_spare_0=Ug.asm.M).apply(null,arguments)},ld=Ug._emscripten_bind_espeak_VOICE_set_spare_1=function(){return(ld=Ug._emscripten_bind_espeak_VOICE_set_spare_1=Ug.asm.N).apply(null,arguments)},cd=Ug._emscripten_bind_espeak_VOICE___destroy___0=function(){return(cd=Ug._emscripten_bind_espeak_VOICE___destroy___0=Ug.asm.O).apply(null,arguments)},gd=Ug._emscripten_bind_espeak_EVENT_get_type_0=function(){return(gd=Ug._emscripten_bind_espeak_EVENT_get_type_0=Ug.asm.P).apply(null,arguments)},ud=Ug._emscripten_bind_espeak_EVENT_get_unique_identifier_0=function(){return(ud=Ug._emscripten_bind_espeak_EVENT_get_unique_identifier_0=Ug.asm.Q).apply(null,arguments)},dd=Ug._emscripten_bind_espeak_EVENT_get_text_position_0=function(){return(dd=Ug._emscripten_bind_espeak_EVENT_get_text_position_0=Ug.asm.R).apply(null,arguments)},fd=Ug._emscripten_bind_espeak_EVENT_get_length_0=function(){return(fd=Ug._emscripten_bind_espeak_EVENT_get_length_0=Ug.asm.S).apply(null,arguments)},pd=Ug._emscripten_bind_espeak_EVENT_get_audio_position_0=function(){return(pd=Ug._emscripten_bind_espeak_EVENT_get_audio_position_0=Ug.asm.T).apply(null,arguments)},hd=Ug._emscripten_bind_espeak_EVENT_get_sample_0=function(){return(hd=Ug._emscripten_bind_espeak_EVENT_get_sample_0=Ug.asm.U).apply(null,arguments)},md=Ug._emscripten_bind_espeak_EVENT_get_user_data_0=function(){return(md=Ug._emscripten_bind_espeak_EVENT_get_user_data_0=Ug.asm.V).apply(null,arguments)},Cd=Ug._emscripten_bind_espeak_EVENT___destroy___0=function(){return(Cd=Ug._emscripten_bind_espeak_EVENT___destroy___0=Ug.asm.W).apply(null,arguments)},bd=Ug._emscripten_bind_eSpeakNGWorker_eSpeakNGWorker_0=function(){return(bd=Ug._emscripten_bind_eSpeakNGWorker_eSpeakNGWorker_0=Ug.asm.X).apply(null,arguments)},Id=Ug._emscripten_bind_eSpeakNGWorker_synth__2=function(){return(Id=Ug._emscripten_bind_eSpeakNGWorker_synth__2=Ug.asm.Y).apply(null,arguments)},wd=Ug._emscripten_bind_eSpeakNGWorker_synth_ipa__2=function(){return(wd=Ug._emscripten_bind_eSpeakNGWorker_synth_ipa__2=Ug.asm.Z).apply(null,arguments)},kd=Ug._emscripten_bind_eSpeakNGWorker_getSizeOfEventStruct__0=function(){return(kd=Ug._emscripten_bind_eSpeakNGWorker_getSizeOfEventStruct__0=Ug.asm._).apply(null,arguments)},xd=Ug._emscripten_bind_eSpeakNGWorker_set_voice_2=function(){return(xd=Ug._emscripten_bind_eSpeakNGWorker_set_voice_2=Ug.asm.$).apply(null,arguments)},vd=Ug._emscripten_bind_eSpeakNGWorker_set_voice_3=function(){return(vd=Ug._emscripten_bind_eSpeakNGWorker_set_voice_3=Ug.asm.aa).apply(null,arguments)},Bd=Ug._emscripten_bind_eSpeakNGWorker_set_voice_4=function(){return(Bd=Ug._emscripten_bind_eSpeakNGWorker_set_voice_4=Ug.asm.ba).apply(null,arguments)},yd=Ug._emscripten_bind_eSpeakNGWorker_set_voice_5=function(){return(yd=Ug._emscripten_bind_eSpeakNGWorker_set_voice_5=Ug.asm.ca).apply(null,arguments)},Ed=Ug._emscripten_bind_eSpeakNGWorker_get_voices_1=function(){return(Ed=Ug._emscripten_bind_eSpeakNGWorker_get_voices_1=Ug.asm.da).apply(null,arguments)},Md=Ug._emscripten_bind_eSpeakNGWorker_set_voices_2=function(){return(Md=Ug._emscripten_bind_eSpeakNGWorker_set_voices_2=Ug.asm.ea).apply(null,arguments)},Gd=Ug._emscripten_bind_eSpeakNGWorker_get_samplerate_0=function(){return(Gd=Ug._emscripten_bind_eSpeakNGWorker_get_samplerate_0=Ug.asm.fa).apply(null,arguments)},Dd=Ug._emscripten_bind_eSpeakNGWorker_get_rate_0=function(){return(Dd=Ug._emscripten_bind_eSpeakNGWorker_get_rate_0=Ug.asm.ga).apply(null,arguments)},Qd=Ug._emscripten_bind_eSpeakNGWorker_set_rate_1=function(){return(Qd=Ug._emscripten_bind_eSpeakNGWorker_set_rate_1=Ug.asm.ha).apply(null,arguments)},Td=Ug._emscripten_bind_eSpeakNGWorker_get_pitch_0=function(){return(Td=Ug._emscripten_bind_eSpeakNGWorker_get_pitch_0=Ug.asm.ia).apply(null,arguments)},Pd=Ug._emscripten_bind_eSpeakNGWorker_set_pitch_1=function(){return(Pd=Ug._emscripten_bind_eSpeakNGWorker_set_pitch_1=Ug.asm.ja).apply(null,arguments)},zd=Ug._emscripten_bind_eSpeakNGWorker___destroy___0=function(){return(zd=Ug._emscripten_bind_eSpeakNGWorker___destroy___0=Ug.asm.ka).apply(null,arguments)},Fd=Ug._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED=function(){return(Fd=Ug._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED=Ug.asm.la).apply(null,arguments)},Sd=Ug._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD=function(){return(Sd=Ug._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD=Ug.asm.ma).apply(null,arguments)},Nd=Ug._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE=function(){return(Nd=Ug._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE=Ug.asm.na).apply(null,arguments)},Od=Ug._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK=function(){return(Od=Ug._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK=Ug.asm.oa).apply(null,arguments)},Ld=Ug._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY=function(){return(Ld=Ug._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY=Ug.asm.pa).apply(null,arguments)},Yd=Ug._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END=function(){return(Yd=Ug._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END=Ug.asm.qa).apply(null,arguments)},Hd=Ug._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED=function(){return(Hd=Ug._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED=Ug.asm.ra).apply(null,arguments)},Rd=Ug._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME=function(){return(Rd=Ug._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME=Ug.asm.sa).apply(null,arguments)},jd=Ug._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE=function(){return(jd=Ug._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE=Ug.asm.ta).apply(null,arguments)},Vd=Ug.___errno_location=function(){return(Vd=Ug.___errno_location=Ug.asm.va).apply(null,arguments)};Ug._free=function(){return(Ug._free=Ug.asm.wa).apply(null,arguments)},Ug._malloc=function(){return(Ug._malloc=Ug.asm.xa).apply(null,arguments)};var Wd,Ud=Ug.___cxa_is_pointer_type=function(){return(Ud=Ug.___cxa_is_pointer_type=Ug.asm.ya).apply(null,arguments)};function Kd(e){function A(){Wd||(Wd=!0,Ug.calledRun=!0,tu||(wu=!0,Ug.noFSInit||Yu.init.initialized||Yu.init(),Yu.ignorePermissions=!1,Qu(bu),Ug.onRuntimeInitialized&&Ug.onRuntimeInitialized(),function(){if(Ug.postRun)for("function"==typeof Ug.postRun&&(Ug.postRun=[Ug.postRun]);Ug.postRun.length;)e=Ug.postRun.shift(),Iu.unshift(e);var e;Qu(Iu)}()))}Bu>0||(function(){if(Ug.preRun)for("function"==typeof Ug.preRun&&(Ug.preRun=[Ug.preRun]);Ug.preRun.length;)e=Ug.preRun.shift(),Cu.unshift(e);var e;Qu(Cu)}(),Bu>0||(Ug.setStatus?(Ug.setStatus("Running..."),setTimeout((function(){setTimeout((function(){Ug.setStatus("")}),1),A()}),1)):A()))}if(Ug.___start_em_js=132724,Ug.___stop_em_js=132822,Ug.addRunDependency=Eu,Ug.removeRunDependency=Mu,Ug.FS_createPath=Yu.createPath,Ug.FS_createDataFile=Yu.createDataFile,Ug.FS_createLazyFile=Yu.createLazyFile,Ug.FS_createDevice=Yu.createDevice,Ug.FS_unlink=Yu.unlink,yu=function e(){Wd||Kd(),Wd||(yu=e)},Ug.preInit)for("function"==typeof Ug.preInit&&(Ug.preInit=[Ug.preInit]);Ug.preInit.length>0;)Ug.preInit.pop()();function Zd(){}function Xd(e){return(e||Zd).__cache__}function qd(e,A){var t=Xd(A),r=t[e];return r||((r=Object.create((A||Zd).prototype)).ptr=e,t[e]=r)}Kd(),Zd.prototype=Object.create(Zd.prototype),Zd.prototype.constructor=Zd,Zd.prototype.__class__=Zd,Zd.__cache__={},Ug.WrapperObject=Zd,Ug.getCache=Xd,Ug.wrapPointer=qd,Ug.castObject=function(e,A){return qd(e.ptr,A)},Ug.NULL=qd(0),Ug.destroy=function(e){if(!e.__destroy__)throw"Error: Cannot destroy object. (Did you create it yourself?)";e.__destroy__(),delete Xd(e.__class__)[e.ptr]},Ug.compare=function(e,A){return e.ptr===A.ptr},Ug.getPointer=function(e){return e.ptr},Ug.getClass=function(e){return e.__class__};var Jd={buffer:0,size:0,pos:0,temps:[],needed:0,prepare:function(){if(Jd.needed){for(var e=0;e<Jd.temps.length;e++)Ug._free(Jd.temps[e]);Jd.temps.length=0,Ug._free(Jd.buffer),Jd.buffer=0,Jd.size+=Jd.needed,Jd.needed=0}Jd.buffer||(Jd.size+=128,Jd.buffer=Ug._malloc(Jd.size),ru(Jd.buffer)),Jd.pos=0},alloc:function(e,A){ru(Jd.buffer);var t,r=A.BYTES_PER_ELEMENT,n=e.length*r;return n=n+7&-8,Jd.pos+n>=Jd.size?(ru(n>0),Jd.needed+=n,t=Ug._malloc(n),Jd.temps.push(t)):(t=Jd.buffer+Jd.pos,Jd.pos+=n),t},copy:function(e,A,t){switch(t>>>=0,A.BYTES_PER_ELEMENT){case 2:t>>>=1;break;case 4:t>>>=2;break;case 8:t>>>=3}for(var r=0;r<e.length;r++)A[t+r]=e[r]}};function _d(e){if("string"==typeof e){var A=Su(e),t=Jd.alloc(A,nu);return Jd.copy(A,nu,t),t}return e}function $d(){throw"cannot construct a VoidPtr, no constructor in IDL"}function ef(){throw"cannot construct a espeak_VOICE, no constructor in IDL"}function Af(){throw"cannot construct a espeak_EVENT, no constructor in IDL"}function tf(){this.ptr=bd(),Xd(tf)[this.ptr]=this}$d.prototype=Object.create(Zd.prototype),$d.prototype.constructor=$d,$d.prototype.__class__=$d,$d.__cache__={},Ug.VoidPtr=$d,$d.prototype.__destroy__=$d.prototype.__destroy__=function(){var e=this.ptr;Uu(e)},ef.prototype=Object.create(Zd.prototype),ef.prototype.constructor=ef,ef.prototype.__class__=ef,ef.__cache__={},Ug.espeak_VOICE=ef,ef.prototype.get_name=ef.prototype.get_name=function(){var e=this.ptr;return du(Ku(e))},ef.prototype.set_name=ef.prototype.set_name=function(e){var A=this.ptr;Jd.prepare(),e=e&&"object"==typeof e?e.ptr:_d(e),Zu(A,e)},Object.defineProperty(ef.prototype,"name",{get:ef.prototype.get_name,set:ef.prototype.set_name}),ef.prototype.get_languages=ef.prototype.get_languages=function(e){var A=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),Xu(A,e)},Object.defineProperty(ef.prototype,"languages",{get:ef.prototype.get_languages}),ef.prototype.get_identifier=ef.prototype.get_identifier=function(){var e=this.ptr;return du(qu(e))},ef.prototype.set_identifier=ef.prototype.set_identifier=function(e){var A=this.ptr;Jd.prepare(),e=e&&"object"==typeof e?e.ptr:_d(e),Ju(A,e)},Object.defineProperty(ef.prototype,"identifier",{get:ef.prototype.get_identifier,set:ef.prototype.set_identifier}),ef.prototype.get_gender=ef.prototype.get_gender=function(){var e=this.ptr;return _u(e)},ef.prototype.set_gender=ef.prototype.set_gender=function(e){var A=this.ptr;e&&"object"==typeof e&&(e=e.ptr),$u(A,e)},Object.defineProperty(ef.prototype,"gender",{get:ef.prototype.get_gender,set:ef.prototype.set_gender}),ef.prototype.get_age=ef.prototype.get_age=function(){var e=this.ptr;return ed(e)},ef.prototype.set_age=ef.prototype.set_age=function(e){var A=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Ad(A,e)},Object.defineProperty(ef.prototype,"age",{get:ef.prototype.get_age,set:ef.prototype.set_age}),ef.prototype.get_variant=ef.prototype.get_variant=function(){var e=this.ptr;return td(e)},ef.prototype.set_variant=ef.prototype.set_variant=function(e){var A=this.ptr;e&&"object"==typeof e&&(e=e.ptr),rd(A,e)},Object.defineProperty(ef.prototype,"variant",{get:ef.prototype.get_variant,set:ef.prototype.set_variant}),ef.prototype.get_xx1=ef.prototype.get_xx1=function(){var e=this.ptr;return nd(e)},ef.prototype.set_xx1=ef.prototype.set_xx1=function(e){var A=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ad(A,e)},Object.defineProperty(ef.prototype,"xx1",{get:ef.prototype.get_xx1,set:ef.prototype.set_xx1}),ef.prototype.get_score=ef.prototype.get_score=function(){var e=this.ptr;return sd(e)},ef.prototype.set_score=ef.prototype.set_score=function(e){var A=this.ptr;e&&"object"==typeof e&&(e=e.ptr),id(A,e)},Object.defineProperty(ef.prototype,"score",{get:ef.prototype.get_score,set:ef.prototype.set_score}),ef.prototype.get_spare=ef.prototype.get_spare=function(){var e=this.ptr;return od(e)},ef.prototype.set_spare=ef.prototype.set_spare=function(e){var A=this.ptr;e&&"object"==typeof e&&(e=e.ptr),ld(A,e)},Object.defineProperty(ef.prototype,"spare",{get:ef.prototype.get_spare,set:ef.prototype.set_spare}),ef.prototype.__destroy__=ef.prototype.__destroy__=function(){var e=this.ptr;cd(e)},Af.prototype=Object.create(Zd.prototype),Af.prototype.constructor=Af,Af.prototype.__class__=Af,Af.__cache__={},Ug.espeak_EVENT=Af,Af.prototype.get_type=Af.prototype.get_type=function(){var e=this.ptr;return gd(e)},Object.defineProperty(Af.prototype,"type",{get:Af.prototype.get_type}),Af.prototype.get_unique_identifier=Af.prototype.get_unique_identifier=function(){var e=this.ptr;return ud(e)},Object.defineProperty(Af.prototype,"unique_identifier",{get:Af.prototype.get_unique_identifier}),Af.prototype.get_text_position=Af.prototype.get_text_position=function(){var e=this.ptr;return dd(e)},Object.defineProperty(Af.prototype,"text_position",{get:Af.prototype.get_text_position}),Af.prototype.get_length=Af.prototype.get_length=function(){var e=this.ptr;return fd(e)},Object.defineProperty(Af.prototype,"length",{get:Af.prototype.get_length}),Af.prototype.get_audio_position=Af.prototype.get_audio_position=function(){var e=this.ptr;return pd(e)},Object.defineProperty(Af.prototype,"audio_position",{get:Af.prototype.get_audio_position}),Af.prototype.get_sample=Af.prototype.get_sample=function(){var e=this.ptr;return hd(e)},Object.defineProperty(Af.prototype,"sample",{get:Af.prototype.get_sample}),Af.prototype.get_user_data=Af.prototype.get_user_data=function(){var e=this.ptr;return md(e)},Object.defineProperty(Af.prototype,"user_data",{get:Af.prototype.get_user_data}),Af.prototype.__destroy__=Af.prototype.__destroy__=function(){var e=this.ptr;Cd(e)},tf.prototype=Object.create(Zd.prototype),tf.prototype.constructor=tf,tf.prototype.__class__=tf,tf.__cache__={},Ug.eSpeakNGWorker=tf,tf.prototype.synth_=tf.prototype.synth_=function(e,A){var t=this.ptr;Jd.prepare(),e=e&&"object"==typeof e?e.ptr:_d(e),A&&"object"==typeof A&&(A=A.ptr),Id(t,e,A)},tf.prototype.synth_ipa_=tf.prototype.synth_ipa_=function(e,A){var t=this.ptr;return Jd.prepare(),e=e&&"object"==typeof e?e.ptr:_d(e),A=A&&"object"==typeof A?A.ptr:_d(A),wd(t,e,A)},tf.prototype.getSizeOfEventStruct_=tf.prototype.getSizeOfEventStruct_=function(){var e=this.ptr;return kd(e)},tf.prototype.set_voice=tf.prototype.set_voice=function(e,A,t,r,n){var a=this.ptr;return Jd.prepare(),e=e&&"object"==typeof e?e.ptr:_d(e),A=A&&"object"==typeof A?A.ptr:_d(A),t&&"object"==typeof t&&(t=t.ptr),r&&"object"==typeof r&&(r=r.ptr),n&&"object"==typeof n&&(n=n.ptr),void 0===t?xd(a,e,A):void 0===r?vd(a,e,A,t):void 0===n?Bd(a,e,A,t,r):yd(a,e,A,t,r,n)},tf.prototype.get_voices=tf.prototype.get_voices=function(e){var A=this.ptr;return e&&"object"==typeof e&&(e=e.ptr),qd(Ed(A,e),ef)},tf.prototype.set_voices=tf.prototype.set_voices=function(e,A){var t=this.ptr;Jd.prepare(),e&&"object"==typeof e&&(e=e.ptr),A&&"object"==typeof A&&(A=A.ptr),Md(t,e,A)},Object.defineProperty(tf.prototype,"voices",{get:tf.prototype.get_voices,set:tf.prototype.set_voices}),tf.prototype.get_samplerate=tf.prototype.get_samplerate=function(){var e=this.ptr;return Gd(e)},Object.defineProperty(tf.prototype,"samplerate",{get:tf.prototype.get_samplerate}),tf.prototype.get_rate=tf.prototype.get_rate=function(){var e=this.ptr;return Dd(e)},tf.prototype.set_rate=tf.prototype.set_rate=function(e){var A=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Qd(A,e)},Object.defineProperty(tf.prototype,"rate",{get:tf.prototype.get_rate,set:tf.prototype.set_rate}),tf.prototype.get_pitch=tf.prototype.get_pitch=function(){var e=this.ptr;return Td(e)},tf.prototype.set_pitch=tf.prototype.set_pitch=function(e){var A=this.ptr;e&&"object"==typeof e&&(e=e.ptr),Pd(A,e)},Object.defineProperty(tf.prototype,"pitch",{get:tf.prototype.get_pitch,set:tf.prototype.set_pitch}),tf.prototype.__destroy__=tf.prototype.__destroy__=function(){var e=this.ptr;zd(e)},function(){function e(){Ug.espeakEVENT_LIST_TERMINATED=Fd(),Ug.espeakEVENT_WORD=Sd(),Ug.espeakEVENT_SENTENCE=Nd(),Ug.espeakEVENT_MARK=Od(),Ug.espeakEVENT_PLAY=Ld(),Ug.espeakEVENT_END=Yd(),Ug.espeakEVENT_MSG_TERMINATED=Hd(),Ug.espeakEVENT_PHONEME=Rd(),Ug.espeakEVENT_SAMPLERATE=jd()}wu?e():ku(e)}(),tf.prototype.list_voices=function(){for(var e,A=[],t=this.get_voices(e=0);0!=t.ptr;t=this.get_voices(++e)){var r={name:t.get_name(),identifier:t.get_identifier(),languages:[]},n=0,a=t.get_languages(n);function i(e){for(var A="",r=e,n=t.get_languages(r++);0!=n;)A+=String.fromCharCode(n),n=t.get_languages(r++);return A}for(;0!=a;){var s={priority:a,name:i(++n)};r.languages.push(s),n+=s.name.length+1,a=t.get_languages(n)}A.push(r)}return A};var rf=["list_terminated","word","sentence","mark","play","end","msg_terminated","phoneme","samplerate"];tf.prototype.synthesize=function(e,A){var t=this.getSizeOfEventStruct_(),r=addFunction((function(e,r,n){for(var a=new Float32Array(2*r),s=0;s<r;s++)a[2*s]=Math.max(-1,Math.min(1,Tu(e+2*s,"i16")/32768)),a[2*s+1]=a[2*s];var i=[];for(e=n,ev=qd(e,Af);ev.get_type()!=Ug.espeakEVENT_LIST_TERMINATED;ev=qd(e+=t,Af))i.push({type:rf[ev.get_type()],text_position:ev.get_text_position(),word_length:ev.get_length(),audio_position:ev.get_audio_position()});return A(a,i)?1:0}));this.synth_(e,r),removeFunction(r)},tf.prototype.synthesize_ipa=function(e,A){var t="espeak-ng-ipa-tmp-"+Math.random().toString().substring(2),r="",n=this.synth_ipa_(e,t);return 0==n&&(r=Yu.readFile(t,{encoding:"utf8"})),Yu.unlink(t),{code:n,ipa:r}};const nf=new Promise((e=>{Ug.calledRun?e(new Ug.eSpeakNGWorker):Ug.onRuntimeInitialized=()=>e(new Ug.eSpeakNGWorker)})),af=["en"],sf=nf.then((e=>{const A=e.list_voices().map((({name:e,identifier:A,languages:t})=>({name:e,identifier:A,languages:t.filter((e=>af.includes(e.name.split("-")[0])))}))).filter((e=>e.languages.length>0)),t=new Set;for(const e of A){t.add(e.identifier);for(const A of e.languages)t.add(A.name)}return{voices:A,identifiers:t}}));function of(e){if(e.includes("."))return e;if(e.includes(":")){let[A,t]=e.split(":").map(Number);return 0===t?`${A} o'clock`:t<10?`${A} oh ${t}`:`${A} ${t}`}let A=parseInt(e.slice(0,4),10);if(A<1100||A%1e3<10)return e;let t=e.slice(0,2),r=parseInt(e.slice(2,4),10),n=e.endsWith("s")?"s":"";if(A%1e3>=100&&A%1e3<=999){if(0===r)return`${t} hundred${n}`;if(r<10)return`${t} oh ${r}${n}`}return`${t} ${r}${n}`}function lf(e){const A="$"===e[0]?"dollar":"pound";if(isNaN(Number(e.slice(1))))return`${e.slice(1)} ${A}s`;if(!e.includes(".")){let t="1"===e.slice(1)?"":"s";return`${e.slice(1)} ${A}${t}`}const[t,r]=e.slice(1).split("."),n=parseInt(r.padEnd(2,"0"),10);return`${t} ${A}${"1"===t?"":"s"} and ${n} ${"$"===e[0]?1===n?"cent":"cents":1===n?"penny":"pence"}`}function cf(e){let[A,t]=e.split(".");return`${A} point ${t.split("").join(" ")}`}const gf=new RegExp(`(\\s*[${uf=';:,.!?¡¿—…"«»“”(){}[]',uf.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}]+\\s*)+`,"g");var uf;async function df(e,A="a",t=!0){t&&(e=function(e){return e.replace(/[‘’]/g,"'").replace(/«/g,"“").replace(/»/g,"”").replace(/[“”]/g,'"').replace(/\(/g,"«").replace(/\)/g,"»").replace(/、/g,", ").replace(/。/g,". ").replace(/！/g,"! ").replace(/，/g,", ").replace(/：/g,": ").replace(/；/g,"; ").replace(/？/g,"? ").replace(/[^\S \n]/g," ").replace(/  +/," ").replace(/(?<=\n) +(?=\n)/g,"").replace(/\bD[Rr]\.(?= [A-Z])/g,"Doctor").replace(/\b(?:Mr\.|MR\.(?= [A-Z]))/g,"Mister").replace(/\b(?:Ms\.|MS\.(?= [A-Z]))/g,"Miss").replace(/\b(?:Mrs\.|MRS\.(?= [A-Z]))/g,"Mrs").replace(/\betc\.(?! [A-Z])/gi,"etc").replace(/\b(y)eah?\b/gi,"$1e'a").replace(/\d*\.\d+|\b\d{4}s?\b|(?<!:)\b(?:[1-9]|1[0-2]):[0-5]\d\b(?!:)/g,of).replace(/(?<=\d),(?=\d)/g,"").replace(/[$£]\d+(?:\.\d+)?(?: hundred| thousand| (?:[bm]|tr)illion)*\b|[$£]\d+\.\d\d?\b/gi,lf).replace(/\d*\.\d+/g,cf).replace(/(?<=\d)-(?=\d)/g," to ").replace(/(?<=\d)S/g," S").replace(/(?<=[BCDFGHJ-NP-TV-Z])'?s\b/g,"'S").replace(/(?<=X')S\b/g,"s").replace(/(?:[A-Za-z]\.){2,} [a-z]/g,(e=>e.replace(/\./g,"-"))).replace(/(?<=[A-Z])\.(?=[A-Z])/gi,"-").trim()}(e));const r=function(e,A){const t=[];let r=0;for(const n of e.matchAll(A)){const A=n[0];r<n.index&&t.push({match:!1,text:e.slice(r,n.index)}),A.length>0&&t.push({match:!0,text:A}),r=n.index+A.length}return r<e.length&&t.push({match:!1,text:e.slice(r)}),t}(e,gf),n="a"===A?"en-us":"en",a=(await Promise.all(r.map((async({match:e,text:A})=>e?A:(await(async(e,A="en-us")=>{const t=await nf,{identifiers:r}=await sf;if(!r.has(A))throw new Error(`Invalid language identifier: "${A}". Should be one of: ${Array.from(r).toSorted().join(", ")}.`);return t.set_voice(A),t.synthesize_ipa(e).ipa?.split("\n").filter((e=>e.length>0))??[]})(A,n)).join(" "))))).join("");let s=a.replace(/kəkˈoːɹoʊ/g,"kˈoʊkəɹoʊ").replace(/kəkˈɔːɹəʊ/g,"kˈəʊkəɹəʊ").replace(/ʲ/g,"j").replace(/r/g,"ɹ").replace(/x/g,"k").replace(/ɬ/g,"l").replace(/(?<=[a-zɹː])(?=hˈʌndɹɪd)/g," ").replace(/ z(?=[;:,.!?¡¿—…"«»“” ]|$)/g,"z");return"a"===A&&(s=s.replace(/(?<=nˈaɪn)ti(?!ː)/g,"di")),s.trim()}function ff(e,A=!0){return".!?…。？！".includes(e)||A&&"\n"===e}function pf(e){return"\"')]}」』".includes(e)}function hf(e,A){let t=A;for(;t<e.length&&!/\s/.test(e[t]);)++t;return e.substring(A,t)}const mf=new Set(["mr","mrs","ms","dr","prof","sr","jr","sgt","col","gen","rep","sen","gov","lt","maj","capt","st","mt","etc","co","inc","ltd","dept","vs","p","pg","jan","feb","mar","apr","jun","jul","aug","sep","sept","oct","nov","dec","sun","mon","tu","tue","tues","wed","th","thu","thur","thurs","fri","sat"]);function Cf(e){return e=e.replace(/['’]s$/i,"").replace(/\.+$/,""),mf.has(e.toLowerCase())}const bf=new Map([[")","("],["]","["],["}","{"],["》","《"],["〉","〈"],["›","‹"],["»","«"],["〉","〈"],["」","「"],["』","『"],["〕","〔"],["】","【"]]),If=new Set(bf.values());function wf(e,A,t,r){if('"'===e||"'"===e){if("'"===e&&t>0&&t<r.length-1&&/[A-Za-z]/.test(r[t-1])&&/[A-Za-z]/.test(r[t+1]))return;return void(A.length&&A.at(-1)===e?A.pop():A.push(e))}if(If.has(e))return void A.push(e);const n=bf.get(e);n&&A.length&&A.at(-1)===n&&A.pop()}class kf{constructor(){this._buffer="",this._sentences=[],this._resolver=null,this._closed=!1}push(...e){for(const A of e)this._buffer+=A,this._process()}close(){if(this._closed)throw new Error("Stream is already closed.");this._closed=!0,this.flush()}flush(){const e=this._buffer.trim();e.length>0&&this._sentences.push(e),this._buffer="",this._resolve()}_resolve(){this._resolver&&(this._resolver(),this._resolver=null)}_process(){let e=0;const A=this._buffer,t=A.length;let r=0,n=[];const a=e=>{let r=e;for(;r+1<t&&ff(A[r+1],!1);)++r;for(;r+1<t&&pf(A[r+1]);)++r;let n=r+1;for(;n<t&&/\s/.test(A[n]);)++n;return{end:r,nextNonSpace:n}};for(;r<t;){const s=A[r];if(wf(s,n,r,A),0===n.length&&ff(s)){const n=A.slice(e,r);if(/(^|\n)\d+$/.test(n)){++r;continue}const{end:i,nextNonSpace:o}=a(r);if(r===o-1&&"\n"!==s){++r;continue}if(o===t)break;let l=r-1;for(;l>=0&&/\S/.test(A[l]);)l--;l=Math.max(e,l+1);const c=hf(A,l);if(!c){++r;continue}if((/https?[,:]\/\//.test(c)||c.includes("@"))&&!ff(c.at(-1))){r=l+c.length;continue}if(Cf(c)){++r;continue}if(/^([A-Za-z]\.)+$/.test(c)&&o<t&&/[A-Z]/.test(A[o])){++r;continue}if("."===s&&o<t&&/[a-z]/.test(A[o])){++r;continue}const g=A.substring(e,i+1).trim();if("..."===g||"…"===g){++r;continue}g&&this._sentences.push(g),r=e=i+1}else++r}this._buffer=A.substring(e),this._sentences.length>0&&this._resolve()}async*[Symbol.asyncIterator](){if(this._resolver)throw new Error("Another iterator is already active.");for(;;)if(this._sentences.length>0)yield this._sentences.shift();else{if(this._closed)break;await new Promise((e=>{this._resolver=e}))}}[Symbol.iterator](){this.flush();const e=this._sentences[Symbol.iterator]();return this._sentences=[],e}get sentences(){return this._sentences}}var xf={};const vf=Object.freeze({af_heart:{name:"Heart",language:"en-us",gender:"Female",traits:"❤️",targetQuality:"A",overallGrade:"A"},af_alloy:{name:"Alloy",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C"},af_aoede:{name:"Aoede",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C+"},af_bella:{name:"Bella",language:"en-us",gender:"Female",traits:"🔥",targetQuality:"A",overallGrade:"A-"},af_jessica:{name:"Jessica",language:"en-us",gender:"Female",targetQuality:"C",overallGrade:"D"},af_kore:{name:"Kore",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C+"},af_nicole:{name:"Nicole",language:"en-us",gender:"Female",traits:"🎧",targetQuality:"B",overallGrade:"B-"},af_nova:{name:"Nova",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C"},af_river:{name:"River",language:"en-us",gender:"Female",targetQuality:"C",overallGrade:"D"},af_sarah:{name:"Sarah",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C+"},af_sky:{name:"Sky",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C-"},am_adam:{name:"Adam",language:"en-us",gender:"Male",targetQuality:"D",overallGrade:"F+"},am_echo:{name:"Echo",language:"en-us",gender:"Male",targetQuality:"C",overallGrade:"D"},am_eric:{name:"Eric",language:"en-us",gender:"Male",targetQuality:"C",overallGrade:"D"},am_fenrir:{name:"Fenrir",language:"en-us",gender:"Male",targetQuality:"B",overallGrade:"C+"},am_liam:{name:"Liam",language:"en-us",gender:"Male",targetQuality:"C",overallGrade:"D"},am_michael:{name:"Michael",language:"en-us",gender:"Male",targetQuality:"B",overallGrade:"C+"},am_onyx:{name:"Onyx",language:"en-us",gender:"Male",targetQuality:"C",overallGrade:"D"},am_puck:{name:"Puck",language:"en-us",gender:"Male",targetQuality:"B",overallGrade:"C+"},am_santa:{name:"Santa",language:"en-us",gender:"Male",targetQuality:"C",overallGrade:"D-"},bf_emma:{name:"Emma",language:"en-gb",gender:"Female",traits:"🚺",targetQuality:"B",overallGrade:"B-"},bf_isabella:{name:"Isabella",language:"en-gb",gender:"Female",targetQuality:"B",overallGrade:"C"},bm_george:{name:"George",language:"en-gb",gender:"Male",targetQuality:"B",overallGrade:"C"},bm_lewis:{name:"Lewis",language:"en-gb",gender:"Male",targetQuality:"C",overallGrade:"D+"},bf_alice:{name:"Alice",language:"en-gb",gender:"Female",traits:"🚺",targetQuality:"C",overallGrade:"D"},bf_lily:{name:"Lily",language:"en-gb",gender:"Female",traits:"🚺",targetQuality:"C",overallGrade:"D"},bm_daniel:{name:"Daniel",language:"en-gb",gender:"Male",traits:"🚹",targetQuality:"C",overallGrade:"D"},bm_fable:{name:"Fable",language:"en-gb",gender:"Male",traits:"🚹",targetQuality:"B",overallGrade:"C"}});const Bf=new Map;async function yf(e){if(Bf.has(e))return Bf.get(e);const A=new Float32Array(await async function(e){if(xf&&Object.hasOwn(xf,"readFile")){const A="undefined"!=typeof __dirname?__dirname:import.meta.dirname,t=xf.resolve(A,`../voices/${e}.bin`),{buffer:r}=await xf.readFile(t);return r}const A=`https://huggingface.co/onnx-community/Kokoro-82M-v1.0-ONNX/resolve/main/voices/${e}.bin`;let t;try{t=await caches.open("kokoro-voices");const e=await t.match(A);if(e)return await e.arrayBuffer()}catch(e){console.warn("Unable to open cache",e)}const r=await fetch(A),n=await r.arrayBuffer();if(t)try{await t.put(A,new Response(n,{headers:r.headers}))}catch(e){console.warn("Unable to cache file",e)}return n}(e));return Bf.set(e,A),A}class Ef{constructor(e,A){this.model=e,this.tokenizer=A}static async from_pretrained(e,{dtype:A="fp32",device:t=null,progress_callback:r=null}={}){const n=jg.from_pretrained(e,{progress_callback:r,dtype:A,device:t}),a=Hg.from_pretrained(e,{progress_callback:r}),s=await Promise.all([n,a]);return new Ef(...s)}get voices(){return vf}list_voices(){console.table(vf)}_validate_voice(e){if(!vf.hasOwnProperty(e))throw console.error(`Voice "${e}" not found. Available voices:`),console.table(vf),new Error(`Voice "${e}" not found. Should be one of: ${Object.keys(vf).join(", ")}.`);return e.at(0)}async generate(e,{voice:A="af_heart",speed:t=1}={}){const r=this._validate_voice(A),n=await df(e,r),{input_ids:a}=this.tokenizer(n,{truncation:!0});return this.generate_from_ids(a,{voice:A,speed:t})}async generate_from_ids(e,{voice:A="af_heart",speed:t=1}={}){const r=256*Math.min(Math.max(e.dims.at(-1)-2,0),509),n=(await yf(A)).slice(r,r+256),a={input_ids:e,style:new Vg("float32",n,[1,256]),speed:new Vg("float32",[t],[1])},{waveform:s}=await this.model(a);return new Rg(s.data,24e3)}async*stream(e,{voice:A="af_heart",speed:t=1,split_pattern:r=null}={}){const n=this._validate_voice(A);let a;if(e instanceof kf)a=e;else{if("string"!=typeof e)throw new Error("Invalid input type. Expected string or TextSplitterStream.");{a=new kf;const A=r?e.split(r).map((e=>e.trim())).filter((e=>e.length>0)):[e];a.push(...A)}}for await(const e of a){const r=await df(e,n),{input_ids:a}=this.tokenizer(r,{truncation:!0}),s=await this.generate_from_ids(a,{voice:A,speed:t});yield{text:e,phonemes:r,audio:s}}}}const Mf={set wasmPaths(e){Wg.backends.onnx.wasm.wasmPaths=e},get wasmPaths(){return Wg.backends.onnx.wasm.wasmPaths}};export{Ef as KokoroTTS,kf as TextSplitterStream,Mf as env};
